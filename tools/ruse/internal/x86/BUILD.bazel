# Copyright 2023 The Firefly Authors.
#
# Use of this source code is governed by a BSD 3-clause
# license that can be found in the LICENSE file.

load("@rules_go//go:def.bzl", "go_library", "go_test")

# This is either a dirty hack or very elegant, depending on your
# perspective. Things are much easier if we can embed the `x86`
# instruction data directly into the `x86` package as a set of
# package-level `*Instruction` variables. These are generated by
# `gen-x86`.
#
# However, to do so, `gen-x86` needs the other types and data in
# `x86`, such as the `*Register` values. Duplicating them into
# `gen-x86` would be tedious and error-prone to maintain. But we
# cannot use them directly from `x86` without creating a dependency
# loop; `x86` is used by `gen-x86` to generate code in `x86`.
#
# We solve this by having two versions of `x86`. First, we have
# `x86-no-data`, which is only used by `gen-x86` and contains the
# rest of the package. That is enough for us to generate `data.go`
# containing the `*Instruction` variables using `gen-x86`. We
# then embed that into a new package with the same name (`x86`),
# including `data.go`. That is then used by everyone else!

go_library(
    name = "x86-no-data",
    srcs = [
        "encoding.go",
        "json.go",
        "memory.go",
        "operands.go",
        "registers.go",
        "x86.go",
    ],
    importpath = "firefly-os.dev/tools/ruse/internal/x86",
    visibility = ["//tools/ruse/internal/x86:__subpackages__"],
)

go_test(
    name = "x86_test",
    size = "small",
    srcs = [
        "encoding_test.go",
        "json_test.go",
    ],
    embed = [":x86-no-data"],
    deps = [
        "//vendor/github.com/google/go-cmp/cmp",
    ],
)

go_library(
    name = "x86",
    srcs = [
        "data.go",
    ],
    embed = [":x86-no-data"],
    importpath = "firefly-os.dev/tools/ruse/internal/x86",
    visibility = ["//tools/ruse:__subpackages__"],
)
