// Code generated by //tools/ruse/internal/x86/gen-x86; DO NOT EDIT.

// Copyright 2023 The Firefly Authors.
//
// Use of this source code is governed by a BSD 3-clause
// license that can be found in the LICENSE file.

package x86

var (
	AAA = &Instruction{
		Mnemonic: "aaa",
		UID:      "AAA",
		Syntax:   "AAA",
		Encoding: &Encoding{
			Syntax: "37",
			Opcode: []byte{0x37},
		},
		Mode16: true,
		Mode32: true,
		Mode64: false,
	}
	AAD = &Instruction{
		Mnemonic: "aad",
		UID:      "AAD",
		Syntax:   "AAD",
		Encoding: &Encoding{
			Syntax: "D5 0A",
			Opcode: []byte{0xd5, 0x0a},
		},
		Mode16: true,
		Mode32: true,
		Mode64: false,
	}
	AAD_Imm8u = &Instruction{
		Mnemonic: "aad",
		UID:      "AAD_Imm8u",
		Syntax:   "AAD imm8u",
		Encoding: &Encoding{
			Syntax: "D5 ib",
			Opcode: []byte{0xd5},
		},
		Parameters: []*Parameter{ParamImm8u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	AAM = &Instruction{
		Mnemonic: "aam",
		UID:      "AAM",
		Syntax:   "AAM",
		Encoding: &Encoding{
			Syntax: "D4 0A",
			Opcode: []byte{0xd4, 0x0a},
		},
		Mode16: true,
		Mode32: true,
		Mode64: false,
	}
	AAM_Imm8u = &Instruction{
		Mnemonic: "aam",
		UID:      "AAM_Imm8u",
		Syntax:   "AAM imm8u",
		Encoding: &Encoding{
			Syntax: "D4 ib",
			Opcode: []byte{0xd4},
		},
		Parameters: []*Parameter{ParamImm8u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	AAS = &Instruction{
		Mnemonic: "aas",
		UID:      "AAS",
		Syntax:   "AAS",
		Encoding: &Encoding{
			Syntax: "3F",
			Opcode: []byte{0x3f},
		},
		Mode16: true,
		Mode32: true,
		Mode64: false,
	}
	ADC_AL_Imm8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_AL_Imm8",
		Syntax:   "ADC AL, imm8",
		Encoding: &Encoding{
			Syntax: "14 ib",
			Opcode: []byte{0x14},
		},
		Parameters: []*Parameter{ParamAL, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADC_AX_Imm16 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_AX_Imm16",
		Syntax:   "ADC AX, imm16",
		Encoding: &Encoding{
			Syntax: "15 iw",
			Opcode: []byte{0x15},
		},
		Parameters:  []*Parameter{ParamAX, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADC_EAX_Imm32 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_EAX_Imm32",
		Syntax:   "ADC EAX, imm32",
		Encoding: &Encoding{
			Syntax: "15 id",
			Opcode: []byte{0x15},
		},
		Parameters:  []*Parameter{ParamEAX, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADC_RAX_Imm32_REX = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_RAX_Imm32_REX",
		Syntax:   "ADC RAX, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W 15 id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x15},
		},
		Parameters: []*Parameter{ParamRAX, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADC_R8_Rmr8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_R8_Rmr8",
		Syntax:   "ADC r8, r/m8",
		Encoding: &Encoding{
			Syntax: "12 /r",
			Opcode: []byte{0x12},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADC_R8_M8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_R8_M8",
		Syntax:   "ADC r8, r/m8",
		Encoding: &Encoding{
			Syntax: "12 /r",
			Opcode: []byte{0x12},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADC_R16_Rmr16 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_R16_Rmr16",
		Syntax:   "ADC r16, r/m16",
		Encoding: &Encoding{
			Syntax: "13 /r",
			Opcode: []byte{0x13},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADC_R16_M16 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_R16_M16",
		Syntax:   "ADC r16, r/m16",
		Encoding: &Encoding{
			Syntax: "13 /r",
			Opcode: []byte{0x13},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADC_R32_Rmr32 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_R32_Rmr32",
		Syntax:   "ADC r32, r/m32",
		Encoding: &Encoding{
			Syntax: "13 /r",
			Opcode: []byte{0x13},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADC_R32_M32 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_R32_M32",
		Syntax:   "ADC r32, r/m32",
		Encoding: &Encoding{
			Syntax: "13 /r",
			Opcode: []byte{0x13},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADC_R64_Rmr64_REX = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_R64_Rmr64_REX",
		Syntax:   "ADC r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 13 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x13},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADC_R64_M64_REX = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_R64_M64_REX",
		Syntax:   "ADC r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 13 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x13},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADC_Rmr8_Imm8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr8_Imm8",
		Syntax:   "ADC r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /2 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADC_Rmr8_R8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr8_R8",
		Syntax:   "ADC r/m8, r8",
		Encoding: &Encoding{
			Syntax: "10 /r",
			Opcode: []byte{0x10},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADC_Rmr16_Imm8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr16_Imm8",
		Syntax:   "ADC r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /2 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADC_Rmr16_Imm16 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr16_Imm16",
		Syntax:   "ADC r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /2 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADC_Rmr16_R16 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr16_R16",
		Syntax:   "ADC r/m16, r16",
		Encoding: &Encoding{
			Syntax: "11 /r",
			Opcode: []byte{0x11},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADC_Rmr32_Imm8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr32_Imm8",
		Syntax:   "ADC r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /2 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADC_Rmr32_Imm32 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr32_Imm32",
		Syntax:   "ADC r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /2 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADC_Rmr32_R32 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr32_R32",
		Syntax:   "ADC r/m32, r32",
		Encoding: &Encoding{
			Syntax: "11 /r",
			Opcode: []byte{0x11},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADC_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr64_Imm8_REX",
		Syntax:   "ADC r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /2 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADC_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr64_Imm32_REX",
		Syntax:   "ADC r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /2 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADC_Rmr64_R64_REX = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_Rmr64_R64_REX",
		Syntax:   "ADC r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 11 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x11},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADC_M8_Imm8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M8_Imm8",
		Syntax:   "ADC r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /2 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADC_M8_R8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M8_R8",
		Syntax:   "ADC r/m8, r8",
		Encoding: &Encoding{
			Syntax: "10 /r",
			Opcode: []byte{0x10},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADC_M16_Imm8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M16_Imm8",
		Syntax:   "ADC r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /2 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADC_M16_Imm16 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M16_Imm16",
		Syntax:   "ADC r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /2 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADC_M16_R16 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M16_R16",
		Syntax:   "ADC r/m16, r16",
		Encoding: &Encoding{
			Syntax: "11 /r",
			Opcode: []byte{0x11},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADC_M32_Imm8 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M32_Imm8",
		Syntax:   "ADC r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /2 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADC_M32_Imm32 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M32_Imm32",
		Syntax:   "ADC r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /2 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADC_M32_R32 = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M32_R32",
		Syntax:   "ADC r/m32, r32",
		Encoding: &Encoding{
			Syntax: "11 /r",
			Opcode: []byte{0x11},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADC_M64_Imm8_REX = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M64_Imm8_REX",
		Syntax:   "ADC r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /2 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADC_M64_Imm32_REX = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M64_Imm32_REX",
		Syntax:   "ADC r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /2 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADC_M64_R64_REX = &Instruction{
		Mnemonic: "adc",
		UID:      "ADC_M64_R64_REX",
		Syntax:   "ADC r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 11 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x11},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADCX_R32_Rmr32 = &Instruction{
		Mnemonic: "adcx",
		UID:      "ADCX_R32_Rmr32",
		Syntax:   "ADCX r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 F6 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xf6},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"ADX"},
		OperandSize: true,
		DataSize:    32,
	}
	ADCX_R32_M32 = &Instruction{
		Mnemonic: "adcx",
		UID:      "ADCX_R32_M32",
		Syntax:   "ADCX r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 F6 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xf6},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"ADX"},
		OperandSize: true,
		DataSize:    32,
	}
	ADCX_R64_Rmr64_REX = &Instruction{
		Mnemonic: "adcx",
		UID:      "ADCX_R64_Rmr64_REX",
		Syntax:   "ADCX r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "66 REX.W 0F 38 F6 /r",
			MandatoryPrefixes: []Prefix{0x66},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x38, 0xf6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"ADX"},
		DataSize:   64,
	}
	ADCX_R64_M64_REX = &Instruction{
		Mnemonic: "adcx",
		UID:      "ADCX_R64_M64_REX",
		Syntax:   "ADCX r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "66 REX.W 0F 38 F6 /r",
			MandatoryPrefixes: []Prefix{0x66},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x38, 0xf6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"ADX"},
		DataSize:   64,
	}
	ADD_AL_Imm8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_AL_Imm8",
		Syntax:   "ADD AL, imm8",
		Encoding: &Encoding{
			Syntax: "04 ib",
			Opcode: []byte{0x04},
		},
		Parameters: []*Parameter{ParamAL, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADD_AX_Imm16 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_AX_Imm16",
		Syntax:   "ADD AX, imm16",
		Encoding: &Encoding{
			Syntax: "05 iw",
			Opcode: []byte{0x05},
		},
		Parameters:  []*Parameter{ParamAX, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADD_EAX_Imm32 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_EAX_Imm32",
		Syntax:   "ADD EAX, imm32",
		Encoding: &Encoding{
			Syntax: "05 id",
			Opcode: []byte{0x05},
		},
		Parameters:  []*Parameter{ParamEAX, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADD_RAX_Imm32_REX = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_RAX_Imm32_REX",
		Syntax:   "ADD RAX, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W 05 id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x05},
		},
		Parameters: []*Parameter{ParamRAX, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADD_R8_Rmr8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_R8_Rmr8",
		Syntax:   "ADD r8, r/m8",
		Encoding: &Encoding{
			Syntax: "02 /r",
			Opcode: []byte{0x02},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADD_R8_M8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_R8_M8",
		Syntax:   "ADD r8, r/m8",
		Encoding: &Encoding{
			Syntax: "02 /r",
			Opcode: []byte{0x02},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADD_R16_Rmr16 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_R16_Rmr16",
		Syntax:   "ADD r16, r/m16",
		Encoding: &Encoding{
			Syntax: "03 /r",
			Opcode: []byte{0x03},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADD_R16_M16 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_R16_M16",
		Syntax:   "ADD r16, r/m16",
		Encoding: &Encoding{
			Syntax: "03 /r",
			Opcode: []byte{0x03},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADD_R32_Rmr32 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_R32_Rmr32",
		Syntax:   "ADD r32, r/m32",
		Encoding: &Encoding{
			Syntax: "03 /r",
			Opcode: []byte{0x03},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADD_R32_M32 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_R32_M32",
		Syntax:   "ADD r32, r/m32",
		Encoding: &Encoding{
			Syntax: "03 /r",
			Opcode: []byte{0x03},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADD_R64_Rmr64_REX = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_R64_Rmr64_REX",
		Syntax:   "ADD r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 03 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x03},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADD_R64_M64_REX = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_R64_M64_REX",
		Syntax:   "ADD r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 03 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x03},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADD_Rmr8_Imm8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr8_Imm8",
		Syntax:   "ADD r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /0 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADD_Rmr8_R8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr8_R8",
		Syntax:   "ADD r/m8, r8",
		Encoding: &Encoding{
			Syntax: "00 /r",
			Opcode: []byte{0x00},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADD_Rmr16_Imm8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr16_Imm8",
		Syntax:   "ADD r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /0 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADD_Rmr16_Imm16 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr16_Imm16",
		Syntax:   "ADD r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /0 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADD_Rmr16_R16 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr16_R16",
		Syntax:   "ADD r/m16, r16",
		Encoding: &Encoding{
			Syntax: "01 /r",
			Opcode: []byte{0x01},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADD_Rmr32_Imm8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr32_Imm8",
		Syntax:   "ADD r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /0 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADD_Rmr32_Imm32 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr32_Imm32",
		Syntax:   "ADD r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /0 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADD_Rmr32_R32 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr32_R32",
		Syntax:   "ADD r/m32, r32",
		Encoding: &Encoding{
			Syntax: "01 /r",
			Opcode: []byte{0x01},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADD_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr64_Imm8_REX",
		Syntax:   "ADD r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /0 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADD_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr64_Imm32_REX",
		Syntax:   "ADD r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /0 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADD_Rmr64_R64_REX = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_Rmr64_R64_REX",
		Syntax:   "ADD r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 01 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x01},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADD_M8_Imm8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M8_Imm8",
		Syntax:   "ADD r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /0 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADD_M8_R8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M8_R8",
		Syntax:   "ADD r/m8, r8",
		Encoding: &Encoding{
			Syntax: "00 /r",
			Opcode: []byte{0x00},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ADD_M16_Imm8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M16_Imm8",
		Syntax:   "ADD r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /0 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADD_M16_Imm16 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M16_Imm16",
		Syntax:   "ADD r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /0 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADD_M16_R16 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M16_R16",
		Syntax:   "ADD r/m16, r16",
		Encoding: &Encoding{
			Syntax: "01 /r",
			Opcode: []byte{0x01},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ADD_M32_Imm8 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M32_Imm8",
		Syntax:   "ADD r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /0 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADD_M32_Imm32 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M32_Imm32",
		Syntax:   "ADD r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /0 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADD_M32_R32 = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M32_R32",
		Syntax:   "ADD r/m32, r32",
		Encoding: &Encoding{
			Syntax: "01 /r",
			Opcode: []byte{0x01},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ADD_M64_Imm8_REX = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M64_Imm8_REX",
		Syntax:   "ADD r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /0 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADD_M64_Imm32_REX = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M64_Imm32_REX",
		Syntax:   "ADD r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /0 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADD_M64_R64_REX = &Instruction{
		Mnemonic: "add",
		UID:      "ADD_M64_R64_REX",
		Syntax:   "ADD r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 01 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x01},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ADDPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "addpd",
		UID:      "ADDPD_XMM1_XMM2",
		Syntax:   "ADDPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 58 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x58},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	ADDPD_XMM1_M128 = &Instruction{
		Mnemonic: "addpd",
		UID:      "ADDPD_XMM1_M128",
		Syntax:   "ADDPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 58 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x58},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	ADDPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "addps",
		UID:      "ADDPS_XMM1_XMM2",
		Syntax:   "ADDPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 58 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x58},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	ADDPS_XMM1_M128 = &Instruction{
		Mnemonic: "addps",
		UID:      "ADDPS_XMM1_M128",
		Syntax:   "ADDPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 58 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x58},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	ADDSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "addsd",
		UID:      "ADDSD_XMM1_XMM2",
		Syntax:   "ADDSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 58 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x58},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	ADDSD_XMM1_M64 = &Instruction{
		Mnemonic: "addsd",
		UID:      "ADDSD_XMM1_M64",
		Syntax:   "ADDSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 58 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x58},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	ADDSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "addss",
		UID:      "ADDSS_XMM1_XMM2",
		Syntax:   "ADDSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 58 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x58},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	ADDSS_XMM1_M32 = &Instruction{
		Mnemonic: "addss",
		UID:      "ADDSS_XMM1_M32",
		Syntax:   "ADDSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 58 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x58},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	ADDSUBPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "addsubpd",
		UID:      "ADDSUBPD_XMM1_XMM2",
		Syntax:   "ADDSUBPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D0 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	ADDSUBPD_XMM1_M128 = &Instruction{
		Mnemonic: "addsubpd",
		UID:      "ADDSUBPD_XMM1_M128",
		Syntax:   "ADDSUBPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D0 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	ADDSUBPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "addsubps",
		UID:      "ADDSUBPS_XMM1_XMM2",
		Syntax:   "ADDSUBPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F2 0F D0 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xd0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	ADDSUBPS_XMM1_M128 = &Instruction{
		Mnemonic: "addsubps",
		UID:      "ADDSUBPS_XMM1_M128",
		Syntax:   "ADDSUBPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F2 0F D0 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xd0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	ADOX_R32_Rmr32 = &Instruction{
		Mnemonic: "adox",
		UID:      "ADOX_R32_Rmr32",
		Syntax:   "ADOX r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 F6 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xf6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"ADX"},
		DataSize:   32,
	}
	ADOX_R32_M32 = &Instruction{
		Mnemonic: "adox",
		UID:      "ADOX_R32_M32",
		Syntax:   "ADOX r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 F6 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xf6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"ADX"},
		DataSize:   32,
	}
	ADOX_R64_Rmr64_REX = &Instruction{
		Mnemonic: "adox",
		UID:      "ADOX_R64_Rmr64_REX",
		Syntax:   "ADOX r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F 38 F6 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x38, 0xf6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"ADX"},
		DataSize:   64,
	}
	ADOX_R64_M64_REX = &Instruction{
		Mnemonic: "adox",
		UID:      "ADOX_R64_M64_REX",
		Syntax:   "ADOX r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F 38 F6 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x38, 0xf6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"ADX"},
		DataSize:   64,
	}
	AESDEC_XMM1_XMM2 = &Instruction{
		Mnemonic: "aesdec",
		UID:      "AESDEC_XMM1_XMM2",
		Syntax:   "AESDEC xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 DE /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xde},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESDEC_XMM1_M128 = &Instruction{
		Mnemonic: "aesdec",
		UID:      "AESDEC_XMM1_M128",
		Syntax:   "AESDEC xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 DE /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xde},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESDEC128KL_XMM1_M384 = &Instruction{
		Mnemonic: "aesdec128kl",
		UID:      "AESDEC128KL_XMM1_M384",
		Syntax:   "AESDEC128KL xmm1, m384",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 DD !(11):rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xdd},
			ModRM:             true,
			ModRMmod:          5,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM384},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AESKLE"},
	}
	AESDEC256KL_XMM1_M512 = &Instruction{
		Mnemonic: "aesdec256kl",
		UID:      "AESDEC256KL_XMM1_M512",
		Syntax:   "AESDEC256KL xmm1, m512",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 DF !(11):rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xdf},
			ModRM:             true,
			ModRMmod:          5,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM512},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AESKLE"},
	}
	AESDECLAST_XMM1_XMM2 = &Instruction{
		Mnemonic: "aesdeclast",
		UID:      "AESDECLAST_XMM1_XMM2",
		Syntax:   "AESDECLAST xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 DF /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xdf},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESDECLAST_XMM1_M128 = &Instruction{
		Mnemonic: "aesdeclast",
		UID:      "AESDECLAST_XMM1_M128",
		Syntax:   "AESDECLAST xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 DF /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xdf},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESDECWIDE128KL_M384 = &Instruction{
		Mnemonic: "aesdecwide128kl",
		UID:      "AESDECWIDE128KL_M384",
		Syntax:   "AESDECWIDE128KL m384",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 D8 !(11):001:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xd8},
			ModRM:             true,
			ModRMmod:          5,
			ModRMreg:          2,
		},
		Parameters: []*Parameter{ParamM384},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AESKLEWIDE_KL"},
	}
	AESDECWIDE256KL_M512 = &Instruction{
		Mnemonic: "aesdecwide256kl",
		UID:      "AESDECWIDE256KL_M512",
		Syntax:   "AESDECWIDE256KL m512",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 D8 !(11):011:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xd8},
			ModRM:             true,
			ModRMmod:          5,
			ModRMreg:          4,
		},
		Parameters: []*Parameter{ParamM512},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AESKLEWIDE_KL"},
	}
	AESENC_XMM1_XMM2 = &Instruction{
		Mnemonic: "aesenc",
		UID:      "AESENC_XMM1_XMM2",
		Syntax:   "AESENC xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 DC /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xdc},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESENC_XMM1_M128 = &Instruction{
		Mnemonic: "aesenc",
		UID:      "AESENC_XMM1_M128",
		Syntax:   "AESENC xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 DC /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xdc},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESENC128KL_XMM1_M384 = &Instruction{
		Mnemonic: "aesenc128kl",
		UID:      "AESENC128KL_XMM1_M384",
		Syntax:   "AESENC128KL xmm1, m384",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 DC !(11):rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xdc},
			ModRM:             true,
			ModRMmod:          5,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM384},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AESKLE"},
	}
	AESENC256KL_XMM1_M512 = &Instruction{
		Mnemonic: "aesenc256kl",
		UID:      "AESENC256KL_XMM1_M512",
		Syntax:   "AESENC256KL xmm1, m512",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 DE !(11):rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xde},
			ModRM:             true,
			ModRMmod:          5,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM512},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AESKLE"},
	}
	AESENCLAST_XMM1_XMM2 = &Instruction{
		Mnemonic: "aesenclast",
		UID:      "AESENCLAST_XMM1_XMM2",
		Syntax:   "AESENCLAST xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 DD /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xdd},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESENCLAST_XMM1_M128 = &Instruction{
		Mnemonic: "aesenclast",
		UID:      "AESENCLAST_XMM1_M128",
		Syntax:   "AESENCLAST xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 DD /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xdd},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESENCWIDE128KL_M384 = &Instruction{
		Mnemonic: "aesencwide128kl",
		UID:      "AESENCWIDE128KL_M384",
		Syntax:   "AESENCWIDE128KL m384",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 D8 !(11):000:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xd8},
			ModRM:             true,
			ModRMmod:          5,
			ModRMreg:          1,
		},
		Parameters: []*Parameter{ParamM384},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AESKLE WIDE_KL"},
	}
	AESENCWIDE256KL_M512 = &Instruction{
		Mnemonic: "aesencwide256kl",
		UID:      "AESENCWIDE256KL_M512",
		Syntax:   "AESENCWIDE256KL m512",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 D8 !(11):010:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xd8},
			ModRM:             true,
			ModRMmod:          5,
			ModRMreg:          3,
		},
		Parameters: []*Parameter{ParamM512},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AESKLE WIDE_KL"},
	}
	AESIMC_XMM1_XMM2 = &Instruction{
		Mnemonic: "aesimc",
		UID:      "AESIMC_XMM1_XMM2",
		Syntax:   "AESIMC xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 DB /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xdb},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESIMC_XMM1_M128 = &Instruction{
		Mnemonic: "aesimc",
		UID:      "AESIMC_XMM1_M128",
		Syntax:   "AESIMC xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 DB /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xdb},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESKEYGENASSIST_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "aeskeygenassist",
		UID:      "AESKEYGENASSIST_XMM1_XMM2_Imm8",
		Syntax:   "AESKEYGENASSIST xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A DF /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0xdf},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AESKEYGENASSIST_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "aeskeygenassist",
		UID:      "AESKEYGENASSIST_XMM1_M128_Imm8",
		Syntax:   "AESKEYGENASSIST xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A DF /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0xdf},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES"},
	}
	AND_AL_Imm8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_AL_Imm8",
		Syntax:   "AND AL, imm8",
		Encoding: &Encoding{
			Syntax: "24 ib",
			Opcode: []byte{0x24},
		},
		Parameters: []*Parameter{ParamAL, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	AND_AX_Imm16 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_AX_Imm16",
		Syntax:   "AND AX, imm16",
		Encoding: &Encoding{
			Syntax: "25 iw",
			Opcode: []byte{0x25},
		},
		Parameters:  []*Parameter{ParamAX, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	AND_EAX_Imm32 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_EAX_Imm32",
		Syntax:   "AND EAX, imm32",
		Encoding: &Encoding{
			Syntax: "25 id",
			Opcode: []byte{0x25},
		},
		Parameters:  []*Parameter{ParamEAX, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	AND_RAX_Imm32_REX = &Instruction{
		Mnemonic: "and",
		UID:      "AND_RAX_Imm32_REX",
		Syntax:   "AND RAX, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W 25 id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x25},
		},
		Parameters: []*Parameter{ParamRAX, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	AND_R8_Rmr8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_R8_Rmr8",
		Syntax:   "AND r8, r/m8",
		Encoding: &Encoding{
			Syntax: "22 /r",
			Opcode: []byte{0x22},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	AND_R8_M8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_R8_M8",
		Syntax:   "AND r8, r/m8",
		Encoding: &Encoding{
			Syntax: "22 /r",
			Opcode: []byte{0x22},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	AND_R16_Rmr16 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_R16_Rmr16",
		Syntax:   "AND r16, r/m16",
		Encoding: &Encoding{
			Syntax: "23 /r",
			Opcode: []byte{0x23},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	AND_R16_M16 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_R16_M16",
		Syntax:   "AND r16, r/m16",
		Encoding: &Encoding{
			Syntax: "23 /r",
			Opcode: []byte{0x23},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	AND_R32_Rmr32 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_R32_Rmr32",
		Syntax:   "AND r32, r/m32",
		Encoding: &Encoding{
			Syntax: "23 /r",
			Opcode: []byte{0x23},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	AND_R32_M32 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_R32_M32",
		Syntax:   "AND r32, r/m32",
		Encoding: &Encoding{
			Syntax: "23 /r",
			Opcode: []byte{0x23},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	AND_R64_Rmr64_REX = &Instruction{
		Mnemonic: "and",
		UID:      "AND_R64_Rmr64_REX",
		Syntax:   "AND r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 23 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x23},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	AND_R64_M64_REX = &Instruction{
		Mnemonic: "and",
		UID:      "AND_R64_M64_REX",
		Syntax:   "AND r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 23 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x23},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	AND_Rmr8_Imm8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr8_Imm8",
		Syntax:   "AND r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /4 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	AND_Rmr8_R8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr8_R8",
		Syntax:   "AND r/m8, r8",
		Encoding: &Encoding{
			Syntax: "20 /r",
			Opcode: []byte{0x20},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	AND_Rmr16_Imm8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr16_Imm8",
		Syntax:   "AND r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /4 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	AND_Rmr16_Imm16 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr16_Imm16",
		Syntax:   "AND r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /4 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	AND_Rmr16_R16 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr16_R16",
		Syntax:   "AND r/m16, r16",
		Encoding: &Encoding{
			Syntax: "21 /r",
			Opcode: []byte{0x21},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	AND_Rmr32_Imm8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr32_Imm8",
		Syntax:   "AND r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /4 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	AND_Rmr32_Imm32 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr32_Imm32",
		Syntax:   "AND r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /4 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	AND_Rmr32_R32 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr32_R32",
		Syntax:   "AND r/m32, r32",
		Encoding: &Encoding{
			Syntax: "21 /r",
			Opcode: []byte{0x21},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	AND_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr64_Imm8_REX",
		Syntax:   "AND r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /4 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	AND_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr64_Imm32_REX",
		Syntax:   "AND r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /4 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	AND_Rmr64_R64_REX = &Instruction{
		Mnemonic: "and",
		UID:      "AND_Rmr64_R64_REX",
		Syntax:   "AND r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 21 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x21},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	AND_M8_Imm8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M8_Imm8",
		Syntax:   "AND r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /4 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	AND_M8_R8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M8_R8",
		Syntax:   "AND r/m8, r8",
		Encoding: &Encoding{
			Syntax: "20 /r",
			Opcode: []byte{0x20},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	AND_M16_Imm8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M16_Imm8",
		Syntax:   "AND r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /4 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	AND_M16_Imm16 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M16_Imm16",
		Syntax:   "AND r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /4 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	AND_M16_R16 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M16_R16",
		Syntax:   "AND r/m16, r16",
		Encoding: &Encoding{
			Syntax: "21 /r",
			Opcode: []byte{0x21},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	AND_M32_Imm8 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M32_Imm8",
		Syntax:   "AND r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /4 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	AND_M32_Imm32 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M32_Imm32",
		Syntax:   "AND r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /4 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	AND_M32_R32 = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M32_R32",
		Syntax:   "AND r/m32, r32",
		Encoding: &Encoding{
			Syntax: "21 /r",
			Opcode: []byte{0x21},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	AND_M64_Imm8_REX = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M64_Imm8_REX",
		Syntax:   "AND r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /4 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	AND_M64_Imm32_REX = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M64_Imm32_REX",
		Syntax:   "AND r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /4 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	AND_M64_R64_REX = &Instruction{
		Mnemonic: "and",
		UID:      "AND_M64_R64_REX",
		Syntax:   "AND r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 21 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x21},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ANDN_R32_R32V_Rmr32_VEX = &Instruction{
		Mnemonic: "andn",
		UID:      "ANDN_R32_R32V_Rmr32_VEX",
		Syntax:   "ANDN r32, r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F2 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamR32V, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   32,
	}
	ANDN_R32_R32V_M32_VEX = &Instruction{
		Mnemonic: "andn",
		UID:      "ANDN_R32_R32V_M32_VEX",
		Syntax:   "ANDN r32, r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F2 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamR32V, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   32,
	}
	ANDN_R64_R64V_Rmr64_VEX = &Instruction{
		Mnemonic: "andn",
		UID:      "ANDN_R64_R64V_Rmr64_VEX",
		Syntax:   "ANDN r64, r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F2 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamR64V, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	ANDN_R64_R64V_M64_VEX = &Instruction{
		Mnemonic: "andn",
		UID:      "ANDN_R64_R64V_M64_VEX",
		Syntax:   "ANDN r64, r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F2 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamR64V, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	ANDNPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "andnpd",
		UID:      "ANDNPD_XMM1_XMM2",
		Syntax:   "ANDNPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 55 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x55},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	ANDNPD_XMM1_M128 = &Instruction{
		Mnemonic: "andnpd",
		UID:      "ANDNPD_XMM1_M128",
		Syntax:   "ANDNPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 55 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x55},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	ANDNPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "andnps",
		UID:      "ANDNPS_XMM1_XMM2",
		Syntax:   "ANDNPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 55 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x55},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	ANDNPS_XMM1_M128 = &Instruction{
		Mnemonic: "andnps",
		UID:      "ANDNPS_XMM1_M128",
		Syntax:   "ANDNPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 55 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x55},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	ANDPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "andpd",
		UID:      "ANDPD_XMM1_XMM2",
		Syntax:   "ANDPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 54 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x54},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	ANDPD_XMM1_M128 = &Instruction{
		Mnemonic: "andpd",
		UID:      "ANDPD_XMM1_M128",
		Syntax:   "ANDPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 54 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x54},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	ANDPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "andps",
		UID:      "ANDPS_XMM1_XMM2",
		Syntax:   "ANDPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 54 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x54},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	ANDPS_XMM1_M128 = &Instruction{
		Mnemonic: "andps",
		UID:      "ANDPS_XMM1_M128",
		Syntax:   "ANDPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 54 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x54},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	ARPL_Rmr16_R16 = &Instruction{
		Mnemonic: "arpl",
		UID:      "ARPL_Rmr16_R16",
		Syntax:   "ARPL r/m16, r16",
		Encoding: &Encoding{
			Syntax: "63 /r",
			Opcode: []byte{0x63},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr16, ParamR16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	ARPL_M16_R16 = &Instruction{
		Mnemonic: "arpl",
		UID:      "ARPL_M16_R16",
		Syntax:   "ARPL r/m16, r16",
		Encoding: &Encoding{
			Syntax: "63 /r",
			Opcode: []byte{0x63},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM16, ParamR16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	BEXTR_R32_Rmr32_R32V_VEX = &Instruction{
		Mnemonic: "bextr",
		UID:      "BEXTR_R32_Rmr32_R32V_VEX",
		Syntax:   "BEXTR r32, r/m32, r32V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F7 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32, ParamR32V},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   32,
	}
	BEXTR_R32_M32_R32V_VEX = &Instruction{
		Mnemonic: "bextr",
		UID:      "BEXTR_R32_M32_R32V_VEX",
		Syntax:   "BEXTR r32, r/m32, r32V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F7 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32, ParamR32V},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   32,
	}
	BEXTR_R64_Rmr64_R64V_VEX = &Instruction{
		Mnemonic: "bextr",
		UID:      "BEXTR_R64_Rmr64_R64V_VEX",
		Syntax:   "BEXTR r64, r/m64, r64V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F7 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64, ParamR64V},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	BEXTR_R64_M64_R64V_VEX = &Instruction{
		Mnemonic: "bextr",
		UID:      "BEXTR_R64_M64_R64V_VEX",
		Syntax:   "BEXTR r64, r/m64, r64V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F7 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64, ParamR64V},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	BLENDPD_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "blendpd",
		UID:      "BLENDPD_XMM1_XMM2_Imm8",
		Syntax:   "BLENDPD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0D /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	BLENDPD_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "blendpd",
		UID:      "BLENDPD_XMM1_M128_Imm8",
		Syntax:   "BLENDPD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0D /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	BLENDPS_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "blendps",
		UID:      "BLENDPS_XMM1_XMM2_Imm8",
		Syntax:   "BLENDPS xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0C /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	BLENDPS_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "blendps",
		UID:      "BLENDPS_XMM1_M128_Imm8",
		Syntax:   "BLENDPS xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0C /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	BLENDVPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "blendvpd",
		UID:      "BLENDVPD_XMM1_XMM2",
		Syntax:   "BLENDVPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 15 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x15},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	BLENDVPD_XMM1_M128 = &Instruction{
		Mnemonic: "blendvpd",
		UID:      "BLENDVPD_XMM1_M128",
		Syntax:   "BLENDVPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 15 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x15},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	BLENDVPD_XMM1_XMM2_XMM0 = &Instruction{
		Mnemonic: "blendvpd",
		UID:      "BLENDVPD_XMM1_XMM2_XMM0",
		Syntax:   "BLENDVPD xmm1, xmm2/m128, XMM0",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 15 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x15},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamXMM0},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	BLENDVPD_XMM1_M128_XMM0 = &Instruction{
		Mnemonic: "blendvpd",
		UID:      "BLENDVPD_XMM1_M128_XMM0",
		Syntax:   "BLENDVPD xmm1, xmm2/m128, XMM0",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 15 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x15},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamXMM0},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	BLENDVPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "blendvps",
		UID:      "BLENDVPS_XMM1_XMM2",
		Syntax:   "BLENDVPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 14 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x14},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	BLENDVPS_XMM1_M128 = &Instruction{
		Mnemonic: "blendvps",
		UID:      "BLENDVPS_XMM1_M128",
		Syntax:   "BLENDVPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 14 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x14},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	BLENDVPS_XMM1_XMM2_XMM0 = &Instruction{
		Mnemonic: "blendvps",
		UID:      "BLENDVPS_XMM1_XMM2_XMM0",
		Syntax:   "BLENDVPS xmm1, xmm2/m128, XMM0",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 14 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x14},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamXMM0},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	BLENDVPS_XMM1_M128_XMM0 = &Instruction{
		Mnemonic: "blendvps",
		UID:      "BLENDVPS_XMM1_M128_XMM0",
		Syntax:   "BLENDVPS xmm1, xmm2/m128, XMM0",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 14 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x14},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamXMM0},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	BLSI_R32V_Rmr32_VEX = &Instruction{
		Mnemonic: "blsi",
		UID:      "BLSI_R32V_Rmr32_VEX",
		Syntax:   "BLSI r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F3 /3",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamR32V, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   32,
	}
	BLSI_R32V_M32_VEX = &Instruction{
		Mnemonic: "blsi",
		UID:      "BLSI_R32V_M32_VEX",
		Syntax:   "BLSI r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F3 /3",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamR32V, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   32,
	}
	BLSI_R64V_Rmr64_VEX = &Instruction{
		Mnemonic: "blsi",
		UID:      "BLSI_R64V_Rmr64_VEX",
		Syntax:   "BLSI r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F3 /3",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamR64V, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	BLSI_R64V_M64_VEX = &Instruction{
		Mnemonic: "blsi",
		UID:      "BLSI_R64V_M64_VEX",
		Syntax:   "BLSI r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F3 /3",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamR64V, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	BLSMSK_R32V_Rmr32_VEX = &Instruction{
		Mnemonic: "blsmsk",
		UID:      "BLSMSK_R32V_Rmr32_VEX",
		Syntax:   "BLSMSK r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F3 /2",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamR32V, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   32,
	}
	BLSMSK_R32V_M32_VEX = &Instruction{
		Mnemonic: "blsmsk",
		UID:      "BLSMSK_R32V_M32_VEX",
		Syntax:   "BLSMSK r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F3 /2",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamR32V, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   32,
	}
	BLSMSK_R64V_Rmr64_VEX = &Instruction{
		Mnemonic: "blsmsk",
		UID:      "BLSMSK_R64V_Rmr64_VEX",
		Syntax:   "BLSMSK r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F3 /2",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamR64V, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	BLSMSK_R64V_M64_VEX = &Instruction{
		Mnemonic: "blsmsk",
		UID:      "BLSMSK_R64V_M64_VEX",
		Syntax:   "BLSMSK r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F3 /2",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamR64V, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	BLSR_R32V_Rmr32_VEX = &Instruction{
		Mnemonic: "blsr",
		UID:      "BLSR_R32V_Rmr32_VEX",
		Syntax:   "BLSR r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F3 /1",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  2,
		},
		Parameters: []*Parameter{ParamR32V, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   32,
	}
	BLSR_R32V_M32_VEX = &Instruction{
		Mnemonic: "blsr",
		UID:      "BLSR_R32V_M32_VEX",
		Syntax:   "BLSR r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F3 /1",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  2,
		},
		Parameters: []*Parameter{ParamR32V, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   32,
	}
	BLSR_R64V_Rmr64_VEX = &Instruction{
		Mnemonic: "blsr",
		UID:      "BLSR_R64V_Rmr64_VEX",
		Syntax:   "BLSR r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F3 /1",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  2,
		},
		Parameters: []*Parameter{ParamR64V, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	BLSR_R64V_M64_VEX = &Instruction{
		Mnemonic: "blsr",
		UID:      "BLSR_R64V_M64_VEX",
		Syntax:   "BLSR r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F3 /1",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
			ModRMreg:  2,
		},
		Parameters: []*Parameter{ParamR64V, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	BOUND_R16_M16x16 = &Instruction{
		Mnemonic: "bound",
		UID:      "BOUND_R16_M16x16",
		Syntax:   "BOUND r16, m16&16",
		Encoding: &Encoding{
			Syntax: "62 /r",
			Opcode: []byte{0x62},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16x16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	BOUND_R32_M32x32 = &Instruction{
		Mnemonic: "bound",
		UID:      "BOUND_R32_M32x32",
		Syntax:   "BOUND r32, m32&32",
		Encoding: &Encoding{
			Syntax: "62 /r",
			Opcode: []byte{0x62},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32x32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	BSF_R16_Rmr16 = &Instruction{
		Mnemonic: "bsf",
		UID:      "BSF_R16_Rmr16",
		Syntax:   "BSF r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F BC /r",
			Opcode: []byte{0x0f, 0xbc},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BSF_R16_M16 = &Instruction{
		Mnemonic: "bsf",
		UID:      "BSF_R16_M16",
		Syntax:   "BSF r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F BC /r",
			Opcode: []byte{0x0f, 0xbc},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BSF_R32_Rmr32 = &Instruction{
		Mnemonic: "bsf",
		UID:      "BSF_R32_Rmr32",
		Syntax:   "BSF r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F BC /r",
			Opcode: []byte{0x0f, 0xbc},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BSF_R32_M32 = &Instruction{
		Mnemonic: "bsf",
		UID:      "BSF_R32_M32",
		Syntax:   "BSF r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F BC /r",
			Opcode: []byte{0x0f, 0xbc},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BSF_R64_Rmr64_REX = &Instruction{
		Mnemonic: "bsf",
		UID:      "BSF_R64_Rmr64_REX",
		Syntax:   "BSF r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F BC /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xbc},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BSF_R64_M64_REX = &Instruction{
		Mnemonic: "bsf",
		UID:      "BSF_R64_M64_REX",
		Syntax:   "BSF r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F BC /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xbc},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BSR_R16_Rmr16 = &Instruction{
		Mnemonic: "bsr",
		UID:      "BSR_R16_Rmr16",
		Syntax:   "BSR r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F BD /r",
			Opcode: []byte{0x0f, 0xbd},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BSR_R16_M16 = &Instruction{
		Mnemonic: "bsr",
		UID:      "BSR_R16_M16",
		Syntax:   "BSR r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F BD /r",
			Opcode: []byte{0x0f, 0xbd},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BSR_R32_Rmr32 = &Instruction{
		Mnemonic: "bsr",
		UID:      "BSR_R32_Rmr32",
		Syntax:   "BSR r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F BD /r",
			Opcode: []byte{0x0f, 0xbd},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BSR_R32_M32 = &Instruction{
		Mnemonic: "bsr",
		UID:      "BSR_R32_M32",
		Syntax:   "BSR r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F BD /r",
			Opcode: []byte{0x0f, 0xbd},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BSR_R64_Rmr64_REX = &Instruction{
		Mnemonic: "bsr",
		UID:      "BSR_R64_Rmr64_REX",
		Syntax:   "BSR r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F BD /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xbd},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BSR_R64_M64_REX = &Instruction{
		Mnemonic: "bsr",
		UID:      "BSR_R64_M64_REX",
		Syntax:   "BSR r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F BD /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xbd},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BSWAP_R32op = &Instruction{
		Mnemonic: "bswap",
		UID:      "BSWAP_R32op",
		Syntax:   "BSWAP r32op",
		Encoding: &Encoding{
			Syntax:           "0F C8+rd",
			Opcode:           []byte{0x0f, 0xc8},
			RegisterModifier: 2,
		},
		Parameters:  []*Parameter{ParamR32op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BSWAP_R64op_REX = &Instruction{
		Mnemonic: "bswap",
		UID:      "BSWAP_R64op_REX",
		Syntax:   "BSWAP r64op",
		Encoding: &Encoding{
			Syntax:           "REX.W 0F C8+rd",
			REX:              true,
			REX_W:            true,
			Opcode:           []byte{0x0f, 0xc8},
			RegisterModifier: 2,
		},
		Parameters: []*Parameter{ParamR64op},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BT_Rmr16_Imm8 = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_Rmr16_Imm8",
		Syntax:   "BT r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /4 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BT_Rmr16_R16 = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_Rmr16_R16",
		Syntax:   "BT r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F A3 /r",
			Opcode: []byte{0x0f, 0xa3},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BT_Rmr32_Imm8 = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_Rmr32_Imm8",
		Syntax:   "BT r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /4 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BT_Rmr32_R32 = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_Rmr32_R32",
		Syntax:   "BT r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F A3 /r",
			Opcode: []byte{0x0f, 0xa3},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BT_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_Rmr64_Imm8_REX",
		Syntax:   "BT r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F BA /4 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BT_Rmr64_R64_REX = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_Rmr64_R64_REX",
		Syntax:   "BT r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F A3 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xa3},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BT_M16_Imm8 = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_M16_Imm8",
		Syntax:   "BT r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /4 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BT_M16_R16 = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_M16_R16",
		Syntax:   "BT r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F A3 /r",
			Opcode: []byte{0x0f, 0xa3},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BT_M32_Imm8 = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_M32_Imm8",
		Syntax:   "BT r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /4 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BT_M32_R32 = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_M32_R32",
		Syntax:   "BT r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F A3 /r",
			Opcode: []byte{0x0f, 0xa3},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BT_M64_Imm8_REX = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_M64_Imm8_REX",
		Syntax:   "BT r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F BA /4 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BT_M64_R64_REX = &Instruction{
		Mnemonic: "bt",
		UID:      "BT_M64_R64_REX",
		Syntax:   "BT r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F A3 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xa3},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTC_Rmr16_Imm8 = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_Rmr16_Imm8",
		Syntax:   "BTC r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /7 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTC_Rmr16_R16 = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_Rmr16_R16",
		Syntax:   "BTC r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F BB /r",
			Opcode: []byte{0x0f, 0xbb},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTC_Rmr32_Imm8 = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_Rmr32_Imm8",
		Syntax:   "BTC r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /7 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTC_Rmr32_R32 = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_Rmr32_R32",
		Syntax:   "BTC r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F BB /r",
			Opcode: []byte{0x0f, 0xbb},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTC_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_Rmr64_Imm8_REX",
		Syntax:   "BTC r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F BA /7 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTC_Rmr64_R64_REX = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_Rmr64_R64_REX",
		Syntax:   "BTC r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F BB /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xbb},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTC_M16_Imm8 = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_M16_Imm8",
		Syntax:   "BTC r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /7 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTC_M16_R16 = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_M16_R16",
		Syntax:   "BTC r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F BB /r",
			Opcode: []byte{0x0f, 0xbb},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTC_M32_Imm8 = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_M32_Imm8",
		Syntax:   "BTC r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /7 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTC_M32_R32 = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_M32_R32",
		Syntax:   "BTC r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F BB /r",
			Opcode: []byte{0x0f, 0xbb},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTC_M64_Imm8_REX = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_M64_Imm8_REX",
		Syntax:   "BTC r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F BA /7 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTC_M64_R64_REX = &Instruction{
		Mnemonic: "btc",
		UID:      "BTC_M64_R64_REX",
		Syntax:   "BTC r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F BB /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xbb},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTR_Rmr16_Imm8 = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_Rmr16_Imm8",
		Syntax:   "BTR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /6 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTR_Rmr16_R16 = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_Rmr16_R16",
		Syntax:   "BTR r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F B3 /r",
			Opcode: []byte{0x0f, 0xb3},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTR_Rmr32_Imm8 = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_Rmr32_Imm8",
		Syntax:   "BTR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /6 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTR_Rmr32_R32 = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_Rmr32_R32",
		Syntax:   "BTR r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F B3 /r",
			Opcode: []byte{0x0f, 0xb3},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTR_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_Rmr64_Imm8_REX",
		Syntax:   "BTR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F BA /6 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTR_Rmr64_R64_REX = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_Rmr64_R64_REX",
		Syntax:   "BTR r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B3 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb3},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTR_M16_Imm8 = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_M16_Imm8",
		Syntax:   "BTR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /6 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTR_M16_R16 = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_M16_R16",
		Syntax:   "BTR r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F B3 /r",
			Opcode: []byte{0x0f, 0xb3},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTR_M32_Imm8 = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_M32_Imm8",
		Syntax:   "BTR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /6 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTR_M32_R32 = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_M32_R32",
		Syntax:   "BTR r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F B3 /r",
			Opcode: []byte{0x0f, 0xb3},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTR_M64_Imm8_REX = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_M64_Imm8_REX",
		Syntax:   "BTR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F BA /6 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTR_M64_R64_REX = &Instruction{
		Mnemonic: "btr",
		UID:      "BTR_M64_R64_REX",
		Syntax:   "BTR r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B3 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb3},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTS_Rmr16_Imm8 = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_Rmr16_Imm8",
		Syntax:   "BTS r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /5 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTS_Rmr16_R16 = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_Rmr16_R16",
		Syntax:   "BTS r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F AB /r",
			Opcode: []byte{0x0f, 0xab},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTS_Rmr32_Imm8 = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_Rmr32_Imm8",
		Syntax:   "BTS r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /5 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTS_Rmr32_R32 = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_Rmr32_R32",
		Syntax:   "BTS r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F AB /r",
			Opcode: []byte{0x0f, 0xab},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTS_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_Rmr64_Imm8_REX",
		Syntax:   "BTS r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F BA /5 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTS_Rmr64_R64_REX = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_Rmr64_R64_REX",
		Syntax:   "BTS r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F AB /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xab},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTS_M16_Imm8 = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_M16_Imm8",
		Syntax:   "BTS r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /5 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTS_M16_R16 = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_M16_R16",
		Syntax:   "BTS r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F AB /r",
			Opcode: []byte{0x0f, 0xab},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	BTS_M32_Imm8 = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_M32_Imm8",
		Syntax:   "BTS r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "0F BA /5 ib",
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTS_M32_R32 = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_M32_R32",
		Syntax:   "BTS r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F AB /r",
			Opcode: []byte{0x0f, 0xab},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	BTS_M64_Imm8_REX = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_M64_Imm8_REX",
		Syntax:   "BTS r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F BA /5 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0xba},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BTS_M64_R64_REX = &Instruction{
		Mnemonic: "bts",
		UID:      "BTS_M64_R64_REX",
		Syntax:   "BTS r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F AB /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xab},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	BZHI_R32_Rmr32_R32V_VEX = &Instruction{
		Mnemonic: "bzhi",
		UID:      "BZHI_R32_Rmr32_R32V_VEX",
		Syntax:   "BZHI r32, r/m32, r32V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F5 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32, ParamR32V},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	BZHI_R32_M32_R32V_VEX = &Instruction{
		Mnemonic: "bzhi",
		UID:      "BZHI_R32_M32_R32V_VEX",
		Syntax:   "BZHI r32, r/m32, r32V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W0 F5 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32, ParamR32V},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	BZHI_R64_Rmr64_R64V_VEX = &Instruction{
		Mnemonic: "bzhi",
		UID:      "BZHI_R64_Rmr64_R64V_VEX",
		Syntax:   "BZHI r64, r/m64, r64V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F5 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64, ParamR64V},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	BZHI_R64_M64_R64V_VEX = &Instruction{
		Mnemonic: "bzhi",
		UID:      "BZHI_R64_M64_R64V_VEX",
		Syntax:   "BZHI r64, r/m64, r64V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F38.W1 F5 /r",
			VEX:       true,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64, ParamR64V},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	CALL_Rel16 = &Instruction{
		Mnemonic: "call",
		UID:      "CALL_Rel16",
		Syntax:   "CALL rel16",
		Encoding: &Encoding{
			Syntax:     "E8 cw",
			Opcode:     []byte{0xe8},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	CALL_Rel32 = &Instruction{
		Mnemonic: "call",
		UID:      "CALL_Rel32",
		Syntax:   "CALL rel32",
		Encoding: &Encoding{
			Syntax:     "E8 cd",
			Opcode:     []byte{0xe8},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CALL_Rmr16 = &Instruction{
		Mnemonic: "call",
		UID:      "CALL_Rmr16",
		Syntax:   "CALL r/m16",
		Encoding: &Encoding{
			Syntax:   "FF /2",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	CALL_Rmr32 = &Instruction{
		Mnemonic: "call",
		UID:      "CALL_Rmr32",
		Syntax:   "CALL r/m32",
		Encoding: &Encoding{
			Syntax:   "FF /2",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	CALL_Rmr64 = &Instruction{
		Mnemonic: "call",
		UID:      "CALL_Rmr64",
		Syntax:   "CALL r/m64",
		Encoding: &Encoding{
			Syntax:   "FF /2",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CALL_M16 = &Instruction{
		Mnemonic: "call",
		UID:      "CALL_M16",
		Syntax:   "CALL r/m16",
		Encoding: &Encoding{
			Syntax:   "FF /2",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	CALL_M32 = &Instruction{
		Mnemonic: "call",
		UID:      "CALL_M32",
		Syntax:   "CALL r/m32",
		Encoding: &Encoding{
			Syntax:   "FF /2",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	CALL_M64 = &Instruction{
		Mnemonic: "call",
		UID:      "CALL_M64",
		Syntax:   "CALL r/m64",
		Encoding: &Encoding{
			Syntax:   "FF /2",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CALL_FAR_Ptr16v16 = &Instruction{
		Mnemonic: "call-far",
		UID:      "CALL_FAR_Ptr16v16",
		Syntax:   "CALL-FAR ptr16:16",
		Encoding: &Encoding{
			Syntax:     "9A cd",
			Opcode:     []byte{0x9a},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamPtr16v16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	CALL_FAR_Ptr16v32 = &Instruction{
		Mnemonic: "call-far",
		UID:      "CALL_FAR_Ptr16v32",
		Syntax:   "CALL-FAR ptr16:32",
		Encoding: &Encoding{
			Syntax:     "9A cp",
			Opcode:     []byte{0x9a},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamPtr16v32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	CALL_FAR_M16v16 = &Instruction{
		Mnemonic: "call-far",
		UID:      "CALL_FAR_M16v16",
		Syntax:   "CALL-FAR m16:16",
		Encoding: &Encoding{
			Syntax:   "FF /3",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM16v16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	CALL_FAR_M16v32 = &Instruction{
		Mnemonic: "call-far",
		UID:      "CALL_FAR_M16v32",
		Syntax:   "CALL-FAR m16:32",
		Encoding: &Encoding{
			Syntax:   "FF /3",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM16v32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	CALL_FAR_M16v64 = &Instruction{
		Mnemonic: "call-far",
		UID:      "CALL_FAR_M16v64",
		Syntax:   "CALL-FAR m16:64",
		Encoding: &Encoding{
			Syntax:   "FF /3",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM16v64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	CBW = &Instruction{
		Mnemonic: "cbw",
		UID:      "CBW",
		Syntax:   "CBW",
		Encoding: &Encoding{
			Syntax: "98",
			Opcode: []byte{0x98},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CDQ = &Instruction{
		Mnemonic: "cdq",
		UID:      "CDQ",
		Syntax:   "CDQ",
		Encoding: &Encoding{
			Syntax: "99",
			Opcode: []byte{0x99},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CDQE_REX = &Instruction{
		Mnemonic: "cdqe",
		UID:      "CDQE_REX",
		Syntax:   "CDQE",
		Encoding: &Encoding{
			Syntax: "REX.W 98",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x98},
		},
		Mode16:   false,
		Mode32:   false,
		Mode64:   true,
		DataSize: 64,
	}
	CLAC = &Instruction{
		Mnemonic: "clac",
		UID:      "CLAC",
		Syntax:   "CLAC",
		Encoding: &Encoding{
			Syntax:        "NP 0F 01 CA",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x01, 0xca},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"SMAP"},
	}
	CLC = &Instruction{
		Mnemonic: "clc",
		UID:      "CLC",
		Syntax:   "CLC",
		Encoding: &Encoding{
			Syntax: "F8",
			Opcode: []byte{0xf8},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	CLD = &Instruction{
		Mnemonic: "cld",
		UID:      "CLD",
		Syntax:   "CLD",
		Encoding: &Encoding{
			Syntax: "FC",
			Opcode: []byte{0xfc},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	CLDEMOTE_M8 = &Instruction{
		Mnemonic: "cldemote",
		UID:      "CLDEMOTE_M8",
		Syntax:   "CLDEMOTE m8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 1C /0",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x1c},
			ModRM:         true,
			ModRMreg:      1,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"CLDEMOTE"},
	}
	CLFLUSH_M8 = &Instruction{
		Mnemonic: "clflush",
		UID:      "CLFLUSH_M8",
		Syntax:   "CLFLUSH m8",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE /7",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      8,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CLFLUSHOPT_M8 = &Instruction{
		Mnemonic: "clflushopt",
		UID:      "CLFLUSHOPT_M8",
		Syntax:   "CLFLUSHOPT m8",
		Encoding: &Encoding{
			Syntax:            "NFx 66 0F AE /7",
			NoRepPrefixes:     true,
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          8,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CLGI = &Instruction{
		Mnemonic: "clgi",
		UID:      "CLGI",
		Syntax:   "CLGI",
		Encoding: &Encoding{
			Syntax: "0F 01 DD",
			Opcode: []byte{0x0f, 0x01, 0xdd},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	CLI = &Instruction{
		Mnemonic: "cli",
		UID:      "CLI",
		Syntax:   "CLI",
		Encoding: &Encoding{
			Syntax: "FA",
			Opcode: []byte{0xfa},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	CLRSSBSY_M64 = &Instruction{
		Mnemonic: "clrssbsy",
		UID:      "CLRSSBSY_M64",
		Syntax:   "CLRSSBSY m64",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /6",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"CET_SS"},
	}
	CLTS = &Instruction{
		Mnemonic: "clts",
		UID:      "CLTS",
		Syntax:   "CLTS",
		Encoding: &Encoding{
			Syntax: "0F 06",
			Opcode: []byte{0x0f, 0x06},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	CLUI = &Instruction{
		Mnemonic: "clui",
		UID:      "CLUI",
		Syntax:   "CLUI",
		Encoding: &Encoding{
			Syntax:            "F3 0F 01 EE",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x01, 0xee},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
		CPUID:  []string{"UINTR"},
	}
	CLWB_M8 = &Instruction{
		Mnemonic: "clwb",
		UID:      "CLWB_M8",
		Syntax:   "CLWB m8",
		Encoding: &Encoding{
			Syntax:            "66 0F AE /6",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"CLWB"},
	}
	CMC = &Instruction{
		Mnemonic: "cmc",
		UID:      "CMC",
		Syntax:   "CMC",
		Encoding: &Encoding{
			Syntax: "F5",
			Opcode: []byte{0xf5},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	CMOVA_R16_Rmr16 = &Instruction{
		Mnemonic: "cmova",
		UID:      "CMOVA_R16_Rmr16",
		Syntax:   "CMOVA r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 47 /r",
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVA_R16_M16 = &Instruction{
		Mnemonic: "cmova",
		UID:      "CMOVA_R16_M16",
		Syntax:   "CMOVA r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 47 /r",
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVA_R32_Rmr32 = &Instruction{
		Mnemonic: "cmova",
		UID:      "CMOVA_R32_Rmr32",
		Syntax:   "CMOVA r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 47 /r",
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVA_R32_M32 = &Instruction{
		Mnemonic: "cmova",
		UID:      "CMOVA_R32_M32",
		Syntax:   "CMOVA r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 47 /r",
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVA_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmova",
		UID:      "CMOVA_R64_Rmr64_REX",
		Syntax:   "CMOVA r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 47 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVA_R64_M64_REX = &Instruction{
		Mnemonic: "cmova",
		UID:      "CMOVA_R64_M64_REX",
		Syntax:   "CMOVA r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 47 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVAE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovae",
		UID:      "CMOVAE_R16_Rmr16",
		Syntax:   "CMOVAE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVAE_R16_M16 = &Instruction{
		Mnemonic: "cmovae",
		UID:      "CMOVAE_R16_M16",
		Syntax:   "CMOVAE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVAE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovae",
		UID:      "CMOVAE_R32_Rmr32",
		Syntax:   "CMOVAE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVAE_R32_M32 = &Instruction{
		Mnemonic: "cmovae",
		UID:      "CMOVAE_R32_M32",
		Syntax:   "CMOVAE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVAE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovae",
		UID:      "CMOVAE_R64_Rmr64_REX",
		Syntax:   "CMOVAE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 43 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVAE_R64_M64_REX = &Instruction{
		Mnemonic: "cmovae",
		UID:      "CMOVAE_R64_M64_REX",
		Syntax:   "CMOVAE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 43 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVB_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovb",
		UID:      "CMOVB_R16_Rmr16",
		Syntax:   "CMOVB r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVB_R16_M16 = &Instruction{
		Mnemonic: "cmovb",
		UID:      "CMOVB_R16_M16",
		Syntax:   "CMOVB r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVB_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovb",
		UID:      "CMOVB_R32_Rmr32",
		Syntax:   "CMOVB r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVB_R32_M32 = &Instruction{
		Mnemonic: "cmovb",
		UID:      "CMOVB_R32_M32",
		Syntax:   "CMOVB r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVB_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovb",
		UID:      "CMOVB_R64_Rmr64_REX",
		Syntax:   "CMOVB r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 42 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVB_R64_M64_REX = &Instruction{
		Mnemonic: "cmovb",
		UID:      "CMOVB_R64_M64_REX",
		Syntax:   "CMOVB r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 42 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVBE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovbe",
		UID:      "CMOVBE_R16_Rmr16",
		Syntax:   "CMOVBE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 46 /r",
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVBE_R16_M16 = &Instruction{
		Mnemonic: "cmovbe",
		UID:      "CMOVBE_R16_M16",
		Syntax:   "CMOVBE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 46 /r",
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVBE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovbe",
		UID:      "CMOVBE_R32_Rmr32",
		Syntax:   "CMOVBE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 46 /r",
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVBE_R32_M32 = &Instruction{
		Mnemonic: "cmovbe",
		UID:      "CMOVBE_R32_M32",
		Syntax:   "CMOVBE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 46 /r",
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVBE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovbe",
		UID:      "CMOVBE_R64_Rmr64_REX",
		Syntax:   "CMOVBE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 46 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVBE_R64_M64_REX = &Instruction{
		Mnemonic: "cmovbe",
		UID:      "CMOVBE_R64_M64_REX",
		Syntax:   "CMOVBE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 46 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVC_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovc",
		UID:      "CMOVC_R16_Rmr16",
		Syntax:   "CMOVC r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVC_R16_M16 = &Instruction{
		Mnemonic: "cmovc",
		UID:      "CMOVC_R16_M16",
		Syntax:   "CMOVC r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVC_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovc",
		UID:      "CMOVC_R32_Rmr32",
		Syntax:   "CMOVC r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVC_R32_M32 = &Instruction{
		Mnemonic: "cmovc",
		UID:      "CMOVC_R32_M32",
		Syntax:   "CMOVC r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVC_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovc",
		UID:      "CMOVC_R64_Rmr64_REX",
		Syntax:   "CMOVC r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 42 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVC_R64_M64_REX = &Instruction{
		Mnemonic: "cmovc",
		UID:      "CMOVC_R64_M64_REX",
		Syntax:   "CMOVC r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 42 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmove",
		UID:      "CMOVE_R16_Rmr16",
		Syntax:   "CMOVE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 44 /r",
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVE_R16_M16 = &Instruction{
		Mnemonic: "cmove",
		UID:      "CMOVE_R16_M16",
		Syntax:   "CMOVE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 44 /r",
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmove",
		UID:      "CMOVE_R32_Rmr32",
		Syntax:   "CMOVE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 44 /r",
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVE_R32_M32 = &Instruction{
		Mnemonic: "cmove",
		UID:      "CMOVE_R32_M32",
		Syntax:   "CMOVE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 44 /r",
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmove",
		UID:      "CMOVE_R64_Rmr64_REX",
		Syntax:   "CMOVE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 44 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVE_R64_M64_REX = &Instruction{
		Mnemonic: "cmove",
		UID:      "CMOVE_R64_M64_REX",
		Syntax:   "CMOVE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 44 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVG_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovg",
		UID:      "CMOVG_R16_Rmr16",
		Syntax:   "CMOVG r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4F /r",
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVG_R16_M16 = &Instruction{
		Mnemonic: "cmovg",
		UID:      "CMOVG_R16_M16",
		Syntax:   "CMOVG r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4F /r",
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVG_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovg",
		UID:      "CMOVG_R32_Rmr32",
		Syntax:   "CMOVG r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4F /r",
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVG_R32_M32 = &Instruction{
		Mnemonic: "cmovg",
		UID:      "CMOVG_R32_M32",
		Syntax:   "CMOVG r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4F /r",
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVG_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovg",
		UID:      "CMOVG_R64_Rmr64_REX",
		Syntax:   "CMOVG r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4F /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVG_R64_M64_REX = &Instruction{
		Mnemonic: "cmovg",
		UID:      "CMOVG_R64_M64_REX",
		Syntax:   "CMOVG r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4F /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVGE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovge",
		UID:      "CMOVGE_R16_Rmr16",
		Syntax:   "CMOVGE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4D /r",
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVGE_R16_M16 = &Instruction{
		Mnemonic: "cmovge",
		UID:      "CMOVGE_R16_M16",
		Syntax:   "CMOVGE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4D /r",
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVGE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovge",
		UID:      "CMOVGE_R32_Rmr32",
		Syntax:   "CMOVGE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4D /r",
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVGE_R32_M32 = &Instruction{
		Mnemonic: "cmovge",
		UID:      "CMOVGE_R32_M32",
		Syntax:   "CMOVGE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4D /r",
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVGE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovge",
		UID:      "CMOVGE_R64_Rmr64_REX",
		Syntax:   "CMOVGE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4D /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVGE_R64_M64_REX = &Instruction{
		Mnemonic: "cmovge",
		UID:      "CMOVGE_R64_M64_REX",
		Syntax:   "CMOVGE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4D /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVL_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovl",
		UID:      "CMOVL_R16_Rmr16",
		Syntax:   "CMOVL r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4C /r",
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVL_R16_M16 = &Instruction{
		Mnemonic: "cmovl",
		UID:      "CMOVL_R16_M16",
		Syntax:   "CMOVL r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4C /r",
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVL_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovl",
		UID:      "CMOVL_R32_Rmr32",
		Syntax:   "CMOVL r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4C /r",
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVL_R32_M32 = &Instruction{
		Mnemonic: "cmovl",
		UID:      "CMOVL_R32_M32",
		Syntax:   "CMOVL r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4C /r",
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVL_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovl",
		UID:      "CMOVL_R64_Rmr64_REX",
		Syntax:   "CMOVL r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4C /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVL_R64_M64_REX = &Instruction{
		Mnemonic: "cmovl",
		UID:      "CMOVL_R64_M64_REX",
		Syntax:   "CMOVL r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4C /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVLE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovle",
		UID:      "CMOVLE_R16_Rmr16",
		Syntax:   "CMOVLE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4E /r",
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVLE_R16_M16 = &Instruction{
		Mnemonic: "cmovle",
		UID:      "CMOVLE_R16_M16",
		Syntax:   "CMOVLE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4E /r",
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVLE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovle",
		UID:      "CMOVLE_R32_Rmr32",
		Syntax:   "CMOVLE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4E /r",
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVLE_R32_M32 = &Instruction{
		Mnemonic: "cmovle",
		UID:      "CMOVLE_R32_M32",
		Syntax:   "CMOVLE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4E /r",
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVLE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovle",
		UID:      "CMOVLE_R64_Rmr64_REX",
		Syntax:   "CMOVLE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4E /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVLE_R64_M64_REX = &Instruction{
		Mnemonic: "cmovle",
		UID:      "CMOVLE_R64_M64_REX",
		Syntax:   "CMOVLE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4E /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNA_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovna",
		UID:      "CMOVNA_R16_Rmr16",
		Syntax:   "CMOVNA r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 46 /r",
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNA_R16_M16 = &Instruction{
		Mnemonic: "cmovna",
		UID:      "CMOVNA_R16_M16",
		Syntax:   "CMOVNA r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 46 /r",
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNA_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovna",
		UID:      "CMOVNA_R32_Rmr32",
		Syntax:   "CMOVNA r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 46 /r",
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNA_R32_M32 = &Instruction{
		Mnemonic: "cmovna",
		UID:      "CMOVNA_R32_M32",
		Syntax:   "CMOVNA r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 46 /r",
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNA_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovna",
		UID:      "CMOVNA_R64_Rmr64_REX",
		Syntax:   "CMOVNA r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 46 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNA_R64_M64_REX = &Instruction{
		Mnemonic: "cmovna",
		UID:      "CMOVNA_R64_M64_REX",
		Syntax:   "CMOVNA r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 46 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x46},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNAE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovnae",
		UID:      "CMOVNAE_R16_Rmr16",
		Syntax:   "CMOVNAE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNAE_R16_M16 = &Instruction{
		Mnemonic: "cmovnae",
		UID:      "CMOVNAE_R16_M16",
		Syntax:   "CMOVNAE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNAE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovnae",
		UID:      "CMOVNAE_R32_Rmr32",
		Syntax:   "CMOVNAE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNAE_R32_M32 = &Instruction{
		Mnemonic: "cmovnae",
		UID:      "CMOVNAE_R32_M32",
		Syntax:   "CMOVNAE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 42 /r",
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNAE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovnae",
		UID:      "CMOVNAE_R64_Rmr64_REX",
		Syntax:   "CMOVNAE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 42 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNAE_R64_M64_REX = &Instruction{
		Mnemonic: "cmovnae",
		UID:      "CMOVNAE_R64_M64_REX",
		Syntax:   "CMOVNAE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 42 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x42},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNB_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovnb",
		UID:      "CMOVNB_R16_Rmr16",
		Syntax:   "CMOVNB r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNB_R16_M16 = &Instruction{
		Mnemonic: "cmovnb",
		UID:      "CMOVNB_R16_M16",
		Syntax:   "CMOVNB r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNB_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovnb",
		UID:      "CMOVNB_R32_Rmr32",
		Syntax:   "CMOVNB r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNB_R32_M32 = &Instruction{
		Mnemonic: "cmovnb",
		UID:      "CMOVNB_R32_M32",
		Syntax:   "CMOVNB r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNB_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovnb",
		UID:      "CMOVNB_R64_Rmr64_REX",
		Syntax:   "CMOVNB r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 43 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNB_R64_M64_REX = &Instruction{
		Mnemonic: "cmovnb",
		UID:      "CMOVNB_R64_M64_REX",
		Syntax:   "CMOVNB r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 43 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNBE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovnbe",
		UID:      "CMOVNBE_R16_Rmr16",
		Syntax:   "CMOVNBE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 47 /r",
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNBE_R16_M16 = &Instruction{
		Mnemonic: "cmovnbe",
		UID:      "CMOVNBE_R16_M16",
		Syntax:   "CMOVNBE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 47 /r",
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNBE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovnbe",
		UID:      "CMOVNBE_R32_Rmr32",
		Syntax:   "CMOVNBE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 47 /r",
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNBE_R32_M32 = &Instruction{
		Mnemonic: "cmovnbe",
		UID:      "CMOVNBE_R32_M32",
		Syntax:   "CMOVNBE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 47 /r",
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNBE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovnbe",
		UID:      "CMOVNBE_R64_Rmr64_REX",
		Syntax:   "CMOVNBE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 47 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNBE_R64_M64_REX = &Instruction{
		Mnemonic: "cmovnbe",
		UID:      "CMOVNBE_R64_M64_REX",
		Syntax:   "CMOVNBE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 47 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x47},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNC_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovnc",
		UID:      "CMOVNC_R16_Rmr16",
		Syntax:   "CMOVNC r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNC_R16_M16 = &Instruction{
		Mnemonic: "cmovnc",
		UID:      "CMOVNC_R16_M16",
		Syntax:   "CMOVNC r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNC_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovnc",
		UID:      "CMOVNC_R32_Rmr32",
		Syntax:   "CMOVNC r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNC_R32_M32 = &Instruction{
		Mnemonic: "cmovnc",
		UID:      "CMOVNC_R32_M32",
		Syntax:   "CMOVNC r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 43 /r",
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNC_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovnc",
		UID:      "CMOVNC_R64_Rmr64_REX",
		Syntax:   "CMOVNC r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 43 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNC_R64_M64_REX = &Instruction{
		Mnemonic: "cmovnc",
		UID:      "CMOVNC_R64_M64_REX",
		Syntax:   "CMOVNC r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 43 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x43},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovne",
		UID:      "CMOVNE_R16_Rmr16",
		Syntax:   "CMOVNE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 45 /r",
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNE_R16_M16 = &Instruction{
		Mnemonic: "cmovne",
		UID:      "CMOVNE_R16_M16",
		Syntax:   "CMOVNE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 45 /r",
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovne",
		UID:      "CMOVNE_R32_Rmr32",
		Syntax:   "CMOVNE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 45 /r",
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNE_R32_M32 = &Instruction{
		Mnemonic: "cmovne",
		UID:      "CMOVNE_R32_M32",
		Syntax:   "CMOVNE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 45 /r",
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovne",
		UID:      "CMOVNE_R64_Rmr64_REX",
		Syntax:   "CMOVNE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 45 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNE_R64_M64_REX = &Instruction{
		Mnemonic: "cmovne",
		UID:      "CMOVNE_R64_M64_REX",
		Syntax:   "CMOVNE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 45 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNG_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovng",
		UID:      "CMOVNG_R16_Rmr16",
		Syntax:   "CMOVNG r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4E /r",
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNG_R16_M16 = &Instruction{
		Mnemonic: "cmovng",
		UID:      "CMOVNG_R16_M16",
		Syntax:   "CMOVNG r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4E /r",
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNG_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovng",
		UID:      "CMOVNG_R32_Rmr32",
		Syntax:   "CMOVNG r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4E /r",
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNG_R32_M32 = &Instruction{
		Mnemonic: "cmovng",
		UID:      "CMOVNG_R32_M32",
		Syntax:   "CMOVNG r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4E /r",
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNG_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovng",
		UID:      "CMOVNG_R64_Rmr64_REX",
		Syntax:   "CMOVNG r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4E /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNG_R64_M64_REX = &Instruction{
		Mnemonic: "cmovng",
		UID:      "CMOVNG_R64_M64_REX",
		Syntax:   "CMOVNG r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4E /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNGE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovnge",
		UID:      "CMOVNGE_R16_Rmr16",
		Syntax:   "CMOVNGE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4C /r",
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNGE_R16_M16 = &Instruction{
		Mnemonic: "cmovnge",
		UID:      "CMOVNGE_R16_M16",
		Syntax:   "CMOVNGE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4C /r",
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNGE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovnge",
		UID:      "CMOVNGE_R32_Rmr32",
		Syntax:   "CMOVNGE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4C /r",
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNGE_R32_M32 = &Instruction{
		Mnemonic: "cmovnge",
		UID:      "CMOVNGE_R32_M32",
		Syntax:   "CMOVNGE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4C /r",
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNGE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovnge",
		UID:      "CMOVNGE_R64_Rmr64_REX",
		Syntax:   "CMOVNGE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4C /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNGE_R64_M64_REX = &Instruction{
		Mnemonic: "cmovnge",
		UID:      "CMOVNGE_R64_M64_REX",
		Syntax:   "CMOVNGE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4C /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4c},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNL_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovnl",
		UID:      "CMOVNL_R16_Rmr16",
		Syntax:   "CMOVNL r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4D /r",
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNL_R16_M16 = &Instruction{
		Mnemonic: "cmovnl",
		UID:      "CMOVNL_R16_M16",
		Syntax:   "CMOVNL r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4D /r",
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNL_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovnl",
		UID:      "CMOVNL_R32_Rmr32",
		Syntax:   "CMOVNL r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4D /r",
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNL_R32_M32 = &Instruction{
		Mnemonic: "cmovnl",
		UID:      "CMOVNL_R32_M32",
		Syntax:   "CMOVNL r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4D /r",
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNL_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovnl",
		UID:      "CMOVNL_R64_Rmr64_REX",
		Syntax:   "CMOVNL r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4D /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNL_R64_M64_REX = &Instruction{
		Mnemonic: "cmovnl",
		UID:      "CMOVNL_R64_M64_REX",
		Syntax:   "CMOVNL r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4D /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4d},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNLE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovnle",
		UID:      "CMOVNLE_R16_Rmr16",
		Syntax:   "CMOVNLE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4F /r",
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNLE_R16_M16 = &Instruction{
		Mnemonic: "cmovnle",
		UID:      "CMOVNLE_R16_M16",
		Syntax:   "CMOVNLE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4F /r",
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNLE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovnle",
		UID:      "CMOVNLE_R32_Rmr32",
		Syntax:   "CMOVNLE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4F /r",
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNLE_R32_M32 = &Instruction{
		Mnemonic: "cmovnle",
		UID:      "CMOVNLE_R32_M32",
		Syntax:   "CMOVNLE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4F /r",
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNLE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovnle",
		UID:      "CMOVNLE_R64_Rmr64_REX",
		Syntax:   "CMOVNLE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4F /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNLE_R64_M64_REX = &Instruction{
		Mnemonic: "cmovnle",
		UID:      "CMOVNLE_R64_M64_REX",
		Syntax:   "CMOVNLE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4F /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4f},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNO_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovno",
		UID:      "CMOVNO_R16_Rmr16",
		Syntax:   "CMOVNO r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 41 /r",
			Opcode: []byte{0x0f, 0x41},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNO_R16_M16 = &Instruction{
		Mnemonic: "cmovno",
		UID:      "CMOVNO_R16_M16",
		Syntax:   "CMOVNO r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 41 /r",
			Opcode: []byte{0x0f, 0x41},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNO_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovno",
		UID:      "CMOVNO_R32_Rmr32",
		Syntax:   "CMOVNO r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 41 /r",
			Opcode: []byte{0x0f, 0x41},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNO_R32_M32 = &Instruction{
		Mnemonic: "cmovno",
		UID:      "CMOVNO_R32_M32",
		Syntax:   "CMOVNO r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 41 /r",
			Opcode: []byte{0x0f, 0x41},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNO_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovno",
		UID:      "CMOVNO_R64_Rmr64_REX",
		Syntax:   "CMOVNO r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 41 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x41},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNO_R64_M64_REX = &Instruction{
		Mnemonic: "cmovno",
		UID:      "CMOVNO_R64_M64_REX",
		Syntax:   "CMOVNO r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 41 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x41},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNP_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovnp",
		UID:      "CMOVNP_R16_Rmr16",
		Syntax:   "CMOVNP r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4B /r",
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNP_R16_M16 = &Instruction{
		Mnemonic: "cmovnp",
		UID:      "CMOVNP_R16_M16",
		Syntax:   "CMOVNP r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4B /r",
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNP_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovnp",
		UID:      "CMOVNP_R32_Rmr32",
		Syntax:   "CMOVNP r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4B /r",
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNP_R32_M32 = &Instruction{
		Mnemonic: "cmovnp",
		UID:      "CMOVNP_R32_M32",
		Syntax:   "CMOVNP r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4B /r",
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNP_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovnp",
		UID:      "CMOVNP_R64_Rmr64_REX",
		Syntax:   "CMOVNP r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNP_R64_M64_REX = &Instruction{
		Mnemonic: "cmovnp",
		UID:      "CMOVNP_R64_M64_REX",
		Syntax:   "CMOVNP r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNS_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovns",
		UID:      "CMOVNS_R16_Rmr16",
		Syntax:   "CMOVNS r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 49 /r",
			Opcode: []byte{0x0f, 0x49},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNS_R16_M16 = &Instruction{
		Mnemonic: "cmovns",
		UID:      "CMOVNS_R16_M16",
		Syntax:   "CMOVNS r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 49 /r",
			Opcode: []byte{0x0f, 0x49},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNS_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovns",
		UID:      "CMOVNS_R32_Rmr32",
		Syntax:   "CMOVNS r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 49 /r",
			Opcode: []byte{0x0f, 0x49},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNS_R32_M32 = &Instruction{
		Mnemonic: "cmovns",
		UID:      "CMOVNS_R32_M32",
		Syntax:   "CMOVNS r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 49 /r",
			Opcode: []byte{0x0f, 0x49},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNS_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovns",
		UID:      "CMOVNS_R64_Rmr64_REX",
		Syntax:   "CMOVNS r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 49 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x49},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNS_R64_M64_REX = &Instruction{
		Mnemonic: "cmovns",
		UID:      "CMOVNS_R64_M64_REX",
		Syntax:   "CMOVNS r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 49 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x49},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNZ_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovnz",
		UID:      "CMOVNZ_R16_Rmr16",
		Syntax:   "CMOVNZ r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 45 /r",
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNZ_R16_M16 = &Instruction{
		Mnemonic: "cmovnz",
		UID:      "CMOVNZ_R16_M16",
		Syntax:   "CMOVNZ r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 45 /r",
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVNZ_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovnz",
		UID:      "CMOVNZ_R32_Rmr32",
		Syntax:   "CMOVNZ r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 45 /r",
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNZ_R32_M32 = &Instruction{
		Mnemonic: "cmovnz",
		UID:      "CMOVNZ_R32_M32",
		Syntax:   "CMOVNZ r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 45 /r",
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVNZ_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovnz",
		UID:      "CMOVNZ_R64_Rmr64_REX",
		Syntax:   "CMOVNZ r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 45 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVNZ_R64_M64_REX = &Instruction{
		Mnemonic: "cmovnz",
		UID:      "CMOVNZ_R64_M64_REX",
		Syntax:   "CMOVNZ r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 45 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x45},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVO_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovo",
		UID:      "CMOVO_R16_Rmr16",
		Syntax:   "CMOVO r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 40 /r",
			Opcode: []byte{0x0f, 0x40},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVO_R16_M16 = &Instruction{
		Mnemonic: "cmovo",
		UID:      "CMOVO_R16_M16",
		Syntax:   "CMOVO r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 40 /r",
			Opcode: []byte{0x0f, 0x40},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVO_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovo",
		UID:      "CMOVO_R32_Rmr32",
		Syntax:   "CMOVO r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 40 /r",
			Opcode: []byte{0x0f, 0x40},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVO_R32_M32 = &Instruction{
		Mnemonic: "cmovo",
		UID:      "CMOVO_R32_M32",
		Syntax:   "CMOVO r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 40 /r",
			Opcode: []byte{0x0f, 0x40},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVO_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovo",
		UID:      "CMOVO_R64_Rmr64_REX",
		Syntax:   "CMOVO r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 40 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x40},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVO_R64_M64_REX = &Instruction{
		Mnemonic: "cmovo",
		UID:      "CMOVO_R64_M64_REX",
		Syntax:   "CMOVO r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 40 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x40},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVP_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovp",
		UID:      "CMOVP_R16_Rmr16",
		Syntax:   "CMOVP r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4A /r",
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVP_R16_M16 = &Instruction{
		Mnemonic: "cmovp",
		UID:      "CMOVP_R16_M16",
		Syntax:   "CMOVP r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4A /r",
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVP_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovp",
		UID:      "CMOVP_R32_Rmr32",
		Syntax:   "CMOVP r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4A /r",
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVP_R32_M32 = &Instruction{
		Mnemonic: "cmovp",
		UID:      "CMOVP_R32_M32",
		Syntax:   "CMOVP r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4A /r",
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVP_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovp",
		UID:      "CMOVP_R64_Rmr64_REX",
		Syntax:   "CMOVP r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4A /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVP_R64_M64_REX = &Instruction{
		Mnemonic: "cmovp",
		UID:      "CMOVP_R64_M64_REX",
		Syntax:   "CMOVP r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4A /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVPE_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovpe",
		UID:      "CMOVPE_R16_Rmr16",
		Syntax:   "CMOVPE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4A /r",
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVPE_R16_M16 = &Instruction{
		Mnemonic: "cmovpe",
		UID:      "CMOVPE_R16_M16",
		Syntax:   "CMOVPE r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4A /r",
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVPE_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovpe",
		UID:      "CMOVPE_R32_Rmr32",
		Syntax:   "CMOVPE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4A /r",
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVPE_R32_M32 = &Instruction{
		Mnemonic: "cmovpe",
		UID:      "CMOVPE_R32_M32",
		Syntax:   "CMOVPE r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4A /r",
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVPE_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovpe",
		UID:      "CMOVPE_R64_Rmr64_REX",
		Syntax:   "CMOVPE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4A /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVPE_R64_M64_REX = &Instruction{
		Mnemonic: "cmovpe",
		UID:      "CMOVPE_R64_M64_REX",
		Syntax:   "CMOVPE r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4A /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVPO_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovpo",
		UID:      "CMOVPO_R16_Rmr16",
		Syntax:   "CMOVPO r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4B /r",
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVPO_R16_M16 = &Instruction{
		Mnemonic: "cmovpo",
		UID:      "CMOVPO_R16_M16",
		Syntax:   "CMOVPO r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 4B /r",
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVPO_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovpo",
		UID:      "CMOVPO_R32_Rmr32",
		Syntax:   "CMOVPO r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4B /r",
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVPO_R32_M32 = &Instruction{
		Mnemonic: "cmovpo",
		UID:      "CMOVPO_R32_M32",
		Syntax:   "CMOVPO r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 4B /r",
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVPO_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovpo",
		UID:      "CMOVPO_R64_Rmr64_REX",
		Syntax:   "CMOVPO r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVPO_R64_M64_REX = &Instruction{
		Mnemonic: "cmovpo",
		UID:      "CMOVPO_R64_M64_REX",
		Syntax:   "CMOVPO r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 4B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x4b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVS_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovs",
		UID:      "CMOVS_R16_Rmr16",
		Syntax:   "CMOVS r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 48 /r",
			Opcode: []byte{0x0f, 0x48},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVS_R16_M16 = &Instruction{
		Mnemonic: "cmovs",
		UID:      "CMOVS_R16_M16",
		Syntax:   "CMOVS r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 48 /r",
			Opcode: []byte{0x0f, 0x48},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVS_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovs",
		UID:      "CMOVS_R32_Rmr32",
		Syntax:   "CMOVS r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 48 /r",
			Opcode: []byte{0x0f, 0x48},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVS_R32_M32 = &Instruction{
		Mnemonic: "cmovs",
		UID:      "CMOVS_R32_M32",
		Syntax:   "CMOVS r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 48 /r",
			Opcode: []byte{0x0f, 0x48},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVS_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovs",
		UID:      "CMOVS_R64_Rmr64_REX",
		Syntax:   "CMOVS r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 48 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x48},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVS_R64_M64_REX = &Instruction{
		Mnemonic: "cmovs",
		UID:      "CMOVS_R64_M64_REX",
		Syntax:   "CMOVS r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 48 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x48},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVZ_R16_Rmr16 = &Instruction{
		Mnemonic: "cmovz",
		UID:      "CMOVZ_R16_Rmr16",
		Syntax:   "CMOVZ r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 44 /r",
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVZ_R16_M16 = &Instruction{
		Mnemonic: "cmovz",
		UID:      "CMOVZ_R16_M16",
		Syntax:   "CMOVZ r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 44 /r",
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMOVZ_R32_Rmr32 = &Instruction{
		Mnemonic: "cmovz",
		UID:      "CMOVZ_R32_Rmr32",
		Syntax:   "CMOVZ r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 44 /r",
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVZ_R32_M32 = &Instruction{
		Mnemonic: "cmovz",
		UID:      "CMOVZ_R32_M32",
		Syntax:   "CMOVZ r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F 44 /r",
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMOVZ_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmovz",
		UID:      "CMOVZ_R64_Rmr64_REX",
		Syntax:   "CMOVZ r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 44 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMOVZ_R64_M64_REX = &Instruction{
		Mnemonic: "cmovz",
		UID:      "CMOVZ_R64_M64_REX",
		Syntax:   "CMOVZ r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 44 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x44},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMP_AL_Imm8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_AL_Imm8",
		Syntax:   "CMP AL, imm8",
		Encoding: &Encoding{
			Syntax: "3C ib",
			Opcode: []byte{0x3c},
		},
		Parameters: []*Parameter{ParamAL, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	CMP_AX_Imm16 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_AX_Imm16",
		Syntax:   "CMP AX, imm16",
		Encoding: &Encoding{
			Syntax: "3D iw",
			Opcode: []byte{0x3d},
		},
		Parameters:  []*Parameter{ParamAX, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMP_EAX_Imm32 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_EAX_Imm32",
		Syntax:   "CMP EAX, imm32",
		Encoding: &Encoding{
			Syntax: "3D id",
			Opcode: []byte{0x3d},
		},
		Parameters:  []*Parameter{ParamEAX, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMP_RAX_Imm32_REX = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_RAX_Imm32_REX",
		Syntax:   "CMP RAX, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W 3D id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x3d},
		},
		Parameters: []*Parameter{ParamRAX, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMP_R8_Rmr8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_R8_Rmr8",
		Syntax:   "CMP r8, r/m8",
		Encoding: &Encoding{
			Syntax: "3A /r",
			Opcode: []byte{0x3a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	CMP_R8_M8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_R8_M8",
		Syntax:   "CMP r8, r/m8",
		Encoding: &Encoding{
			Syntax: "3A /r",
			Opcode: []byte{0x3a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	CMP_R16_Rmr16 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_R16_Rmr16",
		Syntax:   "CMP r16, r/m16",
		Encoding: &Encoding{
			Syntax: "3B /r",
			Opcode: []byte{0x3b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMP_R16_M16 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_R16_M16",
		Syntax:   "CMP r16, r/m16",
		Encoding: &Encoding{
			Syntax: "3B /r",
			Opcode: []byte{0x3b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMP_R32_Rmr32 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_R32_Rmr32",
		Syntax:   "CMP r32, r/m32",
		Encoding: &Encoding{
			Syntax: "3B /r",
			Opcode: []byte{0x3b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMP_R32_M32 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_R32_M32",
		Syntax:   "CMP r32, r/m32",
		Encoding: &Encoding{
			Syntax: "3B /r",
			Opcode: []byte{0x3b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMP_R64_Rmr64_REX = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_R64_Rmr64_REX",
		Syntax:   "CMP r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 3B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x3b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMP_R64_M64_REX = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_R64_M64_REX",
		Syntax:   "CMP r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 3B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x3b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMP_Rmr8_Imm8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr8_Imm8",
		Syntax:   "CMP r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /7 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	CMP_Rmr8_R8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr8_R8",
		Syntax:   "CMP r/m8, r8",
		Encoding: &Encoding{
			Syntax: "38 /r",
			Opcode: []byte{0x38},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	CMP_Rmr16_Imm8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr16_Imm8",
		Syntax:   "CMP r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /7 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMP_Rmr16_Imm16 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr16_Imm16",
		Syntax:   "CMP r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /7 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMP_Rmr16_R16 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr16_R16",
		Syntax:   "CMP r/m16, r16",
		Encoding: &Encoding{
			Syntax: "39 /r",
			Opcode: []byte{0x39},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMP_Rmr32_Imm8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr32_Imm8",
		Syntax:   "CMP r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /7 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMP_Rmr32_Imm32 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr32_Imm32",
		Syntax:   "CMP r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /7 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMP_Rmr32_R32 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr32_R32",
		Syntax:   "CMP r/m32, r32",
		Encoding: &Encoding{
			Syntax: "39 /r",
			Opcode: []byte{0x39},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMP_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr64_Imm8_REX",
		Syntax:   "CMP r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /7 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMP_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr64_Imm32_REX",
		Syntax:   "CMP r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /7 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMP_Rmr64_R64_REX = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_Rmr64_R64_REX",
		Syntax:   "CMP r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 39 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x39},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMP_M8_Imm8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M8_Imm8",
		Syntax:   "CMP r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /7 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	CMP_M8_R8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M8_R8",
		Syntax:   "CMP r/m8, r8",
		Encoding: &Encoding{
			Syntax: "38 /r",
			Opcode: []byte{0x38},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	CMP_M16_Imm8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M16_Imm8",
		Syntax:   "CMP r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /7 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMP_M16_Imm16 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M16_Imm16",
		Syntax:   "CMP r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /7 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMP_M16_R16 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M16_R16",
		Syntax:   "CMP r/m16, r16",
		Encoding: &Encoding{
			Syntax: "39 /r",
			Opcode: []byte{0x39},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMP_M32_Imm8 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M32_Imm8",
		Syntax:   "CMP r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /7 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMP_M32_Imm32 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M32_Imm32",
		Syntax:   "CMP r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /7 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMP_M32_R32 = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M32_R32",
		Syntax:   "CMP r/m32, r32",
		Encoding: &Encoding{
			Syntax: "39 /r",
			Opcode: []byte{0x39},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMP_M64_Imm8_REX = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M64_Imm8_REX",
		Syntax:   "CMP r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /7 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMP_M64_Imm32_REX = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M64_Imm32_REX",
		Syntax:   "CMP r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /7 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMP_M64_R64_REX = &Instruction{
		Mnemonic: "cmp",
		UID:      "CMP_M64_R64_REX",
		Syntax:   "CMP r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 39 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x39},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMPEQPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpeqpd",
		UID:      "CMPEQPD_XMM1_XMM2",
		Syntax:   "CMPEQPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 00",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x00},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPEQPD_XMM1_M128 = &Instruction{
		Mnemonic: "cmpeqpd",
		UID:      "CMPEQPD_XMM1_M128",
		Syntax:   "CMPEQPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 00",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x00},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPEQPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpeqps",
		UID:      "CMPEQPS_XMM1_XMM2",
		Syntax:   "CMPEQPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 00",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x00},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPEQPS_XMM1_M128 = &Instruction{
		Mnemonic: "cmpeqps",
		UID:      "CMPEQPS_XMM1_M128",
		Syntax:   "CMPEQPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 00",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x00},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPEQSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpeqsd",
		UID:      "CMPEQSD_XMM1_XMM2",
		Syntax:   "CMPEQSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 00",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x00},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPEQSD_XMM1_M64 = &Instruction{
		Mnemonic: "cmpeqsd",
		UID:      "CMPEQSD_XMM1_M64",
		Syntax:   "CMPEQSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 00",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x00},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPEQSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpeqss",
		UID:      "CMPEQSS_XMM1_XMM2",
		Syntax:   "CMPEQSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 00",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x00},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPEQSS_XMM1_M32 = &Instruction{
		Mnemonic: "cmpeqss",
		UID:      "CMPEQSS_XMM1_M32",
		Syntax:   "CMPEQSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 00",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x00},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLEPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmplepd",
		UID:      "CMPLEPD_XMM1_XMM2",
		Syntax:   "CMPLEPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 02",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x02},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLEPD_XMM1_M128 = &Instruction{
		Mnemonic: "cmplepd",
		UID:      "CMPLEPD_XMM1_M128",
		Syntax:   "CMPLEPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 02",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x02},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLEPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpleps",
		UID:      "CMPLEPS_XMM1_XMM2",
		Syntax:   "CMPLEPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 02",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x02},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLEPS_XMM1_M128 = &Instruction{
		Mnemonic: "cmpleps",
		UID:      "CMPLEPS_XMM1_M128",
		Syntax:   "CMPLEPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 02",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x02},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLESD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmplesd",
		UID:      "CMPLESD_XMM1_XMM2",
		Syntax:   "CMPLESD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 02",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x02},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLESD_XMM1_M64 = &Instruction{
		Mnemonic: "cmplesd",
		UID:      "CMPLESD_XMM1_M64",
		Syntax:   "CMPLESD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 02",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x02},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLESS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpless",
		UID:      "CMPLESS_XMM1_XMM2",
		Syntax:   "CMPLESS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 02",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x02},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLESS_XMM1_M32 = &Instruction{
		Mnemonic: "cmpless",
		UID:      "CMPLESS_XMM1_M32",
		Syntax:   "CMPLESS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 02",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x02},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLTPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpltpd",
		UID:      "CMPLTPD_XMM1_XMM2",
		Syntax:   "CMPLTPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 01",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x01},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLTPD_XMM1_M128 = &Instruction{
		Mnemonic: "cmpltpd",
		UID:      "CMPLTPD_XMM1_M128",
		Syntax:   "CMPLTPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 01",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x01},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLTPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpltps",
		UID:      "CMPLTPS_XMM1_XMM2",
		Syntax:   "CMPLTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 01",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x01},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLTPS_XMM1_M128 = &Instruction{
		Mnemonic: "cmpltps",
		UID:      "CMPLTPS_XMM1_M128",
		Syntax:   "CMPLTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 01",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x01},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLTSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpltsd",
		UID:      "CMPLTSD_XMM1_XMM2",
		Syntax:   "CMPLTSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 01",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x01},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLTSD_XMM1_M64 = &Instruction{
		Mnemonic: "cmpltsd",
		UID:      "CMPLTSD_XMM1_M64",
		Syntax:   "CMPLTSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 01",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x01},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLTSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpltss",
		UID:      "CMPLTSS_XMM1_XMM2",
		Syntax:   "CMPLTSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 01",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x01},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPLTSS_XMM1_M32 = &Instruction{
		Mnemonic: "cmpltss",
		UID:      "CMPLTSS_XMM1_M32",
		Syntax:   "CMPLTSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 01",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x01},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNEQPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpneqpd",
		UID:      "CMPNEQPD_XMM1_XMM2",
		Syntax:   "CMPNEQPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 04",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x04},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNEQPD_XMM1_M128 = &Instruction{
		Mnemonic: "cmpneqpd",
		UID:      "CMPNEQPD_XMM1_M128",
		Syntax:   "CMPNEQPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 04",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x04},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNEQPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpneqps",
		UID:      "CMPNEQPS_XMM1_XMM2",
		Syntax:   "CMPNEQPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 04",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x04},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNEQPS_XMM1_M128 = &Instruction{
		Mnemonic: "cmpneqps",
		UID:      "CMPNEQPS_XMM1_M128",
		Syntax:   "CMPNEQPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 04",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x04},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNEQSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpneqsd",
		UID:      "CMPNEQSD_XMM1_XMM2",
		Syntax:   "CMPNEQSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 04",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x04},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNEQSD_XMM1_M64 = &Instruction{
		Mnemonic: "cmpneqsd",
		UID:      "CMPNEQSD_XMM1_M64",
		Syntax:   "CMPNEQSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 04",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x04},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNEQSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpneqss",
		UID:      "CMPNEQSS_XMM1_XMM2",
		Syntax:   "CMPNEQSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 04",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x04},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNEQSS_XMM1_M32 = &Instruction{
		Mnemonic: "cmpneqss",
		UID:      "CMPNEQSS_XMM1_M32",
		Syntax:   "CMPNEQSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 04",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x04},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLEPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpnlepd",
		UID:      "CMPNLEPD_XMM1_XMM2",
		Syntax:   "CMPNLEPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 06",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x06},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLEPD_XMM1_M128 = &Instruction{
		Mnemonic: "cmpnlepd",
		UID:      "CMPNLEPD_XMM1_M128",
		Syntax:   "CMPNLEPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 06",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x06},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLEPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpnleps",
		UID:      "CMPNLEPS_XMM1_XMM2",
		Syntax:   "CMPNLEPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 06",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x06},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLEPS_XMM1_M128 = &Instruction{
		Mnemonic: "cmpnleps",
		UID:      "CMPNLEPS_XMM1_M128",
		Syntax:   "CMPNLEPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 06",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x06},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLESD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpnlesd",
		UID:      "CMPNLESD_XMM1_XMM2",
		Syntax:   "CMPNLESD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 06",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x06},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLESD_XMM1_M64 = &Instruction{
		Mnemonic: "cmpnlesd",
		UID:      "CMPNLESD_XMM1_M64",
		Syntax:   "CMPNLESD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 06",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x06},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLESS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpnless",
		UID:      "CMPNLESS_XMM1_XMM2",
		Syntax:   "CMPNLESS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 06",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x06},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLESS_XMM1_M32 = &Instruction{
		Mnemonic: "cmpnless",
		UID:      "CMPNLESS_XMM1_M32",
		Syntax:   "CMPNLESS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 06",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x06},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLTPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpnltpd",
		UID:      "CMPNLTPD_XMM1_XMM2",
		Syntax:   "CMPNLTPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 05",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x05},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLTPD_XMM1_M128 = &Instruction{
		Mnemonic: "cmpnltpd",
		UID:      "CMPNLTPD_XMM1_M128",
		Syntax:   "CMPNLTPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 05",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x05},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLTPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpnltps",
		UID:      "CMPNLTPS_XMM1_XMM2",
		Syntax:   "CMPNLTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 05",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x05},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLTPS_XMM1_M128 = &Instruction{
		Mnemonic: "cmpnltps",
		UID:      "CMPNLTPS_XMM1_M128",
		Syntax:   "CMPNLTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 05",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x05},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLTSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpnltsd",
		UID:      "CMPNLTSD_XMM1_XMM2",
		Syntax:   "CMPNLTSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 05",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x05},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLTSD_XMM1_M64 = &Instruction{
		Mnemonic: "cmpnltsd",
		UID:      "CMPNLTSD_XMM1_M64",
		Syntax:   "CMPNLTSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 05",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x05},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLTSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpnltss",
		UID:      "CMPNLTSS_XMM1_XMM2",
		Syntax:   "CMPNLTSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 05",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x05},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPNLTSS_XMM1_M32 = &Instruction{
		Mnemonic: "cmpnltss",
		UID:      "CMPNLTSS_XMM1_M32",
		Syntax:   "CMPNLTSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 05",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x05},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPORDPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpordpd",
		UID:      "CMPORDPD_XMM1_XMM2",
		Syntax:   "CMPORDPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 07",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x07},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPORDPD_XMM1_M128 = &Instruction{
		Mnemonic: "cmpordpd",
		UID:      "CMPORDPD_XMM1_M128",
		Syntax:   "CMPORDPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 07",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x07},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPORDPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpordps",
		UID:      "CMPORDPS_XMM1_XMM2",
		Syntax:   "CMPORDPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 07",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x07},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPORDPS_XMM1_M128 = &Instruction{
		Mnemonic: "cmpordps",
		UID:      "CMPORDPS_XMM1_M128",
		Syntax:   "CMPORDPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 07",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x07},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPORDSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpordsd",
		UID:      "CMPORDSD_XMM1_XMM2",
		Syntax:   "CMPORDSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 07",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x07},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPORDSD_XMM1_M64 = &Instruction{
		Mnemonic: "cmpordsd",
		UID:      "CMPORDSD_XMM1_M64",
		Syntax:   "CMPORDSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 07",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x07},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPORDSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpordss",
		UID:      "CMPORDSS_XMM1_XMM2",
		Syntax:   "CMPORDSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 07",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x07},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPORDSS_XMM1_M32 = &Instruction{
		Mnemonic: "cmpordss",
		UID:      "CMPORDSS_XMM1_M32",
		Syntax:   "CMPORDSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 07",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x07},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPPD_XMM1_XMM2_Imm5u = &Instruction{
		Mnemonic: "cmppd",
		UID:      "CMPPD_XMM1_XMM2_Imm5u",
		Syntax:   "CMPPD xmm1, xmm2/m128, imm5u",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm5u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CMPPD_XMM1_M128_Imm5u = &Instruction{
		Mnemonic: "cmppd",
		UID:      "CMPPD_XMM1_M128_Imm5u",
		Syntax:   "CMPPD xmm1, xmm2/m128, imm5u",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm5u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CMPPS_XMM1_XMM2_Imm5u = &Instruction{
		Mnemonic: "cmpps",
		UID:      "CMPPS_XMM1_XMM2_Imm5u",
		Syntax:   "CMPPS xmm1, xmm2/m128, imm5u",
		Encoding: &Encoding{
			Syntax:        "NP 0F C2 /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc2},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm5u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	CMPPS_XMM1_M128_Imm5u = &Instruction{
		Mnemonic: "cmpps",
		UID:      "CMPPS_XMM1_M128_Imm5u",
		Syntax:   "CMPPS xmm1, xmm2/m128, imm5u",
		Encoding: &Encoding{
			Syntax:        "NP 0F C2 /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc2},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm5u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	CMPS_StrSrc8_StrDst8 = &Instruction{
		Mnemonic: "cmps",
		UID:      "CMPS_StrSrc8_StrDst8",
		Syntax:   "CMPS [ds:esi:8], [es:edi:8]",
		Encoding: &Encoding{
			Syntax: "A6",
			Opcode: []byte{0xa6},
		},
		Parameters:  []*Parameter{ParamStrSrc8, ParamStrDst8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	CMPS_StrSrc16_StrDst16 = &Instruction{
		Mnemonic: "cmps",
		UID:      "CMPS_StrSrc16_StrDst16",
		Syntax:   "CMPS [ds:esi:16], [es:edi:16]",
		Encoding: &Encoding{
			Syntax: "A7",
			Opcode: []byte{0xa7},
		},
		Parameters:  []*Parameter{ParamStrSrc16, ParamStrDst16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMPS_StrSrc32_StrDst32 = &Instruction{
		Mnemonic: "cmps",
		UID:      "CMPS_StrSrc32_StrDst32",
		Syntax:   "CMPS [ds:esi:32], [es:edi:32]",
		Encoding: &Encoding{
			Syntax: "A7",
			Opcode: []byte{0xa7},
		},
		Parameters:  []*Parameter{ParamStrSrc32, ParamStrDst32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMPS_StrSrc64_StrDst64_REX = &Instruction{
		Mnemonic: "cmps",
		UID:      "CMPS_StrSrc64_StrDst64_REX",
		Syntax:   "CMPS [rsi:64], [rdi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W A7",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa7},
		},
		Parameters:  []*Parameter{ParamStrSrc64, ParamStrDst64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	CMPSB = &Instruction{
		Mnemonic: "cmpsb",
		UID:      "CMPSB",
		Syntax:   "CMPSB",
		Encoding: &Encoding{
			Syntax: "A6",
			Opcode: []byte{0xa6},
		},
		Mode16:   true,
		Mode32:   true,
		Mode64:   true,
		DataSize: 8,
	}
	CMPSB_StrSrc8_StrDst8 = &Instruction{
		Mnemonic: "cmpsb",
		UID:      "CMPSB_StrSrc8_StrDst8",
		Syntax:   "CMPSB [ds:esi:8], [es:edi:8]",
		Encoding: &Encoding{
			Syntax: "A6",
			Opcode: []byte{0xa6},
		},
		Parameters:  []*Parameter{ParamStrSrc8, ParamStrDst8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	CMPSD = &Instruction{
		Mnemonic: "cmpsd",
		UID:      "CMPSD",
		Syntax:   "CMPSD",
		Encoding: &Encoding{
			Syntax: "A7",
			Opcode: []byte{0xa7},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMPSD_StrSrc32_StrDst32 = &Instruction{
		Mnemonic: "cmpsd",
		UID:      "CMPSD_StrSrc32_StrDst32",
		Syntax:   "CMPSD [ds:esi:32], [es:edi:32]",
		Encoding: &Encoding{
			Syntax: "A7",
			Opcode: []byte{0xa7},
		},
		Parameters:  []*Parameter{ParamStrSrc32, ParamStrDst32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CMPSD_XMM1_XMM2_Imm5u = &Instruction{
		Mnemonic: "cmpsd",
		UID:      "CMPSD_XMM1_XMM2_Imm5u",
		Syntax:   "CMPSD xmm1, xmm2/m64, imm5u",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r ib",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm5u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CMPSD_XMM1_M64_Imm5u = &Instruction{
		Mnemonic: "cmpsd",
		UID:      "CMPSD_XMM1_M64_Imm5u",
		Syntax:   "CMPSD xmm1, xmm2/m64, imm5u",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r ib",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64, ParamImm5u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CMPSQ_REX = &Instruction{
		Mnemonic: "cmpsq",
		UID:      "CMPSQ_REX",
		Syntax:   "CMPSQ",
		Encoding: &Encoding{
			Syntax: "REX.W A7",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa7},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
	}
	CMPSQ_StrSrc64_StrDst64_REX = &Instruction{
		Mnemonic: "cmpsq",
		UID:      "CMPSQ_StrSrc64_StrDst64_REX",
		Syntax:   "CMPSQ [rsi:64], [rdi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W A7",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa7},
		},
		Parameters:  []*Parameter{ParamStrSrc64, ParamStrDst64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	CMPSS_XMM1_XMM2_Imm5u = &Instruction{
		Mnemonic: "cmpss",
		UID:      "CMPSS_XMM1_XMM2_Imm5u",
		Syntax:   "CMPSS xmm1, xmm2/m32, imm5u",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r ib",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm5u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	CMPSS_XMM1_M32_Imm5u = &Instruction{
		Mnemonic: "cmpss",
		UID:      "CMPSS_XMM1_M32_Imm5u",
		Syntax:   "CMPSS xmm1, xmm2/m32, imm5u",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r ib",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32, ParamImm5u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	CMPSW = &Instruction{
		Mnemonic: "cmpsw",
		UID:      "CMPSW",
		Syntax:   "CMPSW",
		Encoding: &Encoding{
			Syntax: "A7",
			Opcode: []byte{0xa7},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMPSW_StrSrc16_StrDst16 = &Instruction{
		Mnemonic: "cmpsw",
		UID:      "CMPSW_StrSrc16_StrDst16",
		Syntax:   "CMPSW [ds:esi:16], [es:edi:16]",
		Encoding: &Encoding{
			Syntax: "A7",
			Opcode: []byte{0xa7},
		},
		Parameters:  []*Parameter{ParamStrSrc16, ParamStrDst16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CMPUNORDPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpunordpd",
		UID:      "CMPUNORDPD_XMM1_XMM2",
		Syntax:   "CMPUNORDPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 03",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x03},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPUNORDPD_XMM1_M128 = &Instruction{
		Mnemonic: "cmpunordpd",
		UID:      "CMPUNORDPD_XMM1_M128",
		Syntax:   "CMPUNORDPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F C2 /r 03",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x03},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPUNORDPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpunordps",
		UID:      "CMPUNORDPS_XMM1_XMM2",
		Syntax:   "CMPUNORDPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 03",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x03},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPUNORDPS_XMM1_M128 = &Instruction{
		Mnemonic: "cmpunordps",
		UID:      "CMPUNORDPS_XMM1_M128",
		Syntax:   "CMPUNORDPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:           "0F C2 /r 03",
			Opcode:           []byte{0x0f, 0xc2},
			ModRM:            true,
			ImpliedImmediate: []byte{0x03},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPUNORDSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpunordsd",
		UID:      "CMPUNORDSD_XMM1_XMM2",
		Syntax:   "CMPUNORDSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 03",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x03},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPUNORDSD_XMM1_M64 = &Instruction{
		Mnemonic: "cmpunordsd",
		UID:      "CMPUNORDSD_XMM1_M64",
		Syntax:   "CMPUNORDSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F C2 /r 03",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x03},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPUNORDSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cmpunordss",
		UID:      "CMPUNORDSS_XMM1_XMM2",
		Syntax:   "CMPUNORDSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 03",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x03},
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPUNORDSS_XMM1_M32 = &Instruction{
		Mnemonic: "cmpunordss",
		UID:      "CMPUNORDSS_XMM1_M32",
		Syntax:   "CMPUNORDSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C2 /r 03",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc2},
			ModRM:             true,
			ImpliedImmediate:  []byte{0x03},
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CMPXCHG_Rmr8_R8 = &Instruction{
		Mnemonic: "cmpxchg",
		UID:      "CMPXCHG_Rmr8_R8",
		Syntax:   "CMPXCHG r/m8, r8",
		Encoding: &Encoding{
			Syntax: "0F B0 /r",
			Opcode: []byte{0x0f, 0xb0},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"486"},
		DataSize:   8,
	}
	CMPXCHG_Rmr16_R16 = &Instruction{
		Mnemonic: "cmpxchg",
		UID:      "CMPXCHG_Rmr16_R16",
		Syntax:   "CMPXCHG r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F B1 /r",
			Opcode: []byte{0x0f, 0xb1},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"486"},
		OperandSize: true,
		DataSize:    16,
	}
	CMPXCHG_Rmr32_R32 = &Instruction{
		Mnemonic: "cmpxchg",
		UID:      "CMPXCHG_Rmr32_R32",
		Syntax:   "CMPXCHG r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F B1 /r",
			Opcode: []byte{0x0f, 0xb1},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"486"},
		OperandSize: true,
		DataSize:    32,
	}
	CMPXCHG_Rmr64_R64_REX = &Instruction{
		Mnemonic: "cmpxchg",
		UID:      "CMPXCHG_Rmr64_R64_REX",
		Syntax:   "CMPXCHG r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B1 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb1},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMPXCHG_M8_R8 = &Instruction{
		Mnemonic: "cmpxchg",
		UID:      "CMPXCHG_M8_R8",
		Syntax:   "CMPXCHG r/m8, r8",
		Encoding: &Encoding{
			Syntax: "0F B0 /r",
			Opcode: []byte{0x0f, 0xb0},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"486"},
		DataSize:   8,
	}
	CMPXCHG_M16_R16 = &Instruction{
		Mnemonic: "cmpxchg",
		UID:      "CMPXCHG_M16_R16",
		Syntax:   "CMPXCHG r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F B1 /r",
			Opcode: []byte{0x0f, 0xb1},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"486"},
		OperandSize: true,
		DataSize:    16,
	}
	CMPXCHG_M32_R32 = &Instruction{
		Mnemonic: "cmpxchg",
		UID:      "CMPXCHG_M32_R32",
		Syntax:   "CMPXCHG r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F B1 /r",
			Opcode: []byte{0x0f, 0xb1},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"486"},
		OperandSize: true,
		DataSize:    32,
	}
	CMPXCHG_M64_R64_REX = &Instruction{
		Mnemonic: "cmpxchg",
		UID:      "CMPXCHG_M64_R64_REX",
		Syntax:   "CMPXCHG r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B1 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb1},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CMPXCHG16B_M128_REX = &Instruction{
		Mnemonic: "cmpxchg16b",
		UID:      "CMPXCHG16B_M128_REX",
		Syntax:   "CMPXCHG16B m128",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F C7 /1",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0xc7},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM128},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	CMPXCHG8B_M64 = &Instruction{
		Mnemonic: "cmpxchg8b",
		UID:      "CMPXCHG8B_M64",
		Syntax:   "CMPXCHG8B m64",
		Encoding: &Encoding{
			Syntax:   "0F C7 /1",
			Opcode:   []byte{0x0f, 0xc7},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM64},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"Pentium"},
		OperandSize: true,
	}
	COMISD_XMM1_XMM2 = &Instruction{
		Mnemonic: "comisd",
		UID:      "COMISD_XMM1_XMM2",
		Syntax:   "COMISD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 2F /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	COMISD_XMM1_M64 = &Instruction{
		Mnemonic: "comisd",
		UID:      "COMISD_XMM1_M64",
		Syntax:   "COMISD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 2F /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	COMISS_XMM1_XMM2 = &Instruction{
		Mnemonic: "comiss",
		UID:      "COMISS_XMM1_XMM2",
		Syntax:   "COMISS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2F /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2f},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	COMISS_XMM1_M32 = &Instruction{
		Mnemonic: "comiss",
		UID:      "COMISS_XMM1_M32",
		Syntax:   "COMISS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2F /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2f},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	CPUID = &Instruction{
		Mnemonic: "cpuid",
		UID:      "CPUID",
		Syntax:   "CPUID",
		Encoding: &Encoding{
			Syntax: "0F A2",
			Opcode: []byte{0x0f, 0xa2},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"486"},
	}
	CQO_REX = &Instruction{
		Mnemonic: "cqo",
		UID:      "CQO_REX",
		Syntax:   "CQO",
		Encoding: &Encoding{
			Syntax: "REX.W 99",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x99},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
	}
	CRC32_R32_Rmr8 = &Instruction{
		Mnemonic: "crc32",
		UID:      "CRC32_R32_Rmr8",
		Syntax:   "CRC32 r32, r/m8",
		Encoding: &Encoding{
			Syntax:            "F2 0F 38 F0 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x38, 0xf0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	CRC32_R32_Rmr16 = &Instruction{
		Mnemonic: "crc32",
		UID:      "CRC32_R32_Rmr16",
		Syntax:   "CRC32 r32, r/m16",
		Encoding: &Encoding{
			Syntax:            "F2 0F 38 F1 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x38, 0xf1},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CRC32_R32_Rmr32 = &Instruction{
		Mnemonic: "crc32",
		UID:      "CRC32_R32_Rmr32",
		Syntax:   "CRC32 r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "F2 0F 38 F1 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x38, 0xf1},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CRC32_R32_M8 = &Instruction{
		Mnemonic: "crc32",
		UID:      "CRC32_R32_M8",
		Syntax:   "CRC32 r32, r/m8",
		Encoding: &Encoding{
			Syntax:            "F2 0F 38 F0 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x38, 0xf0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	CRC32_R32_M16 = &Instruction{
		Mnemonic: "crc32",
		UID:      "CRC32_R32_M16",
		Syntax:   "CRC32 r32, r/m16",
		Encoding: &Encoding{
			Syntax:            "F2 0F 38 F1 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x38, 0xf1},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CRC32_R32_M32 = &Instruction{
		Mnemonic: "crc32",
		UID:      "CRC32_R32_M32",
		Syntax:   "CRC32 r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "F2 0F 38 F1 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x38, 0xf1},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	CRC32_R64_Rmr8_REX = &Instruction{
		Mnemonic: "crc32",
		UID:      "CRC32_R64_Rmr8_REX",
		Syntax:   "CRC32 r64, r/m8",
		Encoding: &Encoding{
			Syntax:            "F2 REX.W 0F 38 F0 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x38, 0xf0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   8,
	}
	CRC32_R64_Rmr64_REX = &Instruction{
		Mnemonic: "crc32",
		UID:      "CRC32_R64_Rmr64_REX",
		Syntax:   "CRC32 r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "F2 REX.W 0F 38 F1 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x38, 0xf1},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CRC32_R64_M8_REX = &Instruction{
		Mnemonic: "crc32",
		UID:      "CRC32_R64_M8_REX",
		Syntax:   "CRC32 r64, r/m8",
		Encoding: &Encoding{
			Syntax:            "F2 REX.W 0F 38 F0 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x38, 0xf0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   8,
	}
	CRC32_R64_M64_REX = &Instruction{
		Mnemonic: "crc32",
		UID:      "CRC32_R64_M64_REX",
		Syntax:   "CRC32 r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "F2 REX.W 0F 38 F1 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x38, 0xf1},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	CVTDQ2PD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cvtdq2pd",
		UID:      "CVTDQ2PD_XMM1_XMM2",
		Syntax:   "CVTDQ2PD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F3 0F E6 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xe6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTDQ2PD_XMM1_M64 = &Instruction{
		Mnemonic: "cvtdq2pd",
		UID:      "CVTDQ2PD_XMM1_M64",
		Syntax:   "CVTDQ2PD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F3 0F E6 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xe6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTDQ2PS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cvtdq2ps",
		UID:      "CVTDQ2PS_XMM1_XMM2",
		Syntax:   "CVTDQ2PS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5B /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5b},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTDQ2PS_XMM1_M128 = &Instruction{
		Mnemonic: "cvtdq2ps",
		UID:      "CVTDQ2PS_XMM1_M128",
		Syntax:   "CVTDQ2PS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5B /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5b},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPD2DQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "cvtpd2dq",
		UID:      "CVTPD2DQ_XMM1_XMM2",
		Syntax:   "CVTPD2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F2 0F E6 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xe6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPD2DQ_XMM1_M128 = &Instruction{
		Mnemonic: "cvtpd2dq",
		UID:      "CVTPD2DQ_XMM1_M128",
		Syntax:   "CVTPD2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F2 0F E6 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xe6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPD2PI_MM1_XMM2 = &Instruction{
		Mnemonic: "cvtpd2pi",
		UID:      "CVTPD2PI_MM1_XMM2",
		Syntax:   "CVTPD2PI mm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 2D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPD2PI_MM1_M128 = &Instruction{
		Mnemonic: "cvtpd2pi",
		UID:      "CVTPD2PI_MM1_M128",
		Syntax:   "CVTPD2PI mm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 2D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPD2PS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cvtpd2ps",
		UID:      "CVTPD2PS_XMM1_XMM2",
		Syntax:   "CVTPD2PS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPD2PS_XMM1_M128 = &Instruction{
		Mnemonic: "cvtpd2ps",
		UID:      "CVTPD2PS_XMM1_M128",
		Syntax:   "CVTPD2PS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPI2PD_XMM1_MM2 = &Instruction{
		Mnemonic: "cvtpi2pd",
		UID:      "CVTPI2PD_XMM1_MM2",
		Syntax:   "CVTPI2PD xmm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 2A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CVTPI2PD_XMM1_M64 = &Instruction{
		Mnemonic: "cvtpi2pd",
		UID:      "CVTPI2PD_XMM1_M64",
		Syntax:   "CVTPI2PD xmm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 2A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CVTPI2PS_XMM1_MM2 = &Instruction{
		Mnemonic: "cvtpi2ps",
		UID:      "CVTPI2PS_XMM1_MM2",
		Syntax:   "CVTPI2PS xmm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2A /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2a},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CVTPI2PS_XMM1_M64 = &Instruction{
		Mnemonic: "cvtpi2ps",
		UID:      "CVTPI2PS_XMM1_M64",
		Syntax:   "CVTPI2PS xmm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2A /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2a},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CVTPS2DQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "cvtps2dq",
		UID:      "CVTPS2DQ_XMM1_XMM2",
		Syntax:   "CVTPS2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPS2DQ_XMM1_M128 = &Instruction{
		Mnemonic: "cvtps2dq",
		UID:      "CVTPS2DQ_XMM1_M128",
		Syntax:   "CVTPS2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPS2PD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cvtps2pd",
		UID:      "CVTPS2PD_XMM1_XMM2",
		Syntax:   "CVTPS2PD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5A /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5a},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPS2PD_XMM1_M64 = &Instruction{
		Mnemonic: "cvtps2pd",
		UID:      "CVTPS2PD_XMM1_M64",
		Syntax:   "CVTPS2PD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5A /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5a},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTPS2PI_MM1_XMM2 = &Instruction{
		Mnemonic: "cvtps2pi",
		UID:      "CVTPS2PI_MM1_XMM2",
		Syntax:   "CVTPS2PI mm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2D /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2d},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CVTPS2PI_MM1_M64 = &Instruction{
		Mnemonic: "cvtps2pi",
		UID:      "CVTPS2PI_MM1_M64",
		Syntax:   "CVTPS2PI mm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2D /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2d},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CVTSD2SI_R32_XMM2 = &Instruction{
		Mnemonic: "cvtsd2si",
		UID:      "CVTSD2SI_R32_XMM2",
		Syntax:   "CVTSD2SI r32, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 2D /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x2d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   32,
	}
	CVTSD2SI_R32_M64 = &Instruction{
		Mnemonic: "cvtsd2si",
		UID:      "CVTSD2SI_R32_M64",
		Syntax:   "CVTSD2SI r32, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 2D /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x2d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   32,
	}
	CVTSD2SI_R64_XMM2_REX = &Instruction{
		Mnemonic: "cvtsd2si",
		UID:      "CVTSD2SI_R64_XMM2_REX",
		Syntax:   "CVTSD2SI r64, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 REX.W 0F 2D /r",
			MandatoryPrefixes: []Prefix{0xf2},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   64,
	}
	CVTSD2SI_R64_M64_REX = &Instruction{
		Mnemonic: "cvtsd2si",
		UID:      "CVTSD2SI_R64_M64_REX",
		Syntax:   "CVTSD2SI r64, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 REX.W 0F 2D /r",
			MandatoryPrefixes: []Prefix{0xf2},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   64,
	}
	CVTSD2SS_XMM1_XMM2 = &Instruction{
		Mnemonic: "cvtsd2ss",
		UID:      "CVTSD2SS_XMM1_XMM2",
		Syntax:   "CVTSD2SS xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 5A /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x5a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTSD2SS_XMM1_M64 = &Instruction{
		Mnemonic: "cvtsd2ss",
		UID:      "CVTSD2SS_XMM1_M64",
		Syntax:   "CVTSD2SS xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 5A /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x5a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTSI2SD_XMM1_Rmr32 = &Instruction{
		Mnemonic: "cvtsi2sd",
		UID:      "CVTSI2SD_XMM1_Rmr32",
		Syntax:   "CVTSI2SD xmm1, r/m32",
		Encoding: &Encoding{
			Syntax:            "F2 0F 2A /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   32,
	}
	CVTSI2SD_XMM1_Rmr64_REX = &Instruction{
		Mnemonic: "cvtsi2sd",
		UID:      "CVTSI2SD_XMM1_Rmr64_REX",
		Syntax:   "CVTSI2SD xmm1, r/m64",
		Encoding: &Encoding{
			Syntax:            "F2 REX.W 0F 2A /r",
			MandatoryPrefixes: []Prefix{0xf2},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   64,
	}
	CVTSI2SD_XMM1_M32 = &Instruction{
		Mnemonic: "cvtsi2sd",
		UID:      "CVTSI2SD_XMM1_M32",
		Syntax:   "CVTSI2SD xmm1, r/m32",
		Encoding: &Encoding{
			Syntax:            "F2 0F 2A /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   32,
	}
	CVTSI2SD_XMM1_M64_REX = &Instruction{
		Mnemonic: "cvtsi2sd",
		UID:      "CVTSI2SD_XMM1_M64_REX",
		Syntax:   "CVTSI2SD xmm1, r/m64",
		Encoding: &Encoding{
			Syntax:            "F2 REX.W 0F 2A /r",
			MandatoryPrefixes: []Prefix{0xf2},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   64,
	}
	CVTSI2SS_XMM1_Rmr32 = &Instruction{
		Mnemonic: "cvtsi2ss",
		UID:      "CVTSI2SS_XMM1_Rmr32",
		Syntax:   "CVTSI2SS xmm1, r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 2A /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   32,
	}
	CVTSI2SS_XMM1_Rmr64_REX = &Instruction{
		Mnemonic: "cvtsi2ss",
		UID:      "CVTSI2SS_XMM1_Rmr64_REX",
		Syntax:   "CVTSI2SS xmm1, r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F 2A /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   64,
	}
	CVTSI2SS_XMM1_M32 = &Instruction{
		Mnemonic: "cvtsi2ss",
		UID:      "CVTSI2SS_XMM1_M32",
		Syntax:   "CVTSI2SS xmm1, r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 2A /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   32,
	}
	CVTSI2SS_XMM1_M64_REX = &Instruction{
		Mnemonic: "cvtsi2ss",
		UID:      "CVTSI2SS_XMM1_M64_REX",
		Syntax:   "CVTSI2SS xmm1, r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F 2A /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   64,
	}
	CVTSS2SD_XMM1_XMM2 = &Instruction{
		Mnemonic: "cvtss2sd",
		UID:      "CVTSS2SD_XMM1_XMM2",
		Syntax:   "CVTSS2SD xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5A /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTSS2SD_XMM1_M32 = &Instruction{
		Mnemonic: "cvtss2sd",
		UID:      "CVTSS2SD_XMM1_M32",
		Syntax:   "CVTSS2SD xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5A /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTSS2SI_R32_XMM2 = &Instruction{
		Mnemonic: "cvtss2si",
		UID:      "CVTSS2SI_R32_XMM2",
		Syntax:   "CVTSS2SI r32, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 2D /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x2d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   32,
	}
	CVTSS2SI_R32_M32 = &Instruction{
		Mnemonic: "cvtss2si",
		UID:      "CVTSS2SI_R32_M32",
		Syntax:   "CVTSS2SI r32, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 2D /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x2d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   32,
	}
	CVTSS2SI_R64_XMM2_REX = &Instruction{
		Mnemonic: "cvtss2si",
		UID:      "CVTSS2SI_R64_XMM2_REX",
		Syntax:   "CVTSS2SI r64, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F 2D /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   64,
	}
	CVTSS2SI_R64_M32_REX = &Instruction{
		Mnemonic: "cvtss2si",
		UID:      "CVTSS2SI_R64_M32_REX",
		Syntax:   "CVTSS2SI r64, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F 2D /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   64,
	}
	CVTTPD2DQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "cvttpd2dq",
		UID:      "CVTTPD2DQ_XMM1_XMM2",
		Syntax:   "CVTTPD2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E6 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTTPD2DQ_XMM1_M128 = &Instruction{
		Mnemonic: "cvttpd2dq",
		UID:      "CVTTPD2DQ_XMM1_M128",
		Syntax:   "CVTTPD2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E6 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTTPD2PI_MM1_XMM2 = &Instruction{
		Mnemonic: "cvttpd2pi",
		UID:      "CVTTPD2PI_MM1_XMM2",
		Syntax:   "CVTTPD2PI mm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 2C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CVTTPD2PI_MM1_M128 = &Instruction{
		Mnemonic: "cvttpd2pi",
		UID:      "CVTTPD2PI_MM1_M128",
		Syntax:   "CVTTPD2PI mm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 2C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CVTTPS2DQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "cvttps2dq",
		UID:      "CVTTPS2DQ_XMM1_XMM2",
		Syntax:   "CVTTPS2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5B /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTTPS2DQ_XMM1_M128 = &Instruction{
		Mnemonic: "cvttps2dq",
		UID:      "CVTTPS2DQ_XMM1_M128",
		Syntax:   "CVTTPS2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5B /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	CVTTPS2PI_MM1_XMM2 = &Instruction{
		Mnemonic: "cvttps2pi",
		UID:      "CVTTPS2PI_MM1_XMM2",
		Syntax:   "CVTTPS2PI mm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2C /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2c},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CVTTPS2PI_MM1_M64 = &Instruction{
		Mnemonic: "cvttps2pi",
		UID:      "CVTTPS2PI_MM1_M64",
		Syntax:   "CVTTPS2PI mm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2C /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2c},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	CVTTSD2SI_R32_XMM2 = &Instruction{
		Mnemonic: "cvttsd2si",
		UID:      "CVTTSD2SI_R32_XMM2",
		Syntax:   "CVTTSD2SI r32, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 2C /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x2c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   32,
	}
	CVTTSD2SI_R32_M64 = &Instruction{
		Mnemonic: "cvttsd2si",
		UID:      "CVTTSD2SI_R32_M64",
		Syntax:   "CVTTSD2SI r32, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 2C /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x2c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   32,
	}
	CVTTSD2SI_R64_XMM2_REX = &Instruction{
		Mnemonic: "cvttsd2si",
		UID:      "CVTTSD2SI_R64_XMM2_REX",
		Syntax:   "CVTTSD2SI r64, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 REX.W 0F 2C /r",
			MandatoryPrefixes: []Prefix{0xf2},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   64,
	}
	CVTTSD2SI_R64_M64_REX = &Instruction{
		Mnemonic: "cvttsd2si",
		UID:      "CVTTSD2SI_R64_M64_REX",
		Syntax:   "CVTTSD2SI r64, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 REX.W 0F 2C /r",
			MandatoryPrefixes: []Prefix{0xf2},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   64,
	}
	CVTTSS2SI_R32_XMM2 = &Instruction{
		Mnemonic: "cvttss2si",
		UID:      "CVTTSS2SI_R32_XMM2",
		Syntax:   "CVTTSS2SI r32, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 2C /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x2c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   32,
	}
	CVTTSS2SI_R32_M32 = &Instruction{
		Mnemonic: "cvttss2si",
		UID:      "CVTTSS2SI_R32_M32",
		Syntax:   "CVTTSS2SI r32, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 2C /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x2c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   32,
	}
	CVTTSS2SI_R64_XMM2_REX = &Instruction{
		Mnemonic: "cvttss2si",
		UID:      "CVTTSS2SI_R64_XMM2_REX",
		Syntax:   "CVTTSS2SI r64, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F 2C /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   64,
	}
	CVTTSS2SI_R64_M32_REX = &Instruction{
		Mnemonic: "cvttss2si",
		UID:      "CVTTSS2SI_R64_M32_REX",
		Syntax:   "CVTTSS2SI r64, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F 2C /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x2c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE"},
		DataSize:   64,
	}
	CWD = &Instruction{
		Mnemonic: "cwd",
		UID:      "CWD",
		Syntax:   "CWD",
		Encoding: &Encoding{
			Syntax: "99",
			Opcode: []byte{0x99},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	CWDE = &Instruction{
		Mnemonic: "cwde",
		UID:      "CWDE",
		Syntax:   "CWDE",
		Encoding: &Encoding{
			Syntax: "98",
			Opcode: []byte{0x98},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	DAA = &Instruction{
		Mnemonic: "daa",
		UID:      "DAA",
		Syntax:   "DAA",
		Encoding: &Encoding{
			Syntax: "27",
			Opcode: []byte{0x27},
		},
		Mode16: true,
		Mode32: true,
		Mode64: false,
	}
	DAS = &Instruction{
		Mnemonic: "das",
		UID:      "DAS",
		Syntax:   "DAS",
		Encoding: &Encoding{
			Syntax: "2F",
			Opcode: []byte{0x2f},
		},
		Mode16: true,
		Mode32: true,
		Mode64: false,
	}
	DEC_Rmr8 = &Instruction{
		Mnemonic: "dec",
		UID:      "DEC_Rmr8",
		Syntax:   "DEC r/m8",
		Encoding: &Encoding{
			Syntax:   "FE /1",
			Opcode:   []byte{0xfe},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	DEC_Rmr16 = &Instruction{
		Mnemonic: "dec",
		UID:      "DEC_Rmr16",
		Syntax:   "DEC r/m16",
		Encoding: &Encoding{
			Syntax:   "FF /1",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	DEC_Rmr32 = &Instruction{
		Mnemonic: "dec",
		UID:      "DEC_Rmr32",
		Syntax:   "DEC r/m32",
		Encoding: &Encoding{
			Syntax:   "FF /1",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	DEC_Rmr64_REX = &Instruction{
		Mnemonic: "dec",
		UID:      "DEC_Rmr64_REX",
		Syntax:   "DEC r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W FF /1",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	DEC_R16op = &Instruction{
		Mnemonic: "dec",
		UID:      "DEC_R16op",
		Syntax:   "DEC r16op",
		Encoding: &Encoding{
			Syntax:           "48+rw",
			Opcode:           []byte{0x48},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR16op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	DEC_R32op = &Instruction{
		Mnemonic: "dec",
		UID:      "DEC_R32op",
		Syntax:   "DEC r32op",
		Encoding: &Encoding{
			Syntax:           "48+rd",
			Opcode:           []byte{0x48},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR32op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	DEC_M8 = &Instruction{
		Mnemonic: "dec",
		UID:      "DEC_M8",
		Syntax:   "DEC r/m8",
		Encoding: &Encoding{
			Syntax:   "FE /1",
			Opcode:   []byte{0xfe},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	DEC_M16 = &Instruction{
		Mnemonic: "dec",
		UID:      "DEC_M16",
		Syntax:   "DEC r/m16",
		Encoding: &Encoding{
			Syntax:   "FF /1",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	DEC_M32 = &Instruction{
		Mnemonic: "dec",
		UID:      "DEC_M32",
		Syntax:   "DEC r/m32",
		Encoding: &Encoding{
			Syntax:   "FF /1",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	DEC_M64_REX = &Instruction{
		Mnemonic: "dec",
		UID:      "DEC_M64_REX",
		Syntax:   "DEC r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W FF /1",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	DIV_Rmr8 = &Instruction{
		Mnemonic: "div",
		UID:      "DIV_Rmr8",
		Syntax:   "DIV r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /6",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	DIV_Rmr16 = &Instruction{
		Mnemonic: "div",
		UID:      "DIV_Rmr16",
		Syntax:   "DIV r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /6",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	DIV_Rmr32 = &Instruction{
		Mnemonic: "div",
		UID:      "DIV_Rmr32",
		Syntax:   "DIV r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /6",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	DIV_Rmr64_REX = &Instruction{
		Mnemonic: "div",
		UID:      "DIV_Rmr64_REX",
		Syntax:   "DIV r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /6",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	DIV_M8 = &Instruction{
		Mnemonic: "div",
		UID:      "DIV_M8",
		Syntax:   "DIV r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /6",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	DIV_M16 = &Instruction{
		Mnemonic: "div",
		UID:      "DIV_M16",
		Syntax:   "DIV r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /6",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	DIV_M32 = &Instruction{
		Mnemonic: "div",
		UID:      "DIV_M32",
		Syntax:   "DIV r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /6",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	DIV_M64_REX = &Instruction{
		Mnemonic: "div",
		UID:      "DIV_M64_REX",
		Syntax:   "DIV r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /6",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	DIVPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "divpd",
		UID:      "DIVPD_XMM1_XMM2",
		Syntax:   "DIVPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	DIVPD_XMM1_M128 = &Instruction{
		Mnemonic: "divpd",
		UID:      "DIVPD_XMM1_M128",
		Syntax:   "DIVPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	DIVPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "divps",
		UID:      "DIVPS_XMM1_XMM2",
		Syntax:   "DIVPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5E /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5e},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	DIVPS_XMM1_M128 = &Instruction{
		Mnemonic: "divps",
		UID:      "DIVPS_XMM1_M128",
		Syntax:   "DIVPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5E /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5e},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	DIVSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "divsd",
		UID:      "DIVSD_XMM1_XMM2",
		Syntax:   "DIVSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 5E /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x5e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	DIVSD_XMM1_M64 = &Instruction{
		Mnemonic: "divsd",
		UID:      "DIVSD_XMM1_M64",
		Syntax:   "DIVSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 5E /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x5e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	DIVSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "divss",
		UID:      "DIVSS_XMM1_XMM2",
		Syntax:   "DIVSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5E /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	DIVSS_XMM1_M32 = &Instruction{
		Mnemonic: "divss",
		UID:      "DIVSS_XMM1_M32",
		Syntax:   "DIVSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5E /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	DPPD_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "dppd",
		UID:      "DPPD_XMM1_XMM2_Imm8",
		Syntax:   "DPPD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 41 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x41},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	DPPD_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "dppd",
		UID:      "DPPD_XMM1_M128_Imm8",
		Syntax:   "DPPD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 41 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x41},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	DPPS_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "dpps",
		UID:      "DPPS_XMM1_XMM2_Imm8",
		Syntax:   "DPPS xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 40 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x40},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	DPPS_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "dpps",
		UID:      "DPPS_XMM1_M128_Imm8",
		Syntax:   "DPPS xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 40 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x40},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	EMMS = &Instruction{
		Mnemonic: "emms",
		UID:      "EMMS",
		Syntax:   "EMMS",
		Encoding: &Encoding{
			Syntax:        "NP 0F 77",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x77},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	ENCODEKEY128_R32_Rmr32 = &Instruction{
		Mnemonic: "encodekey128",
		UID:      "ENCODEKEY128_R32_Rmr32",
		Syntax:   "ENCODEKEY128 r32, rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 FA 11:rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xfa},
			ModRM:             true,
			ModRMmod:          4,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AESKLE"},
	}
	ENCODEKEY256_R32_Rmr32 = &Instruction{
		Mnemonic: "encodekey256",
		UID:      "ENCODEKEY256_R32_Rmr32",
		Syntax:   "ENCODEKEY256 r32, rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 FB 11:rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xfb},
			ModRM:             true,
			ModRMmod:          4,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AESKLE"},
	}
	ENDBR32 = &Instruction{
		Mnemonic: "endbr32",
		UID:      "ENDBR32",
		Syntax:   "ENDBR32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 1E FB",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x1e, 0xfb},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"CET_IBT"},
	}
	ENDBR64 = &Instruction{
		Mnemonic: "endbr64",
		UID:      "ENDBR64",
		Syntax:   "ENDBR64",
		Encoding: &Encoding{
			Syntax:            "F3 0F 1E FA",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x1e, 0xfa},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"CET_IBT"},
	}
	ENQCMD_R32_M512 = &Instruction{
		Mnemonic: "enqcmd",
		UID:      "ENQCMD_R32_M512",
		Syntax:   "ENQCMD r32, m512",
		Encoding: &Encoding{
			Syntax:            "F2 0F 38 F8 !(11):rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x38, 0xf8},
			ModRM:             true,
			ModRMmod:          5,
		},
		Parameters: []*Parameter{ParamR32, ParamM512},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"ENQCMD"},
	}
	ENQCMD_R64_M512 = &Instruction{
		Mnemonic: "enqcmd",
		UID:      "ENQCMD_R64_M512",
		Syntax:   "ENQCMD r32/r64, m512",
		Encoding: &Encoding{
			Syntax:            "F2 0F 38 F8 !(11):rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x38, 0xf8},
			ModRM:             true,
			ModRMmod:          5,
		},
		Parameters: []*Parameter{ParamR64, ParamM512},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	ENQCMDS_R32_M512 = &Instruction{
		Mnemonic: "enqcmds",
		UID:      "ENQCMDS_R32_M512",
		Syntax:   "ENQCMDS r32, m512",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 F8 !(11):rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xf8},
			ModRM:             true,
			ModRMmod:          5,
		},
		Parameters: []*Parameter{ParamR32, ParamM512},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"ENQCMD"},
	}
	ENQCMDS_R64_M512 = &Instruction{
		Mnemonic: "enqcmds",
		UID:      "ENQCMDS_R64_M512",
		Syntax:   "ENQCMDS r32/r64, m512",
		Encoding: &Encoding{
			Syntax:            "F2 0F 38 F8 !(11):rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x38, 0xf8},
			ModRM:             true,
			ModRMmod:          5,
		},
		Parameters: []*Parameter{ParamR64, ParamM512},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	ENTER_Imm16u_Imm5u = &Instruction{
		Mnemonic: "enter",
		UID:      "ENTER_Imm16u_Imm5u",
		Syntax:   "ENTER imm16u, imm5u",
		Encoding: &Encoding{
			Syntax: "C8 iw ib",
			Opcode: []byte{0xc8},
		},
		Parameters: []*Parameter{ParamImm16u, ParamImm5u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	EXTRACTPS_Rmr32_XMM1_Imm8 = &Instruction{
		Mnemonic: "extractps",
		UID:      "EXTRACTPS_Rmr32_XMM1_Imm8",
		Syntax:   "EXTRACTPS r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 17 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x17},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	EXTRACTPS_M32_XMM1_Imm8 = &Instruction{
		Mnemonic: "extractps",
		UID:      "EXTRACTPS_M32_XMM1_Imm8",
		Syntax:   "EXTRACTPS r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 17 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x17},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	EXTRQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "extrq",
		UID:      "EXTRQ_XMM1_XMM2",
		Syntax:   "EXTRQ xmm1, xmm2",
		Encoding: &Encoding{
			Syntax:            "66 0F 79 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x79},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	EXTRQ_XMM2_Imm8_Imm8 = &Instruction{
		Mnemonic: "extrq",
		UID:      "EXTRQ_XMM2_Imm8_Imm8",
		Syntax:   "EXTRQ xmm2, imm8, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 78 /0 ib ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x78},
			ModRM:             true,
			ModRMreg:          1,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	F2XM1 = &Instruction{
		Mnemonic: "f2xm1",
		UID:      "F2XM1",
		Syntax:   "F2XM1",
		Encoding: &Encoding{
			Syntax: "D9 F0",
			Opcode: []byte{0xd9, 0xf0},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FABS = &Instruction{
		Mnemonic: "fabs",
		UID:      "FABS",
		Syntax:   "FABS",
		Encoding: &Encoding{
			Syntax: "D9 E1",
			Opcode: []byte{0xd9, 0xe1},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FADD_M32fp = &Instruction{
		Mnemonic: "fadd",
		UID:      "FADD_M32fp",
		Syntax:   "FADD m32fp",
		Encoding: &Encoding{
			Syntax:   "D8 /0",
			Opcode:   []byte{0xd8},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FADD_M64fp = &Instruction{
		Mnemonic: "fadd",
		UID:      "FADD_M64fp",
		Syntax:   "FADD m64fp",
		Encoding: &Encoding{
			Syntax:   "DC /0",
			Opcode:   []byte{0xdc},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FADD_ST_STi = &Instruction{
		Mnemonic: "fadd",
		UID:      "FADD_ST_STi",
		Syntax:   "FADD ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "D8 C0+i",
			Opcode:     []byte{0xd8, 0xc0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FADD_STi_ST = &Instruction{
		Mnemonic: "fadd",
		UID:      "FADD_STi_ST",
		Syntax:   "FADD ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DC C0+i",
			Opcode:     []byte{0xdc, 0xc0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FADDP = &Instruction{
		Mnemonic: "faddp",
		UID:      "FADDP",
		Syntax:   "FADDP",
		Encoding: &Encoding{
			Syntax: "DE C1",
			Opcode: []byte{0xde, 0xc1},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FADDP_STi_ST = &Instruction{
		Mnemonic: "faddp",
		UID:      "FADDP_STi_ST",
		Syntax:   "FADDP ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DE C0+i",
			Opcode:     []byte{0xde, 0xc0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FBLD_M80bcd = &Instruction{
		Mnemonic: "fbld",
		UID:      "FBLD_M80bcd",
		Syntax:   "FBLD m80bcd",
		Encoding: &Encoding{
			Syntax:   "DF /4",
			Opcode:   []byte{0xdf},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM80bcd},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FBSTP_M80bcd = &Instruction{
		Mnemonic: "fbstp",
		UID:      "FBSTP_M80bcd",
		Syntax:   "FBSTP m80bcd",
		Encoding: &Encoding{
			Syntax:   "DF /6",
			Opcode:   []byte{0xdf},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM80bcd},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCHS = &Instruction{
		Mnemonic: "fchs",
		UID:      "FCHS",
		Syntax:   "FCHS",
		Encoding: &Encoding{
			Syntax: "D9 E0",
			Opcode: []byte{0xd9, 0xe0},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FCLEX = &Instruction{
		Mnemonic: "fclex",
		UID:      "FCLEX",
		Syntax:   "FCLEX",
		Encoding: &Encoding{
			Syntax:        "9B DB E2",
			PrefixOpcodes: []byte{0x9b},
			Opcode:        []byte{0xdb, 0xe2},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FCMOVB_ST_STi = &Instruction{
		Mnemonic: "fcmovb",
		UID:      "FCMOVB_ST_STi",
		Syntax:   "FCMOVB ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DA C0+i",
			Opcode:     []byte{0xda, 0xc0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCMOVBE_ST_STi = &Instruction{
		Mnemonic: "fcmovbe",
		UID:      "FCMOVBE_ST_STi",
		Syntax:   "FCMOVBE ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DA D0+i",
			Opcode:     []byte{0xda, 0xd0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCMOVE_ST_STi = &Instruction{
		Mnemonic: "fcmove",
		UID:      "FCMOVE_ST_STi",
		Syntax:   "FCMOVE ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DA C8+i",
			Opcode:     []byte{0xda, 0xc8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCMOVNB_ST_STi = &Instruction{
		Mnemonic: "fcmovnb",
		UID:      "FCMOVNB_ST_STi",
		Syntax:   "FCMOVNB ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DB C0+i",
			Opcode:     []byte{0xdb, 0xc0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCMOVNBE_ST_STi = &Instruction{
		Mnemonic: "fcmovnbe",
		UID:      "FCMOVNBE_ST_STi",
		Syntax:   "FCMOVNBE ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DB D0+i",
			Opcode:     []byte{0xdb, 0xd0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCMOVNE_ST_STi = &Instruction{
		Mnemonic: "fcmovne",
		UID:      "FCMOVNE_ST_STi",
		Syntax:   "FCMOVNE ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DB C8+i",
			Opcode:     []byte{0xdb, 0xc8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCMOVNU_ST_STi = &Instruction{
		Mnemonic: "fcmovnu",
		UID:      "FCMOVNU_ST_STi",
		Syntax:   "FCMOVNU ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DB D8+i",
			Opcode:     []byte{0xdb, 0xd8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCMOVU_ST_STi = &Instruction{
		Mnemonic: "fcmovu",
		UID:      "FCMOVU_ST_STi",
		Syntax:   "FCMOVU ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DA D8+i",
			Opcode:     []byte{0xda, 0xd8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCOM = &Instruction{
		Mnemonic: "fcom",
		UID:      "FCOM",
		Syntax:   "FCOM",
		Encoding: &Encoding{
			Syntax: "D8 D1",
			Opcode: []byte{0xd8, 0xd1},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FCOM_STi = &Instruction{
		Mnemonic: "fcom",
		UID:      "FCOM_STi",
		Syntax:   "FCOM ST(i)",
		Encoding: &Encoding{
			Syntax:     "D8 D0+i",
			Opcode:     []byte{0xd8, 0xd0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCOM_M32fp = &Instruction{
		Mnemonic: "fcom",
		UID:      "FCOM_M32fp",
		Syntax:   "FCOM m32fp",
		Encoding: &Encoding{
			Syntax:   "D8 /2",
			Opcode:   []byte{0xd8},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FCOM_M64fp = &Instruction{
		Mnemonic: "fcom",
		UID:      "FCOM_M64fp",
		Syntax:   "FCOM m64fp",
		Encoding: &Encoding{
			Syntax:   "DC /2",
			Opcode:   []byte{0xdc},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FCOMI_ST_STi = &Instruction{
		Mnemonic: "fcomi",
		UID:      "FCOMI_ST_STi",
		Syntax:   "FCOMI ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DB F0+i",
			Opcode:     []byte{0xdb, 0xf0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCOMIP_ST_STi = &Instruction{
		Mnemonic: "fcomip",
		UID:      "FCOMIP_ST_STi",
		Syntax:   "FCOMIP ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DF F0+i",
			Opcode:     []byte{0xdf, 0xf0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCOMP = &Instruction{
		Mnemonic: "fcomp",
		UID:      "FCOMP",
		Syntax:   "FCOMP",
		Encoding: &Encoding{
			Syntax: "D8 D9",
			Opcode: []byte{0xd8, 0xd9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FCOMP_STi = &Instruction{
		Mnemonic: "fcomp",
		UID:      "FCOMP_STi",
		Syntax:   "FCOMP ST(i)",
		Encoding: &Encoding{
			Syntax:     "D8 D8+i",
			Opcode:     []byte{0xd8, 0xd8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FCOMP_M32fp = &Instruction{
		Mnemonic: "fcomp",
		UID:      "FCOMP_M32fp",
		Syntax:   "FCOMP m32fp",
		Encoding: &Encoding{
			Syntax:   "D8 /3",
			Opcode:   []byte{0xd8},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FCOMP_M64fp = &Instruction{
		Mnemonic: "fcomp",
		UID:      "FCOMP_M64fp",
		Syntax:   "FCOMP m64fp",
		Encoding: &Encoding{
			Syntax:   "DC /3",
			Opcode:   []byte{0xdc},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FCOMPP = &Instruction{
		Mnemonic: "fcompp",
		UID:      "FCOMPP",
		Syntax:   "FCOMPP",
		Encoding: &Encoding{
			Syntax: "DE D9",
			Opcode: []byte{0xde, 0xd9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FCOS = &Instruction{
		Mnemonic: "fcos",
		UID:      "FCOS",
		Syntax:   "FCOS",
		Encoding: &Encoding{
			Syntax: "D9 FF",
			Opcode: []byte{0xd9, 0xff},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FDECSTP = &Instruction{
		Mnemonic: "fdecstp",
		UID:      "FDECSTP",
		Syntax:   "FDECSTP",
		Encoding: &Encoding{
			Syntax: "D9 F6",
			Opcode: []byte{0xd9, 0xf6},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FDIV_M32fp = &Instruction{
		Mnemonic: "fdiv",
		UID:      "FDIV_M32fp",
		Syntax:   "FDIV m32fp",
		Encoding: &Encoding{
			Syntax:   "D8 /6",
			Opcode:   []byte{0xd8},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FDIV_M64fp = &Instruction{
		Mnemonic: "fdiv",
		UID:      "FDIV_M64fp",
		Syntax:   "FDIV m64fp",
		Encoding: &Encoding{
			Syntax:   "DC /6",
			Opcode:   []byte{0xdc},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FDIV_ST_STi = &Instruction{
		Mnemonic: "fdiv",
		UID:      "FDIV_ST_STi",
		Syntax:   "FDIV ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "D8 F0+i",
			Opcode:     []byte{0xd8, 0xf0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FDIV_STi_ST = &Instruction{
		Mnemonic: "fdiv",
		UID:      "FDIV_STi_ST",
		Syntax:   "FDIV ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DC F8+i",
			Opcode:     []byte{0xdc, 0xf8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FDIVP = &Instruction{
		Mnemonic: "fdivp",
		UID:      "FDIVP",
		Syntax:   "FDIVP",
		Encoding: &Encoding{
			Syntax: "DE F9",
			Opcode: []byte{0xde, 0xf9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FDIVP_STi_ST = &Instruction{
		Mnemonic: "fdivp",
		UID:      "FDIVP_STi_ST",
		Syntax:   "FDIVP ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DE F8+i",
			Opcode:     []byte{0xde, 0xf8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FDIVR_M32fp = &Instruction{
		Mnemonic: "fdivr",
		UID:      "FDIVR_M32fp",
		Syntax:   "FDIVR m32fp",
		Encoding: &Encoding{
			Syntax:   "D8 /7",
			Opcode:   []byte{0xd8},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FDIVR_M64fp = &Instruction{
		Mnemonic: "fdivr",
		UID:      "FDIVR_M64fp",
		Syntax:   "FDIVR m64fp",
		Encoding: &Encoding{
			Syntax:   "DC /7",
			Opcode:   []byte{0xdc},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FDIVR_ST_STi = &Instruction{
		Mnemonic: "fdivr",
		UID:      "FDIVR_ST_STi",
		Syntax:   "FDIVR ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "D8 F8+i",
			Opcode:     []byte{0xd8, 0xf8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FDIVR_STi_ST = &Instruction{
		Mnemonic: "fdivr",
		UID:      "FDIVR_STi_ST",
		Syntax:   "FDIVR ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DC F0+i",
			Opcode:     []byte{0xdc, 0xf0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FDIVRP = &Instruction{
		Mnemonic: "fdivrp",
		UID:      "FDIVRP",
		Syntax:   "FDIVRP",
		Encoding: &Encoding{
			Syntax: "DE F1",
			Opcode: []byte{0xde, 0xf1},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FDIVRP_STi_ST = &Instruction{
		Mnemonic: "fdivrp",
		UID:      "FDIVRP_STi_ST",
		Syntax:   "FDIVRP ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DE F0+i",
			Opcode:     []byte{0xde, 0xf0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FEMMS = &Instruction{
		Mnemonic: "femms",
		UID:      "FEMMS",
		Syntax:   "FEMMS",
		Encoding: &Encoding{
			Syntax: "0F 0E",
			Opcode: []byte{0x0f, 0x0e},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FFREE_STi = &Instruction{
		Mnemonic: "ffree",
		UID:      "FFREE_STi",
		Syntax:   "FFREE ST(i)",
		Encoding: &Encoding{
			Syntax:     "DD C0+i",
			Opcode:     []byte{0xdd, 0xc0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FFREEP_STi = &Instruction{
		Mnemonic: "ffreep",
		UID:      "FFREEP_STi",
		Syntax:   "FFREEP ST(i)",
		Encoding: &Encoding{
			Syntax:     "DF C0+i",
			Opcode:     []byte{0xdf, 0xc0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FIADD_M16int = &Instruction{
		Mnemonic: "fiadd",
		UID:      "FIADD_M16int",
		Syntax:   "FIADD m16int",
		Encoding: &Encoding{
			Syntax:   "DE /0",
			Opcode:   []byte{0xde},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FIADD_M32int = &Instruction{
		Mnemonic: "fiadd",
		UID:      "FIADD_M32int",
		Syntax:   "FIADD m32int",
		Encoding: &Encoding{
			Syntax:   "DA /0",
			Opcode:   []byte{0xda},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FICOM_M16int = &Instruction{
		Mnemonic: "ficom",
		UID:      "FICOM_M16int",
		Syntax:   "FICOM m16int",
		Encoding: &Encoding{
			Syntax:   "DE /2",
			Opcode:   []byte{0xde},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FICOM_M32int = &Instruction{
		Mnemonic: "ficom",
		UID:      "FICOM_M32int",
		Syntax:   "FICOM m32int",
		Encoding: &Encoding{
			Syntax:   "DA /2",
			Opcode:   []byte{0xda},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FICOMP_M16int = &Instruction{
		Mnemonic: "ficomp",
		UID:      "FICOMP_M16int",
		Syntax:   "FICOMP m16int",
		Encoding: &Encoding{
			Syntax:   "DE /3",
			Opcode:   []byte{0xde},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FICOMP_M32int = &Instruction{
		Mnemonic: "ficomp",
		UID:      "FICOMP_M32int",
		Syntax:   "FICOMP m32int",
		Encoding: &Encoding{
			Syntax:   "DA /3",
			Opcode:   []byte{0xda},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FIDIV_M16int = &Instruction{
		Mnemonic: "fidiv",
		UID:      "FIDIV_M16int",
		Syntax:   "FIDIV m16int",
		Encoding: &Encoding{
			Syntax:   "DE /6",
			Opcode:   []byte{0xde},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FIDIV_M32int = &Instruction{
		Mnemonic: "fidiv",
		UID:      "FIDIV_M32int",
		Syntax:   "FIDIV m32int",
		Encoding: &Encoding{
			Syntax:   "DA /6",
			Opcode:   []byte{0xda},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FIDIVR_M16int = &Instruction{
		Mnemonic: "fidivr",
		UID:      "FIDIVR_M16int",
		Syntax:   "FIDIVR m16int",
		Encoding: &Encoding{
			Syntax:   "DE /7",
			Opcode:   []byte{0xde},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FIDIVR_M32int = &Instruction{
		Mnemonic: "fidivr",
		UID:      "FIDIVR_M32int",
		Syntax:   "FIDIVR m32int",
		Encoding: &Encoding{
			Syntax:   "DA /7",
			Opcode:   []byte{0xda},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FILD_M16int = &Instruction{
		Mnemonic: "fild",
		UID:      "FILD_M16int",
		Syntax:   "FILD m16int",
		Encoding: &Encoding{
			Syntax:   "DF /0",
			Opcode:   []byte{0xdf},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FILD_M32int = &Instruction{
		Mnemonic: "fild",
		UID:      "FILD_M32int",
		Syntax:   "FILD m32int",
		Encoding: &Encoding{
			Syntax:   "DB /0",
			Opcode:   []byte{0xdb},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FILD_M64int = &Instruction{
		Mnemonic: "fild",
		UID:      "FILD_M64int",
		Syntax:   "FILD m64int",
		Encoding: &Encoding{
			Syntax:   "DF /5",
			Opcode:   []byte{0xdf},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM64int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FIMUL_M16int = &Instruction{
		Mnemonic: "fimul",
		UID:      "FIMUL_M16int",
		Syntax:   "FIMUL m16int",
		Encoding: &Encoding{
			Syntax:   "DE /1",
			Opcode:   []byte{0xde},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FIMUL_M32int = &Instruction{
		Mnemonic: "fimul",
		UID:      "FIMUL_M32int",
		Syntax:   "FIMUL m32int",
		Encoding: &Encoding{
			Syntax:   "DA /1",
			Opcode:   []byte{0xda},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FINCSTP = &Instruction{
		Mnemonic: "fincstp",
		UID:      "FINCSTP",
		Syntax:   "FINCSTP",
		Encoding: &Encoding{
			Syntax: "D9 F7",
			Opcode: []byte{0xd9, 0xf7},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FINIT = &Instruction{
		Mnemonic: "finit",
		UID:      "FINIT",
		Syntax:   "FINIT",
		Encoding: &Encoding{
			Syntax:        "9B DB E3",
			PrefixOpcodes: []byte{0x9b},
			Opcode:        []byte{0xdb, 0xe3},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FIST_M16int = &Instruction{
		Mnemonic: "fist",
		UID:      "FIST_M16int",
		Syntax:   "FIST m16int",
		Encoding: &Encoding{
			Syntax:   "DF /2",
			Opcode:   []byte{0xdf},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FIST_M32int = &Instruction{
		Mnemonic: "fist",
		UID:      "FIST_M32int",
		Syntax:   "FIST m32int",
		Encoding: &Encoding{
			Syntax:   "DB /2",
			Opcode:   []byte{0xdb},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FISTP_M16int = &Instruction{
		Mnemonic: "fistp",
		UID:      "FISTP_M16int",
		Syntax:   "FISTP m16int",
		Encoding: &Encoding{
			Syntax:   "DF /3",
			Opcode:   []byte{0xdf},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FISTP_M32int = &Instruction{
		Mnemonic: "fistp",
		UID:      "FISTP_M32int",
		Syntax:   "FISTP m32int",
		Encoding: &Encoding{
			Syntax:   "DB /3",
			Opcode:   []byte{0xdb},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FISTP_M64int = &Instruction{
		Mnemonic: "fistp",
		UID:      "FISTP_M64int",
		Syntax:   "FISTP m64int",
		Encoding: &Encoding{
			Syntax:   "DF /7",
			Opcode:   []byte{0xdf},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM64int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FISTTP_M16int = &Instruction{
		Mnemonic: "fisttp",
		UID:      "FISTTP_M16int",
		Syntax:   "FISTTP m16int",
		Encoding: &Encoding{
			Syntax:   "DF /1",
			Opcode:   []byte{0xdf},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FISTTP_M32int = &Instruction{
		Mnemonic: "fisttp",
		UID:      "FISTTP_M32int",
		Syntax:   "FISTTP m32int",
		Encoding: &Encoding{
			Syntax:   "DB /1",
			Opcode:   []byte{0xdb},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FISTTP_M64int = &Instruction{
		Mnemonic: "fisttp",
		UID:      "FISTTP_M64int",
		Syntax:   "FISTTP m64int",
		Encoding: &Encoding{
			Syntax:   "DD /1",
			Opcode:   []byte{0xdd},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM64int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FISUB_M16int = &Instruction{
		Mnemonic: "fisub",
		UID:      "FISUB_M16int",
		Syntax:   "FISUB m16int",
		Encoding: &Encoding{
			Syntax:   "DE /4",
			Opcode:   []byte{0xde},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FISUB_M32int = &Instruction{
		Mnemonic: "fisub",
		UID:      "FISUB_M32int",
		Syntax:   "FISUB m32int",
		Encoding: &Encoding{
			Syntax:   "DA /4",
			Opcode:   []byte{0xda},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FISUBR_M16int = &Instruction{
		Mnemonic: "fisubr",
		UID:      "FISUBR_M16int",
		Syntax:   "FISUBR m16int",
		Encoding: &Encoding{
			Syntax:   "DE /5",
			Opcode:   []byte{0xde},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM16int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FISUBR_M32int = &Instruction{
		Mnemonic: "fisubr",
		UID:      "FISUBR_M32int",
		Syntax:   "FISUBR m32int",
		Encoding: &Encoding{
			Syntax:   "DA /5",
			Opcode:   []byte{0xda},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM32int},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FLD_STi = &Instruction{
		Mnemonic: "fld",
		UID:      "FLD_STi",
		Syntax:   "FLD ST(i)",
		Encoding: &Encoding{
			Syntax:     "D9 C0+i",
			Opcode:     []byte{0xd9, 0xc0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FLD_M32fp = &Instruction{
		Mnemonic: "fld",
		UID:      "FLD_M32fp",
		Syntax:   "FLD m32fp",
		Encoding: &Encoding{
			Syntax:   "D9 /0",
			Opcode:   []byte{0xd9},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FLD_M64fp = &Instruction{
		Mnemonic: "fld",
		UID:      "FLD_M64fp",
		Syntax:   "FLD m64fp",
		Encoding: &Encoding{
			Syntax:   "DD /0",
			Opcode:   []byte{0xdd},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FLD_M80fp = &Instruction{
		Mnemonic: "fld",
		UID:      "FLD_M80fp",
		Syntax:   "FLD m80fp",
		Encoding: &Encoding{
			Syntax:   "DB /5",
			Opcode:   []byte{0xdb},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM80fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   80,
	}
	FLD1 = &Instruction{
		Mnemonic: "fld1",
		UID:      "FLD1",
		Syntax:   "FLD1",
		Encoding: &Encoding{
			Syntax: "D9 E8",
			Opcode: []byte{0xd9, 0xe8},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FLDCW_M2byte = &Instruction{
		Mnemonic: "fldcw",
		UID:      "FLDCW_M2byte",
		Syntax:   "FLDCW m2byte",
		Encoding: &Encoding{
			Syntax:   "D9 /5",
			Opcode:   []byte{0xd9},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM2byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FLDENV_M14l28byte = &Instruction{
		Mnemonic: "fldenv",
		UID:      "FLDENV_M14l28byte",
		Syntax:   "FLDENV m14/28byte",
		Encoding: &Encoding{
			Syntax:   "D9 /4",
			Opcode:   []byte{0xd9},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM14l28byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FLDL2E = &Instruction{
		Mnemonic: "fldl2e",
		UID:      "FLDL2E",
		Syntax:   "FLDL2E",
		Encoding: &Encoding{
			Syntax: "D9 EA",
			Opcode: []byte{0xd9, 0xea},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FLDL2T = &Instruction{
		Mnemonic: "fldl2t",
		UID:      "FLDL2T",
		Syntax:   "FLDL2T",
		Encoding: &Encoding{
			Syntax: "D9 E9",
			Opcode: []byte{0xd9, 0xe9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FLDLG2 = &Instruction{
		Mnemonic: "fldlg2",
		UID:      "FLDLG2",
		Syntax:   "FLDLG2",
		Encoding: &Encoding{
			Syntax: "D9 EC",
			Opcode: []byte{0xd9, 0xec},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FLDLN2 = &Instruction{
		Mnemonic: "fldln2",
		UID:      "FLDLN2",
		Syntax:   "FLDLN2",
		Encoding: &Encoding{
			Syntax: "D9 ED",
			Opcode: []byte{0xd9, 0xed},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FLDPI = &Instruction{
		Mnemonic: "fldpi",
		UID:      "FLDPI",
		Syntax:   "FLDPI",
		Encoding: &Encoding{
			Syntax: "D9 EB",
			Opcode: []byte{0xd9, 0xeb},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FLDZ = &Instruction{
		Mnemonic: "fldz",
		UID:      "FLDZ",
		Syntax:   "FLDZ",
		Encoding: &Encoding{
			Syntax: "D9 EE",
			Opcode: []byte{0xd9, 0xee},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FMUL_M32fp = &Instruction{
		Mnemonic: "fmul",
		UID:      "FMUL_M32fp",
		Syntax:   "FMUL m32fp",
		Encoding: &Encoding{
			Syntax:   "D8 /1",
			Opcode:   []byte{0xd8},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FMUL_M64fp = &Instruction{
		Mnemonic: "fmul",
		UID:      "FMUL_M64fp",
		Syntax:   "FMUL m64fp",
		Encoding: &Encoding{
			Syntax:   "DC /1",
			Opcode:   []byte{0xdc},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FMUL_ST_STi = &Instruction{
		Mnemonic: "fmul",
		UID:      "FMUL_ST_STi",
		Syntax:   "FMUL ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "D8 C8+i",
			Opcode:     []byte{0xd8, 0xc8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FMUL_STi_ST = &Instruction{
		Mnemonic: "fmul",
		UID:      "FMUL_STi_ST",
		Syntax:   "FMUL ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DC C8+i",
			Opcode:     []byte{0xdc, 0xc8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FMULP = &Instruction{
		Mnemonic: "fmulp",
		UID:      "FMULP",
		Syntax:   "FMULP",
		Encoding: &Encoding{
			Syntax: "DE C9",
			Opcode: []byte{0xde, 0xc9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FMULP_STi_ST = &Instruction{
		Mnemonic: "fmulp",
		UID:      "FMULP_STi_ST",
		Syntax:   "FMULP ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DE C8+i",
			Opcode:     []byte{0xde, 0xc8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FNCLEX = &Instruction{
		Mnemonic: "fnclex",
		UID:      "FNCLEX",
		Syntax:   "FNCLEX",
		Encoding: &Encoding{
			Syntax: "DB E2",
			Opcode: []byte{0xdb, 0xe2},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FNINIT = &Instruction{
		Mnemonic: "fninit",
		UID:      "FNINIT",
		Syntax:   "FNINIT",
		Encoding: &Encoding{
			Syntax: "DB E3",
			Opcode: []byte{0xdb, 0xe3},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FNOP = &Instruction{
		Mnemonic: "fnop",
		UID:      "FNOP",
		Syntax:   "FNOP",
		Encoding: &Encoding{
			Syntax: "D9 D0",
			Opcode: []byte{0xd9, 0xd0},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FNSAVE_M94l108byte = &Instruction{
		Mnemonic: "fnsave",
		UID:      "FNSAVE_M94l108byte",
		Syntax:   "FNSAVE m94/108byte",
		Encoding: &Encoding{
			Syntax:   "DD /6",
			Opcode:   []byte{0xdd},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM94l108byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FNSTCW_M2byte = &Instruction{
		Mnemonic: "fnstcw",
		UID:      "FNSTCW_M2byte",
		Syntax:   "FNSTCW m2byte",
		Encoding: &Encoding{
			Syntax:   "D9 /7",
			Opcode:   []byte{0xd9},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM2byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FNSTENV_M14l28byte = &Instruction{
		Mnemonic: "fnstenv",
		UID:      "FNSTENV_M14l28byte",
		Syntax:   "FNSTENV m14/28byte",
		Encoding: &Encoding{
			Syntax:   "D9 /6",
			Opcode:   []byte{0xd9},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM14l28byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FNSTSW_AX = &Instruction{
		Mnemonic: "fnstsw",
		UID:      "FNSTSW_AX",
		Syntax:   "FNSTSW AX",
		Encoding: &Encoding{
			Syntax: "DF E0",
			Opcode: []byte{0xdf, 0xe0},
		},
		Parameters: []*Parameter{ParamAX},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FNSTSW_M2byte = &Instruction{
		Mnemonic: "fnstsw",
		UID:      "FNSTSW_M2byte",
		Syntax:   "FNSTSW m2byte",
		Encoding: &Encoding{
			Syntax:   "DD /7",
			Opcode:   []byte{0xdd},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM2byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FPATAN = &Instruction{
		Mnemonic: "fpatan",
		UID:      "FPATAN",
		Syntax:   "FPATAN",
		Encoding: &Encoding{
			Syntax: "D9 F3",
			Opcode: []byte{0xd9, 0xf3},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FPREM = &Instruction{
		Mnemonic: "fprem",
		UID:      "FPREM",
		Syntax:   "FPREM",
		Encoding: &Encoding{
			Syntax: "D9 F8",
			Opcode: []byte{0xd9, 0xf8},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FPREM1 = &Instruction{
		Mnemonic: "fprem1",
		UID:      "FPREM1",
		Syntax:   "FPREM1",
		Encoding: &Encoding{
			Syntax: "D9 F5",
			Opcode: []byte{0xd9, 0xf5},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FPTAN = &Instruction{
		Mnemonic: "fptan",
		UID:      "FPTAN",
		Syntax:   "FPTAN",
		Encoding: &Encoding{
			Syntax: "D9 F2",
			Opcode: []byte{0xd9, 0xf2},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FRNDINT = &Instruction{
		Mnemonic: "frndint",
		UID:      "FRNDINT",
		Syntax:   "FRNDINT",
		Encoding: &Encoding{
			Syntax: "D9 FC",
			Opcode: []byte{0xd9, 0xfc},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FRSTOR_M94l108byte = &Instruction{
		Mnemonic: "frstor",
		UID:      "FRSTOR_M94l108byte",
		Syntax:   "FRSTOR m94/108byte",
		Encoding: &Encoding{
			Syntax:   "DD /4",
			Opcode:   []byte{0xdd},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM94l108byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSAVE_M94l108byte = &Instruction{
		Mnemonic: "fsave",
		UID:      "FSAVE_M94l108byte",
		Syntax:   "FSAVE m94/108byte",
		Encoding: &Encoding{
			Syntax:        "9B DD /6",
			PrefixOpcodes: []byte{0x9b},
			Opcode:        []byte{0xdd},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters: []*Parameter{ParamM94l108byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSCALE = &Instruction{
		Mnemonic: "fscale",
		UID:      "FSCALE",
		Syntax:   "FSCALE",
		Encoding: &Encoding{
			Syntax: "D9 FD",
			Opcode: []byte{0xd9, 0xfd},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FSIN = &Instruction{
		Mnemonic: "fsin",
		UID:      "FSIN",
		Syntax:   "FSIN",
		Encoding: &Encoding{
			Syntax: "D9 FE",
			Opcode: []byte{0xd9, 0xfe},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FSINCOS = &Instruction{
		Mnemonic: "fsincos",
		UID:      "FSINCOS",
		Syntax:   "FSINCOS",
		Encoding: &Encoding{
			Syntax: "D9 FB",
			Opcode: []byte{0xd9, 0xfb},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FSQRT = &Instruction{
		Mnemonic: "fsqrt",
		UID:      "FSQRT",
		Syntax:   "FSQRT",
		Encoding: &Encoding{
			Syntax: "D9 FA",
			Opcode: []byte{0xd9, 0xfa},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FST_STi = &Instruction{
		Mnemonic: "fst",
		UID:      "FST_STi",
		Syntax:   "FST ST(i)",
		Encoding: &Encoding{
			Syntax:     "DD D0+i",
			Opcode:     []byte{0xdd, 0xd0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FST_M32fp = &Instruction{
		Mnemonic: "fst",
		UID:      "FST_M32fp",
		Syntax:   "FST m32fp",
		Encoding: &Encoding{
			Syntax:   "D9 /2",
			Opcode:   []byte{0xd9},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FST_M64fp = &Instruction{
		Mnemonic: "fst",
		UID:      "FST_M64fp",
		Syntax:   "FST m64fp",
		Encoding: &Encoding{
			Syntax:   "DD /2",
			Opcode:   []byte{0xdd},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FSTCW_M2byte = &Instruction{
		Mnemonic: "fstcw",
		UID:      "FSTCW_M2byte",
		Syntax:   "FSTCW m2byte",
		Encoding: &Encoding{
			Syntax:        "9B D9 /7",
			PrefixOpcodes: []byte{0x9b},
			Opcode:        []byte{0xd9},
			ModRM:         true,
			ModRMreg:      8,
		},
		Parameters: []*Parameter{ParamM2byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSTENV_M14l28byte = &Instruction{
		Mnemonic: "fstenv",
		UID:      "FSTENV_M14l28byte",
		Syntax:   "FSTENV m14/28byte",
		Encoding: &Encoding{
			Syntax:        "9B D9 /6",
			PrefixOpcodes: []byte{0x9b},
			Opcode:        []byte{0xd9},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters: []*Parameter{ParamM14l28byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSTP_STi = &Instruction{
		Mnemonic: "fstp",
		UID:      "FSTP_STi",
		Syntax:   "FSTP ST(i)",
		Encoding: &Encoding{
			Syntax:     "DD D8+i",
			Opcode:     []byte{0xdd, 0xd8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSTP_M32fp = &Instruction{
		Mnemonic: "fstp",
		UID:      "FSTP_M32fp",
		Syntax:   "FSTP m32fp",
		Encoding: &Encoding{
			Syntax:   "D9 /3",
			Opcode:   []byte{0xd9},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FSTP_M64fp = &Instruction{
		Mnemonic: "fstp",
		UID:      "FSTP_M64fp",
		Syntax:   "FSTP m64fp",
		Encoding: &Encoding{
			Syntax:   "DD /3",
			Opcode:   []byte{0xdd},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FSTP_M80fp = &Instruction{
		Mnemonic: "fstp",
		UID:      "FSTP_M80fp",
		Syntax:   "FSTP m80fp",
		Encoding: &Encoding{
			Syntax:   "DB /7",
			Opcode:   []byte{0xdb},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM80fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   80,
	}
	FSTSW_AX = &Instruction{
		Mnemonic: "fstsw",
		UID:      "FSTSW_AX",
		Syntax:   "FSTSW AX",
		Encoding: &Encoding{
			Syntax:        "9B DF E0",
			PrefixOpcodes: []byte{0x9b},
			Opcode:        []byte{0xdf, 0xe0},
		},
		Parameters: []*Parameter{ParamAX},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSTSW_M2byte = &Instruction{
		Mnemonic: "fstsw",
		UID:      "FSTSW_M2byte",
		Syntax:   "FSTSW m2byte",
		Encoding: &Encoding{
			Syntax:        "9B DD /7",
			PrefixOpcodes: []byte{0x9b},
			Opcode:        []byte{0xdd},
			ModRM:         true,
			ModRMreg:      8,
		},
		Parameters: []*Parameter{ParamM2byte},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSUB_M32fp = &Instruction{
		Mnemonic: "fsub",
		UID:      "FSUB_M32fp",
		Syntax:   "FSUB m32fp",
		Encoding: &Encoding{
			Syntax:   "D8 /4",
			Opcode:   []byte{0xd8},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FSUB_M64fp = &Instruction{
		Mnemonic: "fsub",
		UID:      "FSUB_M64fp",
		Syntax:   "FSUB m64fp",
		Encoding: &Encoding{
			Syntax:   "DC /4",
			Opcode:   []byte{0xdc},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FSUB_ST_STi = &Instruction{
		Mnemonic: "fsub",
		UID:      "FSUB_ST_STi",
		Syntax:   "FSUB ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "D8 E0+i",
			Opcode:     []byte{0xd8, 0xe0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSUB_STi_ST = &Instruction{
		Mnemonic: "fsub",
		UID:      "FSUB_STi_ST",
		Syntax:   "FSUB ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DC E8+i",
			Opcode:     []byte{0xdc, 0xe8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSUBP = &Instruction{
		Mnemonic: "fsubp",
		UID:      "FSUBP",
		Syntax:   "FSUBP",
		Encoding: &Encoding{
			Syntax: "DE E9",
			Opcode: []byte{0xde, 0xe9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FSUBP_STi_ST = &Instruction{
		Mnemonic: "fsubp",
		UID:      "FSUBP_STi_ST",
		Syntax:   "FSUBP ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DE E8+i",
			Opcode:     []byte{0xde, 0xe8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSUBR_M32fp = &Instruction{
		Mnemonic: "fsubr",
		UID:      "FSUBR_M32fp",
		Syntax:   "FSUBR m32fp",
		Encoding: &Encoding{
			Syntax:   "D8 /5",
			Opcode:   []byte{0xd8},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM32fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	FSUBR_M64fp = &Instruction{
		Mnemonic: "fsubr",
		UID:      "FSUBR_M64fp",
		Syntax:   "FSUBR m64fp",
		Encoding: &Encoding{
			Syntax:   "DC /5",
			Opcode:   []byte{0xdc},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM64fp},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   64,
	}
	FSUBR_ST_STi = &Instruction{
		Mnemonic: "fsubr",
		UID:      "FSUBR_ST_STi",
		Syntax:   "FSUBR ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "D8 E8+i",
			Opcode:     []byte{0xd8, 0xe8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSUBR_STi_ST = &Instruction{
		Mnemonic: "fsubr",
		UID:      "FSUBR_STi_ST",
		Syntax:   "FSUBR ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DC E0+i",
			Opcode:     []byte{0xdc, 0xe0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FSUBRP = &Instruction{
		Mnemonic: "fsubrp",
		UID:      "FSUBRP",
		Syntax:   "FSUBRP",
		Encoding: &Encoding{
			Syntax: "DE E1",
			Opcode: []byte{0xde, 0xe1},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FSUBRP_STi_ST = &Instruction{
		Mnemonic: "fsubrp",
		UID:      "FSUBRP_STi_ST",
		Syntax:   "FSUBRP ST(i), ST(0)",
		Encoding: &Encoding{
			Syntax:     "DE E0+i",
			Opcode:     []byte{0xde, 0xe0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi, ParamST},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FTST = &Instruction{
		Mnemonic: "ftst",
		UID:      "FTST",
		Syntax:   "FTST",
		Encoding: &Encoding{
			Syntax: "D9 E4",
			Opcode: []byte{0xd9, 0xe4},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FUCOM = &Instruction{
		Mnemonic: "fucom",
		UID:      "FUCOM",
		Syntax:   "FUCOM",
		Encoding: &Encoding{
			Syntax: "DD E1",
			Opcode: []byte{0xdd, 0xe1},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FUCOM_STi = &Instruction{
		Mnemonic: "fucom",
		UID:      "FUCOM_STi",
		Syntax:   "FUCOM ST(i)",
		Encoding: &Encoding{
			Syntax:     "DD E0+i",
			Opcode:     []byte{0xdd, 0xe0},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FUCOMI_ST_STi = &Instruction{
		Mnemonic: "fucomi",
		UID:      "FUCOMI_ST_STi",
		Syntax:   "FUCOMI ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DB E8+i",
			Opcode:     []byte{0xdb, 0xe8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FUCOMIP_ST_STi = &Instruction{
		Mnemonic: "fucomip",
		UID:      "FUCOMIP_ST_STi",
		Syntax:   "FUCOMIP ST(0), ST(i)",
		Encoding: &Encoding{
			Syntax:     "DF E8+i",
			Opcode:     []byte{0xdf, 0xe8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamST, ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FUCOMP = &Instruction{
		Mnemonic: "fucomp",
		UID:      "FUCOMP",
		Syntax:   "FUCOMP",
		Encoding: &Encoding{
			Syntax: "DD E9",
			Opcode: []byte{0xdd, 0xe9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FUCOMP_STi = &Instruction{
		Mnemonic: "fucomp",
		UID:      "FUCOMP_STi",
		Syntax:   "FUCOMP ST(i)",
		Encoding: &Encoding{
			Syntax:     "DD E8+i",
			Opcode:     []byte{0xdd, 0xe8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FUCOMPP = &Instruction{
		Mnemonic: "fucompp",
		UID:      "FUCOMPP",
		Syntax:   "FUCOMPP",
		Encoding: &Encoding{
			Syntax: "DA E9",
			Opcode: []byte{0xda, 0xe9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FWAIT = &Instruction{
		Mnemonic: "fwait",
		UID:      "FWAIT",
		Syntax:   "FWAIT",
		Encoding: &Encoding{
			Syntax: "9B",
			Opcode: []byte{0x9b},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FXAM = &Instruction{
		Mnemonic: "fxam",
		UID:      "FXAM",
		Syntax:   "FXAM",
		Encoding: &Encoding{
			Syntax: "D9 E5",
			Opcode: []byte{0xd9, 0xe5},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FXCH = &Instruction{
		Mnemonic: "fxch",
		UID:      "FXCH",
		Syntax:   "FXCH",
		Encoding: &Encoding{
			Syntax: "D9 C9",
			Opcode: []byte{0xd9, 0xc9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FXCH_STi = &Instruction{
		Mnemonic: "fxch",
		UID:      "FXCH_STi",
		Syntax:   "FXCH ST(i)",
		Encoding: &Encoding{
			Syntax:     "D9 C8+i",
			Opcode:     []byte{0xd9, 0xc8},
			StackIndex: 2,
		},
		Parameters: []*Parameter{ParamSTi},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	FXRSTOR_M512byte = &Instruction{
		Mnemonic: "fxrstor",
		UID:      "FXRSTOR_M512byte",
		Syntax:   "FXRSTOR m512byte",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE /1",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      2,
		},
		Parameters:  []*Parameter{ParamM512byte},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	FXRSTOR64_M512byte_REX = &Instruction{
		Mnemonic: "fxrstor64",
		UID:      "FXRSTOR64_M512byte_REX",
		Syntax:   "FXRSTOR64 m512byte",
		Encoding: &Encoding{
			Syntax:        "NP REX.W 0F AE /1",
			NoVEXPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      2,
		},
		Parameters: []*Parameter{ParamM512byte},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	FXSAVE_M512byte = &Instruction{
		Mnemonic: "fxsave",
		UID:      "FXSAVE_M512byte",
		Syntax:   "FXSAVE m512byte",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE /0",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      1,
		},
		Parameters:  []*Parameter{ParamM512byte},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	FXSAVE64_M512byte_REX = &Instruction{
		Mnemonic: "fxsave64",
		UID:      "FXSAVE64_M512byte_REX",
		Syntax:   "FXSAVE64 m512byte",
		Encoding: &Encoding{
			Syntax:        "NP REX.W 0F AE /0",
			NoVEXPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      1,
		},
		Parameters: []*Parameter{ParamM512byte},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	FXTRACT = &Instruction{
		Mnemonic: "fxtract",
		UID:      "FXTRACT",
		Syntax:   "FXTRACT",
		Encoding: &Encoding{
			Syntax: "D9 F4",
			Opcode: []byte{0xd9, 0xf4},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FYL2X = &Instruction{
		Mnemonic: "fyl2x",
		UID:      "FYL2X",
		Syntax:   "FYL2X",
		Encoding: &Encoding{
			Syntax: "D9 F1",
			Opcode: []byte{0xd9, 0xf1},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	FYL2XP1 = &Instruction{
		Mnemonic: "fyl2xp1",
		UID:      "FYL2XP1",
		Syntax:   "FYL2XP1",
		Encoding: &Encoding{
			Syntax: "D9 F9",
			Opcode: []byte{0xd9, 0xf9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	GETSEC = &Instruction{
		Mnemonic: "getsec",
		UID:      "GETSEC",
		Syntax:   "GETSEC",
		Encoding: &Encoding{
			Syntax:        "NP 0F 37",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x37},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	GF2P8AFFINEINVQB_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "gf2p8affineinvqb",
		UID:      "GF2P8AFFINEINVQB_XMM1_XMM2_Imm8",
		Syntax:   "GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A CF /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0xcf},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"GFNI"},
	}
	GF2P8AFFINEINVQB_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "gf2p8affineinvqb",
		UID:      "GF2P8AFFINEINVQB_XMM1_M128_Imm8",
		Syntax:   "GF2P8AFFINEINVQB xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A CF /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0xcf},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"GFNI"},
	}
	GF2P8AFFINEQB_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "gf2p8affineqb",
		UID:      "GF2P8AFFINEQB_XMM1_XMM2_Imm8",
		Syntax:   "GF2P8AFFINEQB xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A CE /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0xce},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"GFNI"},
	}
	GF2P8AFFINEQB_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "gf2p8affineqb",
		UID:      "GF2P8AFFINEQB_XMM1_M128_Imm8",
		Syntax:   "GF2P8AFFINEQB xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A CE /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0xce},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"GFNI"},
	}
	GF2P8MULB_XMM1_XMM2 = &Instruction{
		Mnemonic: "gf2p8mulb",
		UID:      "GF2P8MULB_XMM1_XMM2",
		Syntax:   "GF2P8MULB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 CF /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xcf},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"GFNI"},
	}
	GF2P8MULB_XMM1_M128 = &Instruction{
		Mnemonic: "gf2p8mulb",
		UID:      "GF2P8MULB_XMM1_M128",
		Syntax:   "GF2P8MULB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 CF /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xcf},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"GFNI"},
	}
	HADDPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "haddpd",
		UID:      "HADDPD_XMM1_XMM2",
		Syntax:   "HADDPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 7C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x7c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	HADDPD_XMM1_M128 = &Instruction{
		Mnemonic: "haddpd",
		UID:      "HADDPD_XMM1_M128",
		Syntax:   "HADDPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 7C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x7c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	HADDPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "haddps",
		UID:      "HADDPS_XMM1_XMM2",
		Syntax:   "HADDPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F2 0F 7C /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x7c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	HADDPS_XMM1_M128 = &Instruction{
		Mnemonic: "haddps",
		UID:      "HADDPS_XMM1_M128",
		Syntax:   "HADDPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F2 0F 7C /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x7c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	HLT = &Instruction{
		Mnemonic: "hlt",
		UID:      "HLT",
		Syntax:   "HLT",
		Encoding: &Encoding{
			Syntax: "F4",
			Opcode: []byte{0xf4},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	HRESET_Imm8 = &Instruction{
		Mnemonic: "hreset",
		UID:      "HRESET_Imm8",
		Syntax:   "HRESET imm8",
		Encoding: &Encoding{
			Syntax:            "F3 0F 3A F0 C0 ib",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x3a, 0xf0, 0xc0},
		},
		Parameters: []*Parameter{ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"HRESET"},
	}
	HSUBPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "hsubpd",
		UID:      "HSUBPD_XMM1_XMM2",
		Syntax:   "HSUBPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 7D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x7d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	HSUBPD_XMM1_M128 = &Instruction{
		Mnemonic: "hsubpd",
		UID:      "HSUBPD_XMM1_M128",
		Syntax:   "HSUBPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 7D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x7d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	HSUBPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "hsubps",
		UID:      "HSUBPS_XMM1_XMM2",
		Syntax:   "HSUBPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F2 0F 7D /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x7d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	HSUBPS_XMM1_M128 = &Instruction{
		Mnemonic: "hsubps",
		UID:      "HSUBPS_XMM1_M128",
		Syntax:   "HSUBPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F2 0F 7D /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x7d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	IDIV_Rmr8 = &Instruction{
		Mnemonic: "idiv",
		UID:      "IDIV_Rmr8",
		Syntax:   "IDIV r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /7",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	IDIV_Rmr16 = &Instruction{
		Mnemonic: "idiv",
		UID:      "IDIV_Rmr16",
		Syntax:   "IDIV r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /7",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IDIV_Rmr32 = &Instruction{
		Mnemonic: "idiv",
		UID:      "IDIV_Rmr32",
		Syntax:   "IDIV r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /7",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IDIV_Rmr64_REX = &Instruction{
		Mnemonic: "idiv",
		UID:      "IDIV_Rmr64_REX",
		Syntax:   "IDIV r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /7",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	IDIV_M8 = &Instruction{
		Mnemonic: "idiv",
		UID:      "IDIV_M8",
		Syntax:   "IDIV r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /7",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	IDIV_M16 = &Instruction{
		Mnemonic: "idiv",
		UID:      "IDIV_M16",
		Syntax:   "IDIV r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /7",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IDIV_M32 = &Instruction{
		Mnemonic: "idiv",
		UID:      "IDIV_M32",
		Syntax:   "IDIV r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /7",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IDIV_M64_REX = &Instruction{
		Mnemonic: "idiv",
		UID:      "IDIV_M64_REX",
		Syntax:   "IDIV r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /7",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	IMUL_Rmr8 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_Rmr8",
		Syntax:   "IMUL r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /5",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	IMUL_Rmr16 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_Rmr16",
		Syntax:   "IMUL r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /5",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IMUL_Rmr32 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_Rmr32",
		Syntax:   "IMUL r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /5",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IMUL_Rmr64_REX = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_Rmr64_REX",
		Syntax:   "IMUL r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /5",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	IMUL_M8 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_M8",
		Syntax:   "IMUL r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /5",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	IMUL_M16 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_M16",
		Syntax:   "IMUL r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /5",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IMUL_M32 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_M32",
		Syntax:   "IMUL r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /5",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IMUL_M64_REX = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_M64_REX",
		Syntax:   "IMUL r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /5",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	IMUL_R16_Rmr16 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R16_Rmr16",
		Syntax:   "IMUL r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F AF /r",
			Opcode: []byte{0x0f, 0xaf},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IMUL_R16_M16 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R16_M16",
		Syntax:   "IMUL r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F AF /r",
			Opcode: []byte{0x0f, 0xaf},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IMUL_R32_Rmr32 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R32_Rmr32",
		Syntax:   "IMUL r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F AF /r",
			Opcode: []byte{0x0f, 0xaf},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IMUL_R32_M32 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R32_M32",
		Syntax:   "IMUL r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F AF /r",
			Opcode: []byte{0x0f, 0xaf},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IMUL_R64_Rmr64_REX = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R64_Rmr64_REX",
		Syntax:   "IMUL r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F AF /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xaf},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	IMUL_R64_M64_REX = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R64_M64_REX",
		Syntax:   "IMUL r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F AF /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xaf},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	IMUL_R16_Rmr16_Imm8 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R16_Rmr16_Imm8",
		Syntax:   "IMUL r16, r/m16, imm8",
		Encoding: &Encoding{
			Syntax: "6B /r ib",
			Opcode: []byte{0x6b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IMUL_R16_Rmr16_Imm16 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R16_Rmr16_Imm16",
		Syntax:   "IMUL r16, r/m16, imm16",
		Encoding: &Encoding{
			Syntax: "69 /r iw",
			Opcode: []byte{0x69},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IMUL_R16_M16_Imm8 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R16_M16_Imm8",
		Syntax:   "IMUL r16, r/m16, imm8",
		Encoding: &Encoding{
			Syntax: "6B /r ib",
			Opcode: []byte{0x6b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IMUL_R16_M16_Imm16 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R16_M16_Imm16",
		Syntax:   "IMUL r16, r/m16, imm16",
		Encoding: &Encoding{
			Syntax: "69 /r iw",
			Opcode: []byte{0x69},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IMUL_R32_Rmr32_Imm8 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R32_Rmr32_Imm8",
		Syntax:   "IMUL r32, r/m32, imm8",
		Encoding: &Encoding{
			Syntax: "6B /r ib",
			Opcode: []byte{0x6b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IMUL_R32_Rmr32_Imm32 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R32_Rmr32_Imm32",
		Syntax:   "IMUL r32, r/m32, imm32",
		Encoding: &Encoding{
			Syntax: "69 /r id",
			Opcode: []byte{0x69},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IMUL_R32_M32_Imm8 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R32_M32_Imm8",
		Syntax:   "IMUL r32, r/m32, imm8",
		Encoding: &Encoding{
			Syntax: "6B /r ib",
			Opcode: []byte{0x6b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IMUL_R32_M32_Imm32 = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R32_M32_Imm32",
		Syntax:   "IMUL r32, r/m32, imm32",
		Encoding: &Encoding{
			Syntax: "69 /r id",
			Opcode: []byte{0x69},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IMUL_R64_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R64_Rmr64_Imm8_REX",
		Syntax:   "IMUL r64, r/m64, imm8",
		Encoding: &Encoding{
			Syntax: "REX.W 6B /r ib",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x6b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	IMUL_R64_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R64_Rmr64_Imm32_REX",
		Syntax:   "IMUL r64, r/m64, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W 69 /r id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x69},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	IMUL_R64_M64_Imm8_REX = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R64_M64_Imm8_REX",
		Syntax:   "IMUL r64, r/m64, imm8",
		Encoding: &Encoding{
			Syntax: "REX.W 6B /r ib",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x6b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	IMUL_R64_M64_Imm32_REX = &Instruction{
		Mnemonic: "imul",
		UID:      "IMUL_R64_M64_Imm32_REX",
		Syntax:   "IMUL r64, r/m64, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W 69 /r id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x69},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	IN_AL_DX = &Instruction{
		Mnemonic: "in",
		UID:      "IN_AL_DX",
		Syntax:   "IN AL, DX",
		Encoding: &Encoding{
			Syntax: "EC",
			Opcode: []byte{0xec},
		},
		Parameters: []*Parameter{ParamAL, ParamDX},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	IN_AL_Imm8u = &Instruction{
		Mnemonic: "in",
		UID:      "IN_AL_Imm8u",
		Syntax:   "IN AL, imm8u",
		Encoding: &Encoding{
			Syntax: "E4 ib",
			Opcode: []byte{0xe4},
		},
		Parameters: []*Parameter{ParamAL, ParamImm8u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	IN_AX_DX = &Instruction{
		Mnemonic: "in",
		UID:      "IN_AX_DX",
		Syntax:   "IN AX, DX",
		Encoding: &Encoding{
			Syntax: "ED",
			Opcode: []byte{0xed},
		},
		Parameters:  []*Parameter{ParamAX, ParamDX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IN_AX_Imm8u = &Instruction{
		Mnemonic: "in",
		UID:      "IN_AX_Imm8u",
		Syntax:   "IN AX, imm8u",
		Encoding: &Encoding{
			Syntax: "E5 ib",
			Opcode: []byte{0xe5},
		},
		Parameters:  []*Parameter{ParamAX, ParamImm8u},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IN_EAX_DX = &Instruction{
		Mnemonic: "in",
		UID:      "IN_EAX_DX",
		Syntax:   "IN EAX, DX",
		Encoding: &Encoding{
			Syntax: "ED",
			Opcode: []byte{0xed},
		},
		Parameters:  []*Parameter{ParamEAX, ParamDX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IN_EAX_Imm8u = &Instruction{
		Mnemonic: "in",
		UID:      "IN_EAX_Imm8u",
		Syntax:   "IN EAX, imm8u",
		Encoding: &Encoding{
			Syntax: "E5 ib",
			Opcode: []byte{0xe5},
		},
		Parameters:  []*Parameter{ParamEAX, ParamImm8u},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	INC_Rmr8 = &Instruction{
		Mnemonic: "inc",
		UID:      "INC_Rmr8",
		Syntax:   "INC r/m8",
		Encoding: &Encoding{
			Syntax:   "FE /0",
			Opcode:   []byte{0xfe},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	INC_Rmr16 = &Instruction{
		Mnemonic: "inc",
		UID:      "INC_Rmr16",
		Syntax:   "INC r/m16",
		Encoding: &Encoding{
			Syntax:   "FF /0",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	INC_Rmr32 = &Instruction{
		Mnemonic: "inc",
		UID:      "INC_Rmr32",
		Syntax:   "INC r/m32",
		Encoding: &Encoding{
			Syntax:   "FF /0",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	INC_Rmr64_REX = &Instruction{
		Mnemonic: "inc",
		UID:      "INC_Rmr64_REX",
		Syntax:   "INC r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W FF /0",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	INC_R16op = &Instruction{
		Mnemonic: "inc",
		UID:      "INC_R16op",
		Syntax:   "INC r16op",
		Encoding: &Encoding{
			Syntax:           "40+rw",
			Opcode:           []byte{0x40},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR16op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	INC_R32op = &Instruction{
		Mnemonic: "inc",
		UID:      "INC_R32op",
		Syntax:   "INC r32op",
		Encoding: &Encoding{
			Syntax:           "40+rd",
			Opcode:           []byte{0x40},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR32op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	INC_M8 = &Instruction{
		Mnemonic: "inc",
		UID:      "INC_M8",
		Syntax:   "INC r/m8",
		Encoding: &Encoding{
			Syntax:   "FE /0",
			Opcode:   []byte{0xfe},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	INC_M16 = &Instruction{
		Mnemonic: "inc",
		UID:      "INC_M16",
		Syntax:   "INC r/m16",
		Encoding: &Encoding{
			Syntax:   "FF /0",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	INC_M32 = &Instruction{
		Mnemonic: "inc",
		UID:      "INC_M32",
		Syntax:   "INC r/m32",
		Encoding: &Encoding{
			Syntax:   "FF /0",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	INC_M64_REX = &Instruction{
		Mnemonic: "inc",
		UID:      "INC_M64_REX",
		Syntax:   "INC r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W FF /0",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	INCSSPD_Rmr32 = &Instruction{
		Mnemonic: "incsspd",
		UID:      "INCSSPD_Rmr32",
		Syntax:   "INCSSPD rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /5",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          6,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"CET_SS"},
		OperandSize: true,
	}
	INCSSPQ_Rmr64_REX = &Instruction{
		Mnemonic: "incsspq",
		UID:      "INCSSPQ_Rmr64_REX",
		Syntax:   "INCSSPQ rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F AE /5",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          6,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"CET_SS"},
	}
	INS_StrDst8_DX = &Instruction{
		Mnemonic: "ins",
		UID:      "INS_StrDst8_DX",
		Syntax:   "INS [es:edi:8], DX",
		Encoding: &Encoding{
			Syntax: "6C",
			Opcode: []byte{0x6c},
		},
		Parameters:  []*Parameter{ParamStrDst8, ParamDX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	INS_StrDst16_DX = &Instruction{
		Mnemonic: "ins",
		UID:      "INS_StrDst16_DX",
		Syntax:   "INS [es:edi:16], DX",
		Encoding: &Encoding{
			Syntax: "6D",
			Opcode: []byte{0x6d},
		},
		Parameters:  []*Parameter{ParamStrDst16, ParamDX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	INS_StrDst32_DX = &Instruction{
		Mnemonic: "ins",
		UID:      "INS_StrDst32_DX",
		Syntax:   "INS [es:edi:32], DX",
		Encoding: &Encoding{
			Syntax: "6D",
			Opcode: []byte{0x6d},
		},
		Parameters:  []*Parameter{ParamStrDst32, ParamDX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	INSB = &Instruction{
		Mnemonic: "insb",
		UID:      "INSB",
		Syntax:   "INSB",
		Encoding: &Encoding{
			Syntax: "6C",
			Opcode: []byte{0x6c},
		},
		Mode16:   true,
		Mode32:   true,
		Mode64:   true,
		DataSize: 8,
	}
	INSB_StrDst8_DX = &Instruction{
		Mnemonic: "insb",
		UID:      "INSB_StrDst8_DX",
		Syntax:   "INSB [es:edi:8], DX",
		Encoding: &Encoding{
			Syntax: "6C",
			Opcode: []byte{0x6c},
		},
		Parameters:  []*Parameter{ParamStrDst8, ParamDX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	INSD = &Instruction{
		Mnemonic: "insd",
		UID:      "INSD",
		Syntax:   "INSD",
		Encoding: &Encoding{
			Syntax: "6D",
			Opcode: []byte{0x6d},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	INSD_StrDst32_DX = &Instruction{
		Mnemonic: "insd",
		UID:      "INSD_StrDst32_DX",
		Syntax:   "INSD [es:edi:32], DX",
		Encoding: &Encoding{
			Syntax: "6D",
			Opcode: []byte{0x6d},
		},
		Parameters:  []*Parameter{ParamStrDst32, ParamDX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	INSERTPS_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "insertps",
		UID:      "INSERTPS_XMM1_XMM2_Imm8",
		Syntax:   "INSERTPS xmm1, xmm2/m32, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 21 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x21},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	INSERTPS_XMM1_M32_Imm8 = &Instruction{
		Mnemonic: "insertps",
		UID:      "INSERTPS_XMM1_M32_Imm8",
		Syntax:   "INSERTPS xmm1, xmm2/m32, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 21 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x21},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	INSW = &Instruction{
		Mnemonic: "insw",
		UID:      "INSW",
		Syntax:   "INSW",
		Encoding: &Encoding{
			Syntax: "6D",
			Opcode: []byte{0x6d},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	INSW_StrDst16_DX = &Instruction{
		Mnemonic: "insw",
		UID:      "INSW_StrDst16_DX",
		Syntax:   "INSW [es:edi:16], DX",
		Encoding: &Encoding{
			Syntax: "6D",
			Opcode: []byte{0x6d},
		},
		Parameters:  []*Parameter{ParamStrDst16, ParamDX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	INT_Imm8u = &Instruction{
		Mnemonic: "int",
		UID:      "INT_Imm8u",
		Syntax:   "INT imm8u",
		Encoding: &Encoding{
			Syntax: "CD ib",
			Opcode: []byte{0xcd},
		},
		Parameters: []*Parameter{ParamImm8u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	INT3 = &Instruction{
		Mnemonic: "int3",
		UID:      "INT3",
		Syntax:   "INT3",
		Encoding: &Encoding{
			Syntax: "CC",
			Opcode: []byte{0xcc},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	INTO = &Instruction{
		Mnemonic: "into",
		UID:      "INTO",
		Syntax:   "INTO",
		Encoding: &Encoding{
			Syntax: "CE",
			Opcode: []byte{0xce},
		},
		Mode16: true,
		Mode32: true,
		Mode64: false,
	}
	INVD = &Instruction{
		Mnemonic: "invd",
		UID:      "INVD",
		Syntax:   "INVD",
		Encoding: &Encoding{
			Syntax: "0F 08",
			Opcode: []byte{0x0f, 0x08},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"486"},
	}
	INVLPG_M = &Instruction{
		Mnemonic: "invlpg",
		UID:      "INVLPG_M",
		Syntax:   "INVLPG m",
		Encoding: &Encoding{
			Syntax:   "0F 01 /7",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"486"},
	}
	INVPCID_R32_M128 = &Instruction{
		Mnemonic: "invpcid",
		UID:      "INVPCID_R32_M128",
		Syntax:   "INVPCID r32, m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 82 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x82},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     false,
		CPUID:      []string{"INVPCID"},
	}
	INVPCID_R64_M128 = &Instruction{
		Mnemonic: "invpcid",
		UID:      "INVPCID_R64_M128",
		Syntax:   "INVPCID r64, m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 82 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x82},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM128},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"INVPCID"},
	}
	IRET = &Instruction{
		Mnemonic: "iret",
		UID:      "IRET",
		Syntax:   "IRET",
		Encoding: &Encoding{
			Syntax: "CF",
			Opcode: []byte{0xcf},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	IRETD = &Instruction{
		Mnemonic: "iretd",
		UID:      "IRETD",
		Syntax:   "IRETD",
		Encoding: &Encoding{
			Syntax: "CF",
			Opcode: []byte{0xcf},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	IRETQ_REX = &Instruction{
		Mnemonic: "iretq",
		UID:      "IRETQ_REX",
		Syntax:   "IRETQ",
		Encoding: &Encoding{
			Syntax: "REX.W CF",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xcf},
		},
		Mode16:   false,
		Mode32:   false,
		Mode64:   true,
		DataSize: 64,
	}
	JA_Rel8 = &Instruction{
		Mnemonic: "ja",
		UID:      "JA_Rel8",
		Syntax:   "JA rel8",
		Encoding: &Encoding{
			Syntax:     "77 cb",
			Opcode:     []byte{0x77},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JA_Rel16 = &Instruction{
		Mnemonic: "ja",
		UID:      "JA_Rel16",
		Syntax:   "JA rel16",
		Encoding: &Encoding{
			Syntax:     "0F 87 cw",
			Opcode:     []byte{0x0f, 0x87},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JA_Rel32 = &Instruction{
		Mnemonic: "ja",
		UID:      "JA_Rel32",
		Syntax:   "JA rel32",
		Encoding: &Encoding{
			Syntax:     "0F 87 cd",
			Opcode:     []byte{0x0f, 0x87},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JAE_Rel8 = &Instruction{
		Mnemonic: "jae",
		UID:      "JAE_Rel8",
		Syntax:   "JAE rel8",
		Encoding: &Encoding{
			Syntax:     "73 cb",
			Opcode:     []byte{0x73},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JAE_Rel16 = &Instruction{
		Mnemonic: "jae",
		UID:      "JAE_Rel16",
		Syntax:   "JAE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 83 cw",
			Opcode:     []byte{0x0f, 0x83},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JAE_Rel32 = &Instruction{
		Mnemonic: "jae",
		UID:      "JAE_Rel32",
		Syntax:   "JAE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 83 cd",
			Opcode:     []byte{0x0f, 0x83},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JB_Rel8 = &Instruction{
		Mnemonic: "jb",
		UID:      "JB_Rel8",
		Syntax:   "JB rel8",
		Encoding: &Encoding{
			Syntax:     "72 cb",
			Opcode:     []byte{0x72},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JB_Rel16 = &Instruction{
		Mnemonic: "jb",
		UID:      "JB_Rel16",
		Syntax:   "JB rel16",
		Encoding: &Encoding{
			Syntax:     "0F 82 cw",
			Opcode:     []byte{0x0f, 0x82},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JB_Rel32 = &Instruction{
		Mnemonic: "jb",
		UID:      "JB_Rel32",
		Syntax:   "JB rel32",
		Encoding: &Encoding{
			Syntax:     "0F 82 cd",
			Opcode:     []byte{0x0f, 0x82},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JBE_Rel8 = &Instruction{
		Mnemonic: "jbe",
		UID:      "JBE_Rel8",
		Syntax:   "JBE rel8",
		Encoding: &Encoding{
			Syntax:     "76 cb",
			Opcode:     []byte{0x76},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JBE_Rel16 = &Instruction{
		Mnemonic: "jbe",
		UID:      "JBE_Rel16",
		Syntax:   "JBE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 86 cw",
			Opcode:     []byte{0x0f, 0x86},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JBE_Rel32 = &Instruction{
		Mnemonic: "jbe",
		UID:      "JBE_Rel32",
		Syntax:   "JBE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 86 cd",
			Opcode:     []byte{0x0f, 0x86},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JC_Rel8 = &Instruction{
		Mnemonic: "jc",
		UID:      "JC_Rel8",
		Syntax:   "JC rel8",
		Encoding: &Encoding{
			Syntax:     "72 cb",
			Opcode:     []byte{0x72},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JC_Rel16 = &Instruction{
		Mnemonic: "jc",
		UID:      "JC_Rel16",
		Syntax:   "JC rel16",
		Encoding: &Encoding{
			Syntax:     "0F 82 cw",
			Opcode:     []byte{0x0f, 0x82},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JC_Rel32 = &Instruction{
		Mnemonic: "jc",
		UID:      "JC_Rel32",
		Syntax:   "JC rel32",
		Encoding: &Encoding{
			Syntax:     "0F 82 cd",
			Opcode:     []byte{0x0f, 0x82},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JCXZ_Rel8 = &Instruction{
		Mnemonic: "jcxz",
		UID:      "JCXZ_Rel8",
		Syntax:   "JCXZ rel8",
		Encoding: &Encoding{
			Syntax:     "E3 cb",
			Opcode:     []byte{0xe3},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		AddressSize: true,
		DataSize:    8,
	}
	JE_Rel8 = &Instruction{
		Mnemonic: "je",
		UID:      "JE_Rel8",
		Syntax:   "JE rel8",
		Encoding: &Encoding{
			Syntax:     "74 cb",
			Opcode:     []byte{0x74},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JE_Rel16 = &Instruction{
		Mnemonic: "je",
		UID:      "JE_Rel16",
		Syntax:   "JE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 84 cw",
			Opcode:     []byte{0x0f, 0x84},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JE_Rel32 = &Instruction{
		Mnemonic: "je",
		UID:      "JE_Rel32",
		Syntax:   "JE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 84 cd",
			Opcode:     []byte{0x0f, 0x84},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JECXZ_Rel8 = &Instruction{
		Mnemonic: "jecxz",
		UID:      "JECXZ_Rel8",
		Syntax:   "JECXZ rel8",
		Encoding: &Encoding{
			Syntax:     "E3 cb",
			Opcode:     []byte{0xe3},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel8},
		Mode16:      false,
		Mode32:      true,
		Mode64:      true,
		AddressSize: true,
		DataSize:    8,
	}
	JG_Rel8 = &Instruction{
		Mnemonic: "jg",
		UID:      "JG_Rel8",
		Syntax:   "JG rel8",
		Encoding: &Encoding{
			Syntax:     "7F cb",
			Opcode:     []byte{0x7f},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JG_Rel16 = &Instruction{
		Mnemonic: "jg",
		UID:      "JG_Rel16",
		Syntax:   "JG rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8F cw",
			Opcode:     []byte{0x0f, 0x8f},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JG_Rel32 = &Instruction{
		Mnemonic: "jg",
		UID:      "JG_Rel32",
		Syntax:   "JG rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8F cd",
			Opcode:     []byte{0x0f, 0x8f},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JGE_Rel8 = &Instruction{
		Mnemonic: "jge",
		UID:      "JGE_Rel8",
		Syntax:   "JGE rel8",
		Encoding: &Encoding{
			Syntax:     "7D cb",
			Opcode:     []byte{0x7d},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JGE_Rel16 = &Instruction{
		Mnemonic: "jge",
		UID:      "JGE_Rel16",
		Syntax:   "JGE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8D cw",
			Opcode:     []byte{0x0f, 0x8d},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JGE_Rel32 = &Instruction{
		Mnemonic: "jge",
		UID:      "JGE_Rel32",
		Syntax:   "JGE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8D cd",
			Opcode:     []byte{0x0f, 0x8d},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JL_Rel8 = &Instruction{
		Mnemonic: "jl",
		UID:      "JL_Rel8",
		Syntax:   "JL rel8",
		Encoding: &Encoding{
			Syntax:     "7C cb",
			Opcode:     []byte{0x7c},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JL_Rel16 = &Instruction{
		Mnemonic: "jl",
		UID:      "JL_Rel16",
		Syntax:   "JL rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8C cw",
			Opcode:     []byte{0x0f, 0x8c},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JL_Rel32 = &Instruction{
		Mnemonic: "jl",
		UID:      "JL_Rel32",
		Syntax:   "JL rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8C cd",
			Opcode:     []byte{0x0f, 0x8c},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JLE_Rel8 = &Instruction{
		Mnemonic: "jle",
		UID:      "JLE_Rel8",
		Syntax:   "JLE rel8",
		Encoding: &Encoding{
			Syntax:     "7E cb",
			Opcode:     []byte{0x7e},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JLE_Rel16 = &Instruction{
		Mnemonic: "jle",
		UID:      "JLE_Rel16",
		Syntax:   "JLE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8E cw",
			Opcode:     []byte{0x0f, 0x8e},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JLE_Rel32 = &Instruction{
		Mnemonic: "jle",
		UID:      "JLE_Rel32",
		Syntax:   "JLE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8E cd",
			Opcode:     []byte{0x0f, 0x8e},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JMP_Rel8 = &Instruction{
		Mnemonic: "jmp",
		UID:      "JMP_Rel8",
		Syntax:   "JMP rel8",
		Encoding: &Encoding{
			Syntax:     "EB cb",
			Opcode:     []byte{0xeb},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JMP_Rel16 = &Instruction{
		Mnemonic: "jmp",
		UID:      "JMP_Rel16",
		Syntax:   "JMP rel16",
		Encoding: &Encoding{
			Syntax:     "E9 cw",
			Opcode:     []byte{0xe9},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JMP_Rel32 = &Instruction{
		Mnemonic: "jmp",
		UID:      "JMP_Rel32",
		Syntax:   "JMP rel32",
		Encoding: &Encoding{
			Syntax:     "E9 cd",
			Opcode:     []byte{0xe9},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JMP_Rmr16 = &Instruction{
		Mnemonic: "jmp",
		UID:      "JMP_Rmr16",
		Syntax:   "JMP r/m16",
		Encoding: &Encoding{
			Syntax:   "FF /4",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JMP_Rmr32 = &Instruction{
		Mnemonic: "jmp",
		UID:      "JMP_Rmr32",
		Syntax:   "JMP r/m32",
		Encoding: &Encoding{
			Syntax:   "FF /4",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	JMP_Rmr64 = &Instruction{
		Mnemonic: "jmp",
		UID:      "JMP_Rmr64",
		Syntax:   "JMP r/m64",
		Encoding: &Encoding{
			Syntax:   "FF /4",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	JMP_M16 = &Instruction{
		Mnemonic: "jmp",
		UID:      "JMP_M16",
		Syntax:   "JMP r/m16",
		Encoding: &Encoding{
			Syntax:   "FF /4",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JMP_M32 = &Instruction{
		Mnemonic: "jmp",
		UID:      "JMP_M32",
		Syntax:   "JMP r/m32",
		Encoding: &Encoding{
			Syntax:   "FF /4",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	JMP_M64 = &Instruction{
		Mnemonic: "jmp",
		UID:      "JMP_M64",
		Syntax:   "JMP r/m64",
		Encoding: &Encoding{
			Syntax:   "FF /4",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	JMP_FAR_Ptr16v16 = &Instruction{
		Mnemonic: "jmp-far",
		UID:      "JMP_FAR_Ptr16v16",
		Syntax:   "JMP-FAR ptr16:16",
		Encoding: &Encoding{
			Syntax:     "EA cd",
			Opcode:     []byte{0xea},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamPtr16v16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JMP_FAR_Ptr16v32 = &Instruction{
		Mnemonic: "jmp-far",
		UID:      "JMP_FAR_Ptr16v32",
		Syntax:   "JMP-FAR ptr16:32",
		Encoding: &Encoding{
			Syntax:     "EA cp",
			Opcode:     []byte{0xea},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamPtr16v32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	JMP_FAR_M16v16 = &Instruction{
		Mnemonic: "jmp-far",
		UID:      "JMP_FAR_M16v16",
		Syntax:   "JMP-FAR m16:16",
		Encoding: &Encoding{
			Syntax:   "FF /5",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM16v16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	JMP_FAR_M16v32 = &Instruction{
		Mnemonic: "jmp-far",
		UID:      "JMP_FAR_M16v32",
		Syntax:   "JMP-FAR m16:32",
		Encoding: &Encoding{
			Syntax:   "FF /5",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM16v32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	JMP_FAR_M16v64_REX = &Instruction{
		Mnemonic: "jmp-far",
		UID:      "JMP_FAR_M16v64_REX",
		Syntax:   "JMP-FAR m16:64",
		Encoding: &Encoding{
			Syntax:   "REX.W FF /5",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM16v64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	JNA_Rel8 = &Instruction{
		Mnemonic: "jna",
		UID:      "JNA_Rel8",
		Syntax:   "JNA rel8",
		Encoding: &Encoding{
			Syntax:     "76 cb",
			Opcode:     []byte{0x76},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNA_Rel16 = &Instruction{
		Mnemonic: "jna",
		UID:      "JNA_Rel16",
		Syntax:   "JNA rel16",
		Encoding: &Encoding{
			Syntax:     "0F 86 cw",
			Opcode:     []byte{0x0f, 0x86},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNA_Rel32 = &Instruction{
		Mnemonic: "jna",
		UID:      "JNA_Rel32",
		Syntax:   "JNA rel32",
		Encoding: &Encoding{
			Syntax:     "0F 86 cd",
			Opcode:     []byte{0x0f, 0x86},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNAE_Rel8 = &Instruction{
		Mnemonic: "jnae",
		UID:      "JNAE_Rel8",
		Syntax:   "JNAE rel8",
		Encoding: &Encoding{
			Syntax:     "72 cb",
			Opcode:     []byte{0x72},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNAE_Rel16 = &Instruction{
		Mnemonic: "jnae",
		UID:      "JNAE_Rel16",
		Syntax:   "JNAE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 82 cw",
			Opcode:     []byte{0x0f, 0x82},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNAE_Rel32 = &Instruction{
		Mnemonic: "jnae",
		UID:      "JNAE_Rel32",
		Syntax:   "JNAE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 82 cd",
			Opcode:     []byte{0x0f, 0x82},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNB_Rel8 = &Instruction{
		Mnemonic: "jnb",
		UID:      "JNB_Rel8",
		Syntax:   "JNB rel8",
		Encoding: &Encoding{
			Syntax:     "73 cb",
			Opcode:     []byte{0x73},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNB_Rel16 = &Instruction{
		Mnemonic: "jnb",
		UID:      "JNB_Rel16",
		Syntax:   "JNB rel16",
		Encoding: &Encoding{
			Syntax:     "0F 83 cw",
			Opcode:     []byte{0x0f, 0x83},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNB_Rel32 = &Instruction{
		Mnemonic: "jnb",
		UID:      "JNB_Rel32",
		Syntax:   "JNB rel32",
		Encoding: &Encoding{
			Syntax:     "0F 83 cd",
			Opcode:     []byte{0x0f, 0x83},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNBE_Rel8 = &Instruction{
		Mnemonic: "jnbe",
		UID:      "JNBE_Rel8",
		Syntax:   "JNBE rel8",
		Encoding: &Encoding{
			Syntax:     "77 cb",
			Opcode:     []byte{0x77},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNBE_Rel16 = &Instruction{
		Mnemonic: "jnbe",
		UID:      "JNBE_Rel16",
		Syntax:   "JNBE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 87 cw",
			Opcode:     []byte{0x0f, 0x87},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNBE_Rel32 = &Instruction{
		Mnemonic: "jnbe",
		UID:      "JNBE_Rel32",
		Syntax:   "JNBE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 87 cd",
			Opcode:     []byte{0x0f, 0x87},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNC_Rel8 = &Instruction{
		Mnemonic: "jnc",
		UID:      "JNC_Rel8",
		Syntax:   "JNC rel8",
		Encoding: &Encoding{
			Syntax:     "73 cb",
			Opcode:     []byte{0x73},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNC_Rel16 = &Instruction{
		Mnemonic: "jnc",
		UID:      "JNC_Rel16",
		Syntax:   "JNC rel16",
		Encoding: &Encoding{
			Syntax:     "0F 83 cw",
			Opcode:     []byte{0x0f, 0x83},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNC_Rel32 = &Instruction{
		Mnemonic: "jnc",
		UID:      "JNC_Rel32",
		Syntax:   "JNC rel32",
		Encoding: &Encoding{
			Syntax:     "0F 83 cd",
			Opcode:     []byte{0x0f, 0x83},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNE_Rel8 = &Instruction{
		Mnemonic: "jne",
		UID:      "JNE_Rel8",
		Syntax:   "JNE rel8",
		Encoding: &Encoding{
			Syntax:     "75 cb",
			Opcode:     []byte{0x75},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNE_Rel16 = &Instruction{
		Mnemonic: "jne",
		UID:      "JNE_Rel16",
		Syntax:   "JNE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 85 cw",
			Opcode:     []byte{0x0f, 0x85},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNE_Rel32 = &Instruction{
		Mnemonic: "jne",
		UID:      "JNE_Rel32",
		Syntax:   "JNE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 85 cd",
			Opcode:     []byte{0x0f, 0x85},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNG_Rel8 = &Instruction{
		Mnemonic: "jng",
		UID:      "JNG_Rel8",
		Syntax:   "JNG rel8",
		Encoding: &Encoding{
			Syntax:     "7E cb",
			Opcode:     []byte{0x7e},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNG_Rel16 = &Instruction{
		Mnemonic: "jng",
		UID:      "JNG_Rel16",
		Syntax:   "JNG rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8E cw",
			Opcode:     []byte{0x0f, 0x8e},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNG_Rel32 = &Instruction{
		Mnemonic: "jng",
		UID:      "JNG_Rel32",
		Syntax:   "JNG rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8E cd",
			Opcode:     []byte{0x0f, 0x8e},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNGE_Rel8 = &Instruction{
		Mnemonic: "jnge",
		UID:      "JNGE_Rel8",
		Syntax:   "JNGE rel8",
		Encoding: &Encoding{
			Syntax:     "7C cb",
			Opcode:     []byte{0x7c},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNGE_Rel16 = &Instruction{
		Mnemonic: "jnge",
		UID:      "JNGE_Rel16",
		Syntax:   "JNGE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8C cw",
			Opcode:     []byte{0x0f, 0x8c},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNGE_Rel32 = &Instruction{
		Mnemonic: "jnge",
		UID:      "JNGE_Rel32",
		Syntax:   "JNGE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8C cd",
			Opcode:     []byte{0x0f, 0x8c},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNL_Rel8 = &Instruction{
		Mnemonic: "jnl",
		UID:      "JNL_Rel8",
		Syntax:   "JNL rel8",
		Encoding: &Encoding{
			Syntax:     "7D cb",
			Opcode:     []byte{0x7d},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNL_Rel16 = &Instruction{
		Mnemonic: "jnl",
		UID:      "JNL_Rel16",
		Syntax:   "JNL rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8D cw",
			Opcode:     []byte{0x0f, 0x8d},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNL_Rel32 = &Instruction{
		Mnemonic: "jnl",
		UID:      "JNL_Rel32",
		Syntax:   "JNL rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8D cd",
			Opcode:     []byte{0x0f, 0x8d},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNLE_Rel8 = &Instruction{
		Mnemonic: "jnle",
		UID:      "JNLE_Rel8",
		Syntax:   "JNLE rel8",
		Encoding: &Encoding{
			Syntax:     "7F cb",
			Opcode:     []byte{0x7f},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNLE_Rel16 = &Instruction{
		Mnemonic: "jnle",
		UID:      "JNLE_Rel16",
		Syntax:   "JNLE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8F cw",
			Opcode:     []byte{0x0f, 0x8f},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNLE_Rel32 = &Instruction{
		Mnemonic: "jnle",
		UID:      "JNLE_Rel32",
		Syntax:   "JNLE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8F cd",
			Opcode:     []byte{0x0f, 0x8f},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNO_Rel8 = &Instruction{
		Mnemonic: "jno",
		UID:      "JNO_Rel8",
		Syntax:   "JNO rel8",
		Encoding: &Encoding{
			Syntax:     "71 cb",
			Opcode:     []byte{0x71},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNO_Rel16 = &Instruction{
		Mnemonic: "jno",
		UID:      "JNO_Rel16",
		Syntax:   "JNO rel16",
		Encoding: &Encoding{
			Syntax:     "0F 81 cw",
			Opcode:     []byte{0x0f, 0x81},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNO_Rel32 = &Instruction{
		Mnemonic: "jno",
		UID:      "JNO_Rel32",
		Syntax:   "JNO rel32",
		Encoding: &Encoding{
			Syntax:     "0F 81 cd",
			Opcode:     []byte{0x0f, 0x81},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNP_Rel8 = &Instruction{
		Mnemonic: "jnp",
		UID:      "JNP_Rel8",
		Syntax:   "JNP rel8",
		Encoding: &Encoding{
			Syntax:     "7B cb",
			Opcode:     []byte{0x7b},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNP_Rel16 = &Instruction{
		Mnemonic: "jnp",
		UID:      "JNP_Rel16",
		Syntax:   "JNP rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8B cw",
			Opcode:     []byte{0x0f, 0x8b},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNP_Rel32 = &Instruction{
		Mnemonic: "jnp",
		UID:      "JNP_Rel32",
		Syntax:   "JNP rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8B cd",
			Opcode:     []byte{0x0f, 0x8b},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNS_Rel8 = &Instruction{
		Mnemonic: "jns",
		UID:      "JNS_Rel8",
		Syntax:   "JNS rel8",
		Encoding: &Encoding{
			Syntax:     "79 cb",
			Opcode:     []byte{0x79},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNS_Rel16 = &Instruction{
		Mnemonic: "jns",
		UID:      "JNS_Rel16",
		Syntax:   "JNS rel16",
		Encoding: &Encoding{
			Syntax:     "0F 89 cw",
			Opcode:     []byte{0x0f, 0x89},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNS_Rel32 = &Instruction{
		Mnemonic: "jns",
		UID:      "JNS_Rel32",
		Syntax:   "JNS rel32",
		Encoding: &Encoding{
			Syntax:     "0F 89 cd",
			Opcode:     []byte{0x0f, 0x89},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JNZ_Rel8 = &Instruction{
		Mnemonic: "jnz",
		UID:      "JNZ_Rel8",
		Syntax:   "JNZ rel8",
		Encoding: &Encoding{
			Syntax:     "75 cb",
			Opcode:     []byte{0x75},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JNZ_Rel16 = &Instruction{
		Mnemonic: "jnz",
		UID:      "JNZ_Rel16",
		Syntax:   "JNZ rel16",
		Encoding: &Encoding{
			Syntax:     "0F 85 cw",
			Opcode:     []byte{0x0f, 0x85},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JNZ_Rel32 = &Instruction{
		Mnemonic: "jnz",
		UID:      "JNZ_Rel32",
		Syntax:   "JNZ rel32",
		Encoding: &Encoding{
			Syntax:     "0F 85 cd",
			Opcode:     []byte{0x0f, 0x85},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JO_Rel8 = &Instruction{
		Mnemonic: "jo",
		UID:      "JO_Rel8",
		Syntax:   "JO rel8",
		Encoding: &Encoding{
			Syntax:     "70 cb",
			Opcode:     []byte{0x70},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JO_Rel16 = &Instruction{
		Mnemonic: "jo",
		UID:      "JO_Rel16",
		Syntax:   "JO rel16",
		Encoding: &Encoding{
			Syntax:     "0F 80 cw",
			Opcode:     []byte{0x0f, 0x80},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JO_Rel32 = &Instruction{
		Mnemonic: "jo",
		UID:      "JO_Rel32",
		Syntax:   "JO rel32",
		Encoding: &Encoding{
			Syntax:     "0F 80 cd",
			Opcode:     []byte{0x0f, 0x80},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JP_Rel8 = &Instruction{
		Mnemonic: "jp",
		UID:      "JP_Rel8",
		Syntax:   "JP rel8",
		Encoding: &Encoding{
			Syntax:     "7A cb",
			Opcode:     []byte{0x7a},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JP_Rel16 = &Instruction{
		Mnemonic: "jp",
		UID:      "JP_Rel16",
		Syntax:   "JP rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8A cw",
			Opcode:     []byte{0x0f, 0x8a},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JP_Rel32 = &Instruction{
		Mnemonic: "jp",
		UID:      "JP_Rel32",
		Syntax:   "JP rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8A cd",
			Opcode:     []byte{0x0f, 0x8a},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JPE_Rel8 = &Instruction{
		Mnemonic: "jpe",
		UID:      "JPE_Rel8",
		Syntax:   "JPE rel8",
		Encoding: &Encoding{
			Syntax:     "7A cb",
			Opcode:     []byte{0x7a},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JPE_Rel16 = &Instruction{
		Mnemonic: "jpe",
		UID:      "JPE_Rel16",
		Syntax:   "JPE rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8A cw",
			Opcode:     []byte{0x0f, 0x8a},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JPE_Rel32 = &Instruction{
		Mnemonic: "jpe",
		UID:      "JPE_Rel32",
		Syntax:   "JPE rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8A cd",
			Opcode:     []byte{0x0f, 0x8a},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JPO_Rel8 = &Instruction{
		Mnemonic: "jpo",
		UID:      "JPO_Rel8",
		Syntax:   "JPO rel8",
		Encoding: &Encoding{
			Syntax:     "7B cb",
			Opcode:     []byte{0x7b},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JPO_Rel16 = &Instruction{
		Mnemonic: "jpo",
		UID:      "JPO_Rel16",
		Syntax:   "JPO rel16",
		Encoding: &Encoding{
			Syntax:     "0F 8B cw",
			Opcode:     []byte{0x0f, 0x8b},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JPO_Rel32 = &Instruction{
		Mnemonic: "jpo",
		UID:      "JPO_Rel32",
		Syntax:   "JPO rel32",
		Encoding: &Encoding{
			Syntax:     "0F 8B cd",
			Opcode:     []byte{0x0f, 0x8b},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JRCXZ_Rel8 = &Instruction{
		Mnemonic: "jrcxz",
		UID:      "JRCXZ_Rel8",
		Syntax:   "JRCXZ rel8",
		Encoding: &Encoding{
			Syntax:     "E3 cb",
			Opcode:     []byte{0xe3},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel8},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		AddressSize: true,
		DataSize:    8,
	}
	JS_Rel8 = &Instruction{
		Mnemonic: "js",
		UID:      "JS_Rel8",
		Syntax:   "JS rel8",
		Encoding: &Encoding{
			Syntax:     "78 cb",
			Opcode:     []byte{0x78},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JS_Rel16 = &Instruction{
		Mnemonic: "js",
		UID:      "JS_Rel16",
		Syntax:   "JS rel16",
		Encoding: &Encoding{
			Syntax:     "0F 88 cw",
			Opcode:     []byte{0x0f, 0x88},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JS_Rel32 = &Instruction{
		Mnemonic: "js",
		UID:      "JS_Rel32",
		Syntax:   "JS rel32",
		Encoding: &Encoding{
			Syntax:     "0F 88 cd",
			Opcode:     []byte{0x0f, 0x88},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	JZ_Rel8 = &Instruction{
		Mnemonic: "jz",
		UID:      "JZ_Rel8",
		Syntax:   "JZ rel8",
		Encoding: &Encoding{
			Syntax:     "74 cb",
			Opcode:     []byte{0x74},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	JZ_Rel16 = &Instruction{
		Mnemonic: "jz",
		UID:      "JZ_Rel16",
		Syntax:   "JZ rel16",
		Encoding: &Encoding{
			Syntax:     "0F 84 cw",
			Opcode:     []byte{0x0f, 0x84},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	JZ_Rel32 = &Instruction{
		Mnemonic: "jz",
		UID:      "JZ_Rel32",
		Syntax:   "JZ rel32",
		Encoding: &Encoding{
			Syntax:     "0F 84 cd",
			Opcode:     []byte{0x0f, 0x84},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	KADDB_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kaddb",
		UID:      "KADDB_K1_KV_K2_VEX",
		Syntax:   "KADDB k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W0 4A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x4a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KADDD_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kaddd",
		UID:      "KADDD_K1_KV_K2_VEX",
		Syntax:   "KADDD k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W1 4A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x4a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KADDQ_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kaddq",
		UID:      "KADDQ_K1_KV_K2_VEX",
		Syntax:   "KADDQ k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W1 4A /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x4a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KADDW_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kaddw",
		UID:      "KADDW_K1_KV_K2_VEX",
		Syntax:   "KADDW k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W0 4A /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x4a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KANDB_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kandb",
		UID:      "KANDB_K1_KV_K2_VEX",
		Syntax:   "KANDB k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W0 41 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x41},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KANDD_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kandd",
		UID:      "KANDD_K1_KV_K2_VEX",
		Syntax:   "KANDD k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W1 41 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x41},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KANDNB_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kandnb",
		UID:      "KANDNB_K1_KV_K2_VEX",
		Syntax:   "KANDNB k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W0 42 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x42},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KANDND_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kandnd",
		UID:      "KANDND_K1_KV_K2_VEX",
		Syntax:   "KANDND k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W1 42 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x42},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KANDNQ_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kandnq",
		UID:      "KANDNQ_K1_KV_K2_VEX",
		Syntax:   "KANDNQ k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W1 42 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x42},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KANDNW_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kandnw",
		UID:      "KANDNW_K1_KV_K2_VEX",
		Syntax:   "KANDNW k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W0 42 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x42},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KANDQ_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kandq",
		UID:      "KANDQ_K1_KV_K2_VEX",
		Syntax:   "KANDQ k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W1 41 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x41},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KANDW_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kandw",
		UID:      "KANDW_K1_KV_K2_VEX",
		Syntax:   "KANDW k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W0 41 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x41},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KMOVB_R32_K2_VEX = &Instruction{
		Mnemonic: "kmovb",
		UID:      "KMOVB_R32_K2_VEX",
		Syntax:   "KMOVB r32, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W0 93 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x93},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KMOVB_K1_Rmr32_VEX = &Instruction{
		Mnemonic: "kmovb",
		UID:      "KMOVB_K1_Rmr32_VEX",
		Syntax:   "KMOVB k1, rmr32",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W0 92 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x92},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KMOVB_K1_K2_VEX = &Instruction{
		Mnemonic: "kmovb",
		UID:      "KMOVB_K1_K2_VEX",
		Syntax:   "KMOVB k1, k2/m8",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W0 90 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x90},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KMOVB_K1_M8_VEX = &Instruction{
		Mnemonic: "kmovb",
		UID:      "KMOVB_K1_M8_VEX",
		Syntax:   "KMOVB k1, k2/m8",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W0 90 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x90},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamM8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KMOVB_M8_K1_VEX = &Instruction{
		Mnemonic: "kmovb",
		UID:      "KMOVB_M8_K1_VEX",
		Syntax:   "KMOVB m8, k1",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W0 91 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x91},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM8, ParamK1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KMOVD_R32_K2_VEX = &Instruction{
		Mnemonic: "kmovd",
		UID:      "KMOVD_R32_K2_VEX",
		Syntax:   "KMOVD r32, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.F2.0F.W0 93 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x93},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KMOVD_K1_Rmr32_VEX = &Instruction{
		Mnemonic: "kmovd",
		UID:      "KMOVD_K1_Rmr32_VEX",
		Syntax:   "KMOVD k1, rmr32",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.F2.0F.W0 92 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x92},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KMOVD_K1_K2_VEX = &Instruction{
		Mnemonic: "kmovd",
		UID:      "KMOVD_K1_K2_VEX",
		Syntax:   "KMOVD k1, k2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W1 90 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x90},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KMOVD_K1_M32_VEX = &Instruction{
		Mnemonic: "kmovd",
		UID:      "KMOVD_K1_M32_VEX",
		Syntax:   "KMOVD k1, k2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W1 90 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x90},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KMOVD_M32_K1_VEX = &Instruction{
		Mnemonic: "kmovd",
		UID:      "KMOVD_M32_K1_VEX",
		Syntax:   "KMOVD m32, k1",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W1 91 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x91},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM32, ParamK1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KMOVQ_R64_K2_VEX = &Instruction{
		Mnemonic: "kmovq",
		UID:      "KMOVQ_R64_K2_VEX",
		Syntax:   "KMOVQ r64, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.F2.0F.W1 93 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x93},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamK2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KMOVQ_K1_Rmr64_VEX = &Instruction{
		Mnemonic: "kmovq",
		UID:      "KMOVQ_K1_Rmr64_VEX",
		Syntax:   "KMOVQ k1, rmr64",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.F2.0F.W1 92 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x92},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KMOVQ_K1_K2_VEX = &Instruction{
		Mnemonic: "kmovq",
		UID:      "KMOVQ_K1_K2_VEX",
		Syntax:   "KMOVQ k1, k2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W1 90 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x90},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KMOVQ_K1_M64_VEX = &Instruction{
		Mnemonic: "kmovq",
		UID:      "KMOVQ_K1_M64_VEX",
		Syntax:   "KMOVQ k1, k2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W1 90 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x90},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KMOVQ_M64_K1_VEX = &Instruction{
		Mnemonic: "kmovq",
		UID:      "KMOVQ_M64_K1_VEX",
		Syntax:   "KMOVQ m64, k1",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W1 91 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x91},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamK1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KMOVW_R32_K2_VEX = &Instruction{
		Mnemonic: "kmovw",
		UID:      "KMOVW_R32_K2_VEX",
		Syntax:   "KMOVW r32, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W0 93 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x93},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KMOVW_K1_Rmr32_VEX = &Instruction{
		Mnemonic: "kmovw",
		UID:      "KMOVW_K1_Rmr32_VEX",
		Syntax:   "KMOVW k1, rmr32",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W0 92 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x92},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KMOVW_K1_K2_VEX = &Instruction{
		Mnemonic: "kmovw",
		UID:      "KMOVW_K1_K2_VEX",
		Syntax:   "KMOVW k1, k2/m16",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W0 90 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x90},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KMOVW_K1_M16_VEX = &Instruction{
		Mnemonic: "kmovw",
		UID:      "KMOVW_K1_M16_VEX",
		Syntax:   "KMOVW k1, k2/m16",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W0 90 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x90},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamM16},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KMOVW_M16_K1_VEX = &Instruction{
		Mnemonic: "kmovw",
		UID:      "KMOVW_M16_K1_VEX",
		Syntax:   "KMOVW m16, k1",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W0 91 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x91},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM16, ParamK1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KNOTB_K1_K2_VEX = &Instruction{
		Mnemonic: "knotb",
		UID:      "KNOTB_K1_K2_VEX",
		Syntax:   "KNOTB k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W0 44 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KNOTD_K1_K2_VEX = &Instruction{
		Mnemonic: "knotd",
		UID:      "KNOTD_K1_K2_VEX",
		Syntax:   "KNOTD k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W1 44 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KNOTQ_K1_K2_VEX = &Instruction{
		Mnemonic: "knotq",
		UID:      "KNOTQ_K1_K2_VEX",
		Syntax:   "KNOTQ k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W1 44 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KNOTW_K1_K2_VEX = &Instruction{
		Mnemonic: "knotw",
		UID:      "KNOTW_K1_K2_VEX",
		Syntax:   "KNOTW k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W0 44 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KORB_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "korb",
		UID:      "KORB_K1_KV_K2_VEX",
		Syntax:   "KORB k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W0 45 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x45},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KORD_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kord",
		UID:      "KORD_K1_KV_K2_VEX",
		Syntax:   "KORD k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W1 45 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x45},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KORQ_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "korq",
		UID:      "KORQ_K1_KV_K2_VEX",
		Syntax:   "KORQ k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W1 45 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x45},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KORTESTB_K1_K2_VEX = &Instruction{
		Mnemonic: "kortestb",
		UID:      "KORTESTB_K1_K2_VEX",
		Syntax:   "KORTESTB k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W0 98 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x98},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KORTESTD_K1_K2_VEX = &Instruction{
		Mnemonic: "kortestd",
		UID:      "KORTESTD_K1_K2_VEX",
		Syntax:   "KORTESTD k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W1 98 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x98},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KORTESTQ_K1_K2_VEX = &Instruction{
		Mnemonic: "kortestq",
		UID:      "KORTESTQ_K1_K2_VEX",
		Syntax:   "KORTESTQ k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W1 98 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x98},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KORTESTW_K1_K2_VEX = &Instruction{
		Mnemonic: "kortestw",
		UID:      "KORTESTW_K1_K2_VEX",
		Syntax:   "KORTESTW k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W0 98 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x98},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KORW_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "korw",
		UID:      "KORW_K1_KV_K2_VEX",
		Syntax:   "KORW k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W0 45 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x45},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KSHIFTLB_K1_K2_Imm8_VEX = &Instruction{
		Mnemonic: "kshiftlb",
		UID:      "KSHIFTLB_K1_K2_Imm8_VEX",
		Syntax:   "KSHIFTLB k1, k2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F3A.W0 32 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KSHIFTLD_K1_K2_Imm8_VEX = &Instruction{
		Mnemonic: "kshiftld",
		UID:      "KSHIFTLD_K1_K2_Imm8_VEX",
		Syntax:   "KSHIFTLD k1, k2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F3A.W0 33 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KSHIFTLQ_K1_K2_Imm8_VEX = &Instruction{
		Mnemonic: "kshiftlq",
		UID:      "KSHIFTLQ_K1_K2_Imm8_VEX",
		Syntax:   "KSHIFTLQ k1, k2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F3A.W1 33 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KSHIFTLW_K1_K2_Imm8_VEX = &Instruction{
		Mnemonic: "kshiftlw",
		UID:      "KSHIFTLW_K1_K2_Imm8_VEX",
		Syntax:   "KSHIFTLW k1, k2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F3A.W1 32 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KSHIFTRB_K1_K2_Imm8_VEX = &Instruction{
		Mnemonic: "kshiftrb",
		UID:      "KSHIFTRB_K1_K2_Imm8_VEX",
		Syntax:   "KSHIFTRB k1, k2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F3A.W0 30 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KSHIFTRD_K1_K2_Imm8_VEX = &Instruction{
		Mnemonic: "kshiftrd",
		UID:      "KSHIFTRD_K1_K2_Imm8_VEX",
		Syntax:   "KSHIFTRD k1, k2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F3A.W0 31 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KSHIFTRQ_K1_K2_Imm8_VEX = &Instruction{
		Mnemonic: "kshiftrq",
		UID:      "KSHIFTRQ_K1_K2_Imm8_VEX",
		Syntax:   "KSHIFTRQ k1, k2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F3A.W1 31 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KSHIFTRW_K1_K2_Imm8_VEX = &Instruction{
		Mnemonic: "kshiftrw",
		UID:      "KSHIFTRW_K1_K2_Imm8_VEX",
		Syntax:   "KSHIFTRW k1, k2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F3A.W1 30 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KTESTB_K1_K2_VEX = &Instruction{
		Mnemonic: "ktestb",
		UID:      "KTESTB_K1_K2_VEX",
		Syntax:   "KTESTB k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W0 99 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x99},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KTESTD_K1_K2_VEX = &Instruction{
		Mnemonic: "ktestd",
		UID:      "KTESTD_K1_K2_VEX",
		Syntax:   "KTESTD k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.66.0F.W1 99 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x99},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KTESTQ_K1_K2_VEX = &Instruction{
		Mnemonic: "ktestq",
		UID:      "KTESTQ_K1_K2_VEX",
		Syntax:   "KTESTQ k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W1 99 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x99},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KTESTW_K1_K2_VEX = &Instruction{
		Mnemonic: "ktestw",
		UID:      "KTESTW_K1_K2_VEX",
		Syntax:   "KTESTW k1, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L0.0F.W0 99 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x99},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KUNPCKBW_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kunpckbw",
		UID:      "KUNPCKBW_K1_KV_K2_VEX",
		Syntax:   "KUNPCKBW k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W0 4B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x4b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KUNPCKDQ_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kunpckdq",
		UID:      "KUNPCKDQ_K1_KV_K2_VEX",
		Syntax:   "KUNPCKDQ k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W1 4B /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x4b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KUNPCKWD_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kunpckwd",
		UID:      "KUNPCKWD_K1_KV_K2_VEX",
		Syntax:   "KUNPCKWD k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W0 4B /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x4b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KXNORB_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kxnorb",
		UID:      "KXNORB_K1_KV_K2_VEX",
		Syntax:   "KXNORB k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W0 46 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x46},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KXNORD_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kxnord",
		UID:      "KXNORD_K1_KV_K2_VEX",
		Syntax:   "KXNORD k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W1 46 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x46},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KXNORQ_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kxnorq",
		UID:      "KXNORQ_K1_KV_K2_VEX",
		Syntax:   "KXNORQ k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W1 46 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x46},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KXNORW_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kxnorw",
		UID:      "KXNORW_K1_KV_K2_VEX",
		Syntax:   "KXNORW k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W0 46 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x46},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	KXORB_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kxorb",
		UID:      "KXORB_K1_KV_K2_VEX",
		Syntax:   "KXORB k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W0 47 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x47},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
	}
	KXORD_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kxord",
		UID:      "KXORD_K1_KV_K2_VEX",
		Syntax:   "KXORD k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.66.0F.W1 47 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x47},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KXORQ_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kxorq",
		UID:      "KXORQ_K1_KV_K2_VEX",
		Syntax:   "KXORQ k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W1 47 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x47},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
	}
	KXORW_K1_KV_K2_VEX = &Instruction{
		Mnemonic: "kxorw",
		UID:      "KXORW_K1_KV_K2_VEX",
		Syntax:   "KXORW k1, kV, k2",
		Encoding: &Encoding{
			Syntax:    "VEX.L1.0F.W0 47 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x47},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamKV, ParamK2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	LAHF = &Instruction{
		Mnemonic: "lahf",
		UID:      "LAHF",
		Syntax:   "LAHF",
		Encoding: &Encoding{
			Syntax: "9F",
			Opcode: []byte{0x9f},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	LAR_R16_Rmr16 = &Instruction{
		Mnemonic: "lar",
		UID:      "LAR_R16_Rmr16",
		Syntax:   "LAR r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 02 /r",
			Opcode: []byte{0x0f, 0x02},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      false,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LAR_R16_M16 = &Instruction{
		Mnemonic: "lar",
		UID:      "LAR_R16_M16",
		Syntax:   "LAR r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 02 /r",
			Opcode: []byte{0x0f, 0x02},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      false,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LAR_R32_Rmr32 = &Instruction{
		Mnemonic: "lar",
		UID:      "LAR_R32_Rmr32",
		Syntax:   "LAR r32, r32/m16",
		Encoding: &Encoding{
			Syntax: "0F 02 /r",
			Opcode: []byte{0x0f, 0x02},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      false,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LAR_R32_M16 = &Instruction{
		Mnemonic: "lar",
		UID:      "LAR_R32_M16",
		Syntax:   "LAR r32, r32/m16",
		Encoding: &Encoding{
			Syntax: "0F 02 /r",
			Opcode: []byte{0x0f, 0x02},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM16},
		Mode16:      false,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LAR_R64_Rmr16_REX = &Instruction{
		Mnemonic: "lar",
		UID:      "LAR_R64_Rmr16_REX",
		Syntax:   "LAR r64, r/m16",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 02 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x02},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr16},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	LAR_R64_M16_REX = &Instruction{
		Mnemonic: "lar",
		UID:      "LAR_R64_M16_REX",
		Syntax:   "LAR r64, r/m16",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 02 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x02},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM16},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	LDDQU_XMM1_M128 = &Instruction{
		Mnemonic: "lddqu",
		UID:      "LDDQU_XMM1_M128",
		Syntax:   "LDDQU xmm1, m128",
		Encoding: &Encoding{
			Syntax:            "F2 0F F0 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xf0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	LDMXCSR_M32 = &Instruction{
		Mnemonic: "ldmxcsr",
		UID:      "LDMXCSR_M32",
		Syntax:   "LDMXCSR m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE /2",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      3,
		},
		Parameters: []*Parameter{ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	LDS_R16_M16v16 = &Instruction{
		Mnemonic: "lds",
		UID:      "LDS_R16_M16v16",
		Syntax:   "LDS r16, m16:16",
		Encoding: &Encoding{
			Syntax: "C5 /r",
			Opcode: []byte{0xc5},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16v16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	LDS_R32_M16v32 = &Instruction{
		Mnemonic: "lds",
		UID:      "LDS_R32_M16v32",
		Syntax:   "LDS r32, m16:32",
		Encoding: &Encoding{
			Syntax: "C5 /r",
			Opcode: []byte{0xc5},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM16v32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	LEA_R16_M = &Instruction{
		Mnemonic: "lea",
		UID:      "LEA_R16_M",
		Syntax:   "LEA r16, m",
		Encoding: &Encoding{
			Syntax: "8D /r",
			Opcode: []byte{0x8d},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LEA_R32_M = &Instruction{
		Mnemonic: "lea",
		UID:      "LEA_R32_M",
		Syntax:   "LEA r32, m",
		Encoding: &Encoding{
			Syntax: "8D /r",
			Opcode: []byte{0x8d},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LEA_R64_M_REX = &Instruction{
		Mnemonic: "lea",
		UID:      "LEA_R64_M_REX",
		Syntax:   "LEA r64, m",
		Encoding: &Encoding{
			Syntax: "REX.W 8D /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x8d},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	LEAVE = &Instruction{
		Mnemonic: "leave",
		UID:      "LEAVE",
		Syntax:   "LEAVE",
		Encoding: &Encoding{
			Syntax: "C9",
			Opcode: []byte{0xc9},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	LES_R16_M16v16 = &Instruction{
		Mnemonic: "les",
		UID:      "LES_R16_M16v16",
		Syntax:   "LES r16, m16:16",
		Encoding: &Encoding{
			Syntax: "C4 /r",
			Opcode: []byte{0xc4},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16v16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	LES_R32_M16v32 = &Instruction{
		Mnemonic: "les",
		UID:      "LES_R32_M16v32",
		Syntax:   "LES r32, m16:32",
		Encoding: &Encoding{
			Syntax: "C4 /r",
			Opcode: []byte{0xc4},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM16v32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	LFENCE = &Instruction{
		Mnemonic: "lfence",
		UID:      "LFENCE",
		Syntax:   "LFENCE",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE E8",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae, 0xe8},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"SSE2"},
	}
	LFS_R16_M16v16 = &Instruction{
		Mnemonic: "lfs",
		UID:      "LFS_R16_M16v16",
		Syntax:   "LFS r16, m16:16",
		Encoding: &Encoding{
			Syntax: "0F B4 /r",
			Opcode: []byte{0x0f, 0xb4},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16v16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LFS_R32_M16v32 = &Instruction{
		Mnemonic: "lfs",
		UID:      "LFS_R32_M16v32",
		Syntax:   "LFS r32, m16:32",
		Encoding: &Encoding{
			Syntax: "0F B4 /r",
			Opcode: []byte{0x0f, 0xb4},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM16v32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LFS_R64_M16v64_REX = &Instruction{
		Mnemonic: "lfs",
		UID:      "LFS_R64_M16v64_REX",
		Syntax:   "LFS r64, m16:64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B4 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb4},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM16v64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	LGDT_M16x32 = &Instruction{
		Mnemonic: "lgdt",
		UID:      "LGDT_M16x32",
		Syntax:   "LGDT m16&32",
		Encoding: &Encoding{
			Syntax:   "0F 01 /2",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM16x32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	LGDT_M16x64 = &Instruction{
		Mnemonic: "lgdt",
		UID:      "LGDT_M16x64",
		Syntax:   "LGDT m16&64",
		Encoding: &Encoding{
			Syntax:   "0F 01 /2",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM16x64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	LGS_R16_M16v16 = &Instruction{
		Mnemonic: "lgs",
		UID:      "LGS_R16_M16v16",
		Syntax:   "LGS r16, m16:16",
		Encoding: &Encoding{
			Syntax: "0F B5 /r",
			Opcode: []byte{0x0f, 0xb5},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16v16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LGS_R32_M16v32 = &Instruction{
		Mnemonic: "lgs",
		UID:      "LGS_R32_M16v32",
		Syntax:   "LGS r32, m16:32",
		Encoding: &Encoding{
			Syntax: "0F B5 /r",
			Opcode: []byte{0x0f, 0xb5},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM16v32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LGS_R64_M16v64_REX = &Instruction{
		Mnemonic: "lgs",
		UID:      "LGS_R64_M16v64_REX",
		Syntax:   "LGS r64, m16:64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B5 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb5},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM16v64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	LIDT_M16x32 = &Instruction{
		Mnemonic: "lidt",
		UID:      "LIDT_M16x32",
		Syntax:   "LIDT m16&32",
		Encoding: &Encoding{
			Syntax:   "0F 01 /3",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM16x32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	LIDT_M16x64 = &Instruction{
		Mnemonic: "lidt",
		UID:      "LIDT_M16x64",
		Syntax:   "LIDT m16&64",
		Encoding: &Encoding{
			Syntax:   "0F 01 /3",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM16x64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	LLDT_Rmr16 = &Instruction{
		Mnemonic: "lldt",
		UID:      "LLDT_Rmr16",
		Syntax:   "LLDT r/m16",
		Encoding: &Encoding{
			Syntax:   "0F 00 /2",
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	LLDT_M16 = &Instruction{
		Mnemonic: "lldt",
		UID:      "LLDT_M16",
		Syntax:   "LLDT r/m16",
		Encoding: &Encoding{
			Syntax:   "0F 00 /2",
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	LMSW_Rmr16 = &Instruction{
		Mnemonic: "lmsw",
		UID:      "LMSW_Rmr16",
		Syntax:   "LMSW r/m16",
		Encoding: &Encoding{
			Syntax:   "0F 01 /6",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamRmr16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	LMSW_M16 = &Instruction{
		Mnemonic: "lmsw",
		UID:      "LMSW_M16",
		Syntax:   "LMSW r/m16",
		Encoding: &Encoding{
			Syntax:   "0F 01 /6",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	LOADIWKEY_XMM1_XMM2 = &Instruction{
		Mnemonic: "loadiwkey",
		UID:      "LOADIWKEY_XMM1_XMM2",
		Syntax:   "LOADIWKEY xmm1, xmm2",
		Encoding: &Encoding{
			Syntax:            "F3 0F 38 DC 11:rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x38, 0xdc},
			ModRM:             true,
			ModRMmod:          4,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"KL"},
	}
	LODS_StrSrc8 = &Instruction{
		Mnemonic: "lods",
		UID:      "LODS_StrSrc8",
		Syntax:   "LODS [ds:esi:8]",
		Encoding: &Encoding{
			Syntax: "AC",
			Opcode: []byte{0xac},
		},
		Parameters:  []*Parameter{ParamStrSrc8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	LODS_StrSrc16 = &Instruction{
		Mnemonic: "lods",
		UID:      "LODS_StrSrc16",
		Syntax:   "LODS [ds:esi:16]",
		Encoding: &Encoding{
			Syntax: "AD",
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamStrSrc16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LODS_StrSrc32 = &Instruction{
		Mnemonic: "lods",
		UID:      "LODS_StrSrc32",
		Syntax:   "LODS [ds:esi:32]",
		Encoding: &Encoding{
			Syntax: "AD",
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamStrSrc32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LODS_StrSrc64_REX = &Instruction{
		Mnemonic: "lods",
		UID:      "LODS_StrSrc64_REX",
		Syntax:   "LODS [rsi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W AD",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamStrSrc64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	LODS_AL_StrSrc8 = &Instruction{
		Mnemonic: "lods",
		UID:      "LODS_AL_StrSrc8",
		Syntax:   "LODS AL, [ds:esi:8]",
		Encoding: &Encoding{
			Syntax: "AC",
			Opcode: []byte{0xac},
		},
		Parameters:  []*Parameter{ParamAL, ParamStrSrc8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	LODS_AX_StrSrc16 = &Instruction{
		Mnemonic: "lods",
		UID:      "LODS_AX_StrSrc16",
		Syntax:   "LODS AX, [ds:esi:16]",
		Encoding: &Encoding{
			Syntax: "AD",
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamAX, ParamStrSrc16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LODS_EAX_StrSrc32 = &Instruction{
		Mnemonic: "lods",
		UID:      "LODS_EAX_StrSrc32",
		Syntax:   "LODS EAX, [ds:esi:32]",
		Encoding: &Encoding{
			Syntax: "AD",
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamEAX, ParamStrSrc32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LODS_RAX_StrSrc64_REX = &Instruction{
		Mnemonic: "lods",
		UID:      "LODS_RAX_StrSrc64_REX",
		Syntax:   "LODS RAX, [rsi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W AD",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamRAX, ParamStrSrc64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	LODSB = &Instruction{
		Mnemonic: "lodsb",
		UID:      "LODSB",
		Syntax:   "LODSB",
		Encoding: &Encoding{
			Syntax: "AC",
			Opcode: []byte{0xac},
		},
		Mode16:   true,
		Mode32:   true,
		Mode64:   true,
		DataSize: 8,
	}
	LODSB_StrSrc8 = &Instruction{
		Mnemonic: "lodsb",
		UID:      "LODSB_StrSrc8",
		Syntax:   "LODSB [ds:esi:8]",
		Encoding: &Encoding{
			Syntax: "AC",
			Opcode: []byte{0xac},
		},
		Parameters:  []*Parameter{ParamStrSrc8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	LODSB_AL_StrSrc8 = &Instruction{
		Mnemonic: "lodsb",
		UID:      "LODSB_AL_StrSrc8",
		Syntax:   "LODSB AL, [ds:esi:8]",
		Encoding: &Encoding{
			Syntax: "AC",
			Opcode: []byte{0xac},
		},
		Parameters:  []*Parameter{ParamAL, ParamStrSrc8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	LODSD = &Instruction{
		Mnemonic: "lodsd",
		UID:      "LODSD",
		Syntax:   "LODSD",
		Encoding: &Encoding{
			Syntax: "AD",
			Opcode: []byte{0xad},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LODSD_StrSrc32 = &Instruction{
		Mnemonic: "lodsd",
		UID:      "LODSD_StrSrc32",
		Syntax:   "LODSD [ds:esi:32]",
		Encoding: &Encoding{
			Syntax: "AD",
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamStrSrc32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LODSD_EAX_StrSrc32 = &Instruction{
		Mnemonic: "lodsd",
		UID:      "LODSD_EAX_StrSrc32",
		Syntax:   "LODSD EAX, [ds:esi:32]",
		Encoding: &Encoding{
			Syntax: "AD",
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamEAX, ParamStrSrc32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LODSQ_REX = &Instruction{
		Mnemonic: "lodsq",
		UID:      "LODSQ_REX",
		Syntax:   "LODSQ",
		Encoding: &Encoding{
			Syntax: "REX.W AD",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xad},
		},
		Mode16:   false,
		Mode32:   false,
		Mode64:   true,
		DataSize: 64,
	}
	LODSQ_StrSrc64_REX = &Instruction{
		Mnemonic: "lodsq",
		UID:      "LODSQ_StrSrc64_REX",
		Syntax:   "LODSQ [rsi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W AD",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamStrSrc64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	LODSQ_RAX_StrSrc64_REX = &Instruction{
		Mnemonic: "lodsq",
		UID:      "LODSQ_RAX_StrSrc64_REX",
		Syntax:   "LODSQ RAX, [rsi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W AD",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamRAX, ParamStrSrc64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	LODSW = &Instruction{
		Mnemonic: "lodsw",
		UID:      "LODSW",
		Syntax:   "LODSW",
		Encoding: &Encoding{
			Syntax: "AD",
			Opcode: []byte{0xad},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LODSW_StrSrc16 = &Instruction{
		Mnemonic: "lodsw",
		UID:      "LODSW_StrSrc16",
		Syntax:   "LODSW [ds:esi:16]",
		Encoding: &Encoding{
			Syntax: "AD",
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamStrSrc16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LODSW_AX_StrSrc16 = &Instruction{
		Mnemonic: "lodsw",
		UID:      "LODSW_AX_StrSrc16",
		Syntax:   "LODSW AX, [ds:esi:16]",
		Encoding: &Encoding{
			Syntax: "AD",
			Opcode: []byte{0xad},
		},
		Parameters:  []*Parameter{ParamAX, ParamStrSrc16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LOOP_Rel8 = &Instruction{
		Mnemonic: "loop",
		UID:      "LOOP_Rel8",
		Syntax:   "LOOP rel8",
		Encoding: &Encoding{
			Syntax:     "E2 cb",
			Opcode:     []byte{0xe2},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	LOOPE_Rel8 = &Instruction{
		Mnemonic: "loope",
		UID:      "LOOPE_Rel8",
		Syntax:   "LOOPE rel8",
		Encoding: &Encoding{
			Syntax:     "E1 cb",
			Opcode:     []byte{0xe1},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	LOOPNE_Rel8 = &Instruction{
		Mnemonic: "loopne",
		UID:      "LOOPNE_Rel8",
		Syntax:   "LOOPNE rel8",
		Encoding: &Encoding{
			Syntax:     "E0 cb",
			Opcode:     []byte{0xe0},
			CodeOffset: true,
		},
		Parameters: []*Parameter{ParamRel8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	LSL_R16_Rmr16 = &Instruction{
		Mnemonic: "lsl",
		UID:      "LSL_R16_Rmr16",
		Syntax:   "LSL r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 03 /r",
			Opcode: []byte{0x0f, 0x03},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      false,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LSL_R16_M16 = &Instruction{
		Mnemonic: "lsl",
		UID:      "LSL_R16_M16",
		Syntax:   "LSL r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0F 03 /r",
			Opcode: []byte{0x0f, 0x03},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      false,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LSL_R32_Rmr32 = &Instruction{
		Mnemonic: "lsl",
		UID:      "LSL_R32_Rmr32",
		Syntax:   "LSL r32, r32/m16",
		Encoding: &Encoding{
			Syntax: "0F 03 /r",
			Opcode: []byte{0x0f, 0x03},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      false,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LSL_R32_M16 = &Instruction{
		Mnemonic: "lsl",
		UID:      "LSL_R32_M16",
		Syntax:   "LSL r32, r32/m16",
		Encoding: &Encoding{
			Syntax: "0F 03 /r",
			Opcode: []byte{0x0f, 0x03},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM16},
		Mode16:      false,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LSL_R64_Rmr32_REX = &Instruction{
		Mnemonic: "lsl",
		UID:      "LSL_R64_Rmr32_REX",
		Syntax:   "LSL r64, r32/m16",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 03 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x03},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	LSL_R64_M16_REX = &Instruction{
		Mnemonic: "lsl",
		UID:      "LSL_R64_M16_REX",
		Syntax:   "LSL r64, r32/m16",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 03 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x03},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM16},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	LSS_R16_M16v16 = &Instruction{
		Mnemonic: "lss",
		UID:      "LSS_R16_M16v16",
		Syntax:   "LSS r16, m16:16",
		Encoding: &Encoding{
			Syntax: "0F B2 /r",
			Opcode: []byte{0x0f, 0xb2},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16v16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	LSS_R32_M16v32 = &Instruction{
		Mnemonic: "lss",
		UID:      "LSS_R32_M16v32",
		Syntax:   "LSS r32, m16:32",
		Encoding: &Encoding{
			Syntax: "0F B2 /r",
			Opcode: []byte{0x0f, 0xb2},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM16v32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	LSS_R64_M16v64_REX = &Instruction{
		Mnemonic: "lss",
		UID:      "LSS_R64_M16v64_REX",
		Syntax:   "LSS r64, m16:64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B2 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb2},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM16v64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	LTR_Rmr16 = &Instruction{
		Mnemonic: "ltr",
		UID:      "LTR_Rmr16",
		Syntax:   "LTR r/m16",
		Encoding: &Encoding{
			Syntax:   "0F 00 /3",
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	LTR_M16 = &Instruction{
		Mnemonic: "ltr",
		UID:      "LTR_M16",
		Syntax:   "LTR r/m16",
		Encoding: &Encoding{
			Syntax:   "0F 00 /3",
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	LZCNT_R16_Rmr16 = &Instruction{
		Mnemonic: "lzcnt",
		UID:      "LZCNT_R16_Rmr16",
		Syntax:   "LZCNT r16, r/m16",
		Encoding: &Encoding{
			Syntax:            "F3 0F BD /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xbd},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"LZCNT"},
		OperandSize: true,
		DataSize:    16,
	}
	LZCNT_R16_M16 = &Instruction{
		Mnemonic: "lzcnt",
		UID:      "LZCNT_R16_M16",
		Syntax:   "LZCNT r16, r/m16",
		Encoding: &Encoding{
			Syntax:            "F3 0F BD /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xbd},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"LZCNT"},
		OperandSize: true,
		DataSize:    16,
	}
	LZCNT_R32_Rmr32 = &Instruction{
		Mnemonic: "lzcnt",
		UID:      "LZCNT_R32_Rmr32",
		Syntax:   "LZCNT r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F BD /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xbd},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"LZCNT"},
		OperandSize: true,
		DataSize:    32,
	}
	LZCNT_R32_M32 = &Instruction{
		Mnemonic: "lzcnt",
		UID:      "LZCNT_R32_M32",
		Syntax:   "LZCNT r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F BD /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xbd},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"LZCNT"},
		OperandSize: true,
		DataSize:    32,
	}
	LZCNT_R64_Rmr64_REX = &Instruction{
		Mnemonic: "lzcnt",
		UID:      "LZCNT_R64_Rmr64_REX",
		Syntax:   "LZCNT r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F BD /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xbd},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"LZCNT"},
		DataSize:   64,
	}
	LZCNT_R64_M64_REX = &Instruction{
		Mnemonic: "lzcnt",
		UID:      "LZCNT_R64_M64_REX",
		Syntax:   "LZCNT r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F BD /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xbd},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"LZCNT"},
		DataSize:   64,
	}
	MASKMOVDQU_XMM1_XMM2 = &Instruction{
		Mnemonic: "maskmovdqu",
		UID:      "MASKMOVDQU_XMM1_XMM2",
		Syntax:   "MASKMOVDQU xmm1, xmm2",
		Encoding: &Encoding{
			Syntax:            "66 0F F7 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf7},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MASKMOVQ_MM1_MM2 = &Instruction{
		Mnemonic: "maskmovq",
		UID:      "MASKMOVQ_MM1_MM2",
		Syntax:   "MASKMOVQ mm1, mm2",
		Encoding: &Encoding{
			Syntax:        "NP 0F F7 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf7},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	MAXPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "maxpd",
		UID:      "MAXPD_XMM1_XMM2",
		Syntax:   "MAXPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5F /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MAXPD_XMM1_M128 = &Instruction{
		Mnemonic: "maxpd",
		UID:      "MAXPD_XMM1_M128",
		Syntax:   "MAXPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5F /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MAXPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "maxps",
		UID:      "MAXPS_XMM1_XMM2",
		Syntax:   "MAXPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5F /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5f},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MAXPS_XMM1_M128 = &Instruction{
		Mnemonic: "maxps",
		UID:      "MAXPS_XMM1_M128",
		Syntax:   "MAXPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5F /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5f},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MAXSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "maxsd",
		UID:      "MAXSD_XMM1_XMM2",
		Syntax:   "MAXSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 5F /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x5f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MAXSD_XMM1_M64 = &Instruction{
		Mnemonic: "maxsd",
		UID:      "MAXSD_XMM1_M64",
		Syntax:   "MAXSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 5F /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x5f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MAXSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "maxss",
		UID:      "MAXSS_XMM1_XMM2",
		Syntax:   "MAXSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5F /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MAXSS_XMM1_M32 = &Instruction{
		Mnemonic: "maxss",
		UID:      "MAXSS_XMM1_M32",
		Syntax:   "MAXSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5F /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MFENCE = &Instruction{
		Mnemonic: "mfence",
		UID:      "MFENCE",
		Syntax:   "MFENCE",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE F0",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae, 0xf0},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"SSE2"},
	}
	MINPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "minpd",
		UID:      "MINPD_XMM1_XMM2",
		Syntax:   "MINPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MINPD_XMM1_M128 = &Instruction{
		Mnemonic: "minpd",
		UID:      "MINPD_XMM1_M128",
		Syntax:   "MINPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MINPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "minps",
		UID:      "MINPS_XMM1_XMM2",
		Syntax:   "MINPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5D /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5d},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MINPS_XMM1_M128 = &Instruction{
		Mnemonic: "minps",
		UID:      "MINPS_XMM1_M128",
		Syntax:   "MINPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5D /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5d},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MINSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "minsd",
		UID:      "MINSD_XMM1_XMM2",
		Syntax:   "MINSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 5D /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x5d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MINSD_XMM1_M64 = &Instruction{
		Mnemonic: "minsd",
		UID:      "MINSD_XMM1_M64",
		Syntax:   "MINSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 5D /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x5d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MINSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "minss",
		UID:      "MINSS_XMM1_XMM2",
		Syntax:   "MINSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5D /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MINSS_XMM1_M32 = &Instruction{
		Mnemonic: "minss",
		UID:      "MINSS_XMM1_M32",
		Syntax:   "MINSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5D /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MONITOR = &Instruction{
		Mnemonic: "monitor",
		UID:      "MONITOR",
		Syntax:   "MONITOR",
		Encoding: &Encoding{
			Syntax: "0F 01 C8",
			Opcode: []byte{0x0f, 0x01, 0xc8},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	MOV_AL_Moffs8 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_AL_Moffs8",
		Syntax:   "MOV AL, moffs8",
		Encoding: &Encoding{
			Syntax: "A0",
			Opcode: []byte{0xa0},
		},
		Parameters: []*Parameter{ParamAL, ParamMoffs8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_AL_Moffs8_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_AL_Moffs8_REX",
		Syntax:   "MOV AL, moffs8",
		Encoding: &Encoding{
			Syntax: "REX.W A0",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa0},
		},
		Parameters: []*Parameter{ParamAL, ParamMoffs8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_AX_Moffs16 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_AX_Moffs16",
		Syntax:   "MOV AX, moffs16",
		Encoding: &Encoding{
			Syntax: "A1",
			Opcode: []byte{0xa1},
		},
		Parameters:  []*Parameter{ParamAX, ParamMoffs16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOV_EAX_Moffs32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_EAX_Moffs32",
		Syntax:   "MOV EAX, moffs32",
		Encoding: &Encoding{
			Syntax: "A1",
			Opcode: []byte{0xa1},
		},
		Parameters:  []*Parameter{ParamEAX, ParamMoffs32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOV_RAX_Moffs64_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_RAX_Moffs64_REX",
		Syntax:   "MOV RAX, moffs64",
		Encoding: &Encoding{
			Syntax: "REX.W A1",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa1},
		},
		Parameters: []*Parameter{ParamRAX, ParamMoffs64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_CR8_Rmr64_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_CR8_Rmr64_REX",
		Syntax:   "MOV CR8, rmr64",
		Encoding: &Encoding{
			Syntax:   "REX.R + 0F 22 /0",
			REX:      true,
			REX_R:    true,
			Opcode:   []byte{0x0f, 0x22},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamCR8, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_R8_Rmr8 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R8_Rmr8",
		Syntax:   "MOV r8, r/m8",
		Encoding: &Encoding{
			Syntax: "8A /r",
			Opcode: []byte{0x8a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_R8_M8 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R8_M8",
		Syntax:   "MOV r8, r/m8",
		Encoding: &Encoding{
			Syntax: "8A /r",
			Opcode: []byte{0x8a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_R16_Rmr16 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R16_Rmr16",
		Syntax:   "MOV r16, r/m16",
		Encoding: &Encoding{
			Syntax: "8B /r",
			Opcode: []byte{0x8b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOV_R16_M16 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R16_M16",
		Syntax:   "MOV r16, r/m16",
		Encoding: &Encoding{
			Syntax: "8B /r",
			Opcode: []byte{0x8b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOV_R32_Rmr32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R32_Rmr32",
		Syntax:   "MOV r32, r/m32",
		Encoding: &Encoding{
			Syntax: "8B /r",
			Opcode: []byte{0x8b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOV_R32_M32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R32_M32",
		Syntax:   "MOV r32, r/m32",
		Encoding: &Encoding{
			Syntax: "8B /r",
			Opcode: []byte{0x8b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOV_R64_Rmr64_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R64_Rmr64_REX",
		Syntax:   "MOV r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 8B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x8b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_R64_M64_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R64_M64_REX",
		Syntax:   "MOV r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 8B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x8b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_Sreg_Rmr16 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Sreg_Rmr16",
		Syntax:   "MOV Sreg, r/m16",
		Encoding: &Encoding{
			Syntax: "8E /r",
			Opcode: []byte{0x8e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamSreg, ParamRmr16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   16,
	}
	MOV_Sreg_Rmr32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Sreg_Rmr32",
		Syntax:   "MOV Sreg, rmr32",
		Encoding: &Encoding{
			Syntax: "8E /r",
			Opcode: []byte{0x8e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamSreg, ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   16,
	}
	MOV_Sreg_M16 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Sreg_M16",
		Syntax:   "MOV Sreg, r/m16",
		Encoding: &Encoding{
			Syntax: "8E /r",
			Opcode: []byte{0x8e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamSreg, ParamM16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   16,
	}
	MOV_CR0toCR7_Rmr32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_CR0toCR7_Rmr32",
		Syntax:   "MOV CR0-CR7, rmr32",
		Encoding: &Encoding{
			Syntax: "0F 22 /r",
			Opcode: []byte{0x0f, 0x22},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamCR0toCR7, ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
		DataSize:   32,
	}
	MOV_CR0toCR7_Rmr64 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_CR0toCR7_Rmr64",
		Syntax:   "MOV CR0-CR7, rmr64",
		Encoding: &Encoding{
			Syntax: "0F 22 /r",
			Opcode: []byte{0x0f, 0x22},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamCR0toCR7, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_DR0toDR7_Rmr32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_DR0toDR7_Rmr32",
		Syntax:   "MOV DR0-DR7, rmr32",
		Encoding: &Encoding{
			Syntax: "0F 23 /r",
			Opcode: []byte{0x0f, 0x23},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamDR0toDR7, ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
		DataSize:   32,
	}
	MOV_DR0toDR7_Rmr64 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_DR0toDR7_Rmr64",
		Syntax:   "MOV DR0-DR7, rmr64",
		Encoding: &Encoding{
			Syntax: "0F 23 /r",
			Opcode: []byte{0x0f, 0x23},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamDR0toDR7, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_Rmr8_Imm8u = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr8_Imm8u",
		Syntax:   "MOV r/m8, imm8u",
		Encoding: &Encoding{
			Syntax:   "C6 /0 ib",
			Opcode:   []byte{0xc6},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_Rmr8_R8 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr8_R8",
		Syntax:   "MOV r/m8, r8",
		Encoding: &Encoding{
			Syntax: "88 /r",
			Opcode: []byte{0x88},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_Rmr16_Imm16 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr16_Imm16",
		Syntax:   "MOV r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "C7 /0 iw",
			Opcode:   []byte{0xc7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOV_Rmr16_R16 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr16_R16",
		Syntax:   "MOV r/m16, r16",
		Encoding: &Encoding{
			Syntax: "89 /r",
			Opcode: []byte{0x89},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOV_Rmr16_Sreg = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr16_Sreg",
		Syntax:   "MOV r16/r32/m16, Sreg",
		Encoding: &Encoding{
			Syntax: "8C /r",
			Opcode: []byte{0x8c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamSreg},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	MOV_Rmr32_Imm32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr32_Imm32",
		Syntax:   "MOV r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "C7 /0 id",
			Opcode:   []byte{0xc7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOV_Rmr32_R32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr32_R32",
		Syntax:   "MOV r/m32, r32",
		Encoding: &Encoding{
			Syntax: "89 /r",
			Opcode: []byte{0x89},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOV_Rmr32_Sreg = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr32_Sreg",
		Syntax:   "MOV r16/r32/m16, Sreg",
		Encoding: &Encoding{
			Syntax: "8C /r",
			Opcode: []byte{0x8c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamSreg},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	MOV_Rmr32_CR0toCR7 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr32_CR0toCR7",
		Syntax:   "MOV rmr32, CR0-CR7",
		Encoding: &Encoding{
			Syntax: "0F 20 /r",
			Opcode: []byte{0x0f, 0x20},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamCR0toCR7},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
		DataSize:   32,
	}
	MOV_Rmr32_DR0toDR7 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr32_DR0toDR7",
		Syntax:   "MOV rmr32, DR0-DR7",
		Encoding: &Encoding{
			Syntax: "0F 21 /r",
			Opcode: []byte{0x0f, 0x21},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamDR0toDR7},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
		DataSize:   32,
	}
	MOV_Rmr64_CR8_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr64_CR8_REX",
		Syntax:   "MOV rmr64, CR8",
		Encoding: &Encoding{
			Syntax:   "REX.R + 0F 20 /0",
			REX:      true,
			REX_R:    true,
			Opcode:   []byte{0x0f, 0x20},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr64, ParamCR8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr64_Imm32_REX",
		Syntax:   "MOV r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W C7 /0 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_Rmr64_R64_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr64_R64_REX",
		Syntax:   "MOV r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 89 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x89},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_Rmr64_CR0toCR7 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr64_CR0toCR7",
		Syntax:   "MOV rmr64, CR0-CR7",
		Encoding: &Encoding{
			Syntax: "0F 20 /r",
			Opcode: []byte{0x0f, 0x20},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamCR0toCR7},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_Rmr64_DR0toDR7 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Rmr64_DR0toDR7",
		Syntax:   "MOV rmr64, DR0-DR7",
		Encoding: &Encoding{
			Syntax: "0F 21 /r",
			Opcode: []byte{0x0f, 0x21},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamDR0toDR7},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_R8op_Imm8u = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R8op_Imm8u",
		Syntax:   "MOV r8op, imm8u",
		Encoding: &Encoding{
			Syntax:           "B0+rb ib",
			Opcode:           []byte{0xb0},
			RegisterModifier: 1,
		},
		Parameters: []*Parameter{ParamR8op, ParamImm8u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_R16op_Imm16 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R16op_Imm16",
		Syntax:   "MOV r16op, imm16",
		Encoding: &Encoding{
			Syntax:           "B8+rw iw",
			Opcode:           []byte{0xb8},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR16op, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOV_R32op_Imm32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R32op_Imm32",
		Syntax:   "MOV r32op, imm32",
		Encoding: &Encoding{
			Syntax:           "B8+rd id",
			Opcode:           []byte{0xb8},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR32op, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOV_R64op_Imm64_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_R64op_Imm64_REX",
		Syntax:   "MOV r64op, imm64",
		Encoding: &Encoding{
			Syntax:           "REX.W B8+rd io",
			REX:              true,
			REX_W:            true,
			Opcode:           []byte{0xb8},
			RegisterModifier: 1,
		},
		Parameters: []*Parameter{ParamR64op, ParamImm64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_M8_Imm8u = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_M8_Imm8u",
		Syntax:   "MOV r/m8, imm8u",
		Encoding: &Encoding{
			Syntax:   "C6 /0 ib",
			Opcode:   []byte{0xc6},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_M8_R8 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_M8_R8",
		Syntax:   "MOV r/m8, r8",
		Encoding: &Encoding{
			Syntax: "88 /r",
			Opcode: []byte{0x88},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_M16_Imm16 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_M16_Imm16",
		Syntax:   "MOV r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "C7 /0 iw",
			Opcode:   []byte{0xc7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOV_M16_R16 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_M16_R16",
		Syntax:   "MOV r/m16, r16",
		Encoding: &Encoding{
			Syntax: "89 /r",
			Opcode: []byte{0x89},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOV_M16_Sreg = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_M16_Sreg",
		Syntax:   "MOV r16/r32/m16, Sreg",
		Encoding: &Encoding{
			Syntax: "8C /r",
			Opcode: []byte{0x8c},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamSreg},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	MOV_M32_Imm32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_M32_Imm32",
		Syntax:   "MOV r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "C7 /0 id",
			Opcode:   []byte{0xc7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOV_M32_R32 = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_M32_R32",
		Syntax:   "MOV r/m32, r32",
		Encoding: &Encoding{
			Syntax: "89 /r",
			Opcode: []byte{0x89},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOV_M64_Imm32_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_M64_Imm32_REX",
		Syntax:   "MOV r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W C7 /0 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_M64_R64_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_M64_R64_REX",
		Syntax:   "MOV r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 89 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x89},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOV_Moffs8_AL = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Moffs8_AL",
		Syntax:   "MOV moffs8, AL",
		Encoding: &Encoding{
			Syntax: "A2",
			Opcode: []byte{0xa2},
		},
		Parameters: []*Parameter{ParamMoffs8, ParamAL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_Moffs8_AL_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Moffs8_AL_REX",
		Syntax:   "MOV moffs8, AL",
		Encoding: &Encoding{
			Syntax: "REX.W A2",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa2},
		},
		Parameters: []*Parameter{ParamMoffs8, ParamAL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   8,
	}
	MOV_Moffs16_AX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Moffs16_AX",
		Syntax:   "MOV moffs16, AX",
		Encoding: &Encoding{
			Syntax: "A3",
			Opcode: []byte{0xa3},
		},
		Parameters:  []*Parameter{ParamMoffs16, ParamAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOV_Moffs32_EAX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Moffs32_EAX",
		Syntax:   "MOV moffs32, EAX",
		Encoding: &Encoding{
			Syntax: "A3",
			Opcode: []byte{0xa3},
		},
		Parameters:  []*Parameter{ParamMoffs32, ParamEAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOV_Moffs64_RAX_REX = &Instruction{
		Mnemonic: "mov",
		UID:      "MOV_Moffs64_RAX_REX",
		Syntax:   "MOV moffs64, RAX",
		Encoding: &Encoding{
			Syntax: "REX.W A3",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa3},
		},
		Parameters: []*Parameter{ParamMoffs64, ParamRAX},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOVAPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "movapd",
		UID:      "MOVAPD_XMM1_XMM2",
		Syntax:   "MOVAPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 28 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x28},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVAPD_XMM1_M128 = &Instruction{
		Mnemonic: "movapd",
		UID:      "MOVAPD_XMM1_M128",
		Syntax:   "MOVAPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 28 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x28},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVAPD_XMM2_XMM1 = &Instruction{
		Mnemonic: "movapd",
		UID:      "MOVAPD_XMM2_XMM1",
		Syntax:   "MOVAPD xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 29 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x29},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVAPD_M128_XMM1 = &Instruction{
		Mnemonic: "movapd",
		UID:      "MOVAPD_M128_XMM1",
		Syntax:   "MOVAPD xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 29 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x29},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVAPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "movaps",
		UID:      "MOVAPS_XMM1_XMM2",
		Syntax:   "MOVAPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 28 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x28},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVAPS_XMM1_M128 = &Instruction{
		Mnemonic: "movaps",
		UID:      "MOVAPS_XMM1_M128",
		Syntax:   "MOVAPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 28 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x28},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVAPS_XMM2_XMM1 = &Instruction{
		Mnemonic: "movaps",
		UID:      "MOVAPS_XMM2_XMM1",
		Syntax:   "MOVAPS xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F 29 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x29},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVAPS_M128_XMM1 = &Instruction{
		Mnemonic: "movaps",
		UID:      "MOVAPS_M128_XMM1",
		Syntax:   "MOVAPS xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F 29 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x29},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVBE_R16_M16 = &Instruction{
		Mnemonic: "movbe",
		UID:      "MOVBE_R16_M16",
		Syntax:   "MOVBE r16, m16",
		Encoding: &Encoding{
			Syntax: "0F 38 F0 /r",
			Opcode: []byte{0x0f, 0x38, 0xf0},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"MOVBE"},
		OperandSize: true,
		DataSize:    16,
	}
	MOVBE_R32_M32 = &Instruction{
		Mnemonic: "movbe",
		UID:      "MOVBE_R32_M32",
		Syntax:   "MOVBE r32, m32",
		Encoding: &Encoding{
			Syntax: "0F 38 F0 /r",
			Opcode: []byte{0x0f, 0x38, 0xf0},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"MOVBE"},
		OperandSize: true,
		DataSize:    32,
	}
	MOVBE_R64_M64_REX = &Instruction{
		Mnemonic: "movbe",
		UID:      "MOVBE_R64_M64_REX",
		Syntax:   "MOVBE r64, m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 38 F0 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x38, 0xf0},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"MOVBE"},
		DataSize:   64,
	}
	MOVBE_M16_R16 = &Instruction{
		Mnemonic: "movbe",
		UID:      "MOVBE_M16_R16",
		Syntax:   "MOVBE m16, r16",
		Encoding: &Encoding{
			Syntax: "0F 38 F1 /r",
			Opcode: []byte{0x0f, 0x38, 0xf1},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"MOVBE"},
		OperandSize: true,
		DataSize:    16,
	}
	MOVBE_M32_R32 = &Instruction{
		Mnemonic: "movbe",
		UID:      "MOVBE_M32_R32",
		Syntax:   "MOVBE m32, r32",
		Encoding: &Encoding{
			Syntax: "0F 38 F1 /r",
			Opcode: []byte{0x0f, 0x38, 0xf1},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"MOVBE"},
		OperandSize: true,
		DataSize:    32,
	}
	MOVBE_M64_R64_REX = &Instruction{
		Mnemonic: "movbe",
		UID:      "MOVBE_M64_R64_REX",
		Syntax:   "MOVBE m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 38 F1 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x38, 0xf1},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"MOVBE"},
		DataSize:   64,
	}
	MOVD_MM1_Rmr32 = &Instruction{
		Mnemonic: "movd",
		UID:      "MOVD_MM1_Rmr32",
		Syntax:   "MOVD mm1, r/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 6E /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x6e},
			ModRM:         true,
		},
		Parameters:  []*Parameter{ParamMM1, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"MMX"},
		OperandSize: true,
	}
	MOVD_MM1_M32 = &Instruction{
		Mnemonic: "movd",
		UID:      "MOVD_MM1_M32",
		Syntax:   "MOVD mm1, r/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 6E /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x6e},
			ModRM:         true,
		},
		Parameters:  []*Parameter{ParamMM1, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"MMX"},
		OperandSize: true,
	}
	MOVD_XMM1_Rmr32 = &Instruction{
		Mnemonic: "movd",
		UID:      "MOVD_XMM1_Rmr32",
		Syntax:   "MOVD xmm1, r/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 6E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6e},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamXMM1, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"SSE2"},
		OperandSize: true,
	}
	MOVD_XMM1_M32 = &Instruction{
		Mnemonic: "movd",
		UID:      "MOVD_XMM1_M32",
		Syntax:   "MOVD xmm1, r/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 6E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6e},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamXMM1, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"SSE2"},
		OperandSize: true,
	}
	MOVD_Rmr32_MM1 = &Instruction{
		Mnemonic: "movd",
		UID:      "MOVD_Rmr32_MM1",
		Syntax:   "MOVD r/m32, mm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F 7E /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x7e},
			ModRM:         true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamMM1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"MMX"},
		OperandSize: true,
	}
	MOVD_Rmr32_XMM1 = &Instruction{
		Mnemonic: "movd",
		UID:      "MOVD_Rmr32_XMM1",
		Syntax:   "MOVD r/m32, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 7E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x7e},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamXMM1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"SSE2"},
		OperandSize: true,
	}
	MOVD_M32_MM1 = &Instruction{
		Mnemonic: "movd",
		UID:      "MOVD_M32_MM1",
		Syntax:   "MOVD r/m32, mm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F 7E /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x7e},
			ModRM:         true,
		},
		Parameters:  []*Parameter{ParamM32, ParamMM1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"MMX"},
		OperandSize: true,
	}
	MOVD_M32_XMM1 = &Instruction{
		Mnemonic: "movd",
		UID:      "MOVD_M32_XMM1",
		Syntax:   "MOVD r/m32, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 7E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x7e},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamM32, ParamXMM1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"SSE2"},
		OperandSize: true,
	}
	MOVDDUP_XMM1_XMM2 = &Instruction{
		Mnemonic: "movddup",
		UID:      "MOVDDUP_XMM1_XMM2",
		Syntax:   "MOVDDUP xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 12 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x12},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	MOVDDUP_XMM1_M64 = &Instruction{
		Mnemonic: "movddup",
		UID:      "MOVDDUP_XMM1_M64",
		Syntax:   "MOVDDUP xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 12 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x12},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	MOVDIR64B_R16_M512 = &Instruction{
		Mnemonic: "movdir64b",
		UID:      "MOVDIR64B_R16_M512",
		Syntax:   "MOVDIR64B r16/r32, m512",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 F8 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xf8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR16, ParamM512},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MOVDIR64B"},
	}
	MOVDIR64B_R32_M512 = &Instruction{
		Mnemonic: "movdir64b",
		UID:      "MOVDIR64B_R32_M512",
		Syntax:   "MOVDIR64B r16/r32, m512",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 F8 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xf8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamM512},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MOVDIR64B"},
	}
	MOVDIR64B_R64_M512 = &Instruction{
		Mnemonic: "movdir64b",
		UID:      "MOVDIR64B_R64_M512",
		Syntax:   "MOVDIR64B r16/r32/r64, m512",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 F8 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xf8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM512},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	MOVDIRI_M32_R32 = &Instruction{
		Mnemonic: "movdiri",
		UID:      "MOVDIRI_M32_R32",
		Syntax:   "MOVDIRI m32, r32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 F9 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xf9},
			ModRM:         true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"MOVDIRI"},
		OperandSize: true,
		DataSize:    32,
	}
	MOVDIRI_M64_R64_REX = &Instruction{
		Mnemonic: "movdiri",
		UID:      "MOVDIRI_M64_R64_REX",
		Syntax:   "MOVDIRI m64, r64",
		Encoding: &Encoding{
			Syntax:        "NP REX.W 0F 38 F9 /r",
			NoVEXPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0x38, 0xf9},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"MOVDIRI"},
		DataSize:   64,
	}
	MOVDQ2Q_MM1_XMM2 = &Instruction{
		Mnemonic: "movdq2q",
		UID:      "MOVDQ2Q_MM1_XMM2",
		Syntax:   "MOVDQ2Q mm1, xmm2",
		Encoding: &Encoding{
			Syntax:            "F2 0F D6 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xd6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	MOVDQA_XMM1_XMM2 = &Instruction{
		Mnemonic: "movdqa",
		UID:      "MOVDQA_XMM1_XMM2",
		Syntax:   "MOVDQA xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 6F /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVDQA_XMM1_M128 = &Instruction{
		Mnemonic: "movdqa",
		UID:      "MOVDQA_XMM1_M128",
		Syntax:   "MOVDQA xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 6F /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVDQA_XMM2_XMM1 = &Instruction{
		Mnemonic: "movdqa",
		UID:      "MOVDQA_XMM2_XMM1",
		Syntax:   "MOVDQA xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 7F /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x7f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVDQA_M128_XMM1 = &Instruction{
		Mnemonic: "movdqa",
		UID:      "MOVDQA_M128_XMM1",
		Syntax:   "MOVDQA xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 7F /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x7f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVDQU_XMM1_XMM2 = &Instruction{
		Mnemonic: "movdqu",
		UID:      "MOVDQU_XMM1_XMM2",
		Syntax:   "MOVDQU xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F3 0F 6F /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x6f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVDQU_XMM1_M128 = &Instruction{
		Mnemonic: "movdqu",
		UID:      "MOVDQU_XMM1_M128",
		Syntax:   "MOVDQU xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F3 0F 6F /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x6f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVDQU_XMM2_XMM1 = &Instruction{
		Mnemonic: "movdqu",
		UID:      "MOVDQU_XMM2_XMM1",
		Syntax:   "MOVDQU xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:            "F3 0F 7F /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x7f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVDQU_M128_XMM1 = &Instruction{
		Mnemonic: "movdqu",
		UID:      "MOVDQU_M128_XMM1",
		Syntax:   "MOVDQU xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:            "F3 0F 7F /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x7f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVHLPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "movhlps",
		UID:      "MOVHLPS_XMM1_XMM2",
		Syntax:   "MOVHLPS xmm1, xmm2",
		Encoding: &Encoding{
			Syntax:        "NP 0F 12 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x12},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVHPD_XMM1_M64 = &Instruction{
		Mnemonic: "movhpd",
		UID:      "MOVHPD_XMM1_M64",
		Syntax:   "MOVHPD xmm1, m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 16 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x16},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVHPD_M64_XMM1 = &Instruction{
		Mnemonic: "movhpd",
		UID:      "MOVHPD_M64_XMM1",
		Syntax:   "MOVHPD m64, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 17 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x17},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVHPS_XMM1_M64 = &Instruction{
		Mnemonic: "movhps",
		UID:      "MOVHPS_XMM1_M64",
		Syntax:   "MOVHPS xmm1, m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 16 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x16},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVHPS_M64_XMM1 = &Instruction{
		Mnemonic: "movhps",
		UID:      "MOVHPS_M64_XMM1",
		Syntax:   "MOVHPS m64, xmm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F 17 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x17},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVLHPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "movlhps",
		UID:      "MOVLHPS_XMM1_XMM2",
		Syntax:   "MOVLHPS xmm1, xmm2",
		Encoding: &Encoding{
			Syntax:        "NP 0F 16 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x16},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVLPD_XMM1_M64 = &Instruction{
		Mnemonic: "movlpd",
		UID:      "MOVLPD_XMM1_M64",
		Syntax:   "MOVLPD xmm1, m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 12 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x12},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVLPD_M64_XMM1 = &Instruction{
		Mnemonic: "movlpd",
		UID:      "MOVLPD_M64_XMM1",
		Syntax:   "MOVLPD m64, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 13 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x13},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVLPS_XMM1_M64 = &Instruction{
		Mnemonic: "movlps",
		UID:      "MOVLPS_XMM1_M64",
		Syntax:   "MOVLPS xmm1, m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 12 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x12},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVLPS_M64_XMM1 = &Instruction{
		Mnemonic: "movlps",
		UID:      "MOVLPS_M64_XMM1",
		Syntax:   "MOVLPS m64, xmm1",
		Encoding: &Encoding{
			Syntax: "0F 13 /r",
			Opcode: []byte{0x0f, 0x13},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVMSKPD_R32_XMM2 = &Instruction{
		Mnemonic: "movmskpd",
		UID:      "MOVMSKPD_R32_XMM2",
		Syntax:   "MOVMSKPD r32, xmm2",
		Encoding: &Encoding{
			Syntax:            "66 0F 50 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x50},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVMSKPS_R32_XMM2 = &Instruction{
		Mnemonic: "movmskps",
		UID:      "MOVMSKPS_R32_XMM2",
		Syntax:   "MOVMSKPS r32, xmm2",
		Encoding: &Encoding{
			Syntax:        "NP 0F 50 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x50},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVNTDQ_M128_XMM1 = &Instruction{
		Mnemonic: "movntdq",
		UID:      "MOVNTDQ_M128_XMM1",
		Syntax:   "MOVNTDQ m128, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F E7 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe7},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVNTDQA_XMM1_M128 = &Instruction{
		Mnemonic: "movntdqa",
		UID:      "MOVNTDQA_XMM1_M128",
		Syntax:   "MOVNTDQA xmm1, m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 2A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x2a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	MOVNTI_M32_R32 = &Instruction{
		Mnemonic: "movnti",
		UID:      "MOVNTI_M32_R32",
		Syntax:   "MOVNTI m32, r32",
		Encoding: &Encoding{
			Syntax:        "NP 0F C3 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc3},
			ModRM:         true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"SSE2"},
		OperandSize: true,
	}
	MOVNTI_M64_R64_REX = &Instruction{
		Mnemonic: "movnti",
		UID:      "MOVNTI_M64_R64_REX",
		Syntax:   "MOVNTI m64, r64",
		Encoding: &Encoding{
			Syntax:        "NP REX.W 0F C3 /r",
			NoVEXPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xc3},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
		DataSize:   64,
	}
	MOVNTPD_M128_XMM1 = &Instruction{
		Mnemonic: "movntpd",
		UID:      "MOVNTPD_M128_XMM1",
		Syntax:   "MOVNTPD m128, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 2B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVNTPS_M128_XMM1 = &Instruction{
		Mnemonic: "movntps",
		UID:      "MOVNTPS_M128_XMM1",
		Syntax:   "MOVNTPS m128, xmm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2B /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2b},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVNTQ_M64_MM1 = &Instruction{
		Mnemonic: "movntq",
		UID:      "MOVNTQ_M64_MM1",
		Syntax:   "MOVNTQ m64, mm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F E7 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe7},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamM64, ParamMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	MOVNTSD_M64_XMM1 = &Instruction{
		Mnemonic: "movntsd",
		UID:      "MOVNTSD_M64_XMM1",
		Syntax:   "MOVNTSD m64, xmm1",
		Encoding: &Encoding{
			Syntax:            "F2 0F 2B /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x2b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVNTSS_M32_XMM1 = &Instruction{
		Mnemonic: "movntss",
		UID:      "MOVNTSS_M32_XMM1",
		Syntax:   "MOVNTSS m32, xmm1",
		Encoding: &Encoding{
			Syntax:            "F3 0F 2B /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x2b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVQ_MM1_MM2 = &Instruction{
		Mnemonic: "movq",
		UID:      "MOVQ_MM1_MM2",
		Syntax:   "MOVQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 6F /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x6f},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	MOVQ_MM1_M64 = &Instruction{
		Mnemonic: "movq",
		UID:      "MOVQ_MM1_M64",
		Syntax:   "MOVQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 6F /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x6f},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	MOVQ_XMM1_Rmr64_REX = &Instruction{
		Mnemonic: "movq",
		UID:      "MOVQ_XMM1_Rmr64_REX",
		Syntax:   "MOVQ xmm1, rmr64",
		Encoding: &Encoding{
			Syntax:            "66 REX.W 0F 6E /r",
			MandatoryPrefixes: []Prefix{0x66},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x6e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "movq",
		UID:      "MOVQ_XMM1_XMM2",
		Syntax:   "MOVQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F3 0F 7E /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x7e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVQ_XMM1_M64 = &Instruction{
		Mnemonic: "movq",
		UID:      "MOVQ_XMM1_M64",
		Syntax:   "MOVQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F3 0F 7E /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x7e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVQ_Rmr64_XMM1_REX = &Instruction{
		Mnemonic: "movq",
		UID:      "MOVQ_Rmr64_XMM1_REX",
		Syntax:   "MOVQ rmr64, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 REX.W 0F 7E /r",
			MandatoryPrefixes: []Prefix{0x66},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x7e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamXMM1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVQ_MM2_MM1 = &Instruction{
		Mnemonic: "movq",
		UID:      "MOVQ_MM2_MM1",
		Syntax:   "MOVQ mm2/m64, mm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F 7F /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x7f},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM2, ParamMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	MOVQ_XMM2_XMM1 = &Instruction{
		Mnemonic: "movq",
		UID:      "MOVQ_XMM2_XMM1",
		Syntax:   "MOVQ xmm2/m64, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F D6 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVQ_M64_MM1 = &Instruction{
		Mnemonic: "movq",
		UID:      "MOVQ_M64_MM1",
		Syntax:   "MOVQ mm2/m64, mm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F 7F /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x7f},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamM64, ParamMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	MOVQ_M64_XMM1 = &Instruction{
		Mnemonic: "movq",
		UID:      "MOVQ_M64_XMM1",
		Syntax:   "MOVQ xmm2/m64, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F D6 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVQ2DQ_XMM1_MM2 = &Instruction{
		Mnemonic: "movq2dq",
		UID:      "MOVQ2DQ_XMM1_MM2",
		Syntax:   "MOVQ2DQ xmm1, mm2",
		Encoding: &Encoding{
			Syntax:            "F3 0F D6 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xd6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVS_StrDst8_StrSrc8 = &Instruction{
		Mnemonic: "movs",
		UID:      "MOVS_StrDst8_StrSrc8",
		Syntax:   "MOVS [es:edi:8], [ds:esi:8]",
		Encoding: &Encoding{
			Syntax: "A4",
			Opcode: []byte{0xa4},
		},
		Parameters:  []*Parameter{ParamStrDst8, ParamStrSrc8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	MOVS_StrDst16_StrSrc16 = &Instruction{
		Mnemonic: "movs",
		UID:      "MOVS_StrDst16_StrSrc16",
		Syntax:   "MOVS [es:edi:16], [ds:esi:16]",
		Encoding: &Encoding{
			Syntax: "A5",
			Opcode: []byte{0xa5},
		},
		Parameters:  []*Parameter{ParamStrDst16, ParamStrSrc16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOVS_StrDst32_StrSrc32 = &Instruction{
		Mnemonic: "movs",
		UID:      "MOVS_StrDst32_StrSrc32",
		Syntax:   "MOVS [es:edi:32], [ds:esi:32]",
		Encoding: &Encoding{
			Syntax: "A5",
			Opcode: []byte{0xa5},
		},
		Parameters:  []*Parameter{ParamStrDst32, ParamStrSrc32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVS_StrDst64_StrSrc64_REX = &Instruction{
		Mnemonic: "movs",
		UID:      "MOVS_StrDst64_StrSrc64_REX",
		Syntax:   "MOVS [rdi:64], [rsi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W A5",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa5},
		},
		Parameters:  []*Parameter{ParamStrDst64, ParamStrSrc64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	MOVSB = &Instruction{
		Mnemonic: "movsb",
		UID:      "MOVSB",
		Syntax:   "MOVSB",
		Encoding: &Encoding{
			Syntax: "A4",
			Opcode: []byte{0xa4},
		},
		Mode16:   true,
		Mode32:   true,
		Mode64:   true,
		DataSize: 8,
	}
	MOVSB_StrDst8_StrSrc8 = &Instruction{
		Mnemonic: "movsb",
		UID:      "MOVSB_StrDst8_StrSrc8",
		Syntax:   "MOVSB [es:edi:8], [ds:esi:8]",
		Encoding: &Encoding{
			Syntax: "A4",
			Opcode: []byte{0xa4},
		},
		Parameters:  []*Parameter{ParamStrDst8, ParamStrSrc8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	MOVSD = &Instruction{
		Mnemonic: "movsd",
		UID:      "MOVSD",
		Syntax:   "MOVSD",
		Encoding: &Encoding{
			Syntax: "A5",
			Opcode: []byte{0xa5},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVSD_StrDst32_StrSrc32 = &Instruction{
		Mnemonic: "movsd",
		UID:      "MOVSD_StrDst32_StrSrc32",
		Syntax:   "MOVSD [es:edi:32], [ds:esi:32]",
		Encoding: &Encoding{
			Syntax: "A5",
			Opcode: []byte{0xa5},
		},
		Parameters:  []*Parameter{ParamStrDst32, ParamStrSrc32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "movsd",
		UID:      "MOVSD_XMM1_XMM2",
		Syntax:   "MOVSD xmm1, xmm2",
		Encoding: &Encoding{
			Syntax:            "F2 0F 10 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x10},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVSD_XMM1_M64 = &Instruction{
		Mnemonic: "movsd",
		UID:      "MOVSD_XMM1_M64",
		Syntax:   "MOVSD xmm1, m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 10 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x10},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVSD_XMM2_XMM1 = &Instruction{
		Mnemonic: "movsd",
		UID:      "MOVSD_XMM2_XMM1",
		Syntax:   "MOVSD xmm2/m64, xmm1",
		Encoding: &Encoding{
			Syntax:            "F2 0F 11 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x11},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVSD_M64_XMM1 = &Instruction{
		Mnemonic: "movsd",
		UID:      "MOVSD_M64_XMM1",
		Syntax:   "MOVSD xmm2/m64, xmm1",
		Encoding: &Encoding{
			Syntax:            "F2 0F 11 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x11},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVSHDUP_XMM1_XMM2 = &Instruction{
		Mnemonic: "movshdup",
		UID:      "MOVSHDUP_XMM1_XMM2",
		Syntax:   "MOVSHDUP xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F3 0F 16 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x16},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	MOVSHDUP_XMM1_M128 = &Instruction{
		Mnemonic: "movshdup",
		UID:      "MOVSHDUP_XMM1_M128",
		Syntax:   "MOVSHDUP xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F3 0F 16 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x16},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	MOVSLDUP_XMM1_XMM2 = &Instruction{
		Mnemonic: "movsldup",
		UID:      "MOVSLDUP_XMM1_XMM2",
		Syntax:   "MOVSLDUP xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F3 0F 12 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x12},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	MOVSLDUP_XMM1_M128 = &Instruction{
		Mnemonic: "movsldup",
		UID:      "MOVSLDUP_XMM1_M128",
		Syntax:   "MOVSLDUP xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "F3 0F 12 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x12},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE3"},
	}
	MOVSQ_REX = &Instruction{
		Mnemonic: "movsq",
		UID:      "MOVSQ_REX",
		Syntax:   "MOVSQ",
		Encoding: &Encoding{
			Syntax: "REX.W A5",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa5},
		},
		Mode16:   false,
		Mode32:   false,
		Mode64:   true,
		DataSize: 64,
	}
	MOVSQ_StrDst64_StrSrc64_REX = &Instruction{
		Mnemonic: "movsq",
		UID:      "MOVSQ_StrDst64_StrSrc64_REX",
		Syntax:   "MOVSQ [rdi:64], [rsi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W A5",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa5},
		},
		Parameters:  []*Parameter{ParamStrDst64, ParamStrSrc64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	MOVSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "movss",
		UID:      "MOVSS_XMM1_XMM2",
		Syntax:   "MOVSS xmm1, xmm2",
		Encoding: &Encoding{
			Syntax:            "F3 0F 10 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x10},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVSS_XMM1_M32 = &Instruction{
		Mnemonic: "movss",
		UID:      "MOVSS_XMM1_M32",
		Syntax:   "MOVSS xmm1, m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 10 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x10},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVSS_XMM2_XMM1 = &Instruction{
		Mnemonic: "movss",
		UID:      "MOVSS_XMM2_XMM1",
		Syntax:   "MOVSS xmm2/m32, xmm1",
		Encoding: &Encoding{
			Syntax:            "F3 0F 11 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x11},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVSS_M32_XMM1 = &Instruction{
		Mnemonic: "movss",
		UID:      "MOVSS_M32_XMM1",
		Syntax:   "MOVSS xmm2/m32, xmm1",
		Encoding: &Encoding{
			Syntax:            "F3 0F 11 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x11},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVSW = &Instruction{
		Mnemonic: "movsw",
		UID:      "MOVSW",
		Syntax:   "MOVSW",
		Encoding: &Encoding{
			Syntax: "A5",
			Opcode: []byte{0xa5},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOVSW_StrDst16_StrSrc16 = &Instruction{
		Mnemonic: "movsw",
		UID:      "MOVSW_StrDst16_StrSrc16",
		Syntax:   "MOVSW [es:edi:16], [ds:esi:16]",
		Encoding: &Encoding{
			Syntax: "A5",
			Opcode: []byte{0xa5},
		},
		Parameters:  []*Parameter{ParamStrDst16, ParamStrSrc16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOVSX_R16_Rmr8 = &Instruction{
		Mnemonic: "movsx",
		UID:      "MOVSX_R16_Rmr8",
		Syntax:   "MOVSX r16, r/m8",
		Encoding: &Encoding{
			Syntax: "0F BE /r",
			Opcode: []byte{0x0f, 0xbe},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOVSX_R16_M8 = &Instruction{
		Mnemonic: "movsx",
		UID:      "MOVSX_R16_M8",
		Syntax:   "MOVSX r16, r/m8",
		Encoding: &Encoding{
			Syntax: "0F BE /r",
			Opcode: []byte{0x0f, 0xbe},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOVSX_R32_Rmr8 = &Instruction{
		Mnemonic: "movsx",
		UID:      "MOVSX_R32_Rmr8",
		Syntax:   "MOVSX r32, r/m8",
		Encoding: &Encoding{
			Syntax: "0F BE /r",
			Opcode: []byte{0x0f, 0xbe},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVSX_R32_Rmr16 = &Instruction{
		Mnemonic: "movsx",
		UID:      "MOVSX_R32_Rmr16",
		Syntax:   "MOVSX r32, r/m16",
		Encoding: &Encoding{
			Syntax: "0F BF /r",
			Opcode: []byte{0x0f, 0xbf},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVSX_R32_M8 = &Instruction{
		Mnemonic: "movsx",
		UID:      "MOVSX_R32_M8",
		Syntax:   "MOVSX r32, r/m8",
		Encoding: &Encoding{
			Syntax: "0F BE /r",
			Opcode: []byte{0x0f, 0xbe},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVSX_R32_M16 = &Instruction{
		Mnemonic: "movsx",
		UID:      "MOVSX_R32_M16",
		Syntax:   "MOVSX r32, r/m16",
		Encoding: &Encoding{
			Syntax: "0F BF /r",
			Opcode: []byte{0x0f, 0xbf},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVSX_R64_Rmr8_REX = &Instruction{
		Mnemonic: "movsx",
		UID:      "MOVSX_R64_Rmr8_REX",
		Syntax:   "MOVSX r64, r/m8",
		Encoding: &Encoding{
			Syntax: "REX.W 0F BE /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xbe},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOVSX_R64_Rmr16_REX = &Instruction{
		Mnemonic: "movsx",
		UID:      "MOVSX_R64_Rmr16_REX",
		Syntax:   "MOVSX r64, r/m16",
		Encoding: &Encoding{
			Syntax: "REX.W 0F BF /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xbf},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr16},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOVSX_R64_M8_REX = &Instruction{
		Mnemonic: "movsx",
		UID:      "MOVSX_R64_M8_REX",
		Syntax:   "MOVSX r64, r/m8",
		Encoding: &Encoding{
			Syntax: "REX.W 0F BE /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xbe},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOVSX_R64_M16_REX = &Instruction{
		Mnemonic: "movsx",
		UID:      "MOVSX_R64_M16_REX",
		Syntax:   "MOVSX r64, r/m16",
		Encoding: &Encoding{
			Syntax: "REX.W 0F BF /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xbf},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM16},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOVSXD_R16_Rmr16 = &Instruction{
		Mnemonic: "movsxd",
		UID:      "MOVSXD_R16_Rmr16",
		Syntax:   "MOVSXD r16, r/m16",
		Encoding: &Encoding{
			Syntax: "63 /r",
			Opcode: []byte{0x63},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOVSXD_R16_M16 = &Instruction{
		Mnemonic: "movsxd",
		UID:      "MOVSXD_R16_M16",
		Syntax:   "MOVSXD r16, r/m16",
		Encoding: &Encoding{
			Syntax: "63 /r",
			Opcode: []byte{0x63},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOVSXD_R64_Rmr32_REX = &Instruction{
		Mnemonic: "movsxd",
		UID:      "MOVSXD_R64_Rmr32_REX",
		Syntax:   "MOVSXD r64, r/m32",
		Encoding: &Encoding{
			Syntax: "REX.W 63 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x63},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOVSXD_R64_M32_REX = &Instruction{
		Mnemonic: "movsxd",
		UID:      "MOVSXD_R64_M32_REX",
		Syntax:   "MOVSXD r64, r/m32",
		Encoding: &Encoding{
			Syntax: "REX.W 63 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x63},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOVUPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "movupd",
		UID:      "MOVUPD_XMM1_XMM2",
		Syntax:   "MOVUPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 10 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x10},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVUPD_XMM1_M128 = &Instruction{
		Mnemonic: "movupd",
		UID:      "MOVUPD_XMM1_M128",
		Syntax:   "MOVUPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 10 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x10},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVUPD_XMM2_XMM1 = &Instruction{
		Mnemonic: "movupd",
		UID:      "MOVUPD_XMM2_XMM1",
		Syntax:   "MOVUPD xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 11 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x11},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVUPD_M128_XMM1 = &Instruction{
		Mnemonic: "movupd",
		UID:      "MOVUPD_M128_XMM1",
		Syntax:   "MOVUPD xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:            "66 0F 11 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x11},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MOVUPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "movups",
		UID:      "MOVUPS_XMM1_XMM2",
		Syntax:   "MOVUPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 10 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x10},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVUPS_XMM1_M128 = &Instruction{
		Mnemonic: "movups",
		UID:      "MOVUPS_XMM1_M128",
		Syntax:   "MOVUPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 10 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x10},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVUPS_XMM2_XMM1 = &Instruction{
		Mnemonic: "movups",
		UID:      "MOVUPS_XMM2_XMM1",
		Syntax:   "MOVUPS xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F 11 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x11},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVUPS_M128_XMM1 = &Instruction{
		Mnemonic: "movups",
		UID:      "MOVUPS_M128_XMM1",
		Syntax:   "MOVUPS xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:        "NP 0F 11 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x11},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MOVZX_R16_Rmr8 = &Instruction{
		Mnemonic: "movzx",
		UID:      "MOVZX_R16_Rmr8",
		Syntax:   "MOVZX r16, r/m8",
		Encoding: &Encoding{
			Syntax: "0F B6 /r",
			Opcode: []byte{0x0f, 0xb6},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOVZX_R16_M8 = &Instruction{
		Mnemonic: "movzx",
		UID:      "MOVZX_R16_M8",
		Syntax:   "MOVZX r16, r/m8",
		Encoding: &Encoding{
			Syntax: "0F B6 /r",
			Opcode: []byte{0x0f, 0xb6},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MOVZX_R32_Rmr8 = &Instruction{
		Mnemonic: "movzx",
		UID:      "MOVZX_R32_Rmr8",
		Syntax:   "MOVZX r32, r/m8",
		Encoding: &Encoding{
			Syntax: "0F B6 /r",
			Opcode: []byte{0x0f, 0xb6},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVZX_R32_Rmr16 = &Instruction{
		Mnemonic: "movzx",
		UID:      "MOVZX_R32_Rmr16",
		Syntax:   "MOVZX r32, r/m16",
		Encoding: &Encoding{
			Syntax: "0F B7 /r",
			Opcode: []byte{0x0f, 0xb7},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVZX_R32_M8 = &Instruction{
		Mnemonic: "movzx",
		UID:      "MOVZX_R32_M8",
		Syntax:   "MOVZX r32, r/m8",
		Encoding: &Encoding{
			Syntax: "0F B6 /r",
			Opcode: []byte{0x0f, 0xb6},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVZX_R32_M16 = &Instruction{
		Mnemonic: "movzx",
		UID:      "MOVZX_R32_M16",
		Syntax:   "MOVZX r32, r/m16",
		Encoding: &Encoding{
			Syntax: "0F B7 /r",
			Opcode: []byte{0x0f, 0xb7},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MOVZX_R64_Rmr8_REX = &Instruction{
		Mnemonic: "movzx",
		UID:      "MOVZX_R64_Rmr8_REX",
		Syntax:   "MOVZX r64, r/m8",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B6 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb6},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOVZX_R64_Rmr16_REX = &Instruction{
		Mnemonic: "movzx",
		UID:      "MOVZX_R64_Rmr16_REX",
		Syntax:   "MOVZX r64, r/m16",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B7 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb7},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr16},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOVZX_R64_M8_REX = &Instruction{
		Mnemonic: "movzx",
		UID:      "MOVZX_R64_M8_REX",
		Syntax:   "MOVZX r64, r/m8",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B6 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb6},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MOVZX_R64_M16_REX = &Instruction{
		Mnemonic: "movzx",
		UID:      "MOVZX_R64_M16_REX",
		Syntax:   "MOVZX r64, r/m16",
		Encoding: &Encoding{
			Syntax: "REX.W 0F B7 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xb7},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM16},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MPSADBW_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "mpsadbw",
		UID:      "MPSADBW_XMM1_XMM2_Imm8",
		Syntax:   "MPSADBW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 42 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x42},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	MPSADBW_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "mpsadbw",
		UID:      "MPSADBW_XMM1_M128_Imm8",
		Syntax:   "MPSADBW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 42 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x42},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	MUL_Rmr8 = &Instruction{
		Mnemonic: "mul",
		UID:      "MUL_Rmr8",
		Syntax:   "MUL r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /4",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MUL_Rmr16 = &Instruction{
		Mnemonic: "mul",
		UID:      "MUL_Rmr16",
		Syntax:   "MUL r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /4",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MUL_Rmr32 = &Instruction{
		Mnemonic: "mul",
		UID:      "MUL_Rmr32",
		Syntax:   "MUL r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /4",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MUL_Rmr64_REX = &Instruction{
		Mnemonic: "mul",
		UID:      "MUL_Rmr64_REX",
		Syntax:   "MUL r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MUL_M8 = &Instruction{
		Mnemonic: "mul",
		UID:      "MUL_M8",
		Syntax:   "MUL r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /4",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	MUL_M16 = &Instruction{
		Mnemonic: "mul",
		UID:      "MUL_M16",
		Syntax:   "MUL r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /4",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	MUL_M32 = &Instruction{
		Mnemonic: "mul",
		UID:      "MUL_M32",
		Syntax:   "MUL r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /4",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	MUL_M64_REX = &Instruction{
		Mnemonic: "mul",
		UID:      "MUL_M64_REX",
		Syntax:   "MUL r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	MULPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "mulpd",
		UID:      "MULPD_XMM1_XMM2",
		Syntax:   "MULPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 59 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x59},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MULPD_XMM1_M128 = &Instruction{
		Mnemonic: "mulpd",
		UID:      "MULPD_XMM1_M128",
		Syntax:   "MULPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 59 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x59},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MULPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "mulps",
		UID:      "MULPS_XMM1_XMM2",
		Syntax:   "MULPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 59 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x59},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MULPS_XMM1_M128 = &Instruction{
		Mnemonic: "mulps",
		UID:      "MULPS_XMM1_M128",
		Syntax:   "MULPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 59 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x59},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MULSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "mulsd",
		UID:      "MULSD_XMM1_XMM2",
		Syntax:   "MULSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 59 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x59},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MULSD_XMM1_M64 = &Instruction{
		Mnemonic: "mulsd",
		UID:      "MULSD_XMM1_M64",
		Syntax:   "MULSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 59 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x59},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	MULSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "mulss",
		UID:      "MULSS_XMM1_XMM2",
		Syntax:   "MULSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 59 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x59},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MULSS_XMM1_M32 = &Instruction{
		Mnemonic: "mulss",
		UID:      "MULSS_XMM1_M32",
		Syntax:   "MULSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 59 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x59},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	MULX_R32_R32V_Rmr32_VEX = &Instruction{
		Mnemonic: "mulx",
		UID:      "MULX_R32_R32V_Rmr32_VEX",
		Syntax:   "MULX r32, r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W0 F6 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamR32V, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	MULX_R32_R32V_M32_VEX = &Instruction{
		Mnemonic: "mulx",
		UID:      "MULX_R32_R32V_M32_VEX",
		Syntax:   "MULX r32, r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W0 F6 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamR32V, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	MULX_R64_R64V_Rmr64_VEX = &Instruction{
		Mnemonic: "mulx",
		UID:      "MULX_R64_R64V_Rmr64_VEX",
		Syntax:   "MULX r64, r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W1 F6 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamR64V, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	MULX_R64_R64V_M64_VEX = &Instruction{
		Mnemonic: "mulx",
		UID:      "MULX_R64_R64V_M64_VEX",
		Syntax:   "MULX r64, r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W1 F6 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamR64V, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	MWAIT = &Instruction{
		Mnemonic: "mwait",
		UID:      "MWAIT",
		Syntax:   "MWAIT",
		Encoding: &Encoding{
			Syntax: "0F 01 C9",
			Opcode: []byte{0x0f, 0x01, 0xc9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	NEG_Rmr8 = &Instruction{
		Mnemonic: "neg",
		UID:      "NEG_Rmr8",
		Syntax:   "NEG r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /3",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	NEG_Rmr16 = &Instruction{
		Mnemonic: "neg",
		UID:      "NEG_Rmr16",
		Syntax:   "NEG r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /3",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	NEG_Rmr32 = &Instruction{
		Mnemonic: "neg",
		UID:      "NEG_Rmr32",
		Syntax:   "NEG r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /3",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	NEG_Rmr64_REX = &Instruction{
		Mnemonic: "neg",
		UID:      "NEG_Rmr64_REX",
		Syntax:   "NEG r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /3",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	NEG_M8 = &Instruction{
		Mnemonic: "neg",
		UID:      "NEG_M8",
		Syntax:   "NEG r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /3",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	NEG_M16 = &Instruction{
		Mnemonic: "neg",
		UID:      "NEG_M16",
		Syntax:   "NEG r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /3",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	NEG_M32 = &Instruction{
		Mnemonic: "neg",
		UID:      "NEG_M32",
		Syntax:   "NEG r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /3",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	NEG_M64_REX = &Instruction{
		Mnemonic: "neg",
		UID:      "NEG_M64_REX",
		Syntax:   "NEG r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /3",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	NOP = &Instruction{
		Mnemonic: "nop",
		UID:      "NOP",
		Syntax:   "NOP",
		Encoding: &Encoding{
			Syntax: "90",
			Opcode: []byte{0x90},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	NOP_Rmr16 = &Instruction{
		Mnemonic: "nop",
		UID:      "NOP_Rmr16",
		Syntax:   "NOP rmr16",
		Encoding: &Encoding{
			Syntax:   "0F 1F /0",
			Opcode:   []byte{0x0f, 0x1f},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	NOP_Rmr32 = &Instruction{
		Mnemonic: "nop",
		UID:      "NOP_Rmr32",
		Syntax:   "NOP rmr32",
		Encoding: &Encoding{
			Syntax:   "0F 1F /0",
			Opcode:   []byte{0x0f, 0x1f},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	NOP_M16 = &Instruction{
		Mnemonic: "nop",
		UID:      "NOP_M16",
		Syntax:   "NOP m16",
		Encoding: &Encoding{
			Syntax:   "0F 1F /0",
			Opcode:   []byte{0x0f, 0x1f},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	NOP_M32 = &Instruction{
		Mnemonic: "nop",
		UID:      "NOP_M32",
		Syntax:   "NOP m32",
		Encoding: &Encoding{
			Syntax:   "0F 1F /0",
			Opcode:   []byte{0x0f, 0x1f},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	NOT_Rmr8 = &Instruction{
		Mnemonic: "not",
		UID:      "NOT_Rmr8",
		Syntax:   "NOT r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /2",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	NOT_Rmr16 = &Instruction{
		Mnemonic: "not",
		UID:      "NOT_Rmr16",
		Syntax:   "NOT r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /2",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	NOT_Rmr32 = &Instruction{
		Mnemonic: "not",
		UID:      "NOT_Rmr32",
		Syntax:   "NOT r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /2",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	NOT_Rmr64_REX = &Instruction{
		Mnemonic: "not",
		UID:      "NOT_Rmr64_REX",
		Syntax:   "NOT r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /2",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	NOT_M8 = &Instruction{
		Mnemonic: "not",
		UID:      "NOT_M8",
		Syntax:   "NOT r/m8",
		Encoding: &Encoding{
			Syntax:   "F6 /2",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	NOT_M16 = &Instruction{
		Mnemonic: "not",
		UID:      "NOT_M16",
		Syntax:   "NOT r/m16",
		Encoding: &Encoding{
			Syntax:   "F7 /2",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	NOT_M32 = &Instruction{
		Mnemonic: "not",
		UID:      "NOT_M32",
		Syntax:   "NOT r/m32",
		Encoding: &Encoding{
			Syntax:   "F7 /2",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	NOT_M64_REX = &Instruction{
		Mnemonic: "not",
		UID:      "NOT_M64_REX",
		Syntax:   "NOT r/m64",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /2",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	OR_AL_Imm8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_AL_Imm8",
		Syntax:   "OR AL, imm8",
		Encoding: &Encoding{
			Syntax: "0C ib",
			Opcode: []byte{0x0c},
		},
		Parameters: []*Parameter{ParamAL, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	OR_AX_Imm16 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_AX_Imm16",
		Syntax:   "OR AX, imm16",
		Encoding: &Encoding{
			Syntax: "0D iw",
			Opcode: []byte{0x0d},
		},
		Parameters:  []*Parameter{ParamAX, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OR_EAX_Imm32 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_EAX_Imm32",
		Syntax:   "OR EAX, imm32",
		Encoding: &Encoding{
			Syntax: "0D id",
			Opcode: []byte{0x0d},
		},
		Parameters:  []*Parameter{ParamEAX, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OR_RAX_Imm32_REX = &Instruction{
		Mnemonic: "or",
		UID:      "OR_RAX_Imm32_REX",
		Syntax:   "OR RAX, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W 0D id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0d},
		},
		Parameters: []*Parameter{ParamRAX, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	OR_R8_Rmr8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_R8_Rmr8",
		Syntax:   "OR r8, r/m8",
		Encoding: &Encoding{
			Syntax: "0A /r",
			Opcode: []byte{0x0a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	OR_R8_M8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_R8_M8",
		Syntax:   "OR r8, r/m8",
		Encoding: &Encoding{
			Syntax: "0A /r",
			Opcode: []byte{0x0a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	OR_R16_Rmr16 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_R16_Rmr16",
		Syntax:   "OR r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0B /r",
			Opcode: []byte{0x0b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OR_R16_M16 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_R16_M16",
		Syntax:   "OR r16, r/m16",
		Encoding: &Encoding{
			Syntax: "0B /r",
			Opcode: []byte{0x0b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OR_R32_Rmr32 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_R32_Rmr32",
		Syntax:   "OR r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0B /r",
			Opcode: []byte{0x0b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OR_R32_M32 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_R32_M32",
		Syntax:   "OR r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0B /r",
			Opcode: []byte{0x0b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OR_R64_Rmr64_REX = &Instruction{
		Mnemonic: "or",
		UID:      "OR_R64_Rmr64_REX",
		Syntax:   "OR r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	OR_R64_M64_REX = &Instruction{
		Mnemonic: "or",
		UID:      "OR_R64_M64_REX",
		Syntax:   "OR r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 0B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	OR_Rmr8_Imm8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr8_Imm8",
		Syntax:   "OR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /1 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	OR_Rmr8_R8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr8_R8",
		Syntax:   "OR r/m8, r8",
		Encoding: &Encoding{
			Syntax: "08 /r",
			Opcode: []byte{0x08},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	OR_Rmr16_Imm8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr16_Imm8",
		Syntax:   "OR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /1 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OR_Rmr16_Imm16 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr16_Imm16",
		Syntax:   "OR r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /1 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OR_Rmr16_R16 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr16_R16",
		Syntax:   "OR r/m16, r16",
		Encoding: &Encoding{
			Syntax: "09 /r",
			Opcode: []byte{0x09},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OR_Rmr32_Imm8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr32_Imm8",
		Syntax:   "OR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /1 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OR_Rmr32_Imm32 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr32_Imm32",
		Syntax:   "OR r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /1 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OR_Rmr32_R32 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr32_R32",
		Syntax:   "OR r/m32, r32",
		Encoding: &Encoding{
			Syntax: "09 /r",
			Opcode: []byte{0x09},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OR_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr64_Imm8_REX",
		Syntax:   "OR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /1 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	OR_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr64_Imm32_REX",
		Syntax:   "OR r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /1 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	OR_Rmr64_R64_REX = &Instruction{
		Mnemonic: "or",
		UID:      "OR_Rmr64_R64_REX",
		Syntax:   "OR r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 09 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x09},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	OR_M8_Imm8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M8_Imm8",
		Syntax:   "OR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /1 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	OR_M8_R8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M8_R8",
		Syntax:   "OR r/m8, r8",
		Encoding: &Encoding{
			Syntax: "08 /r",
			Opcode: []byte{0x08},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	OR_M16_Imm8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M16_Imm8",
		Syntax:   "OR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /1 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OR_M16_Imm16 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M16_Imm16",
		Syntax:   "OR r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /1 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OR_M16_R16 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M16_R16",
		Syntax:   "OR r/m16, r16",
		Encoding: &Encoding{
			Syntax: "09 /r",
			Opcode: []byte{0x09},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OR_M32_Imm8 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M32_Imm8",
		Syntax:   "OR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /1 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OR_M32_Imm32 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M32_Imm32",
		Syntax:   "OR r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /1 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OR_M32_R32 = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M32_R32",
		Syntax:   "OR r/m32, r32",
		Encoding: &Encoding{
			Syntax: "09 /r",
			Opcode: []byte{0x09},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OR_M64_Imm8_REX = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M64_Imm8_REX",
		Syntax:   "OR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /1 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	OR_M64_Imm32_REX = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M64_Imm32_REX",
		Syntax:   "OR r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /1 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	OR_M64_R64_REX = &Instruction{
		Mnemonic: "or",
		UID:      "OR_M64_R64_REX",
		Syntax:   "OR r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 09 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x09},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ORPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "orpd",
		UID:      "ORPD_XMM1_XMM2",
		Syntax:   "ORPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 56 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x56},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	ORPD_XMM1_M128 = &Instruction{
		Mnemonic: "orpd",
		UID:      "ORPD_XMM1_M128",
		Syntax:   "ORPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 56 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x56},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	ORPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "orps",
		UID:      "ORPS_XMM1_XMM2",
		Syntax:   "ORPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 56 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x56},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	ORPS_XMM1_M128 = &Instruction{
		Mnemonic: "orps",
		UID:      "ORPS_XMM1_M128",
		Syntax:   "ORPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 56 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x56},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	OUT_DX_AL = &Instruction{
		Mnemonic: "out",
		UID:      "OUT_DX_AL",
		Syntax:   "OUT DX, AL",
		Encoding: &Encoding{
			Syntax: "EE",
			Opcode: []byte{0xee},
		},
		Parameters: []*Parameter{ParamDX, ParamAL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	OUT_DX_AX = &Instruction{
		Mnemonic: "out",
		UID:      "OUT_DX_AX",
		Syntax:   "OUT DX, AX",
		Encoding: &Encoding{
			Syntax: "EF",
			Opcode: []byte{0xef},
		},
		Parameters:  []*Parameter{ParamDX, ParamAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OUT_DX_EAX = &Instruction{
		Mnemonic: "out",
		UID:      "OUT_DX_EAX",
		Syntax:   "OUT DX, EAX",
		Encoding: &Encoding{
			Syntax: "EF",
			Opcode: []byte{0xef},
		},
		Parameters:  []*Parameter{ParamDX, ParamEAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OUT_Imm8u_AL = &Instruction{
		Mnemonic: "out",
		UID:      "OUT_Imm8u_AL",
		Syntax:   "OUT imm8u, AL",
		Encoding: &Encoding{
			Syntax: "E6 ib",
			Opcode: []byte{0xe6},
		},
		Parameters: []*Parameter{ParamImm8u, ParamAL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	OUT_Imm8u_AX = &Instruction{
		Mnemonic: "out",
		UID:      "OUT_Imm8u_AX",
		Syntax:   "OUT imm8u, AX",
		Encoding: &Encoding{
			Syntax: "E7 ib",
			Opcode: []byte{0xe7},
		},
		Parameters:  []*Parameter{ParamImm8u, ParamAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OUT_Imm8u_EAX = &Instruction{
		Mnemonic: "out",
		UID:      "OUT_Imm8u_EAX",
		Syntax:   "OUT imm8u, EAX",
		Encoding: &Encoding{
			Syntax: "E7 ib",
			Opcode: []byte{0xe7},
		},
		Parameters:  []*Parameter{ParamImm8u, ParamEAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OUTS_DX_StrSrc8 = &Instruction{
		Mnemonic: "outs",
		UID:      "OUTS_DX_StrSrc8",
		Syntax:   "OUTS DX, [ds:esi:8]",
		Encoding: &Encoding{
			Syntax: "6E",
			Opcode: []byte{0x6e},
		},
		Parameters:  []*Parameter{ParamDX, ParamStrSrc8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	OUTS_DX_StrSrc16 = &Instruction{
		Mnemonic: "outs",
		UID:      "OUTS_DX_StrSrc16",
		Syntax:   "OUTS DX, [ds:esi:16]",
		Encoding: &Encoding{
			Syntax: "6F",
			Opcode: []byte{0x6f},
		},
		Parameters:  []*Parameter{ParamDX, ParamStrSrc16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OUTS_DX_StrSrc32 = &Instruction{
		Mnemonic: "outs",
		UID:      "OUTS_DX_StrSrc32",
		Syntax:   "OUTS DX, [ds:esi:32]",
		Encoding: &Encoding{
			Syntax: "6F",
			Opcode: []byte{0x6f},
		},
		Parameters:  []*Parameter{ParamDX, ParamStrSrc32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OUTSB = &Instruction{
		Mnemonic: "outsb",
		UID:      "OUTSB",
		Syntax:   "OUTSB",
		Encoding: &Encoding{
			Syntax: "6E",
			Opcode: []byte{0x6e},
		},
		Mode16:   true,
		Mode32:   true,
		Mode64:   true,
		DataSize: 8,
	}
	OUTSB_DX_StrSrc8 = &Instruction{
		Mnemonic: "outsb",
		UID:      "OUTSB_DX_StrSrc8",
		Syntax:   "OUTSB DX, [ds:esi:8]",
		Encoding: &Encoding{
			Syntax: "6E",
			Opcode: []byte{0x6e},
		},
		Parameters:  []*Parameter{ParamDX, ParamStrSrc8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	OUTSD = &Instruction{
		Mnemonic: "outsd",
		UID:      "OUTSD",
		Syntax:   "OUTSD",
		Encoding: &Encoding{
			Syntax: "6F",
			Opcode: []byte{0x6f},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OUTSD_DX_StrSrc32 = &Instruction{
		Mnemonic: "outsd",
		UID:      "OUTSD_DX_StrSrc32",
		Syntax:   "OUTSD DX, [ds:esi:32]",
		Encoding: &Encoding{
			Syntax: "6F",
			Opcode: []byte{0x6f},
		},
		Parameters:  []*Parameter{ParamDX, ParamStrSrc32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	OUTSW = &Instruction{
		Mnemonic: "outsw",
		UID:      "OUTSW",
		Syntax:   "OUTSW",
		Encoding: &Encoding{
			Syntax: "6F",
			Opcode: []byte{0x6f},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	OUTSW_DX_StrSrc16 = &Instruction{
		Mnemonic: "outsw",
		UID:      "OUTSW_DX_StrSrc16",
		Syntax:   "OUTSW DX, [ds:esi:16]",
		Encoding: &Encoding{
			Syntax: "6F",
			Opcode: []byte{0x6f},
		},
		Parameters:  []*Parameter{ParamDX, ParamStrSrc16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	PABSB_MM1_MM2 = &Instruction{
		Mnemonic: "pabsb",
		UID:      "PABSB_MM1_MM2",
		Syntax:   "PABSB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 1C /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x1c},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSB_MM1_M64 = &Instruction{
		Mnemonic: "pabsb",
		UID:      "PABSB_MM1_M64",
		Syntax:   "PABSB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 1C /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x1c},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSB_XMM1_XMM2 = &Instruction{
		Mnemonic: "pabsb",
		UID:      "PABSB_XMM1_XMM2",
		Syntax:   "PABSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 1C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x1c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSB_XMM1_M128 = &Instruction{
		Mnemonic: "pabsb",
		UID:      "PABSB_XMM1_M128",
		Syntax:   "PABSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 1C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x1c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSD_MM1_MM2 = &Instruction{
		Mnemonic: "pabsd",
		UID:      "PABSD_MM1_MM2",
		Syntax:   "PABSD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 1E /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x1e},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSD_MM1_M64 = &Instruction{
		Mnemonic: "pabsd",
		UID:      "PABSD_MM1_M64",
		Syntax:   "PABSD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 1E /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x1e},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pabsd",
		UID:      "PABSD_XMM1_XMM2",
		Syntax:   "PABSD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 1E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x1e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSD_XMM1_M128 = &Instruction{
		Mnemonic: "pabsd",
		UID:      "PABSD_XMM1_M128",
		Syntax:   "PABSD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 1E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x1e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSW_MM1_MM2 = &Instruction{
		Mnemonic: "pabsw",
		UID:      "PABSW_MM1_MM2",
		Syntax:   "PABSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 1D /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x1d},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSW_MM1_M64 = &Instruction{
		Mnemonic: "pabsw",
		UID:      "PABSW_MM1_M64",
		Syntax:   "PABSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 1D /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x1d},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pabsw",
		UID:      "PABSW_XMM1_XMM2",
		Syntax:   "PABSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 1D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x1d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PABSW_XMM1_M128 = &Instruction{
		Mnemonic: "pabsw",
		UID:      "PABSW_XMM1_M128",
		Syntax:   "PABSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 1D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x1d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PACKSSDW_MM1_MM2 = &Instruction{
		Mnemonic: "packssdw",
		UID:      "PACKSSDW_MM1_MM2",
		Syntax:   "PACKSSDW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 6B /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x6b},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PACKSSDW_MM1_M64 = &Instruction{
		Mnemonic: "packssdw",
		UID:      "PACKSSDW_MM1_M64",
		Syntax:   "PACKSSDW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 6B /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x6b},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PACKSSDW_XMM1_XMM2 = &Instruction{
		Mnemonic: "packssdw",
		UID:      "PACKSSDW_XMM1_XMM2",
		Syntax:   "PACKSSDW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 6B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PACKSSDW_XMM1_M128 = &Instruction{
		Mnemonic: "packssdw",
		UID:      "PACKSSDW_XMM1_M128",
		Syntax:   "PACKSSDW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 6B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PACKSSWB_MM1_MM2 = &Instruction{
		Mnemonic: "packsswb",
		UID:      "PACKSSWB_MM1_MM2",
		Syntax:   "PACKSSWB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 63 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x63},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PACKSSWB_MM1_M64 = &Instruction{
		Mnemonic: "packsswb",
		UID:      "PACKSSWB_MM1_M64",
		Syntax:   "PACKSSWB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 63 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x63},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PACKSSWB_XMM1_XMM2 = &Instruction{
		Mnemonic: "packsswb",
		UID:      "PACKSSWB_XMM1_XMM2",
		Syntax:   "PACKSSWB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 63 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x63},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PACKSSWB_XMM1_M128 = &Instruction{
		Mnemonic: "packsswb",
		UID:      "PACKSSWB_XMM1_M128",
		Syntax:   "PACKSSWB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 63 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x63},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PACKUSDW_XMM1_XMM2 = &Instruction{
		Mnemonic: "packusdw",
		UID:      "PACKUSDW_XMM1_XMM2",
		Syntax:   "PACKUSDW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 2B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x2b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PACKUSDW_XMM1_M128 = &Instruction{
		Mnemonic: "packusdw",
		UID:      "PACKUSDW_XMM1_M128",
		Syntax:   "PACKUSDW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 2B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x2b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PACKUSWB_MM1_MM2 = &Instruction{
		Mnemonic: "packuswb",
		UID:      "PACKUSWB_MM1_MM2",
		Syntax:   "PACKUSWB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 67 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x67},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PACKUSWB_MM1_M64 = &Instruction{
		Mnemonic: "packuswb",
		UID:      "PACKUSWB_MM1_M64",
		Syntax:   "PACKUSWB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 67 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x67},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PACKUSWB_XMM1_XMM2 = &Instruction{
		Mnemonic: "packuswb",
		UID:      "PACKUSWB_XMM1_XMM2",
		Syntax:   "PACKUSWB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 67 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x67},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PACKUSWB_XMM1_M128 = &Instruction{
		Mnemonic: "packuswb",
		UID:      "PACKUSWB_XMM1_M128",
		Syntax:   "PACKUSWB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 67 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x67},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDB_MM1_MM2 = &Instruction{
		Mnemonic: "paddb",
		UID:      "PADDB_MM1_MM2",
		Syntax:   "PADDB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F FC /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xfc},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDB_MM1_M64 = &Instruction{
		Mnemonic: "paddb",
		UID:      "PADDB_MM1_M64",
		Syntax:   "PADDB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F FC /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xfc},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDB_XMM1_XMM2 = &Instruction{
		Mnemonic: "paddb",
		UID:      "PADDB_XMM1_XMM2",
		Syntax:   "PADDB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F FC /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xfc},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDB_XMM1_M128 = &Instruction{
		Mnemonic: "paddb",
		UID:      "PADDB_XMM1_M128",
		Syntax:   "PADDB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F FC /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xfc},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDD_MM1_MM2 = &Instruction{
		Mnemonic: "paddd",
		UID:      "PADDD_MM1_MM2",
		Syntax:   "PADDD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F FE /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xfe},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDD_MM1_M64 = &Instruction{
		Mnemonic: "paddd",
		UID:      "PADDD_MM1_M64",
		Syntax:   "PADDD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F FE /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xfe},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDD_XMM1_XMM2 = &Instruction{
		Mnemonic: "paddd",
		UID:      "PADDD_XMM1_XMM2",
		Syntax:   "PADDD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F FE /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xfe},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDD_XMM1_M128 = &Instruction{
		Mnemonic: "paddd",
		UID:      "PADDD_XMM1_M128",
		Syntax:   "PADDD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F FE /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xfe},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDQ_MM1_MM2 = &Instruction{
		Mnemonic: "paddq",
		UID:      "PADDQ_MM1_MM2",
		Syntax:   "PADDQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D4 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd4},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDQ_MM1_M64 = &Instruction{
		Mnemonic: "paddq",
		UID:      "PADDQ_MM1_M64",
		Syntax:   "PADDQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D4 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd4},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "paddq",
		UID:      "PADDQ_XMM1_XMM2",
		Syntax:   "PADDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D4 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd4},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDQ_XMM1_M128 = &Instruction{
		Mnemonic: "paddq",
		UID:      "PADDQ_XMM1_M128",
		Syntax:   "PADDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D4 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd4},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDSB_MM1_MM2 = &Instruction{
		Mnemonic: "paddsb",
		UID:      "PADDSB_MM1_MM2",
		Syntax:   "PADDSB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F EC /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xec},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDSB_MM1_M64 = &Instruction{
		Mnemonic: "paddsb",
		UID:      "PADDSB_MM1_M64",
		Syntax:   "PADDSB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F EC /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xec},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDSB_XMM1_XMM2 = &Instruction{
		Mnemonic: "paddsb",
		UID:      "PADDSB_XMM1_XMM2",
		Syntax:   "PADDSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F EC /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xec},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDSB_XMM1_M128 = &Instruction{
		Mnemonic: "paddsb",
		UID:      "PADDSB_XMM1_M128",
		Syntax:   "PADDSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F EC /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xec},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDSW_MM1_MM2 = &Instruction{
		Mnemonic: "paddsw",
		UID:      "PADDSW_MM1_MM2",
		Syntax:   "PADDSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F ED /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xed},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDSW_MM1_M64 = &Instruction{
		Mnemonic: "paddsw",
		UID:      "PADDSW_MM1_M64",
		Syntax:   "PADDSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F ED /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xed},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "paddsw",
		UID:      "PADDSW_XMM1_XMM2",
		Syntax:   "PADDSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F ED /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xed},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDSW_XMM1_M128 = &Instruction{
		Mnemonic: "paddsw",
		UID:      "PADDSW_XMM1_M128",
		Syntax:   "PADDSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F ED /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xed},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDUSB_MM1_MM2 = &Instruction{
		Mnemonic: "paddusb",
		UID:      "PADDUSB_MM1_MM2",
		Syntax:   "PADDUSB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DC /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xdc},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDUSB_MM1_M64 = &Instruction{
		Mnemonic: "paddusb",
		UID:      "PADDUSB_MM1_M64",
		Syntax:   "PADDUSB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DC /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xdc},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDUSB_XMM1_XMM2 = &Instruction{
		Mnemonic: "paddusb",
		UID:      "PADDUSB_XMM1_XMM2",
		Syntax:   "PADDUSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DC /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xdc},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDUSB_XMM1_M128 = &Instruction{
		Mnemonic: "paddusb",
		UID:      "PADDUSB_XMM1_M128",
		Syntax:   "PADDUSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DC /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xdc},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDUSW_MM1_MM2 = &Instruction{
		Mnemonic: "paddusw",
		UID:      "PADDUSW_MM1_MM2",
		Syntax:   "PADDUSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DD /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xdd},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDUSW_MM1_M64 = &Instruction{
		Mnemonic: "paddusw",
		UID:      "PADDUSW_MM1_M64",
		Syntax:   "PADDUSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DD /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xdd},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDUSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "paddusw",
		UID:      "PADDUSW_XMM1_XMM2",
		Syntax:   "PADDUSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DD /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xdd},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDUSW_XMM1_M128 = &Instruction{
		Mnemonic: "paddusw",
		UID:      "PADDUSW_XMM1_M128",
		Syntax:   "PADDUSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DD /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xdd},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDW_MM1_MM2 = &Instruction{
		Mnemonic: "paddw",
		UID:      "PADDW_MM1_MM2",
		Syntax:   "PADDW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F FD /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xfd},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDW_MM1_M64 = &Instruction{
		Mnemonic: "paddw",
		UID:      "PADDW_MM1_M64",
		Syntax:   "PADDW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F FD /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xfd},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PADDW_XMM1_XMM2 = &Instruction{
		Mnemonic: "paddw",
		UID:      "PADDW_XMM1_XMM2",
		Syntax:   "PADDW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F FD /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xfd},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PADDW_XMM1_M128 = &Instruction{
		Mnemonic: "paddw",
		UID:      "PADDW_XMM1_M128",
		Syntax:   "PADDW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F FD /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xfd},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PALIGNR_MM1_MM2_Imm8 = &Instruction{
		Mnemonic: "palignr",
		UID:      "PALIGNR_MM1_MM2_Imm8",
		Syntax:   "PALIGNR mm1, mm2/m64, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 3A 0F /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x3a, 0x0f},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PALIGNR_MM1_M64_Imm8 = &Instruction{
		Mnemonic: "palignr",
		UID:      "PALIGNR_MM1_M64_Imm8",
		Syntax:   "PALIGNR mm1, mm2/m64, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 3A 0F /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x3a, 0x0f},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PALIGNR_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "palignr",
		UID:      "PALIGNR_XMM1_XMM2_Imm8",
		Syntax:   "PALIGNR xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0F /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PALIGNR_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "palignr",
		UID:      "PALIGNR_XMM1_M128_Imm8",
		Syntax:   "PALIGNR xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0F /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PAND_MM1_MM2 = &Instruction{
		Mnemonic: "pand",
		UID:      "PAND_MM1_MM2",
		Syntax:   "PAND mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DB /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xdb},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PAND_MM1_M64 = &Instruction{
		Mnemonic: "pand",
		UID:      "PAND_MM1_M64",
		Syntax:   "PAND mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DB /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xdb},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PAND_XMM1_XMM2 = &Instruction{
		Mnemonic: "pand",
		UID:      "PAND_XMM1_XMM2",
		Syntax:   "PAND xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DB /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xdb},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PAND_XMM1_M128 = &Instruction{
		Mnemonic: "pand",
		UID:      "PAND_XMM1_M128",
		Syntax:   "PAND xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DB /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xdb},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PANDN_MM1_MM2 = &Instruction{
		Mnemonic: "pandn",
		UID:      "PANDN_MM1_MM2",
		Syntax:   "PANDN mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DF /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xdf},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PANDN_MM1_M64 = &Instruction{
		Mnemonic: "pandn",
		UID:      "PANDN_MM1_M64",
		Syntax:   "PANDN mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DF /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xdf},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PANDN_XMM1_XMM2 = &Instruction{
		Mnemonic: "pandn",
		UID:      "PANDN_XMM1_XMM2",
		Syntax:   "PANDN xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DF /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xdf},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PANDN_XMM1_M128 = &Instruction{
		Mnemonic: "pandn",
		UID:      "PANDN_XMM1_M128",
		Syntax:   "PANDN xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DF /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xdf},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PAUSE = &Instruction{
		Mnemonic: "pause",
		UID:      "PAUSE",
		Syntax:   "PAUSE",
		Encoding: &Encoding{
			Syntax:            "F3 90",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x90},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	PAVGB_MM1_MM2 = &Instruction{
		Mnemonic: "pavgb",
		UID:      "PAVGB_MM1_MM2",
		Syntax:   "PAVGB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E0 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe0},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PAVGB_MM1_M64 = &Instruction{
		Mnemonic: "pavgb",
		UID:      "PAVGB_MM1_M64",
		Syntax:   "PAVGB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E0 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe0},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PAVGB_XMM1_XMM2 = &Instruction{
		Mnemonic: "pavgb",
		UID:      "PAVGB_XMM1_XMM2",
		Syntax:   "PAVGB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E0 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PAVGB_XMM1_M128 = &Instruction{
		Mnemonic: "pavgb",
		UID:      "PAVGB_XMM1_M128",
		Syntax:   "PAVGB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E0 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe0},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PAVGW_MM1_MM2 = &Instruction{
		Mnemonic: "pavgw",
		UID:      "PAVGW_MM1_MM2",
		Syntax:   "PAVGW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E3 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe3},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PAVGW_MM1_M64 = &Instruction{
		Mnemonic: "pavgw",
		UID:      "PAVGW_MM1_M64",
		Syntax:   "PAVGW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E3 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe3},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PAVGW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pavgw",
		UID:      "PAVGW_XMM1_XMM2",
		Syntax:   "PAVGW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E3 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe3},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PAVGW_XMM1_M128 = &Instruction{
		Mnemonic: "pavgw",
		UID:      "PAVGW_XMM1_M128",
		Syntax:   "PAVGW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E3 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe3},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PBLENDVB_XMM1_XMM2 = &Instruction{
		Mnemonic: "pblendvb",
		UID:      "PBLENDVB_XMM1_XMM2",
		Syntax:   "PBLENDVB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 10 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x10},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PBLENDVB_XMM1_M128 = &Instruction{
		Mnemonic: "pblendvb",
		UID:      "PBLENDVB_XMM1_M128",
		Syntax:   "PBLENDVB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 10 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x10},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PBLENDVB_XMM1_XMM2_XMM0 = &Instruction{
		Mnemonic: "pblendvb",
		UID:      "PBLENDVB_XMM1_XMM2_XMM0",
		Syntax:   "PBLENDVB xmm1, xmm2/m128, XMM0",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 10 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x10},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamXMM0},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	PBLENDVB_XMM1_M128_XMM0 = &Instruction{
		Mnemonic: "pblendvb",
		UID:      "PBLENDVB_XMM1_M128_XMM0",
		Syntax:   "PBLENDVB xmm1, xmm2/m128, XMM0",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 10 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x10},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamXMM0},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	PBLENDW_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "pblendw",
		UID:      "PBLENDW_XMM1_XMM2_Imm8",
		Syntax:   "PBLENDW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0E /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PBLENDW_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "pblendw",
		UID:      "PBLENDW_XMM1_M128_Imm8",
		Syntax:   "PBLENDW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0E /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PCLMULQDQ_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "pclmulqdq",
		UID:      "PCLMULQDQ_XMM1_XMM2_Imm8",
		Syntax:   "PCLMULQDQ xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 44 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x44},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"PCLMULQDQ"},
	}
	PCLMULQDQ_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "pclmulqdq",
		UID:      "PCLMULQDQ_XMM1_M128_Imm8",
		Syntax:   "PCLMULQDQ xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 44 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x44},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"PCLMULQDQ"},
	}
	PCMPEQB_MM1_MM2 = &Instruction{
		Mnemonic: "pcmpeqb",
		UID:      "PCMPEQB_MM1_MM2",
		Syntax:   "PCMPEQB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 74 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x74},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPEQB_MM1_M64 = &Instruction{
		Mnemonic: "pcmpeqb",
		UID:      "PCMPEQB_MM1_M64",
		Syntax:   "PCMPEQB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 74 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x74},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPEQB_XMM1_XMM2 = &Instruction{
		Mnemonic: "pcmpeqb",
		UID:      "PCMPEQB_XMM1_XMM2",
		Syntax:   "PCMPEQB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 74 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x74},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPEQB_XMM1_M128 = &Instruction{
		Mnemonic: "pcmpeqb",
		UID:      "PCMPEQB_XMM1_M128",
		Syntax:   "PCMPEQB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 74 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x74},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPEQD_MM1_MM2 = &Instruction{
		Mnemonic: "pcmpeqd",
		UID:      "PCMPEQD_MM1_MM2",
		Syntax:   "PCMPEQD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 76 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x76},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPEQD_MM1_M64 = &Instruction{
		Mnemonic: "pcmpeqd",
		UID:      "PCMPEQD_MM1_M64",
		Syntax:   "PCMPEQD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 76 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x76},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPEQD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pcmpeqd",
		UID:      "PCMPEQD_XMM1_XMM2",
		Syntax:   "PCMPEQD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 76 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x76},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPEQD_XMM1_M128 = &Instruction{
		Mnemonic: "pcmpeqd",
		UID:      "PCMPEQD_XMM1_M128",
		Syntax:   "PCMPEQD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 76 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x76},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPEQQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "pcmpeqq",
		UID:      "PCMPEQQ_XMM1_XMM2",
		Syntax:   "PCMPEQQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 29 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x29},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PCMPEQQ_XMM1_M128 = &Instruction{
		Mnemonic: "pcmpeqq",
		UID:      "PCMPEQQ_XMM1_M128",
		Syntax:   "PCMPEQQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 29 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x29},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PCMPEQW_MM1_MM2 = &Instruction{
		Mnemonic: "pcmpeqw",
		UID:      "PCMPEQW_MM1_MM2",
		Syntax:   "PCMPEQW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 75 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x75},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPEQW_MM1_M64 = &Instruction{
		Mnemonic: "pcmpeqw",
		UID:      "PCMPEQW_MM1_M64",
		Syntax:   "PCMPEQW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 75 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x75},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPEQW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pcmpeqw",
		UID:      "PCMPEQW_XMM1_XMM2",
		Syntax:   "PCMPEQW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 75 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x75},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPEQW_XMM1_M128 = &Instruction{
		Mnemonic: "pcmpeqw",
		UID:      "PCMPEQW_XMM1_M128",
		Syntax:   "PCMPEQW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 75 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x75},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPESTRI_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "pcmpestri",
		UID:      "PCMPESTRI_XMM1_XMM2_Imm8",
		Syntax:   "PCMPESTRI xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 61 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x61},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_2"},
	}
	PCMPESTRI_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "pcmpestri",
		UID:      "PCMPESTRI_XMM1_M128_Imm8",
		Syntax:   "PCMPESTRI xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 61 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x61},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_2"},
	}
	PCMPESTRM_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "pcmpestrm",
		UID:      "PCMPESTRM_XMM1_XMM2_Imm8",
		Syntax:   "PCMPESTRM xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 60 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x60},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_2"},
	}
	PCMPESTRM_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "pcmpestrm",
		UID:      "PCMPESTRM_XMM1_M128_Imm8",
		Syntax:   "PCMPESTRM xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 60 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x60},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_2"},
	}
	PCMPGTB_MM1_MM2 = &Instruction{
		Mnemonic: "pcmpgtb",
		UID:      "PCMPGTB_MM1_MM2",
		Syntax:   "PCMPGTB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 64 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x64},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPGTB_MM1_M64 = &Instruction{
		Mnemonic: "pcmpgtb",
		UID:      "PCMPGTB_MM1_M64",
		Syntax:   "PCMPGTB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 64 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x64},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPGTB_XMM1_XMM2 = &Instruction{
		Mnemonic: "pcmpgtb",
		UID:      "PCMPGTB_XMM1_XMM2",
		Syntax:   "PCMPGTB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 64 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x64},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPGTB_XMM1_M128 = &Instruction{
		Mnemonic: "pcmpgtb",
		UID:      "PCMPGTB_XMM1_M128",
		Syntax:   "PCMPGTB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 64 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x64},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPGTD_MM1_MM2 = &Instruction{
		Mnemonic: "pcmpgtd",
		UID:      "PCMPGTD_MM1_MM2",
		Syntax:   "PCMPGTD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 66 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x66},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPGTD_MM1_M64 = &Instruction{
		Mnemonic: "pcmpgtd",
		UID:      "PCMPGTD_MM1_M64",
		Syntax:   "PCMPGTD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 66 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x66},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPGTD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pcmpgtd",
		UID:      "PCMPGTD_XMM1_XMM2",
		Syntax:   "PCMPGTD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 66 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x66},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPGTD_XMM1_M128 = &Instruction{
		Mnemonic: "pcmpgtd",
		UID:      "PCMPGTD_XMM1_M128",
		Syntax:   "PCMPGTD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 66 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x66},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPGTQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "pcmpgtq",
		UID:      "PCMPGTQ_XMM1_XMM2",
		Syntax:   "PCMPGTQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 37 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x37},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_2"},
	}
	PCMPGTQ_XMM1_M128 = &Instruction{
		Mnemonic: "pcmpgtq",
		UID:      "PCMPGTQ_XMM1_M128",
		Syntax:   "PCMPGTQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 37 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x37},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_2"},
	}
	PCMPGTW_MM1_MM2 = &Instruction{
		Mnemonic: "pcmpgtw",
		UID:      "PCMPGTW_MM1_MM2",
		Syntax:   "PCMPGTW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 65 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x65},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPGTW_MM1_M64 = &Instruction{
		Mnemonic: "pcmpgtw",
		UID:      "PCMPGTW_MM1_M64",
		Syntax:   "PCMPGTW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 65 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x65},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PCMPGTW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pcmpgtw",
		UID:      "PCMPGTW_XMM1_XMM2",
		Syntax:   "PCMPGTW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 65 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x65},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPGTW_XMM1_M128 = &Instruction{
		Mnemonic: "pcmpgtw",
		UID:      "PCMPGTW_XMM1_M128",
		Syntax:   "PCMPGTW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 65 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x65},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PCMPISTRI_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "pcmpistri",
		UID:      "PCMPISTRI_XMM1_XMM2_Imm8",
		Syntax:   "PCMPISTRI xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 63 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x63},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_2"},
	}
	PCMPISTRI_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "pcmpistri",
		UID:      "PCMPISTRI_XMM1_M128_Imm8",
		Syntax:   "PCMPISTRI xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 63 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x63},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_2"},
	}
	PCMPISTRM_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "pcmpistrm",
		UID:      "PCMPISTRM_XMM1_XMM2_Imm8",
		Syntax:   "PCMPISTRM xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 62 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x62},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_2"},
	}
	PCMPISTRM_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "pcmpistrm",
		UID:      "PCMPISTRM_XMM1_M128_Imm8",
		Syntax:   "PCMPISTRM xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 62 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x62},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_2"},
	}
	PCONFIG = &Instruction{
		Mnemonic: "pconfig",
		UID:      "PCONFIG",
		Syntax:   "PCONFIG",
		Encoding: &Encoding{
			Syntax:        "NP 0F 01 C5",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x01, 0xc5},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"PCONFIG"},
	}
	PDEP_R32_R32V_Rmr32_VEX = &Instruction{
		Mnemonic: "pdep",
		UID:      "PDEP_R32_R32V_Rmr32_VEX",
		Syntax:   "PDEP r32, r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W0 F5 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamR32V, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	PDEP_R32_R32V_M32_VEX = &Instruction{
		Mnemonic: "pdep",
		UID:      "PDEP_R32_R32V_M32_VEX",
		Syntax:   "PDEP r32, r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W0 F5 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamR32V, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	PDEP_R64_R64V_Rmr64_VEX = &Instruction{
		Mnemonic: "pdep",
		UID:      "PDEP_R64_R64V_Rmr64_VEX",
		Syntax:   "PDEP r64, r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W1 F5 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamR64V, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	PDEP_R64_R64V_M64_VEX = &Instruction{
		Mnemonic: "pdep",
		UID:      "PDEP_R64_R64V_M64_VEX",
		Syntax:   "PDEP r64, r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W1 F5 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamR64V, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	PEXT_R32_R32V_Rmr32_VEX = &Instruction{
		Mnemonic: "pext",
		UID:      "PEXT_R32_R32V_Rmr32_VEX",
		Syntax:   "PEXT r32, r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F3.0F38.W0 F5 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamR32V, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	PEXT_R32_R32V_M32_VEX = &Instruction{
		Mnemonic: "pext",
		UID:      "PEXT_R32_R32V_M32_VEX",
		Syntax:   "PEXT r32, r32V, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F3.0F38.W0 F5 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamR32V, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	PEXT_R64_R64V_Rmr64_VEX = &Instruction{
		Mnemonic: "pext",
		UID:      "PEXT_R64_R64V_Rmr64_VEX",
		Syntax:   "PEXT r64, r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F3.0F38.W1 F5 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamR64V, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	PEXT_R64_R64V_M64_VEX = &Instruction{
		Mnemonic: "pext",
		UID:      "PEXT_R64_R64V_M64_VEX",
		Syntax:   "PEXT r64, r64V, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F3.0F38.W1 F5 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamR64V, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	PEXTRB_Rmr32_XMM1_Imm8 = &Instruction{
		Mnemonic: "pextrb",
		UID:      "PEXTRB_Rmr32_XMM1_Imm8",
		Syntax:   "PEXTRB r32/m8, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 14 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x14},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PEXTRB_M8_XMM1_Imm8 = &Instruction{
		Mnemonic: "pextrb",
		UID:      "PEXTRB_M8_XMM1_Imm8",
		Syntax:   "PEXTRB r32/m8, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 14 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x14},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM8, ParamXMM1, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PEXTRD_Rmr32_XMM1_Imm8 = &Instruction{
		Mnemonic: "pextrd",
		UID:      "PEXTRD_Rmr32_XMM1_Imm8",
		Syntax:   "PEXTRD r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 16 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x16},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"SSE4_1"},
		OperandSize: true,
	}
	PEXTRD_M32_XMM1_Imm8 = &Instruction{
		Mnemonic: "pextrd",
		UID:      "PEXTRD_M32_XMM1_Imm8",
		Syntax:   "PEXTRD r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 16 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x16},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamM32, ParamXMM1, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"SSE4_1"},
		OperandSize: true,
	}
	PEXTRQ_Rmr64_XMM1_Imm8_REX = &Instruction{
		Mnemonic: "pextrq",
		UID:      "PEXTRQ_Rmr64_XMM1_Imm8_REX",
		Syntax:   "PEXTRQ r/m64, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:            "66 REX.W 0F 3A 16 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x3a, 0x16},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PEXTRQ_M64_XMM1_Imm8_REX = &Instruction{
		Mnemonic: "pextrq",
		UID:      "PEXTRQ_M64_XMM1_Imm8_REX",
		Syntax:   "PEXTRQ r/m64, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:            "66 REX.W 0F 3A 16 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x3a, 0x16},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PEXTRW_R32_MM2_Imm8 = &Instruction{
		Mnemonic: "pextrw",
		UID:      "PEXTRW_R32_MM2_Imm8",
		Syntax:   "PEXTRW r32, mm2, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F C5 /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc5},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamR32, ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PEXTRW_R32_XMM2_Imm8 = &Instruction{
		Mnemonic: "pextrw",
		UID:      "PEXTRW_R32_XMM2_Imm8",
		Syntax:   "PEXTRW r32, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F C5 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc5},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PEXTRW_Rmr32_XMM1_Imm8 = &Instruction{
		Mnemonic: "pextrw",
		UID:      "PEXTRW_Rmr32_XMM1_Imm8",
		Syntax:   "PEXTRW r32/m16, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 15 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x15},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PEXTRW_M16_XMM1_Imm8 = &Instruction{
		Mnemonic: "pextrw",
		UID:      "PEXTRW_M16_XMM1_Imm8",
		Syntax:   "PEXTRW r32/m16, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 15 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x15},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamM16, ParamXMM1, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PHADDD_MM1_MM2 = &Instruction{
		Mnemonic: "phaddd",
		UID:      "PHADDD_MM1_MM2",
		Syntax:   "PHADDD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 02 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x02},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDD_MM1_M64 = &Instruction{
		Mnemonic: "phaddd",
		UID:      "PHADDD_MM1_M64",
		Syntax:   "PHADDD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 02 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x02},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDD_XMM1_XMM2 = &Instruction{
		Mnemonic: "phaddd",
		UID:      "PHADDD_XMM1_XMM2",
		Syntax:   "PHADDD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 02 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x02},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDD_XMM1_M128 = &Instruction{
		Mnemonic: "phaddd",
		UID:      "PHADDD_XMM1_M128",
		Syntax:   "PHADDD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 02 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x02},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDSW_MM1_MM2 = &Instruction{
		Mnemonic: "phaddsw",
		UID:      "PHADDSW_MM1_MM2",
		Syntax:   "PHADDSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 03 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x03},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDSW_MM1_M64 = &Instruction{
		Mnemonic: "phaddsw",
		UID:      "PHADDSW_MM1_M64",
		Syntax:   "PHADDSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 03 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x03},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "phaddsw",
		UID:      "PHADDSW_XMM1_XMM2",
		Syntax:   "PHADDSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 03 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x03},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDSW_XMM1_M128 = &Instruction{
		Mnemonic: "phaddsw",
		UID:      "PHADDSW_XMM1_M128",
		Syntax:   "PHADDSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 03 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x03},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDW_MM1_MM2 = &Instruction{
		Mnemonic: "phaddw",
		UID:      "PHADDW_MM1_MM2",
		Syntax:   "PHADDW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 01 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x01},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDW_MM1_M64 = &Instruction{
		Mnemonic: "phaddw",
		UID:      "PHADDW_MM1_M64",
		Syntax:   "PHADDW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 01 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x01},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDW_XMM1_XMM2 = &Instruction{
		Mnemonic: "phaddw",
		UID:      "PHADDW_XMM1_XMM2",
		Syntax:   "PHADDW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 01 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x01},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHADDW_XMM1_M128 = &Instruction{
		Mnemonic: "phaddw",
		UID:      "PHADDW_XMM1_M128",
		Syntax:   "PHADDW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 01 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x01},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHMINPOSUW_XMM1_XMM2 = &Instruction{
		Mnemonic: "phminposuw",
		UID:      "PHMINPOSUW_XMM1_XMM2",
		Syntax:   "PHMINPOSUW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 41 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x41},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PHMINPOSUW_XMM1_M128 = &Instruction{
		Mnemonic: "phminposuw",
		UID:      "PHMINPOSUW_XMM1_M128",
		Syntax:   "PHMINPOSUW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 41 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x41},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PHSUBD_MM1_MM2 = &Instruction{
		Mnemonic: "phsubd",
		UID:      "PHSUBD_MM1_MM2",
		Syntax:   "PHSUBD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 06 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x06},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBD_MM1_M64 = &Instruction{
		Mnemonic: "phsubd",
		UID:      "PHSUBD_MM1_M64",
		Syntax:   "PHSUBD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 06 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x06},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBD_XMM1_XMM2 = &Instruction{
		Mnemonic: "phsubd",
		UID:      "PHSUBD_XMM1_XMM2",
		Syntax:   "PHSUBD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 06 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x06},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBD_XMM1_M128 = &Instruction{
		Mnemonic: "phsubd",
		UID:      "PHSUBD_XMM1_M128",
		Syntax:   "PHSUBD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 06 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x06},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBSW_MM1_MM2 = &Instruction{
		Mnemonic: "phsubsw",
		UID:      "PHSUBSW_MM1_MM2",
		Syntax:   "PHSUBSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 07 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x07},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBSW_MM1_M64 = &Instruction{
		Mnemonic: "phsubsw",
		UID:      "PHSUBSW_MM1_M64",
		Syntax:   "PHSUBSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 07 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x07},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "phsubsw",
		UID:      "PHSUBSW_XMM1_XMM2",
		Syntax:   "PHSUBSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 07 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x07},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBSW_XMM1_M128 = &Instruction{
		Mnemonic: "phsubsw",
		UID:      "PHSUBSW_XMM1_M128",
		Syntax:   "PHSUBSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 07 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x07},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBW_MM1_MM2 = &Instruction{
		Mnemonic: "phsubw",
		UID:      "PHSUBW_MM1_MM2",
		Syntax:   "PHSUBW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 05 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x05},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBW_MM1_M64 = &Instruction{
		Mnemonic: "phsubw",
		UID:      "PHSUBW_MM1_M64",
		Syntax:   "PHSUBW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 05 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x05},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBW_XMM1_XMM2 = &Instruction{
		Mnemonic: "phsubw",
		UID:      "PHSUBW_XMM1_XMM2",
		Syntax:   "PHSUBW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 05 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x05},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PHSUBW_XMM1_M128 = &Instruction{
		Mnemonic: "phsubw",
		UID:      "PHSUBW_XMM1_M128",
		Syntax:   "PHSUBW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 05 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x05},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PINSRB_XMM1_Rmr32_Imm8 = &Instruction{
		Mnemonic: "pinsrb",
		UID:      "PINSRB_XMM1_Rmr32_Imm8",
		Syntax:   "PINSRB xmm1, r32/m8, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 20 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x20},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr32, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PINSRB_XMM1_M8_Imm8 = &Instruction{
		Mnemonic: "pinsrb",
		UID:      "PINSRB_XMM1_M8_Imm8",
		Syntax:   "PINSRB xmm1, r32/m8, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 20 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x20},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PINSRD_XMM1_Rmr32_Imm8 = &Instruction{
		Mnemonic: "pinsrd",
		UID:      "PINSRD_XMM1_Rmr32_Imm8",
		Syntax:   "PINSRD xmm1, r/m32, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 22 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x22},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamXMM1, ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"SSE4_1"},
		OperandSize: true,
	}
	PINSRD_XMM1_M32_Imm8 = &Instruction{
		Mnemonic: "pinsrd",
		UID:      "PINSRD_XMM1_M32_Imm8",
		Syntax:   "PINSRD xmm1, r/m32, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 22 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x22},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamXMM1, ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"SSE4_1"},
		OperandSize: true,
	}
	PINSRQ_XMM1_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "pinsrq",
		UID:      "PINSRQ_XMM1_Rmr64_Imm8_REX",
		Syntax:   "PINSRQ xmm1, r/m64, imm8",
		Encoding: &Encoding{
			Syntax:            "66 REX.W 0F 3A 22 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x3a, 0x22},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PINSRQ_XMM1_M64_Imm8_REX = &Instruction{
		Mnemonic: "pinsrq",
		UID:      "PINSRQ_XMM1_M64_Imm8_REX",
		Syntax:   "PINSRQ xmm1, r/m64, imm8",
		Encoding: &Encoding{
			Syntax:            "66 REX.W 0F 3A 22 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x3a, 0x22},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PINSRW_MM1_Rmr32_Imm8 = &Instruction{
		Mnemonic: "pinsrw",
		UID:      "PINSRW_MM1_Rmr32_Imm8",
		Syntax:   "PINSRW mm1, r32/m16, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F C4 /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc4},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamRmr32, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PINSRW_MM1_M16_Imm8 = &Instruction{
		Mnemonic: "pinsrw",
		UID:      "PINSRW_MM1_M16_Imm8",
		Syntax:   "PINSRW mm1, r32/m16, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F C4 /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc4},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM16, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PINSRW_XMM1_Rmr32_Imm8 = &Instruction{
		Mnemonic: "pinsrw",
		UID:      "PINSRW_XMM1_Rmr32_Imm8",
		Syntax:   "PINSRW xmm1, r32/m16, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F C4 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc4},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr32, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PINSRW_XMM1_M16_Imm8 = &Instruction{
		Mnemonic: "pinsrw",
		UID:      "PINSRW_XMM1_M16_Imm8",
		Syntax:   "PINSRW xmm1, r32/m16, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F C4 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc4},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM16, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMADDUBSW_MM1_MM2 = &Instruction{
		Mnemonic: "pmaddubsw",
		UID:      "PMADDUBSW_MM1_MM2",
		Syntax:   "PMADDUBSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 04 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x04},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PMADDUBSW_MM1_M64 = &Instruction{
		Mnemonic: "pmaddubsw",
		UID:      "PMADDUBSW_MM1_M64",
		Syntax:   "PMADDUBSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 04 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x04},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PMADDUBSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmaddubsw",
		UID:      "PMADDUBSW_XMM1_XMM2",
		Syntax:   "PMADDUBSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 04 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x04},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PMADDUBSW_XMM1_M128 = &Instruction{
		Mnemonic: "pmaddubsw",
		UID:      "PMADDUBSW_XMM1_M128",
		Syntax:   "PMADDUBSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 04 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x04},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PMADDWD_MM1_MM2 = &Instruction{
		Mnemonic: "pmaddwd",
		UID:      "PMADDWD_MM1_MM2",
		Syntax:   "PMADDWD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F5 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf5},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PMADDWD_MM1_M64 = &Instruction{
		Mnemonic: "pmaddwd",
		UID:      "PMADDWD_MM1_M64",
		Syntax:   "PMADDWD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F5 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf5},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PMADDWD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmaddwd",
		UID:      "PMADDWD_XMM1_XMM2",
		Syntax:   "PMADDWD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F5 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf5},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMADDWD_XMM1_M128 = &Instruction{
		Mnemonic: "pmaddwd",
		UID:      "PMADDWD_XMM1_M128",
		Syntax:   "PMADDWD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F5 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf5},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMAXSB_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmaxsb",
		UID:      "PMAXSB_XMM1_XMM2",
		Syntax:   "PMAXSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMAXSB_XMM1_M128 = &Instruction{
		Mnemonic: "pmaxsb",
		UID:      "PMAXSB_XMM1_M128",
		Syntax:   "PMAXSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMAXSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmaxsd",
		UID:      "PMAXSD_XMM1_XMM2",
		Syntax:   "PMAXSD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMAXSD_XMM1_M128 = &Instruction{
		Mnemonic: "pmaxsd",
		UID:      "PMAXSD_XMM1_M128",
		Syntax:   "PMAXSD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMAXSW_MM1_MM2 = &Instruction{
		Mnemonic: "pmaxsw",
		UID:      "PMAXSW_MM1_MM2",
		Syntax:   "PMAXSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F EE /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xee},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMAXSW_MM1_M64 = &Instruction{
		Mnemonic: "pmaxsw",
		UID:      "PMAXSW_MM1_M64",
		Syntax:   "PMAXSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F EE /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xee},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMAXSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmaxsw",
		UID:      "PMAXSW_XMM1_XMM2",
		Syntax:   "PMAXSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F EE /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xee},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMAXSW_XMM1_M128 = &Instruction{
		Mnemonic: "pmaxsw",
		UID:      "PMAXSW_XMM1_M128",
		Syntax:   "PMAXSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F EE /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xee},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMAXUB_MM1_MM2 = &Instruction{
		Mnemonic: "pmaxub",
		UID:      "PMAXUB_MM1_MM2",
		Syntax:   "PMAXUB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DE /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xde},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMAXUB_MM1_M64 = &Instruction{
		Mnemonic: "pmaxub",
		UID:      "PMAXUB_MM1_M64",
		Syntax:   "PMAXUB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DE /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xde},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMAXUB_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmaxub",
		UID:      "PMAXUB_XMM1_XMM2",
		Syntax:   "PMAXUB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DE /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xde},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMAXUB_XMM1_M128 = &Instruction{
		Mnemonic: "pmaxub",
		UID:      "PMAXUB_XMM1_M128",
		Syntax:   "PMAXUB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DE /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xde},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMAXUD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmaxud",
		UID:      "PMAXUD_XMM1_XMM2",
		Syntax:   "PMAXUD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3F /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMAXUD_XMM1_M128 = &Instruction{
		Mnemonic: "pmaxud",
		UID:      "PMAXUD_XMM1_M128",
		Syntax:   "PMAXUD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3F /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3f},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMAXUW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmaxuw",
		UID:      "PMAXUW_XMM1_XMM2",
		Syntax:   "PMAXUW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMAXUW_XMM1_M128 = &Instruction{
		Mnemonic: "pmaxuw",
		UID:      "PMAXUW_XMM1_M128",
		Syntax:   "PMAXUW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMINSB_XMM1_XMM2 = &Instruction{
		Mnemonic: "pminsb",
		UID:      "PMINSB_XMM1_XMM2",
		Syntax:   "PMINSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 38 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x38},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMINSB_XMM1_M128 = &Instruction{
		Mnemonic: "pminsb",
		UID:      "PMINSB_XMM1_M128",
		Syntax:   "PMINSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 38 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x38},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMINSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pminsd",
		UID:      "PMINSD_XMM1_XMM2",
		Syntax:   "PMINSD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 39 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x39},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMINSD_XMM1_M128 = &Instruction{
		Mnemonic: "pminsd",
		UID:      "PMINSD_XMM1_M128",
		Syntax:   "PMINSD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 39 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x39},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMINSW_MM1_MM2 = &Instruction{
		Mnemonic: "pminsw",
		UID:      "PMINSW_MM1_MM2",
		Syntax:   "PMINSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F EA /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xea},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMINSW_MM1_M64 = &Instruction{
		Mnemonic: "pminsw",
		UID:      "PMINSW_MM1_M64",
		Syntax:   "PMINSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F EA /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xea},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMINSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pminsw",
		UID:      "PMINSW_XMM1_XMM2",
		Syntax:   "PMINSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F EA /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xea},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMINSW_XMM1_M128 = &Instruction{
		Mnemonic: "pminsw",
		UID:      "PMINSW_XMM1_M128",
		Syntax:   "PMINSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F EA /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xea},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMINUB_MM1_MM2 = &Instruction{
		Mnemonic: "pminub",
		UID:      "PMINUB_MM1_MM2",
		Syntax:   "PMINUB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DA /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xda},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMINUB_MM1_M64 = &Instruction{
		Mnemonic: "pminub",
		UID:      "PMINUB_MM1_M64",
		Syntax:   "PMINUB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F DA /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xda},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMINUB_XMM1_XMM2 = &Instruction{
		Mnemonic: "pminub",
		UID:      "PMINUB_XMM1_XMM2",
		Syntax:   "PMINUB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DA /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xda},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMINUB_XMM1_M128 = &Instruction{
		Mnemonic: "pminub",
		UID:      "PMINUB_XMM1_M128",
		Syntax:   "PMINUB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F DA /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xda},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMINUD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pminud",
		UID:      "PMINUD_XMM1_XMM2",
		Syntax:   "PMINUD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMINUD_XMM1_M128 = &Instruction{
		Mnemonic: "pminud",
		UID:      "PMINUD_XMM1_M128",
		Syntax:   "PMINUD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMINUW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pminuw",
		UID:      "PMINUW_XMM1_XMM2",
		Syntax:   "PMINUW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMINUW_XMM1_M128 = &Instruction{
		Mnemonic: "pminuw",
		UID:      "PMINUW_XMM1_M128",
		Syntax:   "PMINUW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 3A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x3a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVMSKB_R32_MM2 = &Instruction{
		Mnemonic: "pmovmskb",
		UID:      "PMOVMSKB_R32_MM2",
		Syntax:   "PMOVMSKB r32, mm2",
		Encoding: &Encoding{
			Syntax:        "NP 0F D7 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd7},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamR32, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMOVMSKB_R32_XMM2 = &Instruction{
		Mnemonic: "pmovmskb",
		UID:      "PMOVMSKB_R32_XMM2",
		Syntax:   "PMOVMSKB r32, xmm2",
		Encoding: &Encoding{
			Syntax:            "66 0F D7 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd7},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMOVSXBD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovsxbd",
		UID:      "PMOVSXBD_XMM1_XMM2",
		Syntax:   "PMOVSXBD xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 21 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x21},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXBD_XMM1_M32 = &Instruction{
		Mnemonic: "pmovsxbd",
		UID:      "PMOVSXBD_XMM1_M32",
		Syntax:   "PMOVSXBD xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 21 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x21},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXBQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovsxbq",
		UID:      "PMOVSXBQ_XMM1_XMM2",
		Syntax:   "PMOVSXBQ xmm1, xmm2/m16",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 22 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x22},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXBQ_XMM1_M16 = &Instruction{
		Mnemonic: "pmovsxbq",
		UID:      "PMOVSXBQ_XMM1_M16",
		Syntax:   "PMOVSXBQ xmm1, xmm2/m16",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 22 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x22},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXBW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovsxbw",
		UID:      "PMOVSXBW_XMM1_XMM2",
		Syntax:   "PMOVSXBW xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 20 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x20},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXBW_XMM1_M64 = &Instruction{
		Mnemonic: "pmovsxbw",
		UID:      "PMOVSXBW_XMM1_M64",
		Syntax:   "PMOVSXBW xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 20 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x20},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXDQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovsxdq",
		UID:      "PMOVSXDQ_XMM1_XMM2",
		Syntax:   "PMOVSXDQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 25 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x25},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXDQ_XMM1_M64 = &Instruction{
		Mnemonic: "pmovsxdq",
		UID:      "PMOVSXDQ_XMM1_M64",
		Syntax:   "PMOVSXDQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 25 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x25},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXWD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovsxwd",
		UID:      "PMOVSXWD_XMM1_XMM2",
		Syntax:   "PMOVSXWD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 23 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x23},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXWD_XMM1_M64 = &Instruction{
		Mnemonic: "pmovsxwd",
		UID:      "PMOVSXWD_XMM1_M64",
		Syntax:   "PMOVSXWD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 23 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x23},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXWQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovsxwq",
		UID:      "PMOVSXWQ_XMM1_XMM2",
		Syntax:   "PMOVSXWQ xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 24 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x24},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVSXWQ_XMM1_M32 = &Instruction{
		Mnemonic: "pmovsxwq",
		UID:      "PMOVSXWQ_XMM1_M32",
		Syntax:   "PMOVSXWQ xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 24 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x24},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXBD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovzxbd",
		UID:      "PMOVZXBD_XMM1_XMM2",
		Syntax:   "PMOVZXBD xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 31 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x31},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXBD_XMM1_M32 = &Instruction{
		Mnemonic: "pmovzxbd",
		UID:      "PMOVZXBD_XMM1_M32",
		Syntax:   "PMOVZXBD xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 31 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x31},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXBQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovzxbq",
		UID:      "PMOVZXBQ_XMM1_XMM2",
		Syntax:   "PMOVZXBQ xmm1, xmm2/m16",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 32 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x32},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXBQ_XMM1_M16 = &Instruction{
		Mnemonic: "pmovzxbq",
		UID:      "PMOVZXBQ_XMM1_M16",
		Syntax:   "PMOVZXBQ xmm1, xmm2/m16",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 32 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x32},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXBW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovzxbw",
		UID:      "PMOVZXBW_XMM1_XMM2",
		Syntax:   "PMOVZXBW xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 30 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x30},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXBW_XMM1_M64 = &Instruction{
		Mnemonic: "pmovzxbw",
		UID:      "PMOVZXBW_XMM1_M64",
		Syntax:   "PMOVZXBW xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 30 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x30},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXDQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovzxdq",
		UID:      "PMOVZXDQ_XMM1_XMM2",
		Syntax:   "PMOVZXDQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 35 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x35},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXDQ_XMM1_M64 = &Instruction{
		Mnemonic: "pmovzxdq",
		UID:      "PMOVZXDQ_XMM1_M64",
		Syntax:   "PMOVZXDQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 35 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x35},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXWD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovzxwd",
		UID:      "PMOVZXWD_XMM1_XMM2",
		Syntax:   "PMOVZXWD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 33 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x33},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXWD_XMM1_M64 = &Instruction{
		Mnemonic: "pmovzxwd",
		UID:      "PMOVZXWD_XMM1_M64",
		Syntax:   "PMOVZXWD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 33 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x33},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXWQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmovzxwq",
		UID:      "PMOVZXWQ_XMM1_XMM2",
		Syntax:   "PMOVZXWQ xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 34 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x34},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMOVZXWQ_XMM1_M32 = &Instruction{
		Mnemonic: "pmovzxwq",
		UID:      "PMOVZXWQ_XMM1_M32",
		Syntax:   "PMOVZXWQ xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 34 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x34},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMULDQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmuldq",
		UID:      "PMULDQ_XMM1_XMM2",
		Syntax:   "PMULDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 28 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x28},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMULDQ_XMM1_M128 = &Instruction{
		Mnemonic: "pmuldq",
		UID:      "PMULDQ_XMM1_M128",
		Syntax:   "PMULDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 28 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x28},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMULHRSW_MM1_MM2 = &Instruction{
		Mnemonic: "pmulhrsw",
		UID:      "PMULHRSW_MM1_MM2",
		Syntax:   "PMULHRSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 0B /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x0b},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PMULHRSW_MM1_M64 = &Instruction{
		Mnemonic: "pmulhrsw",
		UID:      "PMULHRSW_MM1_M64",
		Syntax:   "PMULHRSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 0B /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x0b},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PMULHRSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmulhrsw",
		UID:      "PMULHRSW_XMM1_XMM2",
		Syntax:   "PMULHRSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 0B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x0b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PMULHRSW_XMM1_M128 = &Instruction{
		Mnemonic: "pmulhrsw",
		UID:      "PMULHRSW_XMM1_M128",
		Syntax:   "PMULHRSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 0B /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x0b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PMULHUW_MM1_MM2 = &Instruction{
		Mnemonic: "pmulhuw",
		UID:      "PMULHUW_MM1_MM2",
		Syntax:   "PMULHUW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E4 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe4},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMULHUW_MM1_M64 = &Instruction{
		Mnemonic: "pmulhuw",
		UID:      "PMULHUW_MM1_M64",
		Syntax:   "PMULHUW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E4 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe4},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PMULHUW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmulhuw",
		UID:      "PMULHUW_XMM1_XMM2",
		Syntax:   "PMULHUW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E4 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe4},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMULHUW_XMM1_M128 = &Instruction{
		Mnemonic: "pmulhuw",
		UID:      "PMULHUW_XMM1_M128",
		Syntax:   "PMULHUW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E4 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe4},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMULHW_MM1_MM2 = &Instruction{
		Mnemonic: "pmulhw",
		UID:      "PMULHW_MM1_MM2",
		Syntax:   "PMULHW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E5 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe5},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PMULHW_MM1_M64 = &Instruction{
		Mnemonic: "pmulhw",
		UID:      "PMULHW_MM1_M64",
		Syntax:   "PMULHW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E5 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe5},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PMULHW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmulhw",
		UID:      "PMULHW_XMM1_XMM2",
		Syntax:   "PMULHW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E5 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe5},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMULHW_XMM1_M128 = &Instruction{
		Mnemonic: "pmulhw",
		UID:      "PMULHW_XMM1_M128",
		Syntax:   "PMULHW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E5 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe5},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMULLD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmulld",
		UID:      "PMULLD_XMM1_XMM2",
		Syntax:   "PMULLD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 40 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x40},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMULLD_XMM1_M128 = &Instruction{
		Mnemonic: "pmulld",
		UID:      "PMULLD_XMM1_M128",
		Syntax:   "PMULLD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 40 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x40},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PMULLW_MM1_MM2 = &Instruction{
		Mnemonic: "pmullw",
		UID:      "PMULLW_MM1_MM2",
		Syntax:   "PMULLW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D5 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd5},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PMULLW_MM1_M64 = &Instruction{
		Mnemonic: "pmullw",
		UID:      "PMULLW_MM1_M64",
		Syntax:   "PMULLW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D5 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd5},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PMULLW_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmullw",
		UID:      "PMULLW_XMM1_XMM2",
		Syntax:   "PMULLW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D5 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd5},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMULLW_XMM1_M128 = &Instruction{
		Mnemonic: "pmullw",
		UID:      "PMULLW_XMM1_M128",
		Syntax:   "PMULLW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D5 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd5},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMULUDQ_MM1_MM2 = &Instruction{
		Mnemonic: "pmuludq",
		UID:      "PMULUDQ_MM1_MM2",
		Syntax:   "PMULUDQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F4 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf4},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMULUDQ_MM1_M64 = &Instruction{
		Mnemonic: "pmuludq",
		UID:      "PMULUDQ_MM1_M64",
		Syntax:   "PMULUDQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F4 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf4},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMULUDQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "pmuludq",
		UID:      "PMULUDQ_XMM1_XMM2",
		Syntax:   "PMULUDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F4 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf4},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PMULUDQ_XMM1_M128 = &Instruction{
		Mnemonic: "pmuludq",
		UID:      "PMULUDQ_XMM1_M128",
		Syntax:   "PMULUDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F4 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf4},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	POP_ES = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_ES",
		Syntax:   "POP ES",
		Encoding: &Encoding{
			Syntax: "07",
			Opcode: []byte{0x07},
		},
		Parameters: []*Parameter{ParamES},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	POP_SS = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_SS",
		Syntax:   "POP SS",
		Encoding: &Encoding{
			Syntax: "17",
			Opcode: []byte{0x17},
		},
		Parameters: []*Parameter{ParamSS},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	POP_DS = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_DS",
		Syntax:   "POP DS",
		Encoding: &Encoding{
			Syntax: "1F",
			Opcode: []byte{0x1f},
		},
		Parameters: []*Parameter{ParamDS},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	POP_FS = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_FS",
		Syntax:   "POP FS",
		Encoding: &Encoding{
			Syntax: "0F A1",
			Opcode: []byte{0x0f, 0xa1},
		},
		Parameters:  []*Parameter{ParamFS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	POP_GS = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_GS",
		Syntax:   "POP GS",
		Encoding: &Encoding{
			Syntax: "0F A9",
			Opcode: []byte{0x0f, 0xa9},
		},
		Parameters:  []*Parameter{ParamGS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
	}
	POP_Rmr16 = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_Rmr16",
		Syntax:   "POP r/m16",
		Encoding: &Encoding{
			Syntax:   "8F /0",
			Opcode:   []byte{0x8f},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	POP_Rmr32 = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_Rmr32",
		Syntax:   "POP r/m32",
		Encoding: &Encoding{
			Syntax:   "8F /0",
			Opcode:   []byte{0x8f},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	POP_Rmr64 = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_Rmr64",
		Syntax:   "POP r/m64",
		Encoding: &Encoding{
			Syntax:   "8F /0",
			Opcode:   []byte{0x8f},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	POP_R16op = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_R16op",
		Syntax:   "POP r16op",
		Encoding: &Encoding{
			Syntax:           "58+rw",
			Opcode:           []byte{0x58},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR16op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	POP_R32op = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_R32op",
		Syntax:   "POP r32op",
		Encoding: &Encoding{
			Syntax:           "58+rd",
			Opcode:           []byte{0x58},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR32op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	POP_R64op = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_R64op",
		Syntax:   "POP r64op",
		Encoding: &Encoding{
			Syntax:           "58+rd",
			Opcode:           []byte{0x58},
			RegisterModifier: 1,
		},
		Parameters: []*Parameter{ParamR64op},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	POP_M16 = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_M16",
		Syntax:   "POP r/m16",
		Encoding: &Encoding{
			Syntax:   "8F /0",
			Opcode:   []byte{0x8f},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	POP_M32 = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_M32",
		Syntax:   "POP r/m32",
		Encoding: &Encoding{
			Syntax:   "8F /0",
			Opcode:   []byte{0x8f},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	POP_M64 = &Instruction{
		Mnemonic: "pop",
		UID:      "POP_M64",
		Syntax:   "POP r/m64",
		Encoding: &Encoding{
			Syntax:   "8F /0",
			Opcode:   []byte{0x8f},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	POPA = &Instruction{
		Mnemonic: "popa",
		UID:      "POPA",
		Syntax:   "POPA",
		Encoding: &Encoding{
			Syntax: "61",
			Opcode: []byte{0x61},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	POPAD = &Instruction{
		Mnemonic: "popad",
		UID:      "POPAD",
		Syntax:   "POPAD",
		Encoding: &Encoding{
			Syntax: "61",
			Opcode: []byte{0x61},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	POPCNT_R16_Rmr16 = &Instruction{
		Mnemonic: "popcnt",
		UID:      "POPCNT_R16_Rmr16",
		Syntax:   "POPCNT r16, r/m16",
		Encoding: &Encoding{
			Syntax:            "F3 0F B8 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xb8},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	POPCNT_R16_M16 = &Instruction{
		Mnemonic: "popcnt",
		UID:      "POPCNT_R16_M16",
		Syntax:   "POPCNT r16, r/m16",
		Encoding: &Encoding{
			Syntax:            "F3 0F B8 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xb8},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	POPCNT_R32_Rmr32 = &Instruction{
		Mnemonic: "popcnt",
		UID:      "POPCNT_R32_Rmr32",
		Syntax:   "POPCNT r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F B8 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xb8},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	POPCNT_R32_M32 = &Instruction{
		Mnemonic: "popcnt",
		UID:      "POPCNT_R32_M32",
		Syntax:   "POPCNT r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F B8 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xb8},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	POPCNT_R64_Rmr64_REX = &Instruction{
		Mnemonic: "popcnt",
		UID:      "POPCNT_R64_Rmr64_REX",
		Syntax:   "POPCNT r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F B8 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xb8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	POPCNT_R64_M64_REX = &Instruction{
		Mnemonic: "popcnt",
		UID:      "POPCNT_R64_M64_REX",
		Syntax:   "POPCNT r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F B8 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xb8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	POPD_ES = &Instruction{
		Mnemonic: "popd",
		UID:      "POPD_ES",
		Syntax:   "POPD ES",
		Encoding: &Encoding{
			Syntax: "07",
			Opcode: []byte{0x07},
		},
		Parameters:  []*Parameter{ParamES},
		Mode16:      false,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	POPD_SS = &Instruction{
		Mnemonic: "popd",
		UID:      "POPD_SS",
		Syntax:   "POPD SS",
		Encoding: &Encoding{
			Syntax: "17",
			Opcode: []byte{0x17},
		},
		Parameters:  []*Parameter{ParamSS},
		Mode16:      false,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	POPD_DS = &Instruction{
		Mnemonic: "popd",
		UID:      "POPD_DS",
		Syntax:   "POPD DS",
		Encoding: &Encoding{
			Syntax: "1F",
			Opcode: []byte{0x1f},
		},
		Parameters:  []*Parameter{ParamDS},
		Mode16:      false,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	POPD_FS = &Instruction{
		Mnemonic: "popd",
		UID:      "POPD_FS",
		Syntax:   "POPD FS",
		Encoding: &Encoding{
			Syntax: "0F A1",
			Opcode: []byte{0x0f, 0xa1},
		},
		Parameters:  []*Parameter{ParamFS},
		Mode16:      false,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	POPD_GS = &Instruction{
		Mnemonic: "popd",
		UID:      "POPD_GS",
		Syntax:   "POPD GS",
		Encoding: &Encoding{
			Syntax: "0F A9",
			Opcode: []byte{0x0f, 0xa9},
		},
		Parameters:  []*Parameter{ParamGS},
		Mode16:      false,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	POPF = &Instruction{
		Mnemonic: "popf",
		UID:      "POPF",
		Syntax:   "POPF",
		Encoding: &Encoding{
			Syntax: "9D",
			Opcode: []byte{0x9d},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	POPFD = &Instruction{
		Mnemonic: "popfd",
		UID:      "POPFD",
		Syntax:   "POPFD",
		Encoding: &Encoding{
			Syntax: "9D",
			Opcode: []byte{0x9d},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	POPFQ = &Instruction{
		Mnemonic: "popfq",
		UID:      "POPFQ",
		Syntax:   "POPFQ",
		Encoding: &Encoding{
			Syntax: "9D",
			Opcode: []byte{0x9d},
		},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	POPQ_FS_REX = &Instruction{
		Mnemonic: "popq",
		UID:      "POPQ_FS_REX",
		Syntax:   "POPQ FS",
		Encoding: &Encoding{
			Syntax: "REX.W 0F A1",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xa1},
		},
		Parameters:  []*Parameter{ParamFS},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	POPQ_GS_REX = &Instruction{
		Mnemonic: "popq",
		UID:      "POPQ_GS_REX",
		Syntax:   "POPQ GS",
		Encoding: &Encoding{
			Syntax: "REX.W 0F A9",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xa9},
		},
		Parameters:  []*Parameter{ParamGS},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	POPW_ES = &Instruction{
		Mnemonic: "popw",
		UID:      "POPW_ES",
		Syntax:   "POPW ES",
		Encoding: &Encoding{
			Syntax: "07",
			Opcode: []byte{0x07},
		},
		Parameters:  []*Parameter{ParamES},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	POPW_SS = &Instruction{
		Mnemonic: "popw",
		UID:      "POPW_SS",
		Syntax:   "POPW SS",
		Encoding: &Encoding{
			Syntax: "17",
			Opcode: []byte{0x17},
		},
		Parameters:  []*Parameter{ParamSS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	POPW_DS = &Instruction{
		Mnemonic: "popw",
		UID:      "POPW_DS",
		Syntax:   "POPW DS",
		Encoding: &Encoding{
			Syntax: "1F",
			Opcode: []byte{0x1f},
		},
		Parameters:  []*Parameter{ParamDS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	POPW_FS = &Instruction{
		Mnemonic: "popw",
		UID:      "POPW_FS",
		Syntax:   "POPW FS",
		Encoding: &Encoding{
			Syntax: "0F A1",
			Opcode: []byte{0x0f, 0xa1},
		},
		Parameters:  []*Parameter{ParamFS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	POPW_GS = &Instruction{
		Mnemonic: "popw",
		UID:      "POPW_GS",
		Syntax:   "POPW GS",
		Encoding: &Encoding{
			Syntax: "0F A9",
			Opcode: []byte{0x0f, 0xa9},
		},
		Parameters:  []*Parameter{ParamGS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	POR_MM1_MM2 = &Instruction{
		Mnemonic: "por",
		UID:      "POR_MM1_MM2",
		Syntax:   "POR mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F EB /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xeb},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	POR_MM1_M64 = &Instruction{
		Mnemonic: "por",
		UID:      "POR_MM1_M64",
		Syntax:   "POR mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F EB /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xeb},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	POR_XMM1_XMM2 = &Instruction{
		Mnemonic: "por",
		UID:      "POR_XMM1_XMM2",
		Syntax:   "POR xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F EB /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xeb},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	POR_XMM1_M128 = &Instruction{
		Mnemonic: "por",
		UID:      "POR_XMM1_M128",
		Syntax:   "POR xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F EB /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xeb},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PREFETCHNTA_M8 = &Instruction{
		Mnemonic: "prefetchnta",
		UID:      "PREFETCHNTA_M8",
		Syntax:   "PREFETCHNTA m8",
		Encoding: &Encoding{
			Syntax:   "0F 18 /0",
			Opcode:   []byte{0x0f, 0x18},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	PREFETCHT0_M8 = &Instruction{
		Mnemonic: "prefetcht0",
		UID:      "PREFETCHT0_M8",
		Syntax:   "PREFETCHT0 m8",
		Encoding: &Encoding{
			Syntax:   "0F 18 /1",
			Opcode:   []byte{0x0f, 0x18},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	PREFETCHT1_M8 = &Instruction{
		Mnemonic: "prefetcht1",
		UID:      "PREFETCHT1_M8",
		Syntax:   "PREFETCHT1 m8",
		Encoding: &Encoding{
			Syntax:   "0F 18 /2",
			Opcode:   []byte{0x0f, 0x18},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	PREFETCHT2_M8 = &Instruction{
		Mnemonic: "prefetcht2",
		UID:      "PREFETCHT2_M8",
		Syntax:   "PREFETCHT2 m8",
		Encoding: &Encoding{
			Syntax:   "0F 18 /3",
			Opcode:   []byte{0x0f, 0x18},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	PREFETCHW_M8 = &Instruction{
		Mnemonic: "prefetchw",
		UID:      "PREFETCHW_M8",
		Syntax:   "PREFETCHW m8",
		Encoding: &Encoding{
			Syntax:   "0F 0D /1",
			Opcode:   []byte{0x0f, 0x0d},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"PREFETCHW"},
	}
	PSADBW_MM1_MM2 = &Instruction{
		Mnemonic: "psadbw",
		UID:      "PSADBW_MM1_MM2",
		Syntax:   "PSADBW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F6 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf6},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PSADBW_MM1_M64 = &Instruction{
		Mnemonic: "psadbw",
		UID:      "PSADBW_MM1_M64",
		Syntax:   "PSADBW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F6 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf6},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	PSADBW_XMM1_XMM2 = &Instruction{
		Mnemonic: "psadbw",
		UID:      "PSADBW_XMM1_XMM2",
		Syntax:   "PSADBW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F6 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSADBW_XMM1_M128 = &Instruction{
		Mnemonic: "psadbw",
		UID:      "PSADBW_XMM1_M128",
		Syntax:   "PSADBW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F6 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSHUFB_MM1_MM2 = &Instruction{
		Mnemonic: "pshufb",
		UID:      "PSHUFB_MM1_MM2",
		Syntax:   "PSHUFB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 00 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x00},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSHUFB_MM1_M64 = &Instruction{
		Mnemonic: "pshufb",
		UID:      "PSHUFB_MM1_M64",
		Syntax:   "PSHUFB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 00 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x00},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSHUFB_XMM1_XMM2 = &Instruction{
		Mnemonic: "pshufb",
		UID:      "PSHUFB_XMM1_XMM2",
		Syntax:   "PSHUFB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 00 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x00},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSHUFB_XMM1_M128 = &Instruction{
		Mnemonic: "pshufb",
		UID:      "PSHUFB_XMM1_M128",
		Syntax:   "PSHUFB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 00 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x00},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSHUFD_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "pshufd",
		UID:      "PSHUFD_XMM1_XMM2_Imm8",
		Syntax:   "PSHUFD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 70 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x70},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSHUFD_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "pshufd",
		UID:      "PSHUFD_XMM1_M128_Imm8",
		Syntax:   "PSHUFD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 70 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x70},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSHUFHW_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "pshufhw",
		UID:      "PSHUFHW_XMM1_XMM2_Imm8",
		Syntax:   "PSHUFHW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "F3 0F 70 /r ib",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x70},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSHUFHW_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "pshufhw",
		UID:      "PSHUFHW_XMM1_M128_Imm8",
		Syntax:   "PSHUFHW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "F3 0F 70 /r ib",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x70},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSHUFLW_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "pshuflw",
		UID:      "PSHUFLW_XMM1_XMM2_Imm8",
		Syntax:   "PSHUFLW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "F2 0F 70 /r ib",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x70},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSHUFLW_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "pshuflw",
		UID:      "PSHUFLW_XMM1_M128_Imm8",
		Syntax:   "PSHUFLW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "F2 0F 70 /r ib",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x70},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSHUFW_MM1_MM2_Imm8 = &Instruction{
		Mnemonic: "pshufw",
		UID:      "PSHUFW_MM1_MM2_Imm8",
		Syntax:   "PSHUFW mm1, mm2/m64, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 70 /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x70},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	PSHUFW_MM1_M64_Imm8 = &Instruction{
		Mnemonic: "pshufw",
		UID:      "PSHUFW_MM1_M64_Imm8",
		Syntax:   "PSHUFW mm1, mm2/m64, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 70 /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x70},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	PSIGNB_MM1_MM2 = &Instruction{
		Mnemonic: "psignb",
		UID:      "PSIGNB_MM1_MM2",
		Syntax:   "PSIGNB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 08 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x08},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGNB_MM1_M64 = &Instruction{
		Mnemonic: "psignb",
		UID:      "PSIGNB_MM1_M64",
		Syntax:   "PSIGNB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 08 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x08},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGNB_XMM1_XMM2 = &Instruction{
		Mnemonic: "psignb",
		UID:      "PSIGNB_XMM1_XMM2",
		Syntax:   "PSIGNB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 08 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x08},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGNB_XMM1_M128 = &Instruction{
		Mnemonic: "psignb",
		UID:      "PSIGNB_XMM1_M128",
		Syntax:   "PSIGNB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 08 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x08},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGND_MM1_MM2 = &Instruction{
		Mnemonic: "psignd",
		UID:      "PSIGND_MM1_MM2",
		Syntax:   "PSIGND mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 0A /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x0a},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGND_MM1_M64 = &Instruction{
		Mnemonic: "psignd",
		UID:      "PSIGND_MM1_M64",
		Syntax:   "PSIGND mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 0A /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x0a},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGND_XMM1_XMM2 = &Instruction{
		Mnemonic: "psignd",
		UID:      "PSIGND_XMM1_XMM2",
		Syntax:   "PSIGND xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 0A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x0a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGND_XMM1_M128 = &Instruction{
		Mnemonic: "psignd",
		UID:      "PSIGND_XMM1_M128",
		Syntax:   "PSIGND xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 0A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x0a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGNW_MM1_MM2 = &Instruction{
		Mnemonic: "psignw",
		UID:      "PSIGNW_MM1_MM2",
		Syntax:   "PSIGNW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 09 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x09},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGNW_MM1_M64 = &Instruction{
		Mnemonic: "psignw",
		UID:      "PSIGNW_MM1_M64",
		Syntax:   "PSIGNW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 09 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0x09},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGNW_XMM1_XMM2 = &Instruction{
		Mnemonic: "psignw",
		UID:      "PSIGNW_XMM1_XMM2",
		Syntax:   "PSIGNW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 09 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x09},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSIGNW_XMM1_M128 = &Instruction{
		Mnemonic: "psignw",
		UID:      "PSIGNW_XMM1_M128",
		Syntax:   "PSIGNW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 09 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x09},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSSE3"},
	}
	PSLLD_MM1_MM2 = &Instruction{
		Mnemonic: "pslld",
		UID:      "PSLLD_MM1_MM2",
		Syntax:   "PSLLD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F2 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf2},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSLLD_MM1_M64 = &Instruction{
		Mnemonic: "pslld",
		UID:      "PSLLD_MM1_M64",
		Syntax:   "PSLLD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F2 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf2},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSLLD_XMM1_XMM2 = &Instruction{
		Mnemonic: "pslld",
		UID:      "PSLLD_XMM1_XMM2",
		Syntax:   "PSLLD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F2 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSLLD_XMM1_M128 = &Instruction{
		Mnemonic: "pslld",
		UID:      "PSLLD_XMM1_M128",
		Syntax:   "PSLLD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F2 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSLLD_MM2_Imm8 = &Instruction{
		Mnemonic: "pslld",
		UID:      "PSLLD_MM2_Imm8",
		Syntax:   "PSLLD mm2, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 72 /6 ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x72},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters: []*Parameter{ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSLLD_XMM2_Imm8 = &Instruction{
		Mnemonic: "pslld",
		UID:      "PSLLD_XMM2_Imm8",
		Syntax:   "PSLLD xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 72 /6 ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x72},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSLLDQ_XMM2_Imm8 = &Instruction{
		Mnemonic: "pslldq",
		UID:      "PSLLDQ_XMM2_Imm8",
		Syntax:   "PSLLDQ xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 73 /7 ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x73},
			ModRM:             true,
			ModRMreg:          8,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSLLQ_MM1_MM2 = &Instruction{
		Mnemonic: "psllq",
		UID:      "PSLLQ_MM1_MM2",
		Syntax:   "PSLLQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F3 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf3},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSLLQ_MM1_M64 = &Instruction{
		Mnemonic: "psllq",
		UID:      "PSLLQ_MM1_M64",
		Syntax:   "PSLLQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F3 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf3},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSLLQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "psllq",
		UID:      "PSLLQ_XMM1_XMM2",
		Syntax:   "PSLLQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F3 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf3},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSLLQ_XMM1_M128 = &Instruction{
		Mnemonic: "psllq",
		UID:      "PSLLQ_XMM1_M128",
		Syntax:   "PSLLQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F3 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf3},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSLLQ_MM2_Imm8 = &Instruction{
		Mnemonic: "psllq",
		UID:      "PSLLQ_MM2_Imm8",
		Syntax:   "PSLLQ mm2, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 73 /6 ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x73},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters: []*Parameter{ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSLLQ_XMM2_Imm8 = &Instruction{
		Mnemonic: "psllq",
		UID:      "PSLLQ_XMM2_Imm8",
		Syntax:   "PSLLQ xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 73 /6 ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x73},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSLLW_MM1_MM2 = &Instruction{
		Mnemonic: "psllw",
		UID:      "PSLLW_MM1_MM2",
		Syntax:   "PSLLW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F1 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf1},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSLLW_MM1_M64 = &Instruction{
		Mnemonic: "psllw",
		UID:      "PSLLW_MM1_M64",
		Syntax:   "PSLLW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F1 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf1},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSLLW_XMM1_XMM2 = &Instruction{
		Mnemonic: "psllw",
		UID:      "PSLLW_XMM1_XMM2",
		Syntax:   "PSLLW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F1 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf1},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSLLW_XMM1_M128 = &Instruction{
		Mnemonic: "psllw",
		UID:      "PSLLW_XMM1_M128",
		Syntax:   "PSLLW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F1 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf1},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSLLW_MM2_Imm8 = &Instruction{
		Mnemonic: "psllw",
		UID:      "PSLLW_MM2_Imm8",
		Syntax:   "PSLLW mm2, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 71 /6 ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x71},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters: []*Parameter{ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSLLW_XMM2_Imm8 = &Instruction{
		Mnemonic: "psllw",
		UID:      "PSLLW_XMM2_Imm8",
		Syntax:   "PSLLW xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 71 /6 ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x71},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRAD_MM1_MM2 = &Instruction{
		Mnemonic: "psrad",
		UID:      "PSRAD_MM1_MM2",
		Syntax:   "PSRAD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E2 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe2},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRAD_MM1_M64 = &Instruction{
		Mnemonic: "psrad",
		UID:      "PSRAD_MM1_M64",
		Syntax:   "PSRAD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E2 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe2},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRAD_XMM1_XMM2 = &Instruction{
		Mnemonic: "psrad",
		UID:      "PSRAD_XMM1_XMM2",
		Syntax:   "PSRAD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E2 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRAD_XMM1_M128 = &Instruction{
		Mnemonic: "psrad",
		UID:      "PSRAD_XMM1_M128",
		Syntax:   "PSRAD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E2 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRAD_MM2_Imm8 = &Instruction{
		Mnemonic: "psrad",
		UID:      "PSRAD_MM2_Imm8",
		Syntax:   "PSRAD mm2, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 72 /4 ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x72},
			ModRM:         true,
			ModRMreg:      5,
		},
		Parameters: []*Parameter{ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRAD_XMM2_Imm8 = &Instruction{
		Mnemonic: "psrad",
		UID:      "PSRAD_XMM2_Imm8",
		Syntax:   "PSRAD xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 72 /4 ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x72},
			ModRM:             true,
			ModRMreg:          5,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRAW_MM1_MM2 = &Instruction{
		Mnemonic: "psraw",
		UID:      "PSRAW_MM1_MM2",
		Syntax:   "PSRAW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E1 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe1},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRAW_MM1_M64 = &Instruction{
		Mnemonic: "psraw",
		UID:      "PSRAW_MM1_M64",
		Syntax:   "PSRAW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E1 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe1},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRAW_XMM1_XMM2 = &Instruction{
		Mnemonic: "psraw",
		UID:      "PSRAW_XMM1_XMM2",
		Syntax:   "PSRAW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E1 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe1},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRAW_XMM1_M128 = &Instruction{
		Mnemonic: "psraw",
		UID:      "PSRAW_XMM1_M128",
		Syntax:   "PSRAW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E1 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe1},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRAW_MM2_Imm8 = &Instruction{
		Mnemonic: "psraw",
		UID:      "PSRAW_MM2_Imm8",
		Syntax:   "PSRAW mm2, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 71 /4 ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x71},
			ModRM:         true,
			ModRMreg:      5,
		},
		Parameters: []*Parameter{ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRAW_XMM2_Imm8 = &Instruction{
		Mnemonic: "psraw",
		UID:      "PSRAW_XMM2_Imm8",
		Syntax:   "PSRAW xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 71 /4 ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x71},
			ModRM:             true,
			ModRMreg:          5,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRLD_MM1_MM2 = &Instruction{
		Mnemonic: "psrld",
		UID:      "PSRLD_MM1_MM2",
		Syntax:   "PSRLD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D2 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd2},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRLD_MM1_M64 = &Instruction{
		Mnemonic: "psrld",
		UID:      "PSRLD_MM1_M64",
		Syntax:   "PSRLD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D2 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd2},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRLD_XMM1_XMM2 = &Instruction{
		Mnemonic: "psrld",
		UID:      "PSRLD_XMM1_XMM2",
		Syntax:   "PSRLD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D2 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRLD_XMM1_M128 = &Instruction{
		Mnemonic: "psrld",
		UID:      "PSRLD_XMM1_M128",
		Syntax:   "PSRLD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D2 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd2},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRLD_MM2_Imm8 = &Instruction{
		Mnemonic: "psrld",
		UID:      "PSRLD_MM2_Imm8",
		Syntax:   "PSRLD mm2, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 72 /2 ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x72},
			ModRM:         true,
			ModRMreg:      3,
		},
		Parameters: []*Parameter{ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRLD_XMM2_Imm8 = &Instruction{
		Mnemonic: "psrld",
		UID:      "PSRLD_XMM2_Imm8",
		Syntax:   "PSRLD xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 72 /2 ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x72},
			ModRM:             true,
			ModRMreg:          3,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRLDQ_XMM2_Imm8 = &Instruction{
		Mnemonic: "psrldq",
		UID:      "PSRLDQ_XMM2_Imm8",
		Syntax:   "PSRLDQ xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 73 /3 ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x73},
			ModRM:             true,
			ModRMreg:          4,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRLQ_MM1_MM2 = &Instruction{
		Mnemonic: "psrlq",
		UID:      "PSRLQ_MM1_MM2",
		Syntax:   "PSRLQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D3 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd3},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRLQ_MM1_M64 = &Instruction{
		Mnemonic: "psrlq",
		UID:      "PSRLQ_MM1_M64",
		Syntax:   "PSRLQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D3 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd3},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRLQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "psrlq",
		UID:      "PSRLQ_XMM1_XMM2",
		Syntax:   "PSRLQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D3 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd3},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRLQ_XMM1_M128 = &Instruction{
		Mnemonic: "psrlq",
		UID:      "PSRLQ_XMM1_M128",
		Syntax:   "PSRLQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D3 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd3},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRLQ_MM2_Imm8 = &Instruction{
		Mnemonic: "psrlq",
		UID:      "PSRLQ_MM2_Imm8",
		Syntax:   "PSRLQ mm2, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 73 /2 ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x73},
			ModRM:         true,
			ModRMreg:      3,
		},
		Parameters: []*Parameter{ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRLQ_XMM2_Imm8 = &Instruction{
		Mnemonic: "psrlq",
		UID:      "PSRLQ_XMM2_Imm8",
		Syntax:   "PSRLQ xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 73 /2 ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x73},
			ModRM:             true,
			ModRMreg:          3,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRLW_MM1_MM2 = &Instruction{
		Mnemonic: "psrlw",
		UID:      "PSRLW_MM1_MM2",
		Syntax:   "PSRLW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D1 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd1},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRLW_MM1_M64 = &Instruction{
		Mnemonic: "psrlw",
		UID:      "PSRLW_MM1_M64",
		Syntax:   "PSRLW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D1 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd1},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRLW_XMM1_XMM2 = &Instruction{
		Mnemonic: "psrlw",
		UID:      "PSRLW_XMM1_XMM2",
		Syntax:   "PSRLW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D1 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd1},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRLW_XMM1_M128 = &Instruction{
		Mnemonic: "psrlw",
		UID:      "PSRLW_XMM1_M128",
		Syntax:   "PSRLW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D1 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd1},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSRLW_MM2_Imm8 = &Instruction{
		Mnemonic: "psrlw",
		UID:      "PSRLW_MM2_Imm8",
		Syntax:   "PSRLW mm2, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 71 /2 ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x71},
			ModRM:         true,
			ModRMreg:      3,
		},
		Parameters: []*Parameter{ParamMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSRLW_XMM2_Imm8 = &Instruction{
		Mnemonic: "psrlw",
		UID:      "PSRLW_XMM2_Imm8",
		Syntax:   "PSRLW xmm2, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 71 /2 ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x71},
			ModRM:             true,
			ModRMreg:          3,
		},
		Parameters: []*Parameter{ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBB_MM1_MM2 = &Instruction{
		Mnemonic: "psubb",
		UID:      "PSUBB_MM1_MM2",
		Syntax:   "PSUBB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F8 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf8},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBB_MM1_M64 = &Instruction{
		Mnemonic: "psubb",
		UID:      "PSUBB_MM1_M64",
		Syntax:   "PSUBB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F8 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf8},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBB_XMM1_XMM2 = &Instruction{
		Mnemonic: "psubb",
		UID:      "PSUBB_XMM1_XMM2",
		Syntax:   "PSUBB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F8 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBB_XMM1_M128 = &Instruction{
		Mnemonic: "psubb",
		UID:      "PSUBB_XMM1_M128",
		Syntax:   "PSUBB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F8 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBD_MM1_MM2 = &Instruction{
		Mnemonic: "psubd",
		UID:      "PSUBD_MM1_MM2",
		Syntax:   "PSUBD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F FA /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xfa},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBD_MM1_M64 = &Instruction{
		Mnemonic: "psubd",
		UID:      "PSUBD_MM1_M64",
		Syntax:   "PSUBD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F FA /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xfa},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBD_XMM1_XMM2 = &Instruction{
		Mnemonic: "psubd",
		UID:      "PSUBD_XMM1_XMM2",
		Syntax:   "PSUBD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F FA /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xfa},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBD_XMM1_M128 = &Instruction{
		Mnemonic: "psubd",
		UID:      "PSUBD_XMM1_M128",
		Syntax:   "PSUBD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F FA /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xfa},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBQ_MM1_MM2 = &Instruction{
		Mnemonic: "psubq",
		UID:      "PSUBQ_MM1_MM2",
		Syntax:   "PSUBQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F FB /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xfb},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBQ_MM1_M64 = &Instruction{
		Mnemonic: "psubq",
		UID:      "PSUBQ_MM1_M64",
		Syntax:   "PSUBQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F FB /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xfb},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "psubq",
		UID:      "PSUBQ_XMM1_XMM2",
		Syntax:   "PSUBQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F FB /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xfb},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBQ_XMM1_M128 = &Instruction{
		Mnemonic: "psubq",
		UID:      "PSUBQ_XMM1_M128",
		Syntax:   "PSUBQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F FB /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xfb},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBSB_MM1_MM2 = &Instruction{
		Mnemonic: "psubsb",
		UID:      "PSUBSB_MM1_MM2",
		Syntax:   "PSUBSB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E8 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe8},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBSB_MM1_M64 = &Instruction{
		Mnemonic: "psubsb",
		UID:      "PSUBSB_MM1_M64",
		Syntax:   "PSUBSB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E8 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe8},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBSB_XMM1_XMM2 = &Instruction{
		Mnemonic: "psubsb",
		UID:      "PSUBSB_XMM1_XMM2",
		Syntax:   "PSUBSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E8 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBSB_XMM1_M128 = &Instruction{
		Mnemonic: "psubsb",
		UID:      "PSUBSB_XMM1_M128",
		Syntax:   "PSUBSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E8 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBSW_MM1_MM2 = &Instruction{
		Mnemonic: "psubsw",
		UID:      "PSUBSW_MM1_MM2",
		Syntax:   "PSUBSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E9 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe9},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBSW_MM1_M64 = &Instruction{
		Mnemonic: "psubsw",
		UID:      "PSUBSW_MM1_M64",
		Syntax:   "PSUBSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F E9 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xe9},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "psubsw",
		UID:      "PSUBSW_XMM1_XMM2",
		Syntax:   "PSUBSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E9 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe9},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBSW_XMM1_M128 = &Instruction{
		Mnemonic: "psubsw",
		UID:      "PSUBSW_XMM1_M128",
		Syntax:   "PSUBSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F E9 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xe9},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBUSB_MM1_MM2 = &Instruction{
		Mnemonic: "psubusb",
		UID:      "PSUBUSB_MM1_MM2",
		Syntax:   "PSUBUSB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D8 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd8},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBUSB_MM1_M64 = &Instruction{
		Mnemonic: "psubusb",
		UID:      "PSUBUSB_MM1_M64",
		Syntax:   "PSUBUSB mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D8 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd8},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBUSB_XMM1_XMM2 = &Instruction{
		Mnemonic: "psubusb",
		UID:      "PSUBUSB_XMM1_XMM2",
		Syntax:   "PSUBUSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D8 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBUSB_XMM1_M128 = &Instruction{
		Mnemonic: "psubusb",
		UID:      "PSUBUSB_XMM1_M128",
		Syntax:   "PSUBUSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D8 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd8},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBUSW_MM1_MM2 = &Instruction{
		Mnemonic: "psubusw",
		UID:      "PSUBUSW_MM1_MM2",
		Syntax:   "PSUBUSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D9 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd9},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBUSW_MM1_M64 = &Instruction{
		Mnemonic: "psubusw",
		UID:      "PSUBUSW_MM1_M64",
		Syntax:   "PSUBUSW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F D9 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xd9},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBUSW_XMM1_XMM2 = &Instruction{
		Mnemonic: "psubusw",
		UID:      "PSUBUSW_XMM1_XMM2",
		Syntax:   "PSUBUSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D9 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd9},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBUSW_XMM1_M128 = &Instruction{
		Mnemonic: "psubusw",
		UID:      "PSUBUSW_XMM1_M128",
		Syntax:   "PSUBUSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F D9 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xd9},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBW_MM1_MM2 = &Instruction{
		Mnemonic: "psubw",
		UID:      "PSUBW_MM1_MM2",
		Syntax:   "PSUBW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F9 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf9},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBW_MM1_M64 = &Instruction{
		Mnemonic: "psubw",
		UID:      "PSUBW_MM1_M64",
		Syntax:   "PSUBW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F F9 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xf9},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PSUBW_XMM1_XMM2 = &Instruction{
		Mnemonic: "psubw",
		UID:      "PSUBW_XMM1_XMM2",
		Syntax:   "PSUBW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F9 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf9},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PSUBW_XMM1_M128 = &Instruction{
		Mnemonic: "psubw",
		UID:      "PSUBW_XMM1_M128",
		Syntax:   "PSUBW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F F9 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xf9},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PTEST_XMM1_XMM2 = &Instruction{
		Mnemonic: "ptest",
		UID:      "PTEST_XMM1_XMM2",
		Syntax:   "PTEST xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 17 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x17},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PTEST_XMM1_M128 = &Instruction{
		Mnemonic: "ptest",
		UID:      "PTEST_XMM1_M128",
		Syntax:   "PTEST xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 17 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0x17},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	PTWRITE_Rmr32 = &Instruction{
		Mnemonic: "ptwrite",
		UID:      "PTWRITE_Rmr32",
		Syntax:   "PTWRITE r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /4",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          5,
		},
		Parameters: []*Parameter{ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"PTWRITE"},
		DataSize:   32,
	}
	PTWRITE_Rmr64_REX = &Instruction{
		Mnemonic: "ptwrite",
		UID:      "PTWRITE_Rmr64_REX",
		Syntax:   "PTWRITE r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F AE /4",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          5,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"PTWRITE"},
		DataSize:   64,
	}
	PTWRITE_M32 = &Instruction{
		Mnemonic: "ptwrite",
		UID:      "PTWRITE_M32",
		Syntax:   "PTWRITE r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /4",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          5,
		},
		Parameters: []*Parameter{ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"PTWRITE"},
		DataSize:   32,
	}
	PTWRITE_M64_REX = &Instruction{
		Mnemonic: "ptwrite",
		UID:      "PTWRITE_M64_REX",
		Syntax:   "PTWRITE r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F AE /4",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          5,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"PTWRITE"},
		DataSize:   64,
	}
	PUNPCKHBW_MM1_MM2 = &Instruction{
		Mnemonic: "punpckhbw",
		UID:      "PUNPCKHBW_MM1_MM2",
		Syntax:   "PUNPCKHBW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 68 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x68},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKHBW_MM1_M64 = &Instruction{
		Mnemonic: "punpckhbw",
		UID:      "PUNPCKHBW_MM1_M64",
		Syntax:   "PUNPCKHBW mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 68 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x68},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKHBW_XMM1_XMM2 = &Instruction{
		Mnemonic: "punpckhbw",
		UID:      "PUNPCKHBW_XMM1_XMM2",
		Syntax:   "PUNPCKHBW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 68 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x68},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKHBW_XMM1_M128 = &Instruction{
		Mnemonic: "punpckhbw",
		UID:      "PUNPCKHBW_XMM1_M128",
		Syntax:   "PUNPCKHBW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 68 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x68},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKHDQ_MM1_MM2 = &Instruction{
		Mnemonic: "punpckhdq",
		UID:      "PUNPCKHDQ_MM1_MM2",
		Syntax:   "PUNPCKHDQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 6A /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x6a},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKHDQ_MM1_M64 = &Instruction{
		Mnemonic: "punpckhdq",
		UID:      "PUNPCKHDQ_MM1_M64",
		Syntax:   "PUNPCKHDQ mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 6A /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x6a},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKHDQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "punpckhdq",
		UID:      "PUNPCKHDQ_XMM1_XMM2",
		Syntax:   "PUNPCKHDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 6A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKHDQ_XMM1_M128 = &Instruction{
		Mnemonic: "punpckhdq",
		UID:      "PUNPCKHDQ_XMM1_M128",
		Syntax:   "PUNPCKHDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 6A /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKHQDQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "punpckhqdq",
		UID:      "PUNPCKHQDQ_XMM1_XMM2",
		Syntax:   "PUNPCKHQDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 6D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKHQDQ_XMM1_M128 = &Instruction{
		Mnemonic: "punpckhqdq",
		UID:      "PUNPCKHQDQ_XMM1_M128",
		Syntax:   "PUNPCKHQDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 6D /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6d},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKHWD_MM1_MM2 = &Instruction{
		Mnemonic: "punpckhwd",
		UID:      "PUNPCKHWD_MM1_MM2",
		Syntax:   "PUNPCKHWD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 69 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x69},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKHWD_MM1_M64 = &Instruction{
		Mnemonic: "punpckhwd",
		UID:      "PUNPCKHWD_MM1_M64",
		Syntax:   "PUNPCKHWD mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F 69 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x69},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKHWD_XMM1_XMM2 = &Instruction{
		Mnemonic: "punpckhwd",
		UID:      "PUNPCKHWD_XMM1_XMM2",
		Syntax:   "PUNPCKHWD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 69 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x69},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKHWD_XMM1_M128 = &Instruction{
		Mnemonic: "punpckhwd",
		UID:      "PUNPCKHWD_XMM1_M128",
		Syntax:   "PUNPCKHWD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 69 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x69},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKLBW_MM1_MM2 = &Instruction{
		Mnemonic: "punpcklbw",
		UID:      "PUNPCKLBW_MM1_MM2",
		Syntax:   "PUNPCKLBW mm1, mm2/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 60 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x60},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKLBW_MM1_M32 = &Instruction{
		Mnemonic: "punpcklbw",
		UID:      "PUNPCKLBW_MM1_M32",
		Syntax:   "PUNPCKLBW mm1, mm2/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 60 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x60},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKLBW_XMM1_XMM2 = &Instruction{
		Mnemonic: "punpcklbw",
		UID:      "PUNPCKLBW_XMM1_XMM2",
		Syntax:   "PUNPCKLBW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 60 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x60},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKLBW_XMM1_M128 = &Instruction{
		Mnemonic: "punpcklbw",
		UID:      "PUNPCKLBW_XMM1_M128",
		Syntax:   "PUNPCKLBW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 60 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x60},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKLDQ_MM1_MM2 = &Instruction{
		Mnemonic: "punpckldq",
		UID:      "PUNPCKLDQ_MM1_MM2",
		Syntax:   "PUNPCKLDQ mm1, mm2/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 62 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x62},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKLDQ_MM1_M32 = &Instruction{
		Mnemonic: "punpckldq",
		UID:      "PUNPCKLDQ_MM1_M32",
		Syntax:   "PUNPCKLDQ mm1, mm2/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 62 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x62},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKLDQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "punpckldq",
		UID:      "PUNPCKLDQ_XMM1_XMM2",
		Syntax:   "PUNPCKLDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 62 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x62},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKLDQ_XMM1_M128 = &Instruction{
		Mnemonic: "punpckldq",
		UID:      "PUNPCKLDQ_XMM1_M128",
		Syntax:   "PUNPCKLDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 62 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x62},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKLQDQ_XMM1_XMM2 = &Instruction{
		Mnemonic: "punpcklqdq",
		UID:      "PUNPCKLQDQ_XMM1_XMM2",
		Syntax:   "PUNPCKLQDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 6C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKLQDQ_XMM1_M128 = &Instruction{
		Mnemonic: "punpcklqdq",
		UID:      "PUNPCKLQDQ_XMM1_M128",
		Syntax:   "PUNPCKLQDQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 6C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x6c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKLWD_MM1_MM2 = &Instruction{
		Mnemonic: "punpcklwd",
		UID:      "PUNPCKLWD_MM1_MM2",
		Syntax:   "PUNPCKLWD mm1, mm2/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 61 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x61},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKLWD_MM1_M32 = &Instruction{
		Mnemonic: "punpcklwd",
		UID:      "PUNPCKLWD_MM1_M32",
		Syntax:   "PUNPCKLWD mm1, mm2/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 61 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x61},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PUNPCKLWD_XMM1_XMM2 = &Instruction{
		Mnemonic: "punpcklwd",
		UID:      "PUNPCKLWD_XMM1_XMM2",
		Syntax:   "PUNPCKLWD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 61 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x61},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUNPCKLWD_XMM1_M128 = &Instruction{
		Mnemonic: "punpcklwd",
		UID:      "PUNPCKLWD_XMM1_M128",
		Syntax:   "PUNPCKLWD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 61 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x61},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PUSH_ES = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_ES",
		Syntax:   "PUSH ES",
		Encoding: &Encoding{
			Syntax: "06",
			Opcode: []byte{0x06},
		},
		Parameters: []*Parameter{ParamES},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	PUSH_CS = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_CS",
		Syntax:   "PUSH CS",
		Encoding: &Encoding{
			Syntax: "0E",
			Opcode: []byte{0x0e},
		},
		Parameters: []*Parameter{ParamCS},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	PUSH_SS = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_SS",
		Syntax:   "PUSH SS",
		Encoding: &Encoding{
			Syntax: "16",
			Opcode: []byte{0x16},
		},
		Parameters: []*Parameter{ParamSS},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	PUSH_DS = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_DS",
		Syntax:   "PUSH DS",
		Encoding: &Encoding{
			Syntax: "1E",
			Opcode: []byte{0x1e},
		},
		Parameters: []*Parameter{ParamDS},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
	}
	PUSH_FS = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_FS",
		Syntax:   "PUSH FS",
		Encoding: &Encoding{
			Syntax: "0F A0",
			Opcode: []byte{0x0f, 0xa0},
		},
		Parameters: []*Parameter{ParamFS},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	PUSH_GS = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_GS",
		Syntax:   "PUSH GS",
		Encoding: &Encoding{
			Syntax: "0F A8",
			Opcode: []byte{0x0f, 0xa8},
		},
		Parameters: []*Parameter{ParamGS},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	PUSH_Imm8 = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_Imm8",
		Syntax:   "PUSH imm8",
		Encoding: &Encoding{
			Syntax: "6A ib",
			Opcode: []byte{0x6a},
		},
		Parameters: []*Parameter{ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	PUSH_Imm16 = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_Imm16",
		Syntax:   "PUSH imm16",
		Encoding: &Encoding{
			Syntax: "68 iw",
			Opcode: []byte{0x68},
		},
		Parameters: []*Parameter{ParamImm16},
		Mode16:     true,
		Mode32:     false,
		Mode64:     false,
		DataSize:   16,
	}
	PUSH_Imm32 = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_Imm32",
		Syntax:   "PUSH imm32",
		Encoding: &Encoding{
			Syntax: "68 id",
			Opcode: []byte{0x68},
		},
		Parameters: []*Parameter{ParamImm32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		DataSize:   32,
	}
	PUSH_Rmr16 = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_Rmr16",
		Syntax:   "PUSH r/m16",
		Encoding: &Encoding{
			Syntax:   "FF /6",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	PUSH_Rmr32 = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_Rmr32",
		Syntax:   "PUSH r/m32",
		Encoding: &Encoding{
			Syntax:   "FF /6",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSH_Rmr64 = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_Rmr64",
		Syntax:   "PUSH r/m64",
		Encoding: &Encoding{
			Syntax:   "FF /6",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	PUSH_R16op = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_R16op",
		Syntax:   "PUSH r16op",
		Encoding: &Encoding{
			Syntax:           "50+rw",
			Opcode:           []byte{0x50},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR16op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	PUSH_R32op = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_R32op",
		Syntax:   "PUSH r32op",
		Encoding: &Encoding{
			Syntax:           "50+rd",
			Opcode:           []byte{0x50},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR32op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSH_R64op = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_R64op",
		Syntax:   "PUSH r64op",
		Encoding: &Encoding{
			Syntax:           "50+rd",
			Opcode:           []byte{0x50},
			RegisterModifier: 1,
		},
		Parameters: []*Parameter{ParamR64op},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	PUSH_M16 = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_M16",
		Syntax:   "PUSH r/m16",
		Encoding: &Encoding{
			Syntax:   "FF /6",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	PUSH_M32 = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_M32",
		Syntax:   "PUSH r/m32",
		Encoding: &Encoding{
			Syntax:   "FF /6",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSH_M64 = &Instruction{
		Mnemonic: "push",
		UID:      "PUSH_M64",
		Syntax:   "PUSH r/m64",
		Encoding: &Encoding{
			Syntax:   "FF /6",
			Opcode:   []byte{0xff},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	PUSHA = &Instruction{
		Mnemonic: "pusha",
		UID:      "PUSHA",
		Syntax:   "PUSHA",
		Encoding: &Encoding{
			Syntax: "60",
			Opcode: []byte{0x60},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	PUSHAD = &Instruction{
		Mnemonic: "pushad",
		UID:      "PUSHAD",
		Syntax:   "PUSHAD",
		Encoding: &Encoding{
			Syntax: "60",
			Opcode: []byte{0x60},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSHD_ES = &Instruction{
		Mnemonic: "pushd",
		UID:      "PUSHD_ES",
		Syntax:   "PUSHD ES",
		Encoding: &Encoding{
			Syntax: "06",
			Opcode: []byte{0x06},
		},
		Parameters:  []*Parameter{ParamES},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSHD_CS = &Instruction{
		Mnemonic: "pushd",
		UID:      "PUSHD_CS",
		Syntax:   "PUSHD CS",
		Encoding: &Encoding{
			Syntax: "0E",
			Opcode: []byte{0x0e},
		},
		Parameters:  []*Parameter{ParamCS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSHD_SS = &Instruction{
		Mnemonic: "pushd",
		UID:      "PUSHD_SS",
		Syntax:   "PUSHD SS",
		Encoding: &Encoding{
			Syntax: "16",
			Opcode: []byte{0x16},
		},
		Parameters:  []*Parameter{ParamSS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSHD_DS = &Instruction{
		Mnemonic: "pushd",
		UID:      "PUSHD_DS",
		Syntax:   "PUSHD DS",
		Encoding: &Encoding{
			Syntax: "1E",
			Opcode: []byte{0x1e},
		},
		Parameters:  []*Parameter{ParamDS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSHD_FS = &Instruction{
		Mnemonic: "pushd",
		UID:      "PUSHD_FS",
		Syntax:   "PUSHD FS",
		Encoding: &Encoding{
			Syntax: "0F A0",
			Opcode: []byte{0x0f, 0xa0},
		},
		Parameters:  []*Parameter{ParamFS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSHD_GS = &Instruction{
		Mnemonic: "pushd",
		UID:      "PUSHD_GS",
		Syntax:   "PUSHD GS",
		Encoding: &Encoding{
			Syntax: "0F A8",
			Opcode: []byte{0x0f, 0xa8},
		},
		Parameters:  []*Parameter{ParamGS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSHD_Imm32 = &Instruction{
		Mnemonic: "pushd",
		UID:      "PUSHD_Imm32",
		Syntax:   "PUSHD imm32",
		Encoding: &Encoding{
			Syntax: "68 id",
			Opcode: []byte{0x68},
		},
		Parameters:  []*Parameter{ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	PUSHF = &Instruction{
		Mnemonic: "pushf",
		UID:      "PUSHF",
		Syntax:   "PUSHF",
		Encoding: &Encoding{
			Syntax: "9C",
			Opcode: []byte{0x9c},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	PUSHFD = &Instruction{
		Mnemonic: "pushfd",
		UID:      "PUSHFD",
		Syntax:   "PUSHFD",
		Encoding: &Encoding{
			Syntax: "9C",
			Opcode: []byte{0x9c},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    32,
	}
	PUSHFQ = &Instruction{
		Mnemonic: "pushfq",
		UID:      "PUSHFQ",
		Syntax:   "PUSHFQ",
		Encoding: &Encoding{
			Syntax: "9C",
			Opcode: []byte{0x9c},
		},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	PUSHQ_FS_REX = &Instruction{
		Mnemonic: "pushq",
		UID:      "PUSHQ_FS_REX",
		Syntax:   "PUSHQ FS",
		Encoding: &Encoding{
			Syntax: "REX.W 0F A0",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xa0},
		},
		Parameters:  []*Parameter{ParamFS},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	PUSHQ_GS_REX = &Instruction{
		Mnemonic: "pushq",
		UID:      "PUSHQ_GS_REX",
		Syntax:   "PUSHQ GS",
		Encoding: &Encoding{
			Syntax: "REX.W 0F A8",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xa8},
		},
		Parameters:  []*Parameter{ParamGS},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	PUSHW_ES = &Instruction{
		Mnemonic: "pushw",
		UID:      "PUSHW_ES",
		Syntax:   "PUSHW ES",
		Encoding: &Encoding{
			Syntax: "06",
			Opcode: []byte{0x06},
		},
		Parameters:  []*Parameter{ParamES},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	PUSHW_CS = &Instruction{
		Mnemonic: "pushw",
		UID:      "PUSHW_CS",
		Syntax:   "PUSHW CS",
		Encoding: &Encoding{
			Syntax: "0E",
			Opcode: []byte{0x0e},
		},
		Parameters:  []*Parameter{ParamCS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	PUSHW_SS = &Instruction{
		Mnemonic: "pushw",
		UID:      "PUSHW_SS",
		Syntax:   "PUSHW SS",
		Encoding: &Encoding{
			Syntax: "16",
			Opcode: []byte{0x16},
		},
		Parameters:  []*Parameter{ParamSS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	PUSHW_DS = &Instruction{
		Mnemonic: "pushw",
		UID:      "PUSHW_DS",
		Syntax:   "PUSHW DS",
		Encoding: &Encoding{
			Syntax: "1E",
			Opcode: []byte{0x1e},
		},
		Parameters:  []*Parameter{ParamDS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      false,
		OperandSize: true,
		DataSize:    16,
	}
	PUSHW_FS = &Instruction{
		Mnemonic: "pushw",
		UID:      "PUSHW_FS",
		Syntax:   "PUSHW FS",
		Encoding: &Encoding{
			Syntax: "0F A0",
			Opcode: []byte{0x0f, 0xa0},
		},
		Parameters:  []*Parameter{ParamFS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	PUSHW_GS = &Instruction{
		Mnemonic: "pushw",
		UID:      "PUSHW_GS",
		Syntax:   "PUSHW GS",
		Encoding: &Encoding{
			Syntax: "0F A8",
			Opcode: []byte{0x0f, 0xa8},
		},
		Parameters:  []*Parameter{ParamGS},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	PUSHW_Imm16 = &Instruction{
		Mnemonic: "pushw",
		UID:      "PUSHW_Imm16",
		Syntax:   "PUSHW imm16",
		Encoding: &Encoding{
			Syntax: "68 iw",
			Opcode: []byte{0x68},
		},
		Parameters:  []*Parameter{ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	PXOR_MM1_MM2 = &Instruction{
		Mnemonic: "pxor",
		UID:      "PXOR_MM1_MM2",
		Syntax:   "PXOR mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F EF /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xef},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PXOR_MM1_M64 = &Instruction{
		Mnemonic: "pxor",
		UID:      "PXOR_MM1_M64",
		Syntax:   "PXOR mm1, mm2/m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F EF /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xef},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"MMX"},
	}
	PXOR_XMM1_XMM2 = &Instruction{
		Mnemonic: "pxor",
		UID:      "PXOR_XMM1_XMM2",
		Syntax:   "PXOR xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F EF /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xef},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	PXOR_XMM1_M128 = &Instruction{
		Mnemonic: "pxor",
		UID:      "PXOR_XMM1_M128",
		Syntax:   "PXOR xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F EF /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xef},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	RCL_Rmr8_1 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr8_1",
		Syntax:   "RCL r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /2",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCL_Rmr8_CL = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr8_CL",
		Syntax:   "RCL r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /2",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCL_Rmr8_Imm8 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr8_Imm8",
		Syntax:   "RCL r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /2 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCL_Rmr16_1 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr16_1",
		Syntax:   "RCL r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /2",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCL_Rmr16_CL = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr16_CL",
		Syntax:   "RCL r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /2",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCL_Rmr16_Imm8 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr16_Imm8",
		Syntax:   "RCL r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /2 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCL_Rmr32_1 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr32_1",
		Syntax:   "RCL r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /2",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCL_Rmr32_CL = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr32_CL",
		Syntax:   "RCL r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /2",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCL_Rmr32_Imm8 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr32_Imm8",
		Syntax:   "RCL r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /2 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCL_Rmr64_1_REX = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr64_1_REX",
		Syntax:   "RCL r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /2",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCL_Rmr64_CL_REX = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr64_CL_REX",
		Syntax:   "RCL r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /2",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCL_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_Rmr64_Imm8_REX",
		Syntax:   "RCL r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /2 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCL_M8_1 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M8_1",
		Syntax:   "RCL r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /2",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCL_M8_CL = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M8_CL",
		Syntax:   "RCL r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /2",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCL_M8_Imm8 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M8_Imm8",
		Syntax:   "RCL r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /2 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCL_M16_1 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M16_1",
		Syntax:   "RCL r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /2",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCL_M16_CL = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M16_CL",
		Syntax:   "RCL r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /2",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCL_M16_Imm8 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M16_Imm8",
		Syntax:   "RCL r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /2 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCL_M32_1 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M32_1",
		Syntax:   "RCL r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /2",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCL_M32_CL = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M32_CL",
		Syntax:   "RCL r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /2",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCL_M32_Imm8 = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M32_Imm8",
		Syntax:   "RCL r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /2 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCL_M64_1_REX = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M64_1_REX",
		Syntax:   "RCL r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /2",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCL_M64_CL_REX = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M64_CL_REX",
		Syntax:   "RCL r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /2",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCL_M64_Imm8_REX = &Instruction{
		Mnemonic: "rcl",
		UID:      "RCL_M64_Imm8_REX",
		Syntax:   "RCL r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /2 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 3,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCPPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "rcpps",
		UID:      "RCPPS_XMM1_XMM2",
		Syntax:   "RCPPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 53 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x53},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	RCPPS_XMM1_M128 = &Instruction{
		Mnemonic: "rcpps",
		UID:      "RCPPS_XMM1_M128",
		Syntax:   "RCPPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 53 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x53},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	RCPSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "rcpss",
		UID:      "RCPSS_XMM1_XMM2",
		Syntax:   "RCPSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 53 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x53},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	RCPSS_XMM1_M32 = &Instruction{
		Mnemonic: "rcpss",
		UID:      "RCPSS_XMM1_M32",
		Syntax:   "RCPSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 53 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x53},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	RCR_Rmr8_1 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr8_1",
		Syntax:   "RCR r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /3",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCR_Rmr8_CL = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr8_CL",
		Syntax:   "RCR r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /3",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCR_Rmr8_Imm8 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr8_Imm8",
		Syntax:   "RCR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /3 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCR_Rmr16_1 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr16_1",
		Syntax:   "RCR r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /3",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCR_Rmr16_CL = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr16_CL",
		Syntax:   "RCR r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /3",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCR_Rmr16_Imm8 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr16_Imm8",
		Syntax:   "RCR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /3 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCR_Rmr32_1 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr32_1",
		Syntax:   "RCR r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /3",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCR_Rmr32_CL = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr32_CL",
		Syntax:   "RCR r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /3",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCR_Rmr32_Imm8 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr32_Imm8",
		Syntax:   "RCR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /3 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCR_Rmr64_1_REX = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr64_1_REX",
		Syntax:   "RCR r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /3",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCR_Rmr64_CL_REX = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr64_CL_REX",
		Syntax:   "RCR r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /3",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCR_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_Rmr64_Imm8_REX",
		Syntax:   "RCR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /3 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCR_M8_1 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M8_1",
		Syntax:   "RCR r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /3",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCR_M8_CL = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M8_CL",
		Syntax:   "RCR r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /3",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCR_M8_Imm8 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M8_Imm8",
		Syntax:   "RCR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /3 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	RCR_M16_1 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M16_1",
		Syntax:   "RCR r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /3",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCR_M16_CL = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M16_CL",
		Syntax:   "RCR r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /3",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCR_M16_Imm8 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M16_Imm8",
		Syntax:   "RCR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /3 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	RCR_M32_1 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M32_1",
		Syntax:   "RCR r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /3",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCR_M32_CL = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M32_CL",
		Syntax:   "RCR r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /3",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCR_M32_Imm8 = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M32_Imm8",
		Syntax:   "RCR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /3 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	RCR_M64_1_REX = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M64_1_REX",
		Syntax:   "RCR r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /3",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCR_M64_CL_REX = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M64_CL_REX",
		Syntax:   "RCR r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /3",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RCR_M64_Imm8_REX = &Instruction{
		Mnemonic: "rcr",
		UID:      "RCR_M64_Imm8_REX",
		Syntax:   "RCR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /3 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RDFSBASE_Rmr32 = &Instruction{
		Mnemonic: "rdfsbase",
		UID:      "RDFSBASE_Rmr32",
		Syntax:   "RDFSBASE rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /0",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          1,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		CPUID:       []string{"FSGSBASE"},
		OperandSize: true,
		DataSize:    32,
	}
	RDFSBASE_Rmr64_REX = &Instruction{
		Mnemonic: "rdfsbase",
		UID:      "RDFSBASE_Rmr64_REX",
		Syntax:   "RDFSBASE rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F AE /0",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          1,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"FSGSBASE"},
		DataSize:   64,
	}
	RDGSBASE_Rmr32 = &Instruction{
		Mnemonic: "rdgsbase",
		UID:      "RDGSBASE_Rmr32",
		Syntax:   "RDGSBASE rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /1",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          2,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		CPUID:       []string{"FSGSBASE"},
		OperandSize: true,
		DataSize:    32,
	}
	RDGSBASE_Rmr64_REX = &Instruction{
		Mnemonic: "rdgsbase",
		UID:      "RDGSBASE_Rmr64_REX",
		Syntax:   "RDGSBASE rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F AE /1",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          2,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"FSGSBASE"},
		DataSize:   64,
	}
	RDMSR = &Instruction{
		Mnemonic: "rdmsr",
		UID:      "RDMSR",
		Syntax:   "RDMSR",
		Encoding: &Encoding{
			Syntax: "0F 32",
			Opcode: []byte{0x0f, 0x32},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"Pentium"},
	}
	RDPID_Rmr32 = &Instruction{
		Mnemonic: "rdpid",
		UID:      "RDPID_Rmr32",
		Syntax:   "RDPID rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F C7 /7",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc7},
			ModRM:             true,
			ModRMreg:          8,
		},
		Parameters: []*Parameter{ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     false,
		CPUID:      []string{"RDPID"},
	}
	RDPID_Rmr64 = &Instruction{
		Mnemonic: "rdpid",
		UID:      "RDPID_Rmr64",
		Syntax:   "RDPID rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 0F C7 /7",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc7},
			ModRM:             true,
			ModRMreg:          8,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"RDPID"},
	}
	RDPKRU = &Instruction{
		Mnemonic: "rdpkru",
		UID:      "RDPKRU",
		Syntax:   "RDPKRU",
		Encoding: &Encoding{
			Syntax:        "NP 0F 01 EE",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x01, 0xee},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"OSPKE"},
	}
	RDPMC = &Instruction{
		Mnemonic: "rdpmc",
		UID:      "RDPMC",
		Syntax:   "RDPMC",
		Encoding: &Encoding{
			Syntax: "0F 33",
			Opcode: []byte{0x0f, 0x33},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	RDRAND_Rmr16 = &Instruction{
		Mnemonic: "rdrand",
		UID:      "RDRAND_Rmr16",
		Syntax:   "RDRAND rmr16",
		Encoding: &Encoding{
			Syntax:        "NFx 0F C7 /6",
			NoRepPrefixes: true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"RDRAND"},
		OperandSize: true,
		DataSize:    16,
	}
	RDRAND_Rmr32 = &Instruction{
		Mnemonic: "rdrand",
		UID:      "RDRAND_Rmr32",
		Syntax:   "RDRAND rmr32",
		Encoding: &Encoding{
			Syntax:        "NFx 0F C7 /6",
			NoRepPrefixes: true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"RDRAND"},
		OperandSize: true,
		DataSize:    32,
	}
	RDRAND_Rmr64_REX = &Instruction{
		Mnemonic: "rdrand",
		UID:      "RDRAND_Rmr64_REX",
		Syntax:   "RDRAND rmr64",
		Encoding: &Encoding{
			Syntax:        "NFx REX.W 0F C7 /6",
			NoRepPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"RDRAND"},
		DataSize:   64,
	}
	RDSEED_Rmr16 = &Instruction{
		Mnemonic: "rdseed",
		UID:      "RDSEED_Rmr16",
		Syntax:   "RDSEED rmr16",
		Encoding: &Encoding{
			Syntax:        "NFx 0F C7 /7",
			NoRepPrefixes: true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      8,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"RDSEED"},
		OperandSize: true,
		DataSize:    16,
	}
	RDSEED_Rmr32 = &Instruction{
		Mnemonic: "rdseed",
		UID:      "RDSEED_Rmr32",
		Syntax:   "RDSEED rmr32",
		Encoding: &Encoding{
			Syntax:        "NFx 0F C7 /7",
			NoRepPrefixes: true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      8,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"RDSEED"},
		OperandSize: true,
		DataSize:    32,
	}
	RDSEED_Rmr64_REX = &Instruction{
		Mnemonic: "rdseed",
		UID:      "RDSEED_Rmr64_REX",
		Syntax:   "RDSEED rmr64",
		Encoding: &Encoding{
			Syntax:        "NFx REX.W 0F C7 /7",
			NoRepPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      8,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"RDSEED"},
		DataSize:   64,
	}
	RDSSPD_Rmr32 = &Instruction{
		Mnemonic: "rdsspd",
		UID:      "RDSSPD_Rmr32",
		Syntax:   "RDSSPD rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 1E /1",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x1e},
			ModRM:             true,
			ModRMreg:          2,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"CET_SS"},
		OperandSize: true,
	}
	RDSSPQ_Rmr64_REX = &Instruction{
		Mnemonic: "rdsspq",
		UID:      "RDSSPQ_Rmr64_REX",
		Syntax:   "RDSSPQ rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F 1E /1",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x1e},
			ModRM:             true,
			ModRMreg:          2,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"CET_SS"},
	}
	RDTSC = &Instruction{
		Mnemonic: "rdtsc",
		UID:      "RDTSC",
		Syntax:   "RDTSC",
		Encoding: &Encoding{
			Syntax: "0F 31",
			Opcode: []byte{0x0f, 0x31},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	RDTSCP = &Instruction{
		Mnemonic: "rdtscp",
		UID:      "RDTSCP",
		Syntax:   "RDTSCP",
		Encoding: &Encoding{
			Syntax: "0F 01 F9",
			Opcode: []byte{0x0f, 0x01, 0xf9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	RET = &Instruction{
		Mnemonic: "ret",
		UID:      "RET",
		Syntax:   "RET",
		Encoding: &Encoding{
			Syntax: "C3",
			Opcode: []byte{0xc3},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	RET_Imm16u = &Instruction{
		Mnemonic: "ret",
		UID:      "RET_Imm16u",
		Syntax:   "RET imm16u",
		Encoding: &Encoding{
			Syntax: "C2 iw",
			Opcode: []byte{0xc2},
		},
		Parameters: []*Parameter{ParamImm16u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	RET_FAR = &Instruction{
		Mnemonic: "ret-far",
		UID:      "RET_FAR",
		Syntax:   "RET-FAR",
		Encoding: &Encoding{
			Syntax: "CB",
			Opcode: []byte{0xcb},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	RET_FAR_Imm16u = &Instruction{
		Mnemonic: "ret-far",
		UID:      "RET_FAR_Imm16u",
		Syntax:   "RET-FAR imm16u",
		Encoding: &Encoding{
			Syntax: "CA iw",
			Opcode: []byte{0xca},
		},
		Parameters: []*Parameter{ParamImm16u},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	ROL_Rmr8_1 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr8_1",
		Syntax:   "ROL r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /0",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROL_Rmr8_CL = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr8_CL",
		Syntax:   "ROL r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /0",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROL_Rmr8_Imm8 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr8_Imm8",
		Syntax:   "ROL r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /0 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROL_Rmr16_1 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr16_1",
		Syntax:   "ROL r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /0",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROL_Rmr16_CL = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr16_CL",
		Syntax:   "ROL r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /0",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROL_Rmr16_Imm8 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr16_Imm8",
		Syntax:   "ROL r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /0 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROL_Rmr32_1 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr32_1",
		Syntax:   "ROL r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /0",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROL_Rmr32_CL = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr32_CL",
		Syntax:   "ROL r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /0",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROL_Rmr32_Imm8 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr32_Imm8",
		Syntax:   "ROL r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /0 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROL_Rmr64_1_REX = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr64_1_REX",
		Syntax:   "ROL r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /0",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROL_Rmr64_CL_REX = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr64_CL_REX",
		Syntax:   "ROL r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /0",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROL_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_Rmr64_Imm8_REX",
		Syntax:   "ROL r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /0 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROL_M8_1 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M8_1",
		Syntax:   "ROL r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /0",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROL_M8_CL = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M8_CL",
		Syntax:   "ROL r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /0",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROL_M8_Imm8 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M8_Imm8",
		Syntax:   "ROL r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /0 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROL_M16_1 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M16_1",
		Syntax:   "ROL r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /0",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROL_M16_CL = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M16_CL",
		Syntax:   "ROL r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /0",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROL_M16_Imm8 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M16_Imm8",
		Syntax:   "ROL r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /0 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROL_M32_1 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M32_1",
		Syntax:   "ROL r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /0",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROL_M32_CL = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M32_CL",
		Syntax:   "ROL r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /0",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROL_M32_Imm8 = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M32_Imm8",
		Syntax:   "ROL r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /0 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROL_M64_1_REX = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M64_1_REX",
		Syntax:   "ROL r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /0",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROL_M64_CL_REX = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M64_CL_REX",
		Syntax:   "ROL r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /0",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROL_M64_Imm8_REX = &Instruction{
		Mnemonic: "rol",
		UID:      "ROL_M64_Imm8_REX",
		Syntax:   "ROL r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /0 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROR_Rmr8_1 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr8_1",
		Syntax:   "ROR r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /1",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROR_Rmr8_CL = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr8_CL",
		Syntax:   "ROR r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /1",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROR_Rmr8_Imm8 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr8_Imm8",
		Syntax:   "ROR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /1 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROR_Rmr16_1 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr16_1",
		Syntax:   "ROR r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /1",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROR_Rmr16_CL = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr16_CL",
		Syntax:   "ROR r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /1",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROR_Rmr16_Imm8 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr16_Imm8",
		Syntax:   "ROR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /1 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROR_Rmr32_1 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr32_1",
		Syntax:   "ROR r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /1",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROR_Rmr32_CL = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr32_CL",
		Syntax:   "ROR r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /1",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROR_Rmr32_Imm8 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr32_Imm8",
		Syntax:   "ROR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /1 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROR_Rmr64_1_REX = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr64_1_REX",
		Syntax:   "ROR r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /1",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROR_Rmr64_CL_REX = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr64_CL_REX",
		Syntax:   "ROR r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /1",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROR_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_Rmr64_Imm8_REX",
		Syntax:   "ROR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /1 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROR_M8_1 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M8_1",
		Syntax:   "ROR r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /1",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROR_M8_CL = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M8_CL",
		Syntax:   "ROR r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /1",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROR_M8_Imm8 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M8_Imm8",
		Syntax:   "ROR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /1 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	ROR_M16_1 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M16_1",
		Syntax:   "ROR r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /1",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROR_M16_CL = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M16_CL",
		Syntax:   "ROR r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /1",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROR_M16_Imm8 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M16_Imm8",
		Syntax:   "ROR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /1 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	ROR_M32_1 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M32_1",
		Syntax:   "ROR r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /1",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROR_M32_CL = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M32_CL",
		Syntax:   "ROR r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /1",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROR_M32_Imm8 = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M32_Imm8",
		Syntax:   "ROR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /1 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	ROR_M64_1_REX = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M64_1_REX",
		Syntax:   "ROR r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /1",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROR_M64_CL_REX = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M64_CL_REX",
		Syntax:   "ROR r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /1",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	ROR_M64_Imm8_REX = &Instruction{
		Mnemonic: "ror",
		UID:      "ROR_M64_Imm8_REX",
		Syntax:   "ROR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /1 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	RORX_R32_Rmr32_Imm8_VEX = &Instruction{
		Mnemonic: "rorx",
		UID:      "RORX_R32_Rmr32_Imm8_VEX",
		Syntax:   "RORX r32, r/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F3A.W0 F0 /r ib",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 3,
			Opcode:    []byte{0xf0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	RORX_R32_M32_Imm8_VEX = &Instruction{
		Mnemonic: "rorx",
		UID:      "RORX_R32_M32_Imm8_VEX",
		Syntax:   "RORX r32, r/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F3A.W0 F0 /r ib",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 3,
			Opcode:    []byte{0xf0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	RORX_R64_Rmr64_Imm8_VEX = &Instruction{
		Mnemonic: "rorx",
		UID:      "RORX_R64_Rmr64_Imm8_VEX",
		Syntax:   "RORX r64, r/m64, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F3A.W1 F0 /r ib",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0xf0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	RORX_R64_M64_Imm8_VEX = &Instruction{
		Mnemonic: "rorx",
		UID:      "RORX_R64_M64_Imm8_VEX",
		Syntax:   "RORX r64, r/m64, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F3A.W1 F0 /r ib",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0xf0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	ROUNDPD_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "roundpd",
		UID:      "ROUNDPD_XMM1_XMM2_Imm8",
		Syntax:   "ROUNDPD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 09 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x09},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	ROUNDPD_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "roundpd",
		UID:      "ROUNDPD_XMM1_M128_Imm8",
		Syntax:   "ROUNDPD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 09 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x09},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	ROUNDPS_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "roundps",
		UID:      "ROUNDPS_XMM1_XMM2_Imm8",
		Syntax:   "ROUNDPS xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 08 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x08},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	ROUNDPS_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "roundps",
		UID:      "ROUNDPS_XMM1_M128_Imm8",
		Syntax:   "ROUNDPS xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 08 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x08},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	ROUNDSD_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "roundsd",
		UID:      "ROUNDSD_XMM1_XMM2_Imm8",
		Syntax:   "ROUNDSD xmm1, xmm2/m64, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0B /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	ROUNDSD_XMM1_M64_Imm8 = &Instruction{
		Mnemonic: "roundsd",
		UID:      "ROUNDSD_XMM1_M64_Imm8",
		Syntax:   "ROUNDSD xmm1, xmm2/m64, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0B /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0b},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	ROUNDSS_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "roundss",
		UID:      "ROUNDSS_XMM1_XMM2_Imm8",
		Syntax:   "ROUNDSS xmm1, xmm2/m32, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0A /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	ROUNDSS_XMM1_M32_Imm8 = &Instruction{
		Mnemonic: "roundss",
		UID:      "ROUNDSS_XMM1_M32_Imm8",
		Syntax:   "ROUNDSS xmm1, xmm2/m32, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F 3A 0A /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x3a, 0x0a},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE4_1"},
	}
	RSM = &Instruction{
		Mnemonic: "rsm",
		UID:      "RSM",
		Syntax:   "RSM",
		Encoding: &Encoding{
			Syntax: "0F AA",
			Opcode: []byte{0x0f, 0xaa},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	RSQRTPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "rsqrtps",
		UID:      "RSQRTPS_XMM1_XMM2",
		Syntax:   "RSQRTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 52 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x52},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	RSQRTPS_XMM1_M128 = &Instruction{
		Mnemonic: "rsqrtps",
		UID:      "RSQRTPS_XMM1_M128",
		Syntax:   "RSQRTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 52 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x52},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	RSQRTSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "rsqrtss",
		UID:      "RSQRTSS_XMM1_XMM2",
		Syntax:   "RSQRTSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 52 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x52},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	RSQRTSS_XMM1_M32 = &Instruction{
		Mnemonic: "rsqrtss",
		UID:      "RSQRTSS_XMM1_M32",
		Syntax:   "RSQRTSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 52 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x52},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	RSTORSSP_M64 = &Instruction{
		Mnemonic: "rstorssp",
		UID:      "RSTORSSP_M64",
		Syntax:   "RSTORSSP m64",
		Encoding: &Encoding{
			Syntax:            "F3 0F 01 /5",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x01},
			ModRM:             true,
			ModRMreg:          6,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"CET_SS"},
	}
	SAHF = &Instruction{
		Mnemonic: "sahf",
		UID:      "SAHF",
		Syntax:   "SAHF",
		Encoding: &Encoding{
			Syntax: "9E",
			Opcode: []byte{0x9e},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	SAL_Rmr8_1 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr8_1",
		Syntax:   "SAL r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /4",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAL_Rmr8_CL = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr8_CL",
		Syntax:   "SAL r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /4",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAL_Rmr8_Imm8 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr8_Imm8",
		Syntax:   "SAL r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /4 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAL_Rmr16_1 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr16_1",
		Syntax:   "SAL r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /4",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAL_Rmr16_CL = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr16_CL",
		Syntax:   "SAL r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /4",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAL_Rmr16_Imm8 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr16_Imm8",
		Syntax:   "SAL r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /4 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAL_Rmr32_1 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr32_1",
		Syntax:   "SAL r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /4",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAL_Rmr32_CL = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr32_CL",
		Syntax:   "SAL r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /4",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAL_Rmr32_Imm8 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr32_Imm8",
		Syntax:   "SAL r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /4 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAL_Rmr64_1_REX = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr64_1_REX",
		Syntax:   "SAL r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAL_Rmr64_CL_REX = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr64_CL_REX",
		Syntax:   "SAL r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAL_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_Rmr64_Imm8_REX",
		Syntax:   "SAL r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /4 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAL_M8_1 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M8_1",
		Syntax:   "SAL r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /4",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAL_M8_CL = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M8_CL",
		Syntax:   "SAL r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /4",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAL_M8_Imm8 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M8_Imm8",
		Syntax:   "SAL r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /4 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAL_M16_1 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M16_1",
		Syntax:   "SAL r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /4",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAL_M16_CL = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M16_CL",
		Syntax:   "SAL r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /4",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAL_M16_Imm8 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M16_Imm8",
		Syntax:   "SAL r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /4 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAL_M32_1 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M32_1",
		Syntax:   "SAL r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /4",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAL_M32_CL = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M32_CL",
		Syntax:   "SAL r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /4",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAL_M32_Imm8 = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M32_Imm8",
		Syntax:   "SAL r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /4 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAL_M64_1_REX = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M64_1_REX",
		Syntax:   "SAL r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAL_M64_CL_REX = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M64_CL_REX",
		Syntax:   "SAL r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAL_M64_Imm8_REX = &Instruction{
		Mnemonic: "sal",
		UID:      "SAL_M64_Imm8_REX",
		Syntax:   "SAL r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /4 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAR_Rmr8_1 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr8_1",
		Syntax:   "SAR r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /7",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAR_Rmr8_CL = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr8_CL",
		Syntax:   "SAR r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /7",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAR_Rmr8_Imm8 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr8_Imm8",
		Syntax:   "SAR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /7 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAR_Rmr16_1 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr16_1",
		Syntax:   "SAR r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /7",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAR_Rmr16_CL = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr16_CL",
		Syntax:   "SAR r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /7",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAR_Rmr16_Imm8 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr16_Imm8",
		Syntax:   "SAR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /7 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAR_Rmr32_1 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr32_1",
		Syntax:   "SAR r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /7",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAR_Rmr32_CL = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr32_CL",
		Syntax:   "SAR r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /7",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAR_Rmr32_Imm8 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr32_Imm8",
		Syntax:   "SAR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /7 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAR_Rmr64_1_REX = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr64_1_REX",
		Syntax:   "SAR r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /7",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAR_Rmr64_CL_REX = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr64_CL_REX",
		Syntax:   "SAR r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /7",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAR_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_Rmr64_Imm8_REX",
		Syntax:   "SAR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /7 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAR_M8_1 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M8_1",
		Syntax:   "SAR r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /7",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAR_M8_CL = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M8_CL",
		Syntax:   "SAR r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /7",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAR_M8_Imm8 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M8_Imm8",
		Syntax:   "SAR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /7 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SAR_M16_1 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M16_1",
		Syntax:   "SAR r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /7",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAR_M16_CL = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M16_CL",
		Syntax:   "SAR r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /7",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAR_M16_Imm8 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M16_Imm8",
		Syntax:   "SAR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /7 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SAR_M32_1 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M32_1",
		Syntax:   "SAR r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /7",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAR_M32_CL = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M32_CL",
		Syntax:   "SAR r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /7",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAR_M32_Imm8 = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M32_Imm8",
		Syntax:   "SAR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /7 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SAR_M64_1_REX = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M64_1_REX",
		Syntax:   "SAR r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /7",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAR_M64_CL_REX = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M64_CL_REX",
		Syntax:   "SAR r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /7",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SAR_M64_Imm8_REX = &Instruction{
		Mnemonic: "sar",
		UID:      "SAR_M64_Imm8_REX",
		Syntax:   "SAR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /7 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 8,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SARX_R32_Rmr32_R32V_VEX = &Instruction{
		Mnemonic: "sarx",
		UID:      "SARX_R32_Rmr32_R32V_VEX",
		Syntax:   "SARX r32, r/m32, r32V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F3.0F38.W0 F7 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32, ParamR32V},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	SARX_R32_M32_R32V_VEX = &Instruction{
		Mnemonic: "sarx",
		UID:      "SARX_R32_M32_R32V_VEX",
		Syntax:   "SARX r32, r/m32, r32V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F3.0F38.W0 F7 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32, ParamR32V},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	SARX_R64_Rmr64_R64V_VEX = &Instruction{
		Mnemonic: "sarx",
		UID:      "SARX_R64_Rmr64_R64V_VEX",
		Syntax:   "SARX r64, r/m64, r64V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F3.0F38.W1 F7 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64, ParamR64V},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	SARX_R64_M64_R64V_VEX = &Instruction{
		Mnemonic: "sarx",
		UID:      "SARX_R64_M64_R64V_VEX",
		Syntax:   "SARX r64, r/m64, r64V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F3.0F38.W1 F7 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64, ParamR64V},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	SAVEPREVSSP = &Instruction{
		Mnemonic: "saveprevssp",
		UID:      "SAVEPREVSSP",
		Syntax:   "SAVEPREVSSP",
		Encoding: &Encoding{
			Syntax:            "F3 0F 01 EA",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x01, 0xea},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"CET_SS"},
	}
	SBB_AL_Imm8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_AL_Imm8",
		Syntax:   "SBB AL, imm8",
		Encoding: &Encoding{
			Syntax: "1C ib",
			Opcode: []byte{0x1c},
		},
		Parameters: []*Parameter{ParamAL, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SBB_AX_Imm16 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_AX_Imm16",
		Syntax:   "SBB AX, imm16",
		Encoding: &Encoding{
			Syntax: "1D iw",
			Opcode: []byte{0x1d},
		},
		Parameters:  []*Parameter{ParamAX, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SBB_EAX_Imm32 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_EAX_Imm32",
		Syntax:   "SBB EAX, imm32",
		Encoding: &Encoding{
			Syntax: "1D id",
			Opcode: []byte{0x1d},
		},
		Parameters:  []*Parameter{ParamEAX, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SBB_RAX_Imm32_REX = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_RAX_Imm32_REX",
		Syntax:   "SBB RAX, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W 1D id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x1d},
		},
		Parameters: []*Parameter{ParamRAX, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SBB_R8_Rmr8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_R8_Rmr8",
		Syntax:   "SBB r8, r/m8",
		Encoding: &Encoding{
			Syntax: "1A /r",
			Opcode: []byte{0x1a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SBB_R8_M8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_R8_M8",
		Syntax:   "SBB r8, r/m8",
		Encoding: &Encoding{
			Syntax: "1A /r",
			Opcode: []byte{0x1a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SBB_R16_Rmr16 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_R16_Rmr16",
		Syntax:   "SBB r16, r/m16",
		Encoding: &Encoding{
			Syntax: "1B /r",
			Opcode: []byte{0x1b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SBB_R16_M16 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_R16_M16",
		Syntax:   "SBB r16, r/m16",
		Encoding: &Encoding{
			Syntax: "1B /r",
			Opcode: []byte{0x1b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SBB_R32_Rmr32 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_R32_Rmr32",
		Syntax:   "SBB r32, r/m32",
		Encoding: &Encoding{
			Syntax: "1B /r",
			Opcode: []byte{0x1b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SBB_R32_M32 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_R32_M32",
		Syntax:   "SBB r32, r/m32",
		Encoding: &Encoding{
			Syntax: "1B /r",
			Opcode: []byte{0x1b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SBB_R64_Rmr64_REX = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_R64_Rmr64_REX",
		Syntax:   "SBB r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 1B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x1b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SBB_R64_M64_REX = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_R64_M64_REX",
		Syntax:   "SBB r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 1B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x1b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SBB_Rmr8_Imm8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr8_Imm8",
		Syntax:   "SBB r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /3 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SBB_Rmr8_R8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr8_R8",
		Syntax:   "SBB r/m8, r8",
		Encoding: &Encoding{
			Syntax: "18 /r",
			Opcode: []byte{0x18},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SBB_Rmr16_Imm8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr16_Imm8",
		Syntax:   "SBB r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /3 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SBB_Rmr16_Imm16 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr16_Imm16",
		Syntax:   "SBB r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /3 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SBB_Rmr16_R16 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr16_R16",
		Syntax:   "SBB r/m16, r16",
		Encoding: &Encoding{
			Syntax: "19 /r",
			Opcode: []byte{0x19},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SBB_Rmr32_Imm8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr32_Imm8",
		Syntax:   "SBB r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /3 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SBB_Rmr32_Imm32 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr32_Imm32",
		Syntax:   "SBB r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /3 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SBB_Rmr32_R32 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr32_R32",
		Syntax:   "SBB r/m32, r32",
		Encoding: &Encoding{
			Syntax: "19 /r",
			Opcode: []byte{0x19},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SBB_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr64_Imm8_REX",
		Syntax:   "SBB r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /3 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SBB_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr64_Imm32_REX",
		Syntax:   "SBB r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /3 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SBB_Rmr64_R64_REX = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_Rmr64_R64_REX",
		Syntax:   "SBB r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 19 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x19},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SBB_M8_Imm8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M8_Imm8",
		Syntax:   "SBB r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /3 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SBB_M8_R8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M8_R8",
		Syntax:   "SBB r/m8, r8",
		Encoding: &Encoding{
			Syntax: "18 /r",
			Opcode: []byte{0x18},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SBB_M16_Imm8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M16_Imm8",
		Syntax:   "SBB r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /3 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SBB_M16_Imm16 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M16_Imm16",
		Syntax:   "SBB r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /3 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SBB_M16_R16 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M16_R16",
		Syntax:   "SBB r/m16, r16",
		Encoding: &Encoding{
			Syntax: "19 /r",
			Opcode: []byte{0x19},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SBB_M32_Imm8 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M32_Imm8",
		Syntax:   "SBB r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /3 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SBB_M32_Imm32 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M32_Imm32",
		Syntax:   "SBB r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /3 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SBB_M32_R32 = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M32_R32",
		Syntax:   "SBB r/m32, r32",
		Encoding: &Encoding{
			Syntax: "19 /r",
			Opcode: []byte{0x19},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SBB_M64_Imm8_REX = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M64_Imm8_REX",
		Syntax:   "SBB r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /3 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SBB_M64_Imm32_REX = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M64_Imm32_REX",
		Syntax:   "SBB r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /3 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 4,
		},
		Parameters: []*Parameter{ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SBB_M64_R64_REX = &Instruction{
		Mnemonic: "sbb",
		UID:      "SBB_M64_R64_REX",
		Syntax:   "SBB r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 19 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x19},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SCAS_StrDst8 = &Instruction{
		Mnemonic: "scas",
		UID:      "SCAS_StrDst8",
		Syntax:   "SCAS [es:edi:8]",
		Encoding: &Encoding{
			Syntax: "AE",
			Opcode: []byte{0xae},
		},
		Parameters:  []*Parameter{ParamStrDst8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	SCAS_StrDst16 = &Instruction{
		Mnemonic: "scas",
		UID:      "SCAS_StrDst16",
		Syntax:   "SCAS [es:edi:16]",
		Encoding: &Encoding{
			Syntax: "AF",
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamStrDst16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SCAS_StrDst32 = &Instruction{
		Mnemonic: "scas",
		UID:      "SCAS_StrDst32",
		Syntax:   "SCAS [es:edi:32]",
		Encoding: &Encoding{
			Syntax: "AF",
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamStrDst32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SCAS_StrDst64_REX = &Instruction{
		Mnemonic: "scas",
		UID:      "SCAS_StrDst64_REX",
		Syntax:   "SCAS [rdi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W AF",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamStrDst64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	SCAS_AL_StrDst8 = &Instruction{
		Mnemonic: "scas",
		UID:      "SCAS_AL_StrDst8",
		Syntax:   "SCAS AL, [es:edi:8]",
		Encoding: &Encoding{
			Syntax: "AE",
			Opcode: []byte{0xae},
		},
		Parameters:  []*Parameter{ParamAL, ParamStrDst8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	SCAS_AX_StrDst16 = &Instruction{
		Mnemonic: "scas",
		UID:      "SCAS_AX_StrDst16",
		Syntax:   "SCAS AX, [es:edi:16]",
		Encoding: &Encoding{
			Syntax: "AF",
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamAX, ParamStrDst16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SCAS_EAX_StrDst32 = &Instruction{
		Mnemonic: "scas",
		UID:      "SCAS_EAX_StrDst32",
		Syntax:   "SCAS EAX, [es:edi:32]",
		Encoding: &Encoding{
			Syntax: "AF",
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamEAX, ParamStrDst32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SCAS_RAX_StrDst64_REX = &Instruction{
		Mnemonic: "scas",
		UID:      "SCAS_RAX_StrDst64_REX",
		Syntax:   "SCAS RAX, [rdi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W AF",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamRAX, ParamStrDst64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	SCASB = &Instruction{
		Mnemonic: "scasb",
		UID:      "SCASB",
		Syntax:   "SCASB",
		Encoding: &Encoding{
			Syntax: "AE",
			Opcode: []byte{0xae},
		},
		Mode16:   true,
		Mode32:   true,
		Mode64:   true,
		DataSize: 8,
	}
	SCASB_StrDst8 = &Instruction{
		Mnemonic: "scasb",
		UID:      "SCASB_StrDst8",
		Syntax:   "SCASB [es:edi:8]",
		Encoding: &Encoding{
			Syntax: "AE",
			Opcode: []byte{0xae},
		},
		Parameters:  []*Parameter{ParamStrDst8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	SCASB_AL_StrDst8 = &Instruction{
		Mnemonic: "scasb",
		UID:      "SCASB_AL_StrDst8",
		Syntax:   "SCASB AL, [es:edi:8]",
		Encoding: &Encoding{
			Syntax: "AE",
			Opcode: []byte{0xae},
		},
		Parameters:  []*Parameter{ParamAL, ParamStrDst8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	SCASD = &Instruction{
		Mnemonic: "scasd",
		UID:      "SCASD",
		Syntax:   "SCASD",
		Encoding: &Encoding{
			Syntax: "AF",
			Opcode: []byte{0xaf},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SCASD_StrDst32 = &Instruction{
		Mnemonic: "scasd",
		UID:      "SCASD_StrDst32",
		Syntax:   "SCASD [es:edi:32]",
		Encoding: &Encoding{
			Syntax: "AF",
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamStrDst32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SCASD_EAX_StrDst32 = &Instruction{
		Mnemonic: "scasd",
		UID:      "SCASD_EAX_StrDst32",
		Syntax:   "SCASD EAX, [es:edi:32]",
		Encoding: &Encoding{
			Syntax: "AF",
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamEAX, ParamStrDst32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SCASQ_REX = &Instruction{
		Mnemonic: "scasq",
		UID:      "SCASQ_REX",
		Syntax:   "SCASQ",
		Encoding: &Encoding{
			Syntax: "REX.W AF",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xaf},
		},
		Mode16:   false,
		Mode32:   false,
		Mode64:   true,
		DataSize: 64,
	}
	SCASQ_StrDst64_REX = &Instruction{
		Mnemonic: "scasq",
		UID:      "SCASQ_StrDst64_REX",
		Syntax:   "SCASQ [rdi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W AF",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamStrDst64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	SCASQ_RAX_StrDst64_REX = &Instruction{
		Mnemonic: "scasq",
		UID:      "SCASQ_RAX_StrDst64_REX",
		Syntax:   "SCASQ RAX, [rdi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W AF",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamRAX, ParamStrDst64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	SCASW = &Instruction{
		Mnemonic: "scasw",
		UID:      "SCASW",
		Syntax:   "SCASW",
		Encoding: &Encoding{
			Syntax: "AF",
			Opcode: []byte{0xaf},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SCASW_StrDst16 = &Instruction{
		Mnemonic: "scasw",
		UID:      "SCASW_StrDst16",
		Syntax:   "SCASW [es:edi:16]",
		Encoding: &Encoding{
			Syntax: "AF",
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamStrDst16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SCASW_AX_StrDst16 = &Instruction{
		Mnemonic: "scasw",
		UID:      "SCASW_AX_StrDst16",
		Syntax:   "SCASW AX, [es:edi:16]",
		Encoding: &Encoding{
			Syntax: "AF",
			Opcode: []byte{0xaf},
		},
		Parameters:  []*Parameter{ParamAX, ParamStrDst16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SENDUIPI_Rmr8 = &Instruction{
		Mnemonic: "senduipi",
		UID:      "SENDUIPI_Rmr8",
		Syntax:   "SENDUIPI rmr8/rmr16/rmr32/rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 0F C7 /6",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc7},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"UINTR"},
	}
	SENDUIPI_Rmr16 = &Instruction{
		Mnemonic: "senduipi",
		UID:      "SENDUIPI_Rmr16",
		Syntax:   "SENDUIPI rmr8/rmr16/rmr32/rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 0F C7 /6",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc7},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamRmr16},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"UINTR"},
	}
	SENDUIPI_Rmr32 = &Instruction{
		Mnemonic: "senduipi",
		UID:      "SENDUIPI_Rmr32",
		Syntax:   "SENDUIPI rmr8/rmr16/rmr32/rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 0F C7 /6",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc7},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamRmr32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"UINTR"},
	}
	SENDUIPI_Rmr64 = &Instruction{
		Mnemonic: "senduipi",
		UID:      "SENDUIPI_Rmr64",
		Syntax:   "SENDUIPI rmr8/rmr16/rmr32/rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 0F C7 /6",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc7},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"UINTR"},
	}
	SERIALIZE = &Instruction{
		Mnemonic: "serialize",
		UID:      "SERIALIZE",
		Syntax:   "SERIALIZE",
		Encoding: &Encoding{
			Syntax:        "NP 0F 01 E8",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x01, 0xe8},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"SERIALIZE"},
	}
	SETA_Rmr8 = &Instruction{
		Mnemonic: "seta",
		UID:      "SETA_Rmr8",
		Syntax:   "SETA r/m8",
		Encoding: &Encoding{
			Syntax: "0F 97 /r",
			Opcode: []byte{0x0f, 0x97},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETA_M8 = &Instruction{
		Mnemonic: "seta",
		UID:      "SETA_M8",
		Syntax:   "SETA r/m8",
		Encoding: &Encoding{
			Syntax: "0F 97 /r",
			Opcode: []byte{0x0f, 0x97},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETAE_Rmr8 = &Instruction{
		Mnemonic: "setae",
		UID:      "SETAE_Rmr8",
		Syntax:   "SETAE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 93 /r",
			Opcode: []byte{0x0f, 0x93},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETAE_M8 = &Instruction{
		Mnemonic: "setae",
		UID:      "SETAE_M8",
		Syntax:   "SETAE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 93 /r",
			Opcode: []byte{0x0f, 0x93},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETB_Rmr8 = &Instruction{
		Mnemonic: "setb",
		UID:      "SETB_Rmr8",
		Syntax:   "SETB r/m8",
		Encoding: &Encoding{
			Syntax: "0F 92 /r",
			Opcode: []byte{0x0f, 0x92},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETB_M8 = &Instruction{
		Mnemonic: "setb",
		UID:      "SETB_M8",
		Syntax:   "SETB r/m8",
		Encoding: &Encoding{
			Syntax: "0F 92 /r",
			Opcode: []byte{0x0f, 0x92},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETBE_Rmr8 = &Instruction{
		Mnemonic: "setbe",
		UID:      "SETBE_Rmr8",
		Syntax:   "SETBE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 96 /r",
			Opcode: []byte{0x0f, 0x96},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETBE_M8 = &Instruction{
		Mnemonic: "setbe",
		UID:      "SETBE_M8",
		Syntax:   "SETBE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 96 /r",
			Opcode: []byte{0x0f, 0x96},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETC_Rmr8 = &Instruction{
		Mnemonic: "setc",
		UID:      "SETC_Rmr8",
		Syntax:   "SETC r/m8",
		Encoding: &Encoding{
			Syntax: "0F 92 /r",
			Opcode: []byte{0x0f, 0x92},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETC_M8 = &Instruction{
		Mnemonic: "setc",
		UID:      "SETC_M8",
		Syntax:   "SETC r/m8",
		Encoding: &Encoding{
			Syntax: "0F 92 /r",
			Opcode: []byte{0x0f, 0x92},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETE_Rmr8 = &Instruction{
		Mnemonic: "sete",
		UID:      "SETE_Rmr8",
		Syntax:   "SETE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 94 /r",
			Opcode: []byte{0x0f, 0x94},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETE_M8 = &Instruction{
		Mnemonic: "sete",
		UID:      "SETE_M8",
		Syntax:   "SETE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 94 /r",
			Opcode: []byte{0x0f, 0x94},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETG_Rmr8 = &Instruction{
		Mnemonic: "setg",
		UID:      "SETG_Rmr8",
		Syntax:   "SETG r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9F /r",
			Opcode: []byte{0x0f, 0x9f},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETG_M8 = &Instruction{
		Mnemonic: "setg",
		UID:      "SETG_M8",
		Syntax:   "SETG r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9F /r",
			Opcode: []byte{0x0f, 0x9f},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETGE_Rmr8 = &Instruction{
		Mnemonic: "setge",
		UID:      "SETGE_Rmr8",
		Syntax:   "SETGE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9D /r",
			Opcode: []byte{0x0f, 0x9d},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETGE_M8 = &Instruction{
		Mnemonic: "setge",
		UID:      "SETGE_M8",
		Syntax:   "SETGE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9D /r",
			Opcode: []byte{0x0f, 0x9d},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETL_Rmr8 = &Instruction{
		Mnemonic: "setl",
		UID:      "SETL_Rmr8",
		Syntax:   "SETL r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9C /r",
			Opcode: []byte{0x0f, 0x9c},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETL_M8 = &Instruction{
		Mnemonic: "setl",
		UID:      "SETL_M8",
		Syntax:   "SETL r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9C /r",
			Opcode: []byte{0x0f, 0x9c},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETLE_Rmr8 = &Instruction{
		Mnemonic: "setle",
		UID:      "SETLE_Rmr8",
		Syntax:   "SETLE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9E /r",
			Opcode: []byte{0x0f, 0x9e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETLE_M8 = &Instruction{
		Mnemonic: "setle",
		UID:      "SETLE_M8",
		Syntax:   "SETLE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9E /r",
			Opcode: []byte{0x0f, 0x9e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNA_Rmr8 = &Instruction{
		Mnemonic: "setna",
		UID:      "SETNA_Rmr8",
		Syntax:   "SETNA r/m8",
		Encoding: &Encoding{
			Syntax: "0F 96 /r",
			Opcode: []byte{0x0f, 0x96},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNA_M8 = &Instruction{
		Mnemonic: "setna",
		UID:      "SETNA_M8",
		Syntax:   "SETNA r/m8",
		Encoding: &Encoding{
			Syntax: "0F 96 /r",
			Opcode: []byte{0x0f, 0x96},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNAE_Rmr8 = &Instruction{
		Mnemonic: "setnae",
		UID:      "SETNAE_Rmr8",
		Syntax:   "SETNAE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 92 /r",
			Opcode: []byte{0x0f, 0x92},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNAE_M8 = &Instruction{
		Mnemonic: "setnae",
		UID:      "SETNAE_M8",
		Syntax:   "SETNAE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 92 /r",
			Opcode: []byte{0x0f, 0x92},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNB_Rmr8 = &Instruction{
		Mnemonic: "setnb",
		UID:      "SETNB_Rmr8",
		Syntax:   "SETNB r/m8",
		Encoding: &Encoding{
			Syntax: "0F 93 /r",
			Opcode: []byte{0x0f, 0x93},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNB_M8 = &Instruction{
		Mnemonic: "setnb",
		UID:      "SETNB_M8",
		Syntax:   "SETNB r/m8",
		Encoding: &Encoding{
			Syntax: "0F 93 /r",
			Opcode: []byte{0x0f, 0x93},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNBE_Rmr8 = &Instruction{
		Mnemonic: "setnbe",
		UID:      "SETNBE_Rmr8",
		Syntax:   "SETNBE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 97 /r",
			Opcode: []byte{0x0f, 0x97},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNBE_M8 = &Instruction{
		Mnemonic: "setnbe",
		UID:      "SETNBE_M8",
		Syntax:   "SETNBE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 97 /r",
			Opcode: []byte{0x0f, 0x97},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNC_Rmr8 = &Instruction{
		Mnemonic: "setnc",
		UID:      "SETNC_Rmr8",
		Syntax:   "SETNC r/m8",
		Encoding: &Encoding{
			Syntax: "0F 93 /r",
			Opcode: []byte{0x0f, 0x93},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNC_M8 = &Instruction{
		Mnemonic: "setnc",
		UID:      "SETNC_M8",
		Syntax:   "SETNC r/m8",
		Encoding: &Encoding{
			Syntax: "0F 93 /r",
			Opcode: []byte{0x0f, 0x93},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNE_Rmr8 = &Instruction{
		Mnemonic: "setne",
		UID:      "SETNE_Rmr8",
		Syntax:   "SETNE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 95 /r",
			Opcode: []byte{0x0f, 0x95},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNE_M8 = &Instruction{
		Mnemonic: "setne",
		UID:      "SETNE_M8",
		Syntax:   "SETNE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 95 /r",
			Opcode: []byte{0x0f, 0x95},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNG_Rmr8 = &Instruction{
		Mnemonic: "setng",
		UID:      "SETNG_Rmr8",
		Syntax:   "SETNG r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9E /r",
			Opcode: []byte{0x0f, 0x9e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNG_M8 = &Instruction{
		Mnemonic: "setng",
		UID:      "SETNG_M8",
		Syntax:   "SETNG r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9E /r",
			Opcode: []byte{0x0f, 0x9e},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNGE_Rmr8 = &Instruction{
		Mnemonic: "setnge",
		UID:      "SETNGE_Rmr8",
		Syntax:   "SETNGE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9C /r",
			Opcode: []byte{0x0f, 0x9c},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNGE_M8 = &Instruction{
		Mnemonic: "setnge",
		UID:      "SETNGE_M8",
		Syntax:   "SETNGE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9C /r",
			Opcode: []byte{0x0f, 0x9c},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNL_Rmr8 = &Instruction{
		Mnemonic: "setnl",
		UID:      "SETNL_Rmr8",
		Syntax:   "SETNL r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9D /r",
			Opcode: []byte{0x0f, 0x9d},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNL_M8 = &Instruction{
		Mnemonic: "setnl",
		UID:      "SETNL_M8",
		Syntax:   "SETNL r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9D /r",
			Opcode: []byte{0x0f, 0x9d},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNLE_Rmr8 = &Instruction{
		Mnemonic: "setnle",
		UID:      "SETNLE_Rmr8",
		Syntax:   "SETNLE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9F /r",
			Opcode: []byte{0x0f, 0x9f},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNLE_M8 = &Instruction{
		Mnemonic: "setnle",
		UID:      "SETNLE_M8",
		Syntax:   "SETNLE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9F /r",
			Opcode: []byte{0x0f, 0x9f},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNO_Rmr8 = &Instruction{
		Mnemonic: "setno",
		UID:      "SETNO_Rmr8",
		Syntax:   "SETNO r/m8",
		Encoding: &Encoding{
			Syntax: "0F 91 /r",
			Opcode: []byte{0x0f, 0x91},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNO_M8 = &Instruction{
		Mnemonic: "setno",
		UID:      "SETNO_M8",
		Syntax:   "SETNO r/m8",
		Encoding: &Encoding{
			Syntax: "0F 91 /r",
			Opcode: []byte{0x0f, 0x91},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNP_Rmr8 = &Instruction{
		Mnemonic: "setnp",
		UID:      "SETNP_Rmr8",
		Syntax:   "SETNP r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9B /r",
			Opcode: []byte{0x0f, 0x9b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNP_M8 = &Instruction{
		Mnemonic: "setnp",
		UID:      "SETNP_M8",
		Syntax:   "SETNP r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9B /r",
			Opcode: []byte{0x0f, 0x9b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNS_Rmr8 = &Instruction{
		Mnemonic: "setns",
		UID:      "SETNS_Rmr8",
		Syntax:   "SETNS r/m8",
		Encoding: &Encoding{
			Syntax: "0F 99 /r",
			Opcode: []byte{0x0f, 0x99},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNS_M8 = &Instruction{
		Mnemonic: "setns",
		UID:      "SETNS_M8",
		Syntax:   "SETNS r/m8",
		Encoding: &Encoding{
			Syntax: "0F 99 /r",
			Opcode: []byte{0x0f, 0x99},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNZ_Rmr8 = &Instruction{
		Mnemonic: "setnz",
		UID:      "SETNZ_Rmr8",
		Syntax:   "SETNZ r/m8",
		Encoding: &Encoding{
			Syntax: "0F 95 /r",
			Opcode: []byte{0x0f, 0x95},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETNZ_M8 = &Instruction{
		Mnemonic: "setnz",
		UID:      "SETNZ_M8",
		Syntax:   "SETNZ r/m8",
		Encoding: &Encoding{
			Syntax: "0F 95 /r",
			Opcode: []byte{0x0f, 0x95},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETO_Rmr8 = &Instruction{
		Mnemonic: "seto",
		UID:      "SETO_Rmr8",
		Syntax:   "SETO r/m8",
		Encoding: &Encoding{
			Syntax: "0F 90 /r",
			Opcode: []byte{0x0f, 0x90},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETO_M8 = &Instruction{
		Mnemonic: "seto",
		UID:      "SETO_M8",
		Syntax:   "SETO r/m8",
		Encoding: &Encoding{
			Syntax: "0F 90 /r",
			Opcode: []byte{0x0f, 0x90},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETP_Rmr8 = &Instruction{
		Mnemonic: "setp",
		UID:      "SETP_Rmr8",
		Syntax:   "SETP r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9A /r",
			Opcode: []byte{0x0f, 0x9a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETP_M8 = &Instruction{
		Mnemonic: "setp",
		UID:      "SETP_M8",
		Syntax:   "SETP r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9A /r",
			Opcode: []byte{0x0f, 0x9a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETPE_Rmr8 = &Instruction{
		Mnemonic: "setpe",
		UID:      "SETPE_Rmr8",
		Syntax:   "SETPE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9A /r",
			Opcode: []byte{0x0f, 0x9a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETPE_M8 = &Instruction{
		Mnemonic: "setpe",
		UID:      "SETPE_M8",
		Syntax:   "SETPE r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9A /r",
			Opcode: []byte{0x0f, 0x9a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETPO_Rmr8 = &Instruction{
		Mnemonic: "setpo",
		UID:      "SETPO_Rmr8",
		Syntax:   "SETPO r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9B /r",
			Opcode: []byte{0x0f, 0x9b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETPO_M8 = &Instruction{
		Mnemonic: "setpo",
		UID:      "SETPO_M8",
		Syntax:   "SETPO r/m8",
		Encoding: &Encoding{
			Syntax: "0F 9B /r",
			Opcode: []byte{0x0f, 0x9b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETS_Rmr8 = &Instruction{
		Mnemonic: "sets",
		UID:      "SETS_Rmr8",
		Syntax:   "SETS r/m8",
		Encoding: &Encoding{
			Syntax: "0F 98 /r",
			Opcode: []byte{0x0f, 0x98},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETS_M8 = &Instruction{
		Mnemonic: "sets",
		UID:      "SETS_M8",
		Syntax:   "SETS r/m8",
		Encoding: &Encoding{
			Syntax: "0F 98 /r",
			Opcode: []byte{0x0f, 0x98},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETSSBSY = &Instruction{
		Mnemonic: "setssbsy",
		UID:      "SETSSBSY",
		Syntax:   "SETSSBSY",
		Encoding: &Encoding{
			Syntax:            "F3 0F 01 E8",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x01, 0xe8},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"CET_SS"},
	}
	SETZ_Rmr8 = &Instruction{
		Mnemonic: "setz",
		UID:      "SETZ_Rmr8",
		Syntax:   "SETZ r/m8",
		Encoding: &Encoding{
			Syntax: "0F 94 /r",
			Opcode: []byte{0x0f, 0x94},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SETZ_M8 = &Instruction{
		Mnemonic: "setz",
		UID:      "SETZ_M8",
		Syntax:   "SETZ r/m8",
		Encoding: &Encoding{
			Syntax: "0F 94 /r",
			Opcode: []byte{0x0f, 0x94},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SFENCE = &Instruction{
		Mnemonic: "sfence",
		UID:      "SFENCE",
		Syntax:   "SFENCE",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE F8",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae, 0xf8},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	SGDT_M = &Instruction{
		Mnemonic: "sgdt",
		UID:      "SGDT_M",
		Syntax:   "SGDT m",
		Encoding: &Encoding{
			Syntax:   "0F 01 /0",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SHA1MSG1_XMM1_XMM2 = &Instruction{
		Mnemonic: "sha1msg1",
		UID:      "SHA1MSG1_XMM1_XMM2",
		Syntax:   "SHA1MSG1 xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 C9 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xc9},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA1MSG1_XMM1_M128 = &Instruction{
		Mnemonic: "sha1msg1",
		UID:      "SHA1MSG1_XMM1_M128",
		Syntax:   "SHA1MSG1 xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 C9 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xc9},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA1MSG2_XMM1_XMM2 = &Instruction{
		Mnemonic: "sha1msg2",
		UID:      "SHA1MSG2_XMM1_XMM2",
		Syntax:   "SHA1MSG2 xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 CA /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xca},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA1MSG2_XMM1_M128 = &Instruction{
		Mnemonic: "sha1msg2",
		UID:      "SHA1MSG2_XMM1_M128",
		Syntax:   "SHA1MSG2 xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 CA /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xca},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA1NEXTE_XMM1_XMM2 = &Instruction{
		Mnemonic: "sha1nexte",
		UID:      "SHA1NEXTE_XMM1_XMM2",
		Syntax:   "SHA1NEXTE xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 C8 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xc8},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA1NEXTE_XMM1_M128 = &Instruction{
		Mnemonic: "sha1nexte",
		UID:      "SHA1NEXTE_XMM1_M128",
		Syntax:   "SHA1NEXTE xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 C8 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xc8},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA1RNDS4_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "sha1rnds4",
		UID:      "SHA1RNDS4_XMM1_XMM2_Imm8",
		Syntax:   "SHA1RNDS4 xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 3A CC /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x3a, 0xcc},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA1RNDS4_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "sha1rnds4",
		UID:      "SHA1RNDS4_XMM1_M128_Imm8",
		Syntax:   "SHA1RNDS4 xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F 3A CC /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x3a, 0xcc},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA256MSG1_XMM1_XMM2 = &Instruction{
		Mnemonic: "sha256msg1",
		UID:      "SHA256MSG1_XMM1_XMM2",
		Syntax:   "SHA256MSG1 xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 CC /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xcc},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA256MSG1_XMM1_M128 = &Instruction{
		Mnemonic: "sha256msg1",
		UID:      "SHA256MSG1_XMM1_M128",
		Syntax:   "SHA256MSG1 xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 CC /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xcc},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA256MSG2_XMM1_XMM2 = &Instruction{
		Mnemonic: "sha256msg2",
		UID:      "SHA256MSG2_XMM1_XMM2",
		Syntax:   "SHA256MSG2 xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 CD /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xcd},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA256MSG2_XMM1_M128 = &Instruction{
		Mnemonic: "sha256msg2",
		UID:      "SHA256MSG2_XMM1_M128",
		Syntax:   "SHA256MSG2 xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 CD /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xcd},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA256RNDS2_XMM1_XMM2 = &Instruction{
		Mnemonic: "sha256rnds2",
		UID:      "SHA256RNDS2_XMM1_XMM2",
		Syntax:   "SHA256RNDS2 xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 CB /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xcb},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHA256RNDS2_XMM1_M128 = &Instruction{
		Mnemonic: "sha256rnds2",
		UID:      "SHA256RNDS2_XMM1_M128",
		Syntax:   "SHA256RNDS2 xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 38 CB /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x38, 0xcb},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SHA"},
	}
	SHL_Rmr8_1 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr8_1",
		Syntax:   "SHL r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /4",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHL_Rmr8_CL = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr8_CL",
		Syntax:   "SHL r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /4",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHL_Rmr8_Imm8 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr8_Imm8",
		Syntax:   "SHL r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /4 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHL_Rmr16_1 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr16_1",
		Syntax:   "SHL r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /4",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHL_Rmr16_CL = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr16_CL",
		Syntax:   "SHL r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /4",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHL_Rmr16_Imm8 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr16_Imm8",
		Syntax:   "SHL r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /4 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHL_Rmr32_1 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr32_1",
		Syntax:   "SHL r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /4",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHL_Rmr32_CL = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr32_CL",
		Syntax:   "SHL r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /4",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHL_Rmr32_Imm8 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr32_Imm8",
		Syntax:   "SHL r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /4 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHL_Rmr64_1_REX = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr64_1_REX",
		Syntax:   "SHL r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHL_Rmr64_CL_REX = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr64_CL_REX",
		Syntax:   "SHL r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHL_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_Rmr64_Imm8_REX",
		Syntax:   "SHL r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /4 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHL_M8_1 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M8_1",
		Syntax:   "SHL r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /4",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHL_M8_CL = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M8_CL",
		Syntax:   "SHL r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /4",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHL_M8_Imm8 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M8_Imm8",
		Syntax:   "SHL r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /4 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHL_M16_1 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M16_1",
		Syntax:   "SHL r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /4",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHL_M16_CL = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M16_CL",
		Syntax:   "SHL r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /4",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHL_M16_Imm8 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M16_Imm8",
		Syntax:   "SHL r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /4 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHL_M32_1 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M32_1",
		Syntax:   "SHL r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /4",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHL_M32_CL = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M32_CL",
		Syntax:   "SHL r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /4",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHL_M32_Imm8 = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M32_Imm8",
		Syntax:   "SHL r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /4 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHL_M64_1_REX = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M64_1_REX",
		Syntax:   "SHL r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHL_M64_CL_REX = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M64_CL_REX",
		Syntax:   "SHL r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHL_M64_Imm8_REX = &Instruction{
		Mnemonic: "shl",
		UID:      "SHL_M64_Imm8_REX",
		Syntax:   "SHL r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /4 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHLD_Rmr16_R16_CL = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_Rmr16_R16_CL",
		Syntax:   "SHLD r/m16, r16, CL",
		Encoding: &Encoding{
			Syntax: "0F A5 /r",
			Opcode: []byte{0x0f, 0xa5},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHLD_Rmr16_R16_Imm8 = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_Rmr16_R16_Imm8",
		Syntax:   "SHLD r/m16, r16, imm8",
		Encoding: &Encoding{
			Syntax: "0F A4 /r ib",
			Opcode: []byte{0x0f, 0xa4},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHLD_Rmr32_R32_CL = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_Rmr32_R32_CL",
		Syntax:   "SHLD r/m32, r32, CL",
		Encoding: &Encoding{
			Syntax: "0F A5 /r",
			Opcode: []byte{0x0f, 0xa5},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHLD_Rmr32_R32_Imm8 = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_Rmr32_R32_Imm8",
		Syntax:   "SHLD r/m32, r32, imm8",
		Encoding: &Encoding{
			Syntax: "0F A4 /r ib",
			Opcode: []byte{0x0f, 0xa4},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHLD_Rmr64_R64_CL_REX = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_Rmr64_R64_CL_REX",
		Syntax:   "SHLD r/m64, r64, CL",
		Encoding: &Encoding{
			Syntax: "REX.W 0F A5 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xa5},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHLD_Rmr64_R64_Imm8_REX = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_Rmr64_R64_Imm8_REX",
		Syntax:   "SHLD r/m64, r64, imm8",
		Encoding: &Encoding{
			Syntax: "REX.W 0F A4 /r ib",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xa4},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHLD_M16_R16_CL = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_M16_R16_CL",
		Syntax:   "SHLD r/m16, r16, CL",
		Encoding: &Encoding{
			Syntax: "0F A5 /r",
			Opcode: []byte{0x0f, 0xa5},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHLD_M16_R16_Imm8 = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_M16_R16_Imm8",
		Syntax:   "SHLD r/m16, r16, imm8",
		Encoding: &Encoding{
			Syntax: "0F A4 /r ib",
			Opcode: []byte{0x0f, 0xa4},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHLD_M32_R32_CL = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_M32_R32_CL",
		Syntax:   "SHLD r/m32, r32, CL",
		Encoding: &Encoding{
			Syntax: "0F A5 /r",
			Opcode: []byte{0x0f, 0xa5},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHLD_M32_R32_Imm8 = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_M32_R32_Imm8",
		Syntax:   "SHLD r/m32, r32, imm8",
		Encoding: &Encoding{
			Syntax: "0F A4 /r ib",
			Opcode: []byte{0x0f, 0xa4},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHLD_M64_R64_CL_REX = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_M64_R64_CL_REX",
		Syntax:   "SHLD r/m64, r64, CL",
		Encoding: &Encoding{
			Syntax: "REX.W 0F A5 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xa5},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHLD_M64_R64_Imm8_REX = &Instruction{
		Mnemonic: "shld",
		UID:      "SHLD_M64_R64_Imm8_REX",
		Syntax:   "SHLD r/m64, r64, imm8",
		Encoding: &Encoding{
			Syntax: "REX.W 0F A4 /r ib",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xa4},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHLX_R32_Rmr32_R32V_VEX = &Instruction{
		Mnemonic: "shlx",
		UID:      "SHLX_R32_Rmr32_R32V_VEX",
		Syntax:   "SHLX r32, r/m32, r32V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.66.0F38.W0 F7 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32, ParamR32V},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	SHLX_R32_M32_R32V_VEX = &Instruction{
		Mnemonic: "shlx",
		UID:      "SHLX_R32_M32_R32V_VEX",
		Syntax:   "SHLX r32, r/m32, r32V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.66.0F38.W0 F7 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32, ParamR32V},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	SHLX_R64_Rmr64_R64V_VEX = &Instruction{
		Mnemonic: "shlx",
		UID:      "SHLX_R64_Rmr64_R64V_VEX",
		Syntax:   "SHLX r64, r/m64, r64V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.66.0F38.W1 F7 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64, ParamR64V},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	SHLX_R64_M64_R64V_VEX = &Instruction{
		Mnemonic: "shlx",
		UID:      "SHLX_R64_M64_R64V_VEX",
		Syntax:   "SHLX r64, r/m64, r64V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.66.0F38.W1 F7 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64, ParamR64V},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	SHR_Rmr8_1 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr8_1",
		Syntax:   "SHR r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /5",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHR_Rmr8_CL = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr8_CL",
		Syntax:   "SHR r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /5",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHR_Rmr8_Imm8 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr8_Imm8",
		Syntax:   "SHR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /5 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHR_Rmr16_1 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr16_1",
		Syntax:   "SHR r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /5",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHR_Rmr16_CL = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr16_CL",
		Syntax:   "SHR r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /5",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHR_Rmr16_Imm8 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr16_Imm8",
		Syntax:   "SHR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /5 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHR_Rmr32_1 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr32_1",
		Syntax:   "SHR r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /5",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHR_Rmr32_CL = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr32_CL",
		Syntax:   "SHR r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /5",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHR_Rmr32_Imm8 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr32_Imm8",
		Syntax:   "SHR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /5 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHR_Rmr64_1_REX = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr64_1_REX",
		Syntax:   "SHR r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /5",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHR_Rmr64_CL_REX = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr64_CL_REX",
		Syntax:   "SHR r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /5",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHR_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_Rmr64_Imm8_REX",
		Syntax:   "SHR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /5 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHR_M8_1 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M8_1",
		Syntax:   "SHR r/m8, 1",
		Encoding: &Encoding{
			Syntax:   "D0 /5",
			Opcode:   []byte{0xd0},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM8, Param1},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHR_M8_CL = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M8_CL",
		Syntax:   "SHR r/m8, CL",
		Encoding: &Encoding{
			Syntax:   "D2 /5",
			Opcode:   []byte{0xd2},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM8, ParamCL},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHR_M8_Imm8 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M8_Imm8",
		Syntax:   "SHR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "C0 /5 ib",
			Opcode:   []byte{0xc0},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SHR_M16_1 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M16_1",
		Syntax:   "SHR r/m16, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /5",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM16, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHR_M16_CL = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M16_CL",
		Syntax:   "SHR r/m16, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /5",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHR_M16_Imm8 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M16_Imm8",
		Syntax:   "SHR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /5 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHR_M32_1 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M32_1",
		Syntax:   "SHR r/m32, 1",
		Encoding: &Encoding{
			Syntax:   "D1 /5",
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM32, Param1},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHR_M32_CL = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M32_CL",
		Syntax:   "SHR r/m32, CL",
		Encoding: &Encoding{
			Syntax:   "D3 /5",
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHR_M32_Imm8 = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M32_Imm8",
		Syntax:   "SHR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "C1 /5 ib",
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHR_M64_1_REX = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M64_1_REX",
		Syntax:   "SHR r/m64, 1",
		Encoding: &Encoding{
			Syntax:   "REX.W D1 /5",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM64, Param1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHR_M64_CL_REX = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M64_CL_REX",
		Syntax:   "SHR r/m64, CL",
		Encoding: &Encoding{
			Syntax:   "REX.W D3 /5",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xd3},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHR_M64_Imm8_REX = &Instruction{
		Mnemonic: "shr",
		UID:      "SHR_M64_Imm8_REX",
		Syntax:   "SHR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W C1 /5 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xc1},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHRD_Rmr16_R16_CL = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_Rmr16_R16_CL",
		Syntax:   "SHRD r/m16, r16, CL",
		Encoding: &Encoding{
			Syntax: "0F AD /r",
			Opcode: []byte{0x0f, 0xad},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHRD_Rmr16_R16_Imm8 = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_Rmr16_R16_Imm8",
		Syntax:   "SHRD r/m16, r16, imm8",
		Encoding: &Encoding{
			Syntax: "0F AC /r ib",
			Opcode: []byte{0x0f, 0xac},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHRD_Rmr32_R32_CL = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_Rmr32_R32_CL",
		Syntax:   "SHRD r/m32, r32, CL",
		Encoding: &Encoding{
			Syntax: "0F AD /r",
			Opcode: []byte{0x0f, 0xad},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHRD_Rmr32_R32_Imm8 = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_Rmr32_R32_Imm8",
		Syntax:   "SHRD r/m32, r32, imm8",
		Encoding: &Encoding{
			Syntax: "0F AC /r ib",
			Opcode: []byte{0x0f, 0xac},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHRD_Rmr64_R64_CL_REX = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_Rmr64_R64_CL_REX",
		Syntax:   "SHRD r/m64, r64, CL",
		Encoding: &Encoding{
			Syntax: "REX.W 0F AD /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xad},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHRD_Rmr64_R64_Imm8_REX = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_Rmr64_R64_Imm8_REX",
		Syntax:   "SHRD r/m64, r64, imm8",
		Encoding: &Encoding{
			Syntax: "REX.W 0F AC /r ib",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xac},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHRD_M16_R16_CL = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_M16_R16_CL",
		Syntax:   "SHRD r/m16, r16, CL",
		Encoding: &Encoding{
			Syntax: "0F AD /r",
			Opcode: []byte{0x0f, 0xad},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHRD_M16_R16_Imm8 = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_M16_R16_Imm8",
		Syntax:   "SHRD r/m16, r16, imm8",
		Encoding: &Encoding{
			Syntax: "0F AC /r ib",
			Opcode: []byte{0x0f, 0xac},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SHRD_M32_R32_CL = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_M32_R32_CL",
		Syntax:   "SHRD r/m32, r32, CL",
		Encoding: &Encoding{
			Syntax: "0F AD /r",
			Opcode: []byte{0x0f, 0xad},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32, ParamCL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHRD_M32_R32_Imm8 = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_M32_R32_Imm8",
		Syntax:   "SHRD r/m32, r32, imm8",
		Encoding: &Encoding{
			Syntax: "0F AC /r ib",
			Opcode: []byte{0x0f, 0xac},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SHRD_M64_R64_CL_REX = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_M64_R64_CL_REX",
		Syntax:   "SHRD r/m64, r64, CL",
		Encoding: &Encoding{
			Syntax: "REX.W 0F AD /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xad},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64, ParamCL},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHRD_M64_R64_Imm8_REX = &Instruction{
		Mnemonic: "shrd",
		UID:      "SHRD_M64_R64_Imm8_REX",
		Syntax:   "SHRD r/m64, r64, imm8",
		Encoding: &Encoding{
			Syntax: "REX.W 0F AC /r ib",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xac},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SHRX_R32_Rmr32_R32V_VEX = &Instruction{
		Mnemonic: "shrx",
		UID:      "SHRX_R32_Rmr32_R32V_VEX",
		Syntax:   "SHRX r32, r/m32, r32V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W0 F7 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32, ParamR32V},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	SHRX_R32_M32_R32V_VEX = &Instruction{
		Mnemonic: "shrx",
		UID:      "SHRX_R32_M32_R32V_VEX",
		Syntax:   "SHRX r32, r/m32, r32V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W0 F7 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32, ParamR32V},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   32,
	}
	SHRX_R64_Rmr64_R64V_VEX = &Instruction{
		Mnemonic: "shrx",
		UID:      "SHRX_R64_Rmr64_R64V_VEX",
		Syntax:   "SHRX r64, r/m64, r64V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W1 F7 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64, ParamR64V},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	SHRX_R64_M64_R64V_VEX = &Instruction{
		Mnemonic: "shrx",
		UID:      "SHRX_R64_M64_R64V_VEX",
		Syntax:   "SHRX r64, r/m64, r64V",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.F2.0F38.W1 F7 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 2,
			VEX_W:     true,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64, ParamR64V},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI2"},
		DataSize:   64,
	}
	SHUFPD_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "shufpd",
		UID:      "SHUFPD_XMM1_XMM2_Imm8",
		Syntax:   "SHUFPD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F C6 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	SHUFPD_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "shufpd",
		UID:      "SHUFPD_XMM1_M128_Imm8",
		Syntax:   "SHUFPD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:            "66 0F C6 /r ib",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc6},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	SHUFPS_XMM1_XMM2_Imm8 = &Instruction{
		Mnemonic: "shufps",
		UID:      "SHUFPS_XMM1_XMM2_Imm8",
		Syntax:   "SHUFPS xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F C6 /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc6},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	SHUFPS_XMM1_M128_Imm8 = &Instruction{
		Mnemonic: "shufps",
		UID:      "SHUFPS_XMM1_M128_Imm8",
		Syntax:   "SHUFPS xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:        "NP 0F C6 /r ib",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc6},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	SIDT_M = &Instruction{
		Mnemonic: "sidt",
		UID:      "SIDT_M",
		Syntax:   "SIDT m",
		Encoding: &Encoding{
			Syntax:   "0F 01 /1",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SKINIT_EAX = &Instruction{
		Mnemonic: "skinit",
		UID:      "SKINIT_EAX",
		Syntax:   "SKINIT EAX",
		Encoding: &Encoding{
			Syntax: "0F 01 DE",
			Opcode: []byte{0x0f, 0x01, 0xde},
		},
		Parameters: []*Parameter{ParamEAX},
		Mode16:     false,
		Mode32:     true,
		Mode64:     false,
	}
	SLDT_Rmr16 = &Instruction{
		Mnemonic: "sldt",
		UID:      "SLDT_Rmr16",
		Syntax:   "SLDT rmr16",
		Encoding: &Encoding{
			Syntax:   "0F 00 /0",
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SLDT_Rmr32 = &Instruction{
		Mnemonic: "sldt",
		UID:      "SLDT_Rmr32",
		Syntax:   "SLDT rmr32",
		Encoding: &Encoding{
			Syntax:   "0F 00 /0",
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SLDT_M16 = &Instruction{
		Mnemonic: "sldt",
		UID:      "SLDT_M16",
		Syntax:   "SLDT m16",
		Encoding: &Encoding{
			Syntax:   "0F 00 /0",
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SMSW_Rmr16 = &Instruction{
		Mnemonic: "smsw",
		UID:      "SMSW_Rmr16",
		Syntax:   "SMSW rmr16",
		Encoding: &Encoding{
			Syntax:   "0F 01 /4",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SMSW_Rmr32 = &Instruction{
		Mnemonic: "smsw",
		UID:      "SMSW_Rmr32",
		Syntax:   "SMSW rmr32",
		Encoding: &Encoding{
			Syntax:   "0F 01 /4",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SMSW_Rmr64_REX = &Instruction{
		Mnemonic: "smsw",
		UID:      "SMSW_Rmr64_REX",
		Syntax:   "SMSW rmr64",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F 01 /4",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SMSW_M16 = &Instruction{
		Mnemonic: "smsw",
		UID:      "SMSW_M16",
		Syntax:   "SMSW m16",
		Encoding: &Encoding{
			Syntax:   "0F 01 /4",
			Opcode:   []byte{0x0f, 0x01},
			ModRM:    true,
			ModRMreg: 5,
		},
		Parameters: []*Parameter{ParamM16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	SQRTPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "sqrtpd",
		UID:      "SQRTPD_XMM1_XMM2",
		Syntax:   "SQRTPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 51 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x51},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	SQRTPD_XMM1_M128 = &Instruction{
		Mnemonic: "sqrtpd",
		UID:      "SQRTPD_XMM1_M128",
		Syntax:   "SQRTPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 51 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x51},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	SQRTPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "sqrtps",
		UID:      "SQRTPS_XMM1_XMM2",
		Syntax:   "SQRTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 51 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x51},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	SQRTPS_XMM1_M128 = &Instruction{
		Mnemonic: "sqrtps",
		UID:      "SQRTPS_XMM1_M128",
		Syntax:   "SQRTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 51 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x51},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	SQRTSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "sqrtsd",
		UID:      "SQRTSD_XMM1_XMM2",
		Syntax:   "SQRTSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 51 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x51},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	SQRTSD_XMM1_M64 = &Instruction{
		Mnemonic: "sqrtsd",
		UID:      "SQRTSD_XMM1_M64",
		Syntax:   "SQRTSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 51 /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x51},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	SQRTSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "sqrtss",
		UID:      "SQRTSS_XMM1_XMM2",
		Syntax:   "SQRTSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 51 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x51},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	SQRTSS_XMM1_M32 = &Instruction{
		Mnemonic: "sqrtss",
		UID:      "SQRTSS_XMM1_M32",
		Syntax:   "SQRTSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 51 /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x51},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	STAC = &Instruction{
		Mnemonic: "stac",
		UID:      "STAC",
		Syntax:   "STAC",
		Encoding: &Encoding{
			Syntax:        "NP 0F 01 CB",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x01, 0xcb},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"SMAP"},
	}
	STC = &Instruction{
		Mnemonic: "stc",
		UID:      "STC",
		Syntax:   "STC",
		Encoding: &Encoding{
			Syntax: "F9",
			Opcode: []byte{0xf9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	STD = &Instruction{
		Mnemonic: "std",
		UID:      "STD",
		Syntax:   "STD",
		Encoding: &Encoding{
			Syntax: "FD",
			Opcode: []byte{0xfd},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	STGI = &Instruction{
		Mnemonic: "stgi",
		UID:      "STGI",
		Syntax:   "STGI",
		Encoding: &Encoding{
			Syntax: "0F 01 DC",
			Opcode: []byte{0x0f, 0x01, 0xdc},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	STI = &Instruction{
		Mnemonic: "sti",
		UID:      "STI",
		Syntax:   "STI",
		Encoding: &Encoding{
			Syntax: "FB",
			Opcode: []byte{0xfb},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	STMXCSR_M32 = &Instruction{
		Mnemonic: "stmxcsr",
		UID:      "STMXCSR_M32",
		Syntax:   "STMXCSR m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE /3",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      4,
		},
		Parameters: []*Parameter{ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	STOS_StrDst8 = &Instruction{
		Mnemonic: "stos",
		UID:      "STOS_StrDst8",
		Syntax:   "STOS [es:edi:8]",
		Encoding: &Encoding{
			Syntax: "AA",
			Opcode: []byte{0xaa},
		},
		Parameters:  []*Parameter{ParamStrDst8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	STOS_StrDst16 = &Instruction{
		Mnemonic: "stos",
		UID:      "STOS_StrDst16",
		Syntax:   "STOS [es:edi:16]",
		Encoding: &Encoding{
			Syntax: "AB",
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	STOS_StrDst32 = &Instruction{
		Mnemonic: "stos",
		UID:      "STOS_StrDst32",
		Syntax:   "STOS [es:edi:32]",
		Encoding: &Encoding{
			Syntax: "AB",
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	STOS_StrDst64_REX = &Instruction{
		Mnemonic: "stos",
		UID:      "STOS_StrDst64_REX",
		Syntax:   "STOS [rdi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W AB",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	STOS_StrDst8_AL = &Instruction{
		Mnemonic: "stos",
		UID:      "STOS_StrDst8_AL",
		Syntax:   "STOS [es:edi:8], AL",
		Encoding: &Encoding{
			Syntax: "AA",
			Opcode: []byte{0xaa},
		},
		Parameters:  []*Parameter{ParamStrDst8, ParamAL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	STOS_StrDst16_AX = &Instruction{
		Mnemonic: "stos",
		UID:      "STOS_StrDst16_AX",
		Syntax:   "STOS [es:edi:16], AX",
		Encoding: &Encoding{
			Syntax: "AB",
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst16, ParamAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	STOS_StrDst32_EAX = &Instruction{
		Mnemonic: "stos",
		UID:      "STOS_StrDst32_EAX",
		Syntax:   "STOS [es:edi:32], EAX",
		Encoding: &Encoding{
			Syntax: "AB",
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst32, ParamEAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	STOS_StrDst64_RAX_REX = &Instruction{
		Mnemonic: "stos",
		UID:      "STOS_StrDst64_RAX_REX",
		Syntax:   "STOS [rdi:64], RAX",
		Encoding: &Encoding{
			Syntax: "REX.W AB",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst64, ParamRAX},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	STOSB = &Instruction{
		Mnemonic: "stosb",
		UID:      "STOSB",
		Syntax:   "STOSB",
		Encoding: &Encoding{
			Syntax: "AA",
			Opcode: []byte{0xaa},
		},
		Mode16:   true,
		Mode32:   true,
		Mode64:   true,
		DataSize: 8,
	}
	STOSB_StrDst8 = &Instruction{
		Mnemonic: "stosb",
		UID:      "STOSB_StrDst8",
		Syntax:   "STOSB [es:edi:8]",
		Encoding: &Encoding{
			Syntax: "AA",
			Opcode: []byte{0xaa},
		},
		Parameters:  []*Parameter{ParamStrDst8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	STOSB_StrDst8_AL = &Instruction{
		Mnemonic: "stosb",
		UID:      "STOSB_StrDst8_AL",
		Syntax:   "STOSB [es:edi:8], AL",
		Encoding: &Encoding{
			Syntax: "AA",
			Opcode: []byte{0xaa},
		},
		Parameters:  []*Parameter{ParamStrDst8, ParamAL},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    8,
	}
	STOSD = &Instruction{
		Mnemonic: "stosd",
		UID:      "STOSD",
		Syntax:   "STOSD",
		Encoding: &Encoding{
			Syntax: "AB",
			Opcode: []byte{0xab},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	STOSD_StrDst32 = &Instruction{
		Mnemonic: "stosd",
		UID:      "STOSD_StrDst32",
		Syntax:   "STOSD [es:edi:32]",
		Encoding: &Encoding{
			Syntax: "AB",
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	STOSD_StrDst32_EAX = &Instruction{
		Mnemonic: "stosd",
		UID:      "STOSD_StrDst32_EAX",
		Syntax:   "STOSD [es:edi:32], EAX",
		Encoding: &Encoding{
			Syntax: "AB",
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst32, ParamEAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	STOSQ_REX = &Instruction{
		Mnemonic: "stosq",
		UID:      "STOSQ_REX",
		Syntax:   "STOSQ",
		Encoding: &Encoding{
			Syntax: "REX.W AB",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xab},
		},
		Mode16:   false,
		Mode32:   false,
		Mode64:   true,
		DataSize: 64,
	}
	STOSQ_StrDst64_REX = &Instruction{
		Mnemonic: "stosq",
		UID:      "STOSQ_StrDst64_REX",
		Syntax:   "STOSQ [rdi:64]",
		Encoding: &Encoding{
			Syntax: "REX.W AB",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst64},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	STOSQ_StrDst64_RAX_REX = &Instruction{
		Mnemonic: "stosq",
		UID:      "STOSQ_StrDst64_RAX_REX",
		Syntax:   "STOSQ [rdi:64], RAX",
		Encoding: &Encoding{
			Syntax: "REX.W AB",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst64, ParamRAX},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		OperandSize: true,
		DataSize:    64,
	}
	STOSW = &Instruction{
		Mnemonic: "stosw",
		UID:      "STOSW",
		Syntax:   "STOSW",
		Encoding: &Encoding{
			Syntax: "AB",
			Opcode: []byte{0xab},
		},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	STOSW_StrDst16 = &Instruction{
		Mnemonic: "stosw",
		UID:      "STOSW_StrDst16",
		Syntax:   "STOSW [es:edi:16]",
		Encoding: &Encoding{
			Syntax: "AB",
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	STOSW_StrDst16_AX = &Instruction{
		Mnemonic: "stosw",
		UID:      "STOSW_StrDst16_AX",
		Syntax:   "STOSW [es:edi:16], AX",
		Encoding: &Encoding{
			Syntax: "AB",
			Opcode: []byte{0xab},
		},
		Parameters:  []*Parameter{ParamStrDst16, ParamAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	STR_Rmr16 = &Instruction{
		Mnemonic: "str",
		UID:      "STR_Rmr16",
		Syntax:   "STR rmr16",
		Encoding: &Encoding{
			Syntax:   "0F 00 /1",
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	STR_Rmr32 = &Instruction{
		Mnemonic: "str",
		UID:      "STR_Rmr32",
		Syntax:   "STR rmr32",
		Encoding: &Encoding{
			Syntax:   "0F 00 /1",
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	STR_Rmr64_REX = &Instruction{
		Mnemonic: "str",
		UID:      "STR_Rmr64_REX",
		Syntax:   "STR rmr64",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F 00 /1",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	STR_M16 = &Instruction{
		Mnemonic: "str",
		UID:      "STR_M16",
		Syntax:   "STR m16",
		Encoding: &Encoding{
			Syntax:   "0F 00 /1",
			Opcode:   []byte{0x0f, 0x00},
			ModRM:    true,
			ModRMreg: 2,
		},
		Parameters: []*Parameter{ParamM16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	STUI = &Instruction{
		Mnemonic: "stui",
		UID:      "STUI",
		Syntax:   "STUI",
		Encoding: &Encoding{
			Syntax:            "F3 0F 01 EF",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x01, 0xef},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
		CPUID:  []string{"UINTR"},
	}
	SUB_AL_Imm8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_AL_Imm8",
		Syntax:   "SUB AL, imm8",
		Encoding: &Encoding{
			Syntax: "2C ib",
			Opcode: []byte{0x2c},
		},
		Parameters: []*Parameter{ParamAL, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SUB_AX_Imm16 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_AX_Imm16",
		Syntax:   "SUB AX, imm16",
		Encoding: &Encoding{
			Syntax: "2D iw",
			Opcode: []byte{0x2d},
		},
		Parameters:  []*Parameter{ParamAX, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SUB_EAX_Imm32 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_EAX_Imm32",
		Syntax:   "SUB EAX, imm32",
		Encoding: &Encoding{
			Syntax: "2D id",
			Opcode: []byte{0x2d},
		},
		Parameters:  []*Parameter{ParamEAX, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SUB_RAX_Imm32_REX = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_RAX_Imm32_REX",
		Syntax:   "SUB RAX, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W 2D id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x2d},
		},
		Parameters: []*Parameter{ParamRAX, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SUB_R8_Rmr8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_R8_Rmr8",
		Syntax:   "SUB r8, r/m8",
		Encoding: &Encoding{
			Syntax: "2A /r",
			Opcode: []byte{0x2a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SUB_R8_M8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_R8_M8",
		Syntax:   "SUB r8, r/m8",
		Encoding: &Encoding{
			Syntax: "2A /r",
			Opcode: []byte{0x2a},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SUB_R16_Rmr16 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_R16_Rmr16",
		Syntax:   "SUB r16, r/m16",
		Encoding: &Encoding{
			Syntax: "2B /r",
			Opcode: []byte{0x2b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SUB_R16_M16 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_R16_M16",
		Syntax:   "SUB r16, r/m16",
		Encoding: &Encoding{
			Syntax: "2B /r",
			Opcode: []byte{0x2b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SUB_R32_Rmr32 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_R32_Rmr32",
		Syntax:   "SUB r32, r/m32",
		Encoding: &Encoding{
			Syntax: "2B /r",
			Opcode: []byte{0x2b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SUB_R32_M32 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_R32_M32",
		Syntax:   "SUB r32, r/m32",
		Encoding: &Encoding{
			Syntax: "2B /r",
			Opcode: []byte{0x2b},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SUB_R64_Rmr64_REX = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_R64_Rmr64_REX",
		Syntax:   "SUB r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 2B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x2b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SUB_R64_M64_REX = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_R64_M64_REX",
		Syntax:   "SUB r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 2B /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x2b},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SUB_Rmr8_Imm8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr8_Imm8",
		Syntax:   "SUB r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /5 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SUB_Rmr8_R8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr8_R8",
		Syntax:   "SUB r/m8, r8",
		Encoding: &Encoding{
			Syntax: "28 /r",
			Opcode: []byte{0x28},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SUB_Rmr16_Imm8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr16_Imm8",
		Syntax:   "SUB r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /5 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SUB_Rmr16_Imm16 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr16_Imm16",
		Syntax:   "SUB r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /5 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SUB_Rmr16_R16 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr16_R16",
		Syntax:   "SUB r/m16, r16",
		Encoding: &Encoding{
			Syntax: "29 /r",
			Opcode: []byte{0x29},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SUB_Rmr32_Imm8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr32_Imm8",
		Syntax:   "SUB r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /5 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SUB_Rmr32_Imm32 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr32_Imm32",
		Syntax:   "SUB r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /5 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SUB_Rmr32_R32 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr32_R32",
		Syntax:   "SUB r/m32, r32",
		Encoding: &Encoding{
			Syntax: "29 /r",
			Opcode: []byte{0x29},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SUB_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr64_Imm8_REX",
		Syntax:   "SUB r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /5 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SUB_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr64_Imm32_REX",
		Syntax:   "SUB r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /5 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SUB_Rmr64_R64_REX = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_Rmr64_R64_REX",
		Syntax:   "SUB r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 29 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x29},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SUB_M8_Imm8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M8_Imm8",
		Syntax:   "SUB r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /5 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SUB_M8_R8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M8_R8",
		Syntax:   "SUB r/m8, r8",
		Encoding: &Encoding{
			Syntax: "28 /r",
			Opcode: []byte{0x28},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	SUB_M16_Imm8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M16_Imm8",
		Syntax:   "SUB r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /5 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SUB_M16_Imm16 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M16_Imm16",
		Syntax:   "SUB r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /5 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SUB_M16_R16 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M16_R16",
		Syntax:   "SUB r/m16, r16",
		Encoding: &Encoding{
			Syntax: "29 /r",
			Opcode: []byte{0x29},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	SUB_M32_Imm8 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M32_Imm8",
		Syntax:   "SUB r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /5 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SUB_M32_Imm32 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M32_Imm32",
		Syntax:   "SUB r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /5 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SUB_M32_R32 = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M32_R32",
		Syntax:   "SUB r/m32, r32",
		Encoding: &Encoding{
			Syntax: "29 /r",
			Opcode: []byte{0x29},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	SUB_M64_Imm8_REX = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M64_Imm8_REX",
		Syntax:   "SUB r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /5 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SUB_M64_Imm32_REX = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M64_Imm32_REX",
		Syntax:   "SUB r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /5 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 6,
		},
		Parameters: []*Parameter{ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SUB_M64_R64_REX = &Instruction{
		Mnemonic: "sub",
		UID:      "SUB_M64_R64_REX",
		Syntax:   "SUB r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 29 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x29},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	SUBPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "subpd",
		UID:      "SUBPD_XMM1_XMM2",
		Syntax:   "SUBPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	SUBPD_XMM1_M128 = &Instruction{
		Mnemonic: "subpd",
		UID:      "SUBPD_XMM1_M128",
		Syntax:   "SUBPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 5C /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x5c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	SUBPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "subps",
		UID:      "SUBPS_XMM1_XMM2",
		Syntax:   "SUBPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5C /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5c},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	SUBPS_XMM1_M128 = &Instruction{
		Mnemonic: "subps",
		UID:      "SUBPS_XMM1_M128",
		Syntax:   "SUBPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 5C /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x5c},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	SUBSD_XMM1_XMM2 = &Instruction{
		Mnemonic: "subsd",
		UID:      "SUBSD_XMM1_XMM2",
		Syntax:   "SUBSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 5C /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x5c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	SUBSD_XMM1_M64 = &Instruction{
		Mnemonic: "subsd",
		UID:      "SUBSD_XMM1_M64",
		Syntax:   "SUBSD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "F2 0F 5C /r",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x5c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	SUBSS_XMM1_XMM2 = &Instruction{
		Mnemonic: "subss",
		UID:      "SUBSS_XMM1_XMM2",
		Syntax:   "SUBSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5C /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	SUBSS_XMM1_M32 = &Instruction{
		Mnemonic: "subss",
		UID:      "SUBSS_XMM1_M32",
		Syntax:   "SUBSS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F 5C /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x5c},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	SWAPGS = &Instruction{
		Mnemonic: "swapgs",
		UID:      "SWAPGS",
		Syntax:   "SWAPGS",
		Encoding: &Encoding{
			Syntax: "0F 01 F8",
			Opcode: []byte{0x0f, 0x01, 0xf8},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
	}
	SYSCALL = &Instruction{
		Mnemonic: "syscall",
		UID:      "SYSCALL",
		Syntax:   "SYSCALL",
		Encoding: &Encoding{
			Syntax: "0F 05",
			Opcode: []byte{0x0f, 0x05},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
	}
	SYSENTER = &Instruction{
		Mnemonic: "sysenter",
		UID:      "SYSENTER",
		Syntax:   "SYSENTER",
		Encoding: &Encoding{
			Syntax: "0F 34",
			Opcode: []byte{0x0f, 0x34},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"PentiumII"},
	}
	SYSEXIT = &Instruction{
		Mnemonic: "sysexit",
		UID:      "SYSEXIT",
		Syntax:   "SYSEXIT",
		Encoding: &Encoding{
			Syntax: "0F 35",
			Opcode: []byte{0x0f, 0x35},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"PentiumII"},
	}
	SYSEXIT_REX = &Instruction{
		Mnemonic: "sysexit",
		UID:      "SYSEXIT_REX",
		Syntax:   "SYSEXIT",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 35",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x35},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
	}
	SYSRET = &Instruction{
		Mnemonic: "sysret",
		UID:      "SYSRET",
		Syntax:   "SYSRET",
		Encoding: &Encoding{
			Syntax: "0F 07",
			Opcode: []byte{0x0f, 0x07},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
	}
	SYSRET_REX = &Instruction{
		Mnemonic: "sysret",
		UID:      "SYSRET_REX",
		Syntax:   "SYSRET",
		Encoding: &Encoding{
			Syntax: "REX.W 0F 07",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0x07},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
	}
	TEST_AL_Imm8 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_AL_Imm8",
		Syntax:   "TEST AL, imm8",
		Encoding: &Encoding{
			Syntax: "A8 ib",
			Opcode: []byte{0xa8},
		},
		Parameters: []*Parameter{ParamAL, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	TEST_AX_Imm16 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_AX_Imm16",
		Syntax:   "TEST AX, imm16",
		Encoding: &Encoding{
			Syntax: "A9 iw",
			Opcode: []byte{0xa9},
		},
		Parameters:  []*Parameter{ParamAX, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	TEST_EAX_Imm32 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_EAX_Imm32",
		Syntax:   "TEST EAX, imm32",
		Encoding: &Encoding{
			Syntax: "A9 id",
			Opcode: []byte{0xa9},
		},
		Parameters:  []*Parameter{ParamEAX, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	TEST_RAX_Imm32_REX = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_RAX_Imm32_REX",
		Syntax:   "TEST RAX, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W A9 id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xa9},
		},
		Parameters: []*Parameter{ParamRAX, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	TEST_Rmr8_Imm8 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_Rmr8_Imm8",
		Syntax:   "TEST r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "F6 /0 ib",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	TEST_Rmr8_R8 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_Rmr8_R8",
		Syntax:   "TEST r/m8, r8",
		Encoding: &Encoding{
			Syntax: "84 /r",
			Opcode: []byte{0x84},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	TEST_Rmr16_Imm16 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_Rmr16_Imm16",
		Syntax:   "TEST r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "F7 /0 iw",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	TEST_Rmr16_R16 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_Rmr16_R16",
		Syntax:   "TEST r/m16, r16",
		Encoding: &Encoding{
			Syntax: "85 /r",
			Opcode: []byte{0x85},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	TEST_Rmr32_Imm32 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_Rmr32_Imm32",
		Syntax:   "TEST r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "F7 /0 id",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	TEST_Rmr32_R32 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_Rmr32_R32",
		Syntax:   "TEST r/m32, r32",
		Encoding: &Encoding{
			Syntax: "85 /r",
			Opcode: []byte{0x85},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	TEST_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_Rmr64_Imm32_REX",
		Syntax:   "TEST r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /0 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	TEST_Rmr64_R64_REX = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_Rmr64_R64_REX",
		Syntax:   "TEST r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 85 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x85},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	TEST_M8_Imm8 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_M8_Imm8",
		Syntax:   "TEST r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "F6 /0 ib",
			Opcode:   []byte{0xf6},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	TEST_M8_R8 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_M8_R8",
		Syntax:   "TEST r/m8, r8",
		Encoding: &Encoding{
			Syntax: "84 /r",
			Opcode: []byte{0x84},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	TEST_M16_Imm16 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_M16_Imm16",
		Syntax:   "TEST r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "F7 /0 iw",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	TEST_M16_R16 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_M16_R16",
		Syntax:   "TEST r/m16, r16",
		Encoding: &Encoding{
			Syntax: "85 /r",
			Opcode: []byte{0x85},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	TEST_M32_Imm32 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_M32_Imm32",
		Syntax:   "TEST r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "F7 /0 id",
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	TEST_M32_R32 = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_M32_R32",
		Syntax:   "TEST r/m32, r32",
		Encoding: &Encoding{
			Syntax: "85 /r",
			Opcode: []byte{0x85},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	TEST_M64_Imm32_REX = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_M64_Imm32_REX",
		Syntax:   "TEST r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W F7 /0 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0xf7},
			ModRM:    true,
			ModRMreg: 1,
		},
		Parameters: []*Parameter{ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	TEST_M64_R64_REX = &Instruction{
		Mnemonic: "test",
		UID:      "TEST_M64_R64_REX",
		Syntax:   "TEST r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 85 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x85},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	TESTUI = &Instruction{
		Mnemonic: "testui",
		UID:      "TESTUI",
		Syntax:   "TESTUI",
		Encoding: &Encoding{
			Syntax:            "F3 0F 01 ED",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x01, 0xed},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
		CPUID:  []string{"UINTR"},
	}
	TPAUSE_Rmr32 = &Instruction{
		Mnemonic: "tpause",
		UID:      "TPAUSE_Rmr32",
		Syntax:   "TPAUSE rmr32",
		Encoding: &Encoding{
			Syntax:            "66 0F AE /6",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"WAITPKG"},
	}
	TZCNT_R16_Rmr16 = &Instruction{
		Mnemonic: "tzcnt",
		UID:      "TZCNT_R16_Rmr16",
		Syntax:   "TZCNT r16, r/m16",
		Encoding: &Encoding{
			Syntax:            "F3 0F BC /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xbc},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"BMI1"},
		OperandSize: true,
		DataSize:    16,
	}
	TZCNT_R16_M16 = &Instruction{
		Mnemonic: "tzcnt",
		UID:      "TZCNT_R16_M16",
		Syntax:   "TZCNT r16, r/m16",
		Encoding: &Encoding{
			Syntax:            "F3 0F BC /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xbc},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"BMI1"},
		OperandSize: true,
		DataSize:    16,
	}
	TZCNT_R32_Rmr32 = &Instruction{
		Mnemonic: "tzcnt",
		UID:      "TZCNT_R32_Rmr32",
		Syntax:   "TZCNT r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F BC /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xbc},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"BMI1"},
		OperandSize: true,
		DataSize:    32,
	}
	TZCNT_R32_M32 = &Instruction{
		Mnemonic: "tzcnt",
		UID:      "TZCNT_R32_M32",
		Syntax:   "TZCNT r32, r/m32",
		Encoding: &Encoding{
			Syntax:            "F3 0F BC /r",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xbc},
			ModRM:             true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"BMI1"},
		OperandSize: true,
		DataSize:    32,
	}
	TZCNT_R64_Rmr64_REX = &Instruction{
		Mnemonic: "tzcnt",
		UID:      "TZCNT_R64_Rmr64_REX",
		Syntax:   "TZCNT r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F BC /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xbc},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	TZCNT_R64_M64_REX = &Instruction{
		Mnemonic: "tzcnt",
		UID:      "TZCNT_R64_M64_REX",
		Syntax:   "TZCNT r64, r/m64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F BC /r",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xbc},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"BMI1"},
		DataSize:   64,
	}
	UCOMISD_XMM1_XMM2 = &Instruction{
		Mnemonic: "ucomisd",
		UID:      "UCOMISD_XMM1_XMM2",
		Syntax:   "UCOMISD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 2E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	UCOMISD_XMM1_M64 = &Instruction{
		Mnemonic: "ucomisd",
		UID:      "UCOMISD_XMM1_M64",
		Syntax:   "UCOMISD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:            "66 0F 2E /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x2e},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	UCOMISS_XMM1_XMM2 = &Instruction{
		Mnemonic: "ucomiss",
		UID:      "UCOMISS_XMM1_XMM2",
		Syntax:   "UCOMISS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2E /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2e},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	UCOMISS_XMM1_M32 = &Instruction{
		Mnemonic: "ucomiss",
		UID:      "UCOMISS_XMM1_M32",
		Syntax:   "UCOMISS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:        "NP 0F 2E /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x2e},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	UD0_R32_Rmr32 = &Instruction{
		Mnemonic: "ud0",
		UID:      "UD0_R32_Rmr32",
		Syntax:   "UD0 r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F FF /r",
			Opcode: []byte{0x0f, 0xff},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	UD0_R32_M32 = &Instruction{
		Mnemonic: "ud0",
		UID:      "UD0_R32_M32",
		Syntax:   "UD0 r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F FF /r",
			Opcode: []byte{0x0f, 0xff},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	UD1_R32_Rmr32 = &Instruction{
		Mnemonic: "ud1",
		UID:      "UD1_R32_Rmr32",
		Syntax:   "UD1 r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F B9 /r",
			Opcode: []byte{0x0f, 0xb9},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR32, ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	UD1_R32_M32 = &Instruction{
		Mnemonic: "ud1",
		UID:      "UD1_R32_M32",
		Syntax:   "UD1 r32, r/m32",
		Encoding: &Encoding{
			Syntax: "0F B9 /r",
			Opcode: []byte{0x0f, 0xb9},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	UD2 = &Instruction{
		Mnemonic: "ud2",
		UID:      "UD2",
		Syntax:   "UD2",
		Encoding: &Encoding{
			Syntax: "0F 0B",
			Opcode: []byte{0x0f, 0x0b},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	UIRET = &Instruction{
		Mnemonic: "uiret",
		UID:      "UIRET",
		Syntax:   "UIRET",
		Encoding: &Encoding{
			Syntax:            "F3 0F 01 EC",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x01, 0xec},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
		CPUID:  []string{"UINTR"},
	}
	UMONITOR_Rmr16 = &Instruction{
		Mnemonic: "umonitor",
		UID:      "UMONITOR_Rmr16",
		Syntax:   "UMONITOR rmr16/rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /6",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamRmr16},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"WAITPKG"},
	}
	UMONITOR_Rmr32 = &Instruction{
		Mnemonic: "umonitor",
		UID:      "UMONITOR_Rmr32",
		Syntax:   "UMONITOR rmr16/rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /6",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"WAITPKG"},
	}
	UMONITOR_Rmr64 = &Instruction{
		Mnemonic: "umonitor",
		UID:      "UMONITOR_Rmr64",
		Syntax:   "UMONITOR rmr16/rmr32/rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /6",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
	}
	UMWAIT_Rmr32 = &Instruction{
		Mnemonic: "umwait",
		UID:      "UMWAIT_Rmr32",
		Syntax:   "UMWAIT rmr32",
		Encoding: &Encoding{
			Syntax:            "F2 0F AE /6",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamRmr32},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"WAITPKG"},
	}
	UNPCKHPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "unpckhpd",
		UID:      "UNPCKHPD_XMM1_XMM2",
		Syntax:   "UNPCKHPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 15 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x15},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	UNPCKHPD_XMM1_M128 = &Instruction{
		Mnemonic: "unpckhpd",
		UID:      "UNPCKHPD_XMM1_M128",
		Syntax:   "UNPCKHPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 15 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x15},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	UNPCKHPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "unpckhps",
		UID:      "UNPCKHPS_XMM1_XMM2",
		Syntax:   "UNPCKHPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 15 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x15},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	UNPCKHPS_XMM1_M128 = &Instruction{
		Mnemonic: "unpckhps",
		UID:      "UNPCKHPS_XMM1_M128",
		Syntax:   "UNPCKHPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 15 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x15},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	UNPCKLPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "unpcklpd",
		UID:      "UNPCKLPD_XMM1_XMM2",
		Syntax:   "UNPCKLPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 14 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x14},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	UNPCKLPD_XMM1_M128 = &Instruction{
		Mnemonic: "unpcklpd",
		UID:      "UNPCKLPD_XMM1_M128",
		Syntax:   "UNPCKLPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 14 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x14},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	UNPCKLPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "unpcklps",
		UID:      "UNPCKLPS_XMM1_XMM2",
		Syntax:   "UNPCKLPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 14 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x14},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	UNPCKLPS_XMM1_M128 = &Instruction{
		Mnemonic: "unpcklps",
		UID:      "UNPCKLPS_XMM1_M128",
		Syntax:   "UNPCKLPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 14 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x14},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	VADDPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VADDPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 58 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VADDPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 58 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VADDPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 58 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VADDPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 58 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VADDPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 58 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VADDPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 58 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VADDPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 58 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VADDPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 58 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VADDPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 58 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VADDPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 58 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VADDPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 58 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VADDPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 58 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vaddpd",
		UID:      "VADDPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VADDPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 58 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VADDPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 58 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VADDPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 58 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VADDPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 58 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VADDPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 58 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VADDPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 58 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VADDPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 58 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VADDPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 58 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VADDPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 58 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VADDPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 58 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VADDPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 58 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VADDPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 58 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VADDPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 58 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VADDPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vaddps",
		UID:      "VADDPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VADDPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 58 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VADDSD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vaddsd",
		UID:      "VADDSD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VADDSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 58 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VADDSD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vaddsd",
		UID:      "VADDSD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VADDSD xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 58 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VADDSD_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vaddsd",
		UID:      "VADDSD_XMM1_XMMV_M64_VEX",
		Syntax:   "VADDSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 58 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VADDSD_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vaddsd",
		UID:      "VADDSD_XMM1_XMMV_M64_EVEX",
		Syntax:   "VADDSD xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 58 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VADDSS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vaddss",
		UID:      "VADDSS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VADDSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 58 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VADDSS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vaddss",
		UID:      "VADDSS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VADDSS xmm1 {k1}{z}, xmmV, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 58 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VADDSS_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vaddss",
		UID:      "VADDSS_XMM1_XMMV_M32_VEX",
		Syntax:   "VADDSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 58 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VADDSS_XMM1_XMMV_M32_EVEX = &Instruction{
		Mnemonic: "vaddss",
		UID:      "VADDSS_XMM1_XMMV_M32_EVEX",
		Syntax:   "VADDSS xmm1 {k1}{z}, xmmV, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 58 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x58},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VADDSUBPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vaddsubpd",
		UID:      "VADDSUBPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VADDSUBPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D0 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDSUBPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vaddsubpd",
		UID:      "VADDSUBPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VADDSUBPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D0 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDSUBPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vaddsubpd",
		UID:      "VADDSUBPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VADDSUBPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D0 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDSUBPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vaddsubpd",
		UID:      "VADDSUBPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VADDSUBPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D0 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDSUBPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vaddsubps",
		UID:      "VADDSUBPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VADDSUBPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG D0 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDSUBPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vaddsubps",
		UID:      "VADDSUBPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VADDSUBPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG D0 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDSUBPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vaddsubps",
		UID:      "VADDSUBPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VADDSUBPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG D0 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VADDSUBPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vaddsubps",
		UID:      "VADDSUBPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VADDSUBPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG D0 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VAESDEC_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vaesdec",
		UID:      "VAESDEC_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VAESDEC xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG DE /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES AVX"},
		DataSize:   128,
	}
	VAESDEC_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vaesdec",
		UID:      "VAESDEC_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VAESDEC xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG DE /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL the Equivalent Inverse Cipher, using one 128-bit data"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VAESDEC_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vaesdec",
		UID:      "VAESDEC_XMM1_XMMV_M128_VEX",
		Syntax:   "VAESDEC xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG DE /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES AVX"},
		DataSize:   128,
	}
	VAESDEC_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vaesdec",
		UID:      "VAESDEC_XMM1_XMMV_M128_EVEX",
		Syntax:   "VAESDEC xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG DE /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL the Equivalent Inverse Cipher, using one 128-bit data"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VAESDEC_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vaesdec",
		UID:      "VAESDEC_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VAESDEC ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG DE /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES"},
		DataSize:   256,
	}
	VAESDEC_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vaesdec",
		UID:      "VAESDEC_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VAESDEC ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG DE /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL the Equivalent Inverse Cipher, using two 128-bit data"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VAESDEC_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vaesdec",
		UID:      "VAESDEC_YMM1_YMMV_M256_VEX",
		Syntax:   "VAESDEC ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG DE /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES"},
		DataSize:   256,
	}
	VAESDEC_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vaesdec",
		UID:      "VAESDEC_YMM1_YMMV_M256_EVEX",
		Syntax:   "VAESDEC ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG DE /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL the Equivalent Inverse Cipher, using two 128-bit data"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VAESDEC_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vaesdec",
		UID:      "VAESDEC_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VAESDEC zmm1, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG DE /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512F"},
		Tuple:      TupleFullMem,
	}
	VAESDEC_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vaesdec",
		UID:      "VAESDEC_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VAESDEC zmm1, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG DE /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512F"},
		Tuple:      TupleFullMem,
	}
	VAESDECLAST_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vaesdeclast",
		UID:      "VAESDECLAST_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VAESDECLAST xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG DF /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES AVX"},
		DataSize:   128,
	}
	VAESDECLAST_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vaesdeclast",
		UID:      "VAESDECLAST_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VAESDECLAST xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG DF /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VAESDECLAST_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vaesdeclast",
		UID:      "VAESDECLAST_XMM1_XMMV_M128_VEX",
		Syntax:   "VAESDECLAST xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG DF /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES AVX"},
		DataSize:   128,
	}
	VAESDECLAST_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vaesdeclast",
		UID:      "VAESDECLAST_XMM1_XMMV_M128_EVEX",
		Syntax:   "VAESDECLAST xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG DF /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VAESDECLAST_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vaesdeclast",
		UID:      "VAESDECLAST_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VAESDECLAST ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG DF /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES"},
		DataSize:   256,
	}
	VAESDECLAST_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vaesdeclast",
		UID:      "VAESDECLAST_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VAESDECLAST ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG DF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VAESDECLAST_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vaesdeclast",
		UID:      "VAESDECLAST_YMM1_YMMV_M256_VEX",
		Syntax:   "VAESDECLAST ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG DF /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES"},
		DataSize:   256,
	}
	VAESDECLAST_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vaesdeclast",
		UID:      "VAESDECLAST_YMM1_YMMV_M256_EVEX",
		Syntax:   "VAESDECLAST ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG DF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VAESDECLAST_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vaesdeclast",
		UID:      "VAESDECLAST_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VAESDECLAST zmm1, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG DF /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512F"},
		Tuple:      TupleFullMem,
	}
	VAESDECLAST_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vaesdeclast",
		UID:      "VAESDECLAST_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VAESDECLAST zmm1, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG DF /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512F"},
		Tuple:      TupleFullMem,
	}
	VAESENC_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vaesenc",
		UID:      "VAESENC_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VAESENC xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG DC /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES AVX"},
		DataSize:   128,
	}
	VAESENC_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vaesenc",
		UID:      "VAESENC_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VAESENC xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG DC /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VAESENC_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vaesenc",
		UID:      "VAESENC_XMM1_XMMV_M128_VEX",
		Syntax:   "VAESENC xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG DC /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES AVX"},
		DataSize:   128,
	}
	VAESENC_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vaesenc",
		UID:      "VAESENC_XMM1_XMMV_M128_EVEX",
		Syntax:   "VAESENC xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG DC /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VAESENC_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vaesenc",
		UID:      "VAESENC_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VAESENC ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG DC /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES"},
		DataSize:   256,
	}
	VAESENC_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vaesenc",
		UID:      "VAESENC_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VAESENC ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG DC /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VAESENC_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vaesenc",
		UID:      "VAESENC_YMM1_YMMV_M256_VEX",
		Syntax:   "VAESENC ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG DC /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES"},
		DataSize:   256,
	}
	VAESENC_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vaesenc",
		UID:      "VAESENC_YMM1_YMMV_M256_EVEX",
		Syntax:   "VAESENC ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG DC /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VAESENC_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vaesenc",
		UID:      "VAESENC_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VAESENC zmm1, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG DC /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512F"},
		Tuple:      TupleFullMem,
	}
	VAESENC_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vaesenc",
		UID:      "VAESENC_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VAESENC zmm1, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG DC /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512F"},
		Tuple:      TupleFullMem,
	}
	VAESENCLAST_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vaesenclast",
		UID:      "VAESENCLAST_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VAESENCLAST xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG DD /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES AVX"},
		DataSize:   128,
	}
	VAESENCLAST_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vaesenclast",
		UID:      "VAESENCLAST_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VAESENCLAST xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG DD /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VAESENCLAST_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vaesenclast",
		UID:      "VAESENCLAST_XMM1_XMMV_M128_VEX",
		Syntax:   "VAESENCLAST xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG DD /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AES AVX"},
		DataSize:   128,
	}
	VAESENCLAST_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vaesenclast",
		UID:      "VAESENCLAST_XMM1_XMMV_M128_EVEX",
		Syntax:   "VAESENCLAST xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG DD /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VAESENCLAST_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vaesenclast",
		UID:      "VAESENCLAST_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VAESENCLAST ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG DD /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES"},
		DataSize:   256,
	}
	VAESENCLAST_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vaesenclast",
		UID:      "VAESENCLAST_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VAESENCLAST ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG DD /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VAESENCLAST_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vaesenclast",
		UID:      "VAESENCLAST_YMM1_YMMV_M256_VEX",
		Syntax:   "VAESENCLAST ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG DD /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES"},
		DataSize:   256,
	}
	VAESENCLAST_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vaesenclast",
		UID:      "VAESENCLAST_YMM1_YMMV_M256_EVEX",
		Syntax:   "VAESENCLAST ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG DD /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512VL"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VAESENCLAST_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vaesenclast",
		UID:      "VAESENCLAST_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VAESENCLAST zmm1, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG DD /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512F"},
		Tuple:      TupleFullMem,
	}
	VAESENCLAST_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vaesenclast",
		UID:      "VAESENCLAST_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VAESENCLAST zmm1, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG DD /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VAES AVX512F"},
		Tuple:      TupleFullMem,
	}
	VAESIMC_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vaesimc",
		UID:      "VAESIMC_XMM1_XMM2_VEX",
		Syntax:   "VAESIMC xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG DB /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"Both AES and AVX flags"},
	}
	VAESIMC_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vaesimc",
		UID:      "VAESIMC_XMM1_M128_VEX",
		Syntax:   "VAESIMC xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG DB /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"Both AES and AVX flags"},
	}
	VAESKEYGENASSIST_XMM1_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vaeskeygenassist",
		UID:      "VAESKEYGENASSIST_XMM1_XMM2_Imm8_VEX",
		Syntax:   "VAESKEYGENASSIST xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG DF /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"Both AES and AVX flags"},
	}
	VAESKEYGENASSIST_XMM1_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vaeskeygenassist",
		UID:      "VAESKEYGENASSIST_XMM1_M128_Imm8_VEX",
		Syntax:   "VAESKEYGENASSIST xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG DF /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"Both AES and AVX flags"},
	}
	VANDNPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VANDNPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F 55 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDNPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VANDNPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 55 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VANDNPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F 55 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDNPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VANDNPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 55 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VANDNPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 55 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VANDNPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F 55 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDNPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VANDNPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 55 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VANDNPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F 55 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDNPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VANDNPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 55 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VANDNPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 55 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VANDNPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 55 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VANDNPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 55 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vandnpd",
		UID:      "VANDNPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VANDNPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 55 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VANDNPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F 55 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDNPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VANDNPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 55 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VANDNPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F 55 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDNPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VANDNPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 55 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VANDNPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 55 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VANDNPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F 55 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDNPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VANDNPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 55 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VANDNPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F 55 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDNPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VANDNPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 55 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VANDNPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 55 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VANDNPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 55 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VANDNPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 55 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDNPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vandnps",
		UID:      "VANDNPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VANDNPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 55 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x55},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VANDPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F 54 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VANDPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 54 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VANDPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F 54 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VANDPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 54 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VANDPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 54 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VANDPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F 54 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VANDPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 54 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VANDPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F 54 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VANDPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 54 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VANDPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 54 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VANDPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 54 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VANDPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 54 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vandpd",
		UID:      "VANDPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VANDPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 54 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VANDPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F 54 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VANDPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 54 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VANDPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F 54 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VANDPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 54 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VANDPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 54 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VANDPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F 54 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VANDPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 54 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VANDPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F 54 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VANDPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VANDPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 54 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VANDPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 54 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VANDPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 54 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VANDPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 54 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VANDPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vandps",
		UID:      "VANDPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VANDPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 54 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x54},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VBLENDPD_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vblendpd",
		UID:      "VBLENDPD_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VBLENDPD xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 0D /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDPD_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vblendpd",
		UID:      "VBLENDPD_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VBLENDPD xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 0D /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDPD_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vblendpd",
		UID:      "VBLENDPD_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VBLENDPD ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 0D /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDPD_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vblendpd",
		UID:      "VBLENDPD_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VBLENDPD ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 0D /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDPS_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vblendps",
		UID:      "VBLENDPS_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VBLENDPS xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 0C /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDPS_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vblendps",
		UID:      "VBLENDPS_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VBLENDPS xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 0C /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDPS_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vblendps",
		UID:      "VBLENDPS_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VBLENDPS ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 0C /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDPS_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vblendps",
		UID:      "VBLENDPS_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VBLENDPS ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 0C /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDVPD_XMM1_XMMV_XMM2_XMMIH_VEX = &Instruction{
		Mnemonic: "vblendvpd",
		UID:      "VBLENDVPD_XMM1_XMMV_XMM2_XMMIH_VEX",
		Syntax:   "VBLENDVPD xmm1, xmmV, xmm2/m128, xmmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 4B /r /is4",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamXMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDVPD_XMM1_XMMV_M128_XMMIH_VEX = &Instruction{
		Mnemonic: "vblendvpd",
		UID:      "VBLENDVPD_XMM1_XMMV_M128_XMMIH_VEX",
		Syntax:   "VBLENDVPD xmm1, xmmV, xmm2/m128, xmmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 4B /r /is4",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamXMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDVPD_YMM1_YMMV_YMM2_YMMIH_VEX = &Instruction{
		Mnemonic: "vblendvpd",
		UID:      "VBLENDVPD_YMM1_YMMV_YMM2_YMMIH_VEX",
		Syntax:   "VBLENDVPD ymm1, ymmV, ymm2/m256, ymmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.W0 4B /r /is4",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamYMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDVPD_YMM1_YMMV_M256_YMMIH_VEX = &Instruction{
		Mnemonic: "vblendvpd",
		UID:      "VBLENDVPD_YMM1_YMMV_M256_YMMIH_VEX",
		Syntax:   "VBLENDVPD ymm1, ymmV, ymm2/m256, ymmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.W0 4B /r /is4",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamYMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDVPS_XMM1_XMMV_XMM2_XMMIH_VEX = &Instruction{
		Mnemonic: "vblendvps",
		UID:      "VBLENDVPS_XMM1_XMMV_XMM2_XMMIH_VEX",
		Syntax:   "VBLENDVPS xmm1, xmmV, xmm2/m128, xmmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 4A /r /is4",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamXMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDVPS_XMM1_XMMV_M128_XMMIH_VEX = &Instruction{
		Mnemonic: "vblendvps",
		UID:      "VBLENDVPS_XMM1_XMMV_M128_XMMIH_VEX",
		Syntax:   "VBLENDVPS xmm1, xmmV, xmm2/m128, xmmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 4A /r /is4",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamXMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDVPS_YMM1_YMMV_YMM2_YMMIH_VEX = &Instruction{
		Mnemonic: "vblendvps",
		UID:      "VBLENDVPS_YMM1_YMMV_YMM2_YMMIH_VEX",
		Syntax:   "VBLENDVPS ymm1, ymmV, ymm2/m256, ymmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.W0 4A /r /is4",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamYMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VBLENDVPS_YMM1_YMMV_M256_YMMIH_VEX = &Instruction{
		Mnemonic: "vblendvps",
		UID:      "VBLENDVPS_YMM1_YMMV_M256_YMMIH_VEX",
		Syntax:   "VBLENDVPS ymm1, ymmV, ymm2/m256, ymmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.W0 4A /r /is4",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamYMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCMPPD_K1_XMMV_XMM2_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_K1_XMMV_XMM2_Imm5u_EVEX",
		Syntax:   "VCMPPD k1 {k2}, xmmV, xmm2/m128/m64bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 C2 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPD_K1_XMMV_M128_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_K1_XMMV_M128_Imm5u_EVEX",
		Syntax:   "VCMPPD k1 {k2}, xmmV, xmm2/m128/m64bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 C2 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM128, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPD_K1_XMMV_M64bcst128_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_K1_XMMV_M64bcst128_Imm5u_EVEX",
		Syntax:   "VCMPPD k1 {k2}, xmmV, xmm2/m128/m64bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 C2 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM64bcst, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPD_K1_YMMV_YMM2_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_K1_YMMV_YMM2_Imm5u_EVEX",
		Syntax:   "VCMPPD k1 {k2}, ymmV, ymm2/m256/m64bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 C2 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamYMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPD_K1_YMMV_M256_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_K1_YMMV_M256_Imm5u_EVEX",
		Syntax:   "VCMPPD k1 {k2}, ymmV, ymm2/m256/m64bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 C2 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM256, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPD_K1_YMMV_M64bcst256_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_K1_YMMV_M64bcst256_Imm5u_EVEX",
		Syntax:   "VCMPPD k1 {k2}, ymmV, ymm2/m256/m64bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 C2 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM64bcst, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPD_K1_ZMMV_ZMM2_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_K1_ZMMV_ZMM2_Imm5u_EVEX",
		Syntax:   "VCMPPD k1 {k2}, zmmV, zmm2/m512/m64bcst{sae}, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 C2 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Suppress:  true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamZMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPD_K1_ZMMV_M512_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_K1_ZMMV_M512_Imm5u_EVEX",
		Syntax:   "VCMPPD k1 {k2}, zmmV, zmm2/m512/m64bcst{sae}, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 C2 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Suppress:  true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM512, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPD_K1_ZMMV_M64bcst512_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_K1_ZMMV_M64bcst512_Imm5u_EVEX",
		Syntax:   "VCMPPD k1 {k2}, zmmV, zmm2/m512/m64bcst{sae}, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 C2 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Suppress:  true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM64bcst, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPD_XMM1_XMMV_XMM2_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_XMM1_XMMV_XMM2_Imm5u_VEX",
		Syntax:   "VCMPPD xmm1, xmmV, xmm2/m128, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG C2 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCMPPD_XMM1_XMMV_M128_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_XMM1_XMMV_M128_Imm5u_VEX",
		Syntax:   "VCMPPD xmm1, xmmV, xmm2/m128, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG C2 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCMPPD_YMM1_YMMV_YMM2_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_YMM1_YMMV_YMM2_Imm5u_VEX",
		Syntax:   "VCMPPD ymm1, ymmV, ymm2/m256, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG C2 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCMPPD_YMM1_YMMV_M256_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmppd",
		UID:      "VCMPPD_YMM1_YMMV_M256_Imm5u_VEX",
		Syntax:   "VCMPPD ymm1, ymmV, ymm2/m256, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG C2 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCMPPS_K1_XMMV_XMM2_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_K1_XMMV_XMM2_Imm5u_EVEX",
		Syntax:   "VCMPPS k1 {k2}, xmmV, xmm2/m128/m32bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 C2 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPS_K1_XMMV_M128_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_K1_XMMV_M128_Imm5u_EVEX",
		Syntax:   "VCMPPS k1 {k2}, xmmV, xmm2/m128/m32bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 C2 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM128, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPS_K1_XMMV_M32bcst128_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_K1_XMMV_M32bcst128_Imm5u_EVEX",
		Syntax:   "VCMPPS k1 {k2}, xmmV, xmm2/m128/m32bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 C2 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM32bcst, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPS_K1_YMMV_YMM2_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_K1_YMMV_YMM2_Imm5u_EVEX",
		Syntax:   "VCMPPS k1 {k2}, ymmV, ymm2/m256/m32bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 C2 /r ib",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamYMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPS_K1_YMMV_M256_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_K1_YMMV_M256_Imm5u_EVEX",
		Syntax:   "VCMPPS k1 {k2}, ymmV, ymm2/m256/m32bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 C2 /r ib",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM256, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPS_K1_YMMV_M32bcst256_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_K1_YMMV_M32bcst256_Imm5u_EVEX",
		Syntax:   "VCMPPS k1 {k2}, ymmV, ymm2/m256/m32bcst, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 C2 /r ib",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM32bcst, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPS_K1_ZMMV_ZMM2_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_K1_ZMMV_ZMM2_Imm5u_EVEX",
		Syntax:   "VCMPPS k1 {k2}, zmmV, zmm2/m512/m32bcst{sae}, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 C2 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Suppress:  true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamZMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPS_K1_ZMMV_M512_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_K1_ZMMV_M512_Imm5u_EVEX",
		Syntax:   "VCMPPS k1 {k2}, zmmV, zmm2/m512/m32bcst{sae}, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 C2 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Suppress:  true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM512, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPS_K1_ZMMV_M32bcst512_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_K1_ZMMV_M32bcst512_Imm5u_EVEX",
		Syntax:   "VCMPPS k1 {k2}, zmmV, zmm2/m512/m32bcst{sae}, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 C2 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Suppress:  true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM32bcst, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCMPPS_XMM1_XMMV_XMM2_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_XMM1_XMMV_XMM2_Imm5u_VEX",
		Syntax:   "VCMPPS xmm1, xmmV, xmm2/m128, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG C2 /r ib",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCMPPS_XMM1_XMMV_M128_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_XMM1_XMMV_M128_Imm5u_VEX",
		Syntax:   "VCMPPS xmm1, xmmV, xmm2/m128, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG C2 /r ib",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCMPPS_YMM1_YMMV_YMM2_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_YMM1_YMMV_YMM2_Imm5u_VEX",
		Syntax:   "VCMPPS ymm1, ymmV, ymm2/m256, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG C2 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCMPPS_YMM1_YMMV_M256_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmpps",
		UID:      "VCMPPS_YMM1_YMMV_M256_Imm5u_VEX",
		Syntax:   "VCMPPS ymm1, ymmV, ymm2/m256, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG C2 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCMPSD_K1_XMMV_XMM2_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpsd",
		UID:      "VCMPSD_K1_XMMV_XMM2_Imm5u_EVEX",
		Syntax:   "VCMPSD k1 {k2}, xmmV, xmm2/m64{sae}, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 C2 /r ib",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VCMPSD_K1_XMMV_M64_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpsd",
		UID:      "VCMPSD_K1_XMMV_M64_Imm5u_EVEX",
		Syntax:   "VCMPSD k1 {k2}, xmmV, xmm2/m64{sae}, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 C2 /r ib",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM64, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VCMPSD_XMM1_XMMV_XMM2_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmpsd",
		UID:      "VCMPSD_XMM1_XMMV_XMM2_Imm5u_VEX",
		Syntax:   "VCMPSD xmm1, xmmV, xmm2/m64, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG C2 /r ib",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCMPSD_XMM1_XMMV_M64_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmpsd",
		UID:      "VCMPSD_XMM1_XMMV_M64_Imm5u_VEX",
		Syntax:   "VCMPSD xmm1, xmmV, xmm2/m64, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG C2 /r ib",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCMPSS_K1_XMMV_XMM2_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpss",
		UID:      "VCMPSS_K1_XMMV_XMM2_Imm5u_EVEX",
		Syntax:   "VCMPSS k1 {k2}, xmmV, xmm2/m32{sae}, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 C2 /r ib",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VCMPSS_K1_XMMV_M32_Imm5u_EVEX = &Instruction{
		Mnemonic: "vcmpss",
		UID:      "VCMPSS_K1_XMMV_M32_Imm5u_EVEX",
		Syntax:   "VCMPSS k1 {k2}, xmmV, xmm2/m32{sae}, imm5u",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 C2 /r ib",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM32, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VCMPSS_XMM1_XMMV_XMM2_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmpss",
		UID:      "VCMPSS_XMM1_XMMV_XMM2_Imm5u_VEX",
		Syntax:   "VCMPSS xmm1, xmmV, xmm2/m32, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG C2 /r ib",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCMPSS_XMM1_XMMV_M32_Imm5u_VEX = &Instruction{
		Mnemonic: "vcmpss",
		UID:      "VCMPSS_XMM1_XMMV_M32_Imm5u_VEX",
		Syntax:   "VCMPSS xmm1, xmmV, xmm2/m32, imm5u",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG C2 /r ib",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32, ParamImm5u},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCOMISD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcomisd",
		UID:      "VCOMISD_XMM1_XMM2_VEX",
		Syntax:   "VCOMISD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.66.0F.WIG 2F /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCOMISD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcomisd",
		UID:      "VCOMISD_XMM1_XMM2_EVEX",
		Syntax:   "VCOMISD xmm1, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.66.0F.W1 2F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VCOMISD_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vcomisd",
		UID:      "VCOMISD_XMM1_M64_VEX",
		Syntax:   "VCOMISD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.66.0F.WIG 2F /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCOMISD_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vcomisd",
		UID:      "VCOMISD_XMM1_M64_EVEX",
		Syntax:   "VCOMISD xmm1, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.66.0F.W1 2F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VCOMISS_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcomiss",
		UID:      "VCOMISS_XMM1_XMM2_VEX",
		Syntax:   "VCOMISS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.0F.WIG 2F /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCOMISS_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcomiss",
		UID:      "VCOMISS_XMM1_XMM2_EVEX",
		Syntax:   "VCOMISS xmm1, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.0F.W0 2F /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VCOMISS_XMM1_M32_VEX = &Instruction{
		Mnemonic: "vcomiss",
		UID:      "VCOMISS_XMM1_M32_VEX",
		Syntax:   "VCOMISS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.0F.WIG 2F /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCOMISS_XMM1_M32_EVEX = &Instruction{
		Mnemonic: "vcomiss",
		UID:      "VCOMISS_XMM1_M32_EVEX",
		Syntax:   "VCOMISS xmm1, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.0F.W0 2F /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VCVTDQ2PD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_XMM1_XMM2_VEX",
		Syntax:   "VCVTDQ2PD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG E6 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTDQ2PD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_XMM1_XMM2_EVEX",
		Syntax:   "VCVTDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 E6 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTDQ2PD_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_XMM1_M64_VEX",
		Syntax:   "VCVTDQ2PD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG E6 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTDQ2PD_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_XMM1_M64_EVEX",
		Syntax:   "VCVTDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 E6 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTDQ2PD_XMM1_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_XMM1_M32bcst128_EVEX",
		Syntax:   "VCVTDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 E6 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTDQ2PD_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_YMM1_XMM2_VEX",
		Syntax:   "VCVTDQ2PD ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG E6 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTDQ2PD_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_YMM1_XMM2_EVEX",
		Syntax:   "VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 E6 /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTDQ2PD_YMM1_M128_VEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_YMM1_M128_VEX",
		Syntax:   "VCVTDQ2PD ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG E6 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTDQ2PD_YMM1_M128_EVEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_YMM1_M128_EVEX",
		Syntax:   "VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 E6 /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTDQ2PD_YMM1_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_YMM1_M32bcst256_EVEX",
		Syntax:   "VCVTDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 E6 /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTDQ2PD_ZMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_ZMM1_YMM2_EVEX",
		Syntax:   "VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 E6 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTDQ2PD_ZMM1_M256_EVEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_ZMM1_M256_EVEX",
		Syntax:   "VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 E6 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTDQ2PD_ZMM1_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vcvtdq2pd",
		UID:      "VCVTDQ2PD_ZMM1_M32bcst512_EVEX",
		Syntax:   "VCVTDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 E6 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTDQ2PS_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_XMM1_XMM2_VEX",
		Syntax:   "VCVTDQ2PS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5B /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTDQ2PS_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_XMM1_XMM2_EVEX",
		Syntax:   "VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5B /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTDQ2PS_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_XMM1_M128_VEX",
		Syntax:   "VCVTDQ2PS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5B /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTDQ2PS_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_XMM1_M128_EVEX",
		Syntax:   "VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5B /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTDQ2PS_XMM1_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_XMM1_M32bcst128_EVEX",
		Syntax:   "VCVTDQ2PS xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5B /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTDQ2PS_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_YMM1_YMM2_VEX",
		Syntax:   "VCVTDQ2PS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5B /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTDQ2PS_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_YMM1_YMM2_EVEX",
		Syntax:   "VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5B /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTDQ2PS_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_YMM1_M256_VEX",
		Syntax:   "VCVTDQ2PS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5B /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTDQ2PS_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_YMM1_M256_EVEX",
		Syntax:   "VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5B /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTDQ2PS_YMM1_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_YMM1_M32bcst256_EVEX",
		Syntax:   "VCVTDQ2PS ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5B /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTDQ2PS_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_ZMM1_ZMM2_EVEX",
		Syntax:   "VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5B /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTDQ2PS_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_ZMM1_M512_EVEX",
		Syntax:   "VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5B /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTDQ2PS_ZMM1_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vcvtdq2ps",
		UID:      "VCVTDQ2PS_ZMM1_M32bcst512_EVEX",
		Syntax:   "VCVTDQ2PS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5B /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2DQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_XMM1_XMM2_VEX",
		Syntax:   "VCVTPD2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG E6 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   128,
	}
	VCVTPD2DQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_XMM1_XMM2_EVEX",
		Syntax:   "VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W1 E6 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2DQ_XMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_XMM1_YMM2_VEX",
		Syntax:   "VCVTPD2DQ xmm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG E6 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   256,
	}
	VCVTPD2DQ_XMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_XMM1_YMM2_EVEX",
		Syntax:   "VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W1 E6 /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2DQ_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_XMM1_M128_VEX",
		Syntax:   "VCVTPD2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG E6 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   128,
	}
	VCVTPD2DQ_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_XMM1_M128_EVEX",
		Syntax:   "VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W1 E6 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2DQ_XMM1_M256_VEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_XMM1_M256_VEX",
		Syntax:   "VCVTPD2DQ xmm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG E6 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   256,
	}
	VCVTPD2DQ_XMM1_M256_EVEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_XMM1_M256_EVEX",
		Syntax:   "VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W1 E6 /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2DQ_XMM1_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_XMM1_M64bcst128_EVEX",
		Syntax:   "VCVTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W1 E6 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2DQ_XMM1_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_XMM1_M64bcst256_EVEX",
		Syntax:   "VCVTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W1 E6 /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2DQ_YMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_YMM1_ZMM2_EVEX",
		Syntax:   "VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W1 E6 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2DQ_YMM1_M512_EVEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_YMM1_M512_EVEX",
		Syntax:   "VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W1 E6 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2DQ_YMM1_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vcvtpd2dq",
		UID:      "VCVTPD2DQ_YMM1_M64bcst512_EVEX",
		Syntax:   "VCVTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W1 E6 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2PS_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_XMM1_XMM2_VEX",
		Syntax:   "VCVTPD2PS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5A /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   128,
	}
	VCVTPD2PS_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_XMM1_XMM2_EVEX",
		Syntax:   "VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2PS_XMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_XMM1_YMM2_VEX",
		Syntax:   "VCVTPD2PS xmm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   256,
	}
	VCVTPD2PS_XMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_XMM1_YMM2_EVEX",
		Syntax:   "VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5A /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2PS_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_XMM1_M128_VEX",
		Syntax:   "VCVTPD2PS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5A /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   128,
	}
	VCVTPD2PS_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_XMM1_M128_EVEX",
		Syntax:   "VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2PS_XMM1_M256_VEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_XMM1_M256_VEX",
		Syntax:   "VCVTPD2PS xmm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   256,
	}
	VCVTPD2PS_XMM1_M256_EVEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_XMM1_M256_EVEX",
		Syntax:   "VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5A /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2PS_XMM1_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_XMM1_M64bcst128_EVEX",
		Syntax:   "VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2PS_XMM1_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_XMM1_M64bcst256_EVEX",
		Syntax:   "VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5A /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2PS_YMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_YMM1_ZMM2_EVEX",
		Syntax:   "VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2PS_YMM1_M512_EVEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_YMM1_M512_EVEX",
		Syntax:   "VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPD2PS_YMM1_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vcvtpd2ps",
		UID:      "VCVTPD2PS_YMM1_M64bcst512_EVEX",
		Syntax:   "VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPS2DQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_XMM1_XMM2_VEX",
		Syntax:   "VCVTPS2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTPS2DQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_XMM1_XMM2_EVEX",
		Syntax:   "VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 5B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPS2DQ_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_XMM1_M128_VEX",
		Syntax:   "VCVTPS2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTPS2DQ_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_XMM1_M128_EVEX",
		Syntax:   "VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 5B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPS2DQ_XMM1_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_XMM1_M32bcst128_EVEX",
		Syntax:   "VCVTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 5B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPS2DQ_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_YMM1_YMM2_VEX",
		Syntax:   "VCVTPS2DQ ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTPS2DQ_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_YMM1_YMM2_EVEX",
		Syntax:   "VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 5B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPS2DQ_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_YMM1_M256_VEX",
		Syntax:   "VCVTPS2DQ ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTPS2DQ_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_YMM1_M256_EVEX",
		Syntax:   "VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 5B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPS2DQ_YMM1_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_YMM1_M32bcst256_EVEX",
		Syntax:   "VCVTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 5B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPS2DQ_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_ZMM1_ZMM2_EVEX",
		Syntax:   "VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 5B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPS2DQ_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_ZMM1_M512_EVEX",
		Syntax:   "VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 5B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPS2DQ_ZMM1_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vcvtps2dq",
		UID:      "VCVTPS2DQ_ZMM1_M32bcst512_EVEX",
		Syntax:   "VCVTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 5B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTPS2PD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_XMM1_XMM2_VEX",
		Syntax:   "VCVTPS2PD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5A /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTPS2PD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_XMM1_XMM2_EVEX",
		Syntax:   "VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5A /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTPS2PD_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_XMM1_M64_VEX",
		Syntax:   "VCVTPS2PD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5A /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTPS2PD_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_XMM1_M64_EVEX",
		Syntax:   "VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5A /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTPS2PD_XMM1_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_XMM1_M32bcst128_EVEX",
		Syntax:   "VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5A /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTPS2PD_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_YMM1_XMM2_VEX",
		Syntax:   "VCVTPS2PD ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5A /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTPS2PD_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_YMM1_XMM2_EVEX",
		Syntax:   "VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5A /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL"},
		Tuple:      TupleHalf,
	}
	VCVTPS2PD_YMM1_M128_VEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_YMM1_M128_VEX",
		Syntax:   "VCVTPS2PD ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5A /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTPS2PD_YMM1_M128_EVEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_YMM1_M128_EVEX",
		Syntax:   "VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5A /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL"},
		Tuple:      TupleHalf,
	}
	VCVTPS2PD_YMM1_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_YMM1_M32bcst256_EVEX",
		Syntax:   "VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5A /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL"},
		Tuple:      TupleHalf,
	}
	VCVTPS2PD_ZMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_ZMM1_YMM2_EVEX",
		Syntax:   "VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5A /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTPS2PD_ZMM1_M256_EVEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_ZMM1_M256_EVEX",
		Syntax:   "VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5A /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTPS2PD_ZMM1_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vcvtps2pd",
		UID:      "VCVTPS2PD_ZMM1_M32bcst512_EVEX",
		Syntax:   "VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5A /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalf,
	}
	VCVTSD2SI_R32_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtsd2si",
		UID:      "VCVTSD2SI_R32_XMM2_VEX",
		Syntax:   "VCVTSD2SI r32, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W0 2D /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTSD2SI_R32_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtsd2si",
		UID:      "VCVTSD2SI_R32_XMM2_EVEX",
		Syntax:   "VCVTSD2SI r32, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W0 2D /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Fixed,
	}
	VCVTSD2SI_R32_M64_VEX = &Instruction{
		Mnemonic: "vcvtsd2si",
		UID:      "VCVTSD2SI_R32_M64_VEX",
		Syntax:   "VCVTSD2SI r32, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W0 2D /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTSD2SI_R32_M64_EVEX = &Instruction{
		Mnemonic: "vcvtsd2si",
		UID:      "VCVTSD2SI_R32_M64_EVEX",
		Syntax:   "VCVTSD2SI r32, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W0 2D /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Fixed,
	}
	VCVTSD2SI_R64_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtsd2si",
		UID:      "VCVTSD2SI_R64_XMM2_VEX",
		Syntax:   "VCVTSD2SI r64, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W1 2D /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTSD2SI_R64_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtsd2si",
		UID:      "VCVTSD2SI_R64_XMM2_EVEX",
		Syntax:   "VCVTSD2SI r64, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 2D /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Fixed,
	}
	VCVTSD2SI_R64_M64_VEX = &Instruction{
		Mnemonic: "vcvtsd2si",
		UID:      "VCVTSD2SI_R64_M64_VEX",
		Syntax:   "VCVTSD2SI r64, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W1 2D /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTSD2SI_R64_M64_EVEX = &Instruction{
		Mnemonic: "vcvtsd2si",
		UID:      "VCVTSD2SI_R64_M64_EVEX",
		Syntax:   "VCVTSD2SI r64, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 2D /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Fixed,
	}
	VCVTSD2SS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtsd2ss",
		UID:      "VCVTSD2SS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VCVTSD2SS xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 5A /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTSD2SS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtsd2ss",
		UID:      "VCVTSD2SS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VCVTSD2SS xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 5A /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VCVTSD2SS_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vcvtsd2ss",
		UID:      "VCVTSD2SS_XMM1_XMMV_M64_VEX",
		Syntax:   "VCVTSD2SS xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 5A /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTSD2SS_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vcvtsd2ss",
		UID:      "VCVTSD2SS_XMM1_XMMV_M64_EVEX",
		Syntax:   "VCVTSD2SS xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 5A /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VCVTSI2SD_XMM1_XMMV_Rmr32_VEX = &Instruction{
		Mnemonic: "vcvtsi2sd",
		UID:      "VCVTSI2SD_XMM1_XMMV_Rmr32_VEX",
		Syntax:   "VCVTSI2SD xmm1, xmmV, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W0 2A /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTSI2SD_XMM1_XMMV_Rmr32_EVEX = &Instruction{
		Mnemonic: "vcvtsi2sd",
		UID:      "VCVTSI2SD_XMM1_XMMV_Rmr32_EVEX",
		Syntax:   "VCVTSI2SD xmm1, xmmV, r/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W0 2A /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VCVTSI2SD_XMM1_XMMV_Rmr64_VEX = &Instruction{
		Mnemonic: "vcvtsi2sd",
		UID:      "VCVTSI2SD_XMM1_XMMV_Rmr64_VEX",
		Syntax:   "VCVTSI2SD xmm1, xmmV, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W1 2A /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTSI2SD_XMM1_XMMV_Rmr64_EVEX = &Instruction{
		Mnemonic: "vcvtsi2sd",
		UID:      "VCVTSI2SD_XMM1_XMMV_Rmr64_EVEX",
		Syntax:   "VCVTSI2SD xmm1, xmmV, r/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 2A /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VCVTSI2SD_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vcvtsi2sd",
		UID:      "VCVTSI2SD_XMM1_XMMV_M32_VEX",
		Syntax:   "VCVTSI2SD xmm1, xmmV, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W0 2A /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTSI2SD_XMM1_XMMV_M32_EVEX = &Instruction{
		Mnemonic: "vcvtsi2sd",
		UID:      "VCVTSI2SD_XMM1_XMMV_M32_EVEX",
		Syntax:   "VCVTSI2SD xmm1, xmmV, r/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W0 2A /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VCVTSI2SD_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vcvtsi2sd",
		UID:      "VCVTSI2SD_XMM1_XMMV_M64_VEX",
		Syntax:   "VCVTSI2SD xmm1, xmmV, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W1 2A /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTSI2SD_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vcvtsi2sd",
		UID:      "VCVTSI2SD_XMM1_XMMV_M64_EVEX",
		Syntax:   "VCVTSI2SD xmm1, xmmV, r/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 2A /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VCVTSI2SS_XMM1_XMMV_Rmr32_VEX = &Instruction{
		Mnemonic: "vcvtsi2ss",
		UID:      "VCVTSI2SS_XMM1_XMMV_Rmr32_VEX",
		Syntax:   "VCVTSI2SS xmm1, xmmV, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W0 2A /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTSI2SS_XMM1_XMMV_Rmr32_EVEX = &Instruction{
		Mnemonic: "vcvtsi2ss",
		UID:      "VCVTSI2SS_XMM1_XMMV_Rmr32_EVEX",
		Syntax:   "VCVTSI2SS xmm1, xmmV, r/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 2A /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VCVTSI2SS_XMM1_XMMV_Rmr64_VEX = &Instruction{
		Mnemonic: "vcvtsi2ss",
		UID:      "VCVTSI2SS_XMM1_XMMV_Rmr64_VEX",
		Syntax:   "VCVTSI2SS xmm1, xmmV, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W1 2A /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTSI2SS_XMM1_XMMV_Rmr64_EVEX = &Instruction{
		Mnemonic: "vcvtsi2ss",
		UID:      "VCVTSI2SS_XMM1_XMMV_Rmr64_EVEX",
		Syntax:   "VCVTSI2SS xmm1, xmmV, r/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W1 2A /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VCVTSI2SS_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vcvtsi2ss",
		UID:      "VCVTSI2SS_XMM1_XMMV_M32_VEX",
		Syntax:   "VCVTSI2SS xmm1, xmmV, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W0 2A /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTSI2SS_XMM1_XMMV_M32_EVEX = &Instruction{
		Mnemonic: "vcvtsi2ss",
		UID:      "VCVTSI2SS_XMM1_XMMV_M32_EVEX",
		Syntax:   "VCVTSI2SS xmm1, xmmV, r/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 2A /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VCVTSI2SS_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vcvtsi2ss",
		UID:      "VCVTSI2SS_XMM1_XMMV_M64_VEX",
		Syntax:   "VCVTSI2SS xmm1, xmmV, r/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W1 2A /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTSI2SS_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vcvtsi2ss",
		UID:      "VCVTSI2SS_XMM1_XMMV_M64_EVEX",
		Syntax:   "VCVTSI2SS xmm1, xmmV, r/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W1 2A /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VCVTSS2SD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtss2sd",
		UID:      "VCVTSS2SD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VCVTSS2SD xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 5A /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTSS2SD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtss2sd",
		UID:      "VCVTSS2SD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VCVTSS2SD xmm1 {k1}{z}, xmmV, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 5A /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VCVTSS2SD_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vcvtss2sd",
		UID:      "VCVTSS2SD_XMM1_XMMV_M32_VEX",
		Syntax:   "VCVTSS2SD xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 5A /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTSS2SD_XMM1_XMMV_M32_EVEX = &Instruction{
		Mnemonic: "vcvtss2sd",
		UID:      "VCVTSS2SD_XMM1_XMMV_M32_EVEX",
		Syntax:   "VCVTSS2SD xmm1 {k1}{z}, xmmV, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 5A /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VCVTSS2SI_R32_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtss2si",
		UID:      "VCVTSS2SI_R32_XMM2_VEX",
		Syntax:   "VCVTSS2SI r32, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W0 2D /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTSS2SI_R32_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtss2si",
		UID:      "VCVTSS2SI_R32_XMM2_EVEX",
		Syntax:   "VCVTSS2SI r32, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 2D /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Fixed,
	}
	VCVTSS2SI_R32_M32_VEX = &Instruction{
		Mnemonic: "vcvtss2si",
		UID:      "VCVTSS2SI_R32_M32_VEX",
		Syntax:   "VCVTSS2SI r32, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W0 2D /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTSS2SI_R32_M32_EVEX = &Instruction{
		Mnemonic: "vcvtss2si",
		UID:      "VCVTSS2SI_R32_M32_EVEX",
		Syntax:   "VCVTSS2SI r32, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 2D /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Fixed,
	}
	VCVTSS2SI_R64_XMM2_VEX = &Instruction{
		Mnemonic: "vcvtss2si",
		UID:      "VCVTSS2SI_R64_XMM2_VEX",
		Syntax:   "VCVTSS2SI r64, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W1 2D /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTSS2SI_R64_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvtss2si",
		UID:      "VCVTSS2SI_R64_XMM2_EVEX",
		Syntax:   "VCVTSS2SI r64, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W1 2D /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Fixed,
	}
	VCVTSS2SI_R64_M32_VEX = &Instruction{
		Mnemonic: "vcvtss2si",
		UID:      "VCVTSS2SI_R64_M32_VEX",
		Syntax:   "VCVTSS2SI r64, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W1 2D /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTSS2SI_R64_M32_EVEX = &Instruction{
		Mnemonic: "vcvtss2si",
		UID:      "VCVTSS2SI_R64_M32_EVEX",
		Syntax:   "VCVTSS2SI r64, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W1 2D /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x2d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Fixed,
	}
	VCVTTPD2DQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_XMM1_XMM2_VEX",
		Syntax:   "VCVTTPD2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E6 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   128,
	}
	VCVTTPD2DQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_XMM1_XMM2_EVEX",
		Syntax:   "VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 E6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPD2DQ_XMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_XMM1_YMM2_VEX",
		Syntax:   "VCVTTPD2DQ xmm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E6 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   256,
	}
	VCVTTPD2DQ_XMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_XMM1_YMM2_EVEX",
		Syntax:   "VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 E6 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPD2DQ_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_XMM1_M128_VEX",
		Syntax:   "VCVTTPD2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E6 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   128,
	}
	VCVTTPD2DQ_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_XMM1_M128_EVEX",
		Syntax:   "VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 E6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPD2DQ_XMM1_M256_VEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_XMM1_M256_VEX",
		Syntax:   "VCVTTPD2DQ xmm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E6 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   256,
	}
	VCVTTPD2DQ_XMM1_M256_EVEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_XMM1_M256_EVEX",
		Syntax:   "VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 E6 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPD2DQ_XMM1_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_XMM1_M64bcst128_EVEX",
		Syntax:   "VCVTTPD2DQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 E6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPD2DQ_XMM1_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_XMM1_M64bcst256_EVEX",
		Syntax:   "VCVTTPD2DQ xmm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 E6 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPD2DQ_YMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_YMM1_ZMM2_EVEX",
		Syntax:   "VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 E6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPD2DQ_YMM1_M512_EVEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_YMM1_M512_EVEX",
		Syntax:   "VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 E6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPD2DQ_YMM1_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vcvttpd2dq",
		UID:      "VCVTTPD2DQ_YMM1_M64bcst512_EVEX",
		Syntax:   "VCVTTPD2DQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 E6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0xe6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPS2DQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_XMM1_XMM2_VEX",
		Syntax:   "VCVTTPS2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 5B /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTTPS2DQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_XMM1_XMM2_EVEX",
		Syntax:   "VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 5B /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPS2DQ_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_XMM1_M128_VEX",
		Syntax:   "VCVTTPS2DQ xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 5B /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTTPS2DQ_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_XMM1_M128_EVEX",
		Syntax:   "VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 5B /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPS2DQ_XMM1_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_XMM1_M32bcst128_EVEX",
		Syntax:   "VCVTTPS2DQ xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 5B /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPS2DQ_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_YMM1_YMM2_VEX",
		Syntax:   "VCVTTPS2DQ ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 5B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTTPS2DQ_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_YMM1_YMM2_EVEX",
		Syntax:   "VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 5B /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPS2DQ_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_YMM1_M256_VEX",
		Syntax:   "VCVTTPS2DQ ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 5B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VCVTTPS2DQ_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_YMM1_M256_EVEX",
		Syntax:   "VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 5B /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPS2DQ_YMM1_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_YMM1_M32bcst256_EVEX",
		Syntax:   "VCVTTPS2DQ ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 5B /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPS2DQ_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_ZMM1_ZMM2_EVEX",
		Syntax:   "VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 5B /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPS2DQ_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_ZMM1_M512_EVEX",
		Syntax:   "VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 5B /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTPS2DQ_ZMM1_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vcvttps2dq",
		UID:      "VCVTTPS2DQ_ZMM1_M32bcst512_EVEX",
		Syntax:   "VCVTTPS2DQ zmm1 {k1}{z}, zmm2/m512/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 5B /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VCVTTSD2SI_R32_XMM2_VEX = &Instruction{
		Mnemonic: "vcvttsd2si",
		UID:      "VCVTTSD2SI_R32_XMM2_VEX",
		Syntax:   "VCVTTSD2SI r32, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W0 2C /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTTSD2SI_R32_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvttsd2si",
		UID:      "VCVTTSD2SI_R32_XMM2_EVEX",
		Syntax:   "VCVTTSD2SI r32, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W0 2C /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Fixed,
	}
	VCVTTSD2SI_R32_M64_VEX = &Instruction{
		Mnemonic: "vcvttsd2si",
		UID:      "VCVTTSD2SI_R32_M64_VEX",
		Syntax:   "VCVTTSD2SI r32, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W0 2C /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTTSD2SI_R32_M64_EVEX = &Instruction{
		Mnemonic: "vcvttsd2si",
		UID:      "VCVTTSD2SI_R32_M64_EVEX",
		Syntax:   "VCVTTSD2SI r32, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W0 2C /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Fixed,
	}
	VCVTTSD2SI_R64_XMM2_VEX = &Instruction{
		Mnemonic: "vcvttsd2si",
		UID:      "VCVTTSD2SI_R64_XMM2_VEX",
		Syntax:   "VCVTTSD2SI r64, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W1 2C /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTTSD2SI_R64_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvttsd2si",
		UID:      "VCVTTSD2SI_R64_XMM2_EVEX",
		Syntax:   "VCVTTSD2SI r64, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 2C /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Fixed,
	}
	VCVTTSD2SI_R64_M64_VEX = &Instruction{
		Mnemonic: "vcvttsd2si",
		UID:      "VCVTTSD2SI_R64_M64_VEX",
		Syntax:   "VCVTTSD2SI r64, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.W1 2C /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTTSD2SI_R64_M64_EVEX = &Instruction{
		Mnemonic: "vcvttsd2si",
		UID:      "VCVTTSD2SI_R64_M64_EVEX",
		Syntax:   "VCVTTSD2SI r64, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 2C /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Fixed,
	}
	VCVTTSS2SI_R32_XMM2_VEX = &Instruction{
		Mnemonic: "vcvttss2si",
		UID:      "VCVTTSS2SI_R32_XMM2_VEX",
		Syntax:   "VCVTTSS2SI r32, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W0 2C /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTTSS2SI_R32_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvttss2si",
		UID:      "VCVTTSS2SI_R32_XMM2_EVEX",
		Syntax:   "VCVTTSS2SI r32, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 2C /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Fixed,
	}
	VCVTTSS2SI_R32_M32_VEX = &Instruction{
		Mnemonic: "vcvttss2si",
		UID:      "VCVTTSS2SI_R32_M32_VEX",
		Syntax:   "VCVTTSS2SI r32, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W0 2C /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VCVTTSS2SI_R32_M32_EVEX = &Instruction{
		Mnemonic: "vcvttss2si",
		UID:      "VCVTTSS2SI_R32_M32_EVEX",
		Syntax:   "VCVTTSS2SI r32, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 2C /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Fixed,
	}
	VCVTTSS2SI_R64_XMM2_VEX = &Instruction{
		Mnemonic: "vcvttss2si",
		UID:      "VCVTTSS2SI_R64_XMM2_VEX",
		Syntax:   "VCVTTSS2SI r64, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W1 2C /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTTSS2SI_R64_XMM2_EVEX = &Instruction{
		Mnemonic: "vcvttss2si",
		UID:      "VCVTTSS2SI_R64_XMM2_EVEX",
		Syntax:   "VCVTTSS2SI r64, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W1 2C /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamXMM2},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Fixed,
	}
	VCVTTSS2SI_R64_M32_VEX = &Instruction{
		Mnemonic: "vcvttss2si",
		UID:      "VCVTTSS2SI_R64_M32_VEX",
		Syntax:   "VCVTTSS2SI r64, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.W1 2C /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VCVTTSS2SI_R64_M32_EVEX = &Instruction{
		Mnemonic: "vcvttss2si",
		UID:      "VCVTTSS2SI_R64_M32_EVEX",
		Syntax:   "VCVTTSS2SI r64, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W1 2C /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR64, ParamM32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Fixed,
	}
	VDIVPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VDIVPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDIVPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VDIVPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VDIVPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDIVPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VDIVPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VDIVPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VDIVPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5E /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDIVPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VDIVPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5E /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VDIVPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5E /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDIVPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VDIVPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5E /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VDIVPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5E /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VDIVPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VDIVPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vdivpd",
		UID:      "VDIVPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VDIVPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VDIVPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5E /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDIVPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VDIVPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5E /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VDIVPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5E /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDIVPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VDIVPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5E /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VDIVPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5E /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VDIVPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5E /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDIVPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VDIVPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5E /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VDIVPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5E /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDIVPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VDIVPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5E /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VDIVPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5E /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VDIVPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5E /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VDIVPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5E /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vdivps",
		UID:      "VDIVPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VDIVPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5E /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VDIVSD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vdivsd",
		UID:      "VDIVSD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VDIVSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 5E /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VDIVSD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vdivsd",
		UID:      "VDIVSD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VDIVSD xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 5E /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VDIVSD_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vdivsd",
		UID:      "VDIVSD_XMM1_XMMV_M64_VEX",
		Syntax:   "VDIVSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 5E /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VDIVSD_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vdivsd",
		UID:      "VDIVSD_XMM1_XMMV_M64_EVEX",
		Syntax:   "VDIVSD xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 5E /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VDIVSS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vdivss",
		UID:      "VDIVSS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VDIVSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 5E /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VDIVSS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vdivss",
		UID:      "VDIVSS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VDIVSS xmm1 {k1}{z}, xmmV, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 5E /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VDIVSS_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vdivss",
		UID:      "VDIVSS_XMM1_XMMV_M32_VEX",
		Syntax:   "VDIVSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 5E /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VDIVSS_XMM1_XMMV_M32_EVEX = &Instruction{
		Mnemonic: "vdivss",
		UID:      "VDIVSS_XMM1_XMMV_M32_EVEX",
		Syntax:   "VDIVSS xmm1 {k1}{z}, xmmV, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 5E /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VDPPD_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vdppd",
		UID:      "VDPPD_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VDPPD xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 41 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x41},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDPPD_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vdppd",
		UID:      "VDPPD_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VDPPD xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 41 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x41},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDPPS_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vdpps",
		UID:      "VDPPS_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VDPPS xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 40 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDPPS_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vdpps",
		UID:      "VDPPS_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VDPPS xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 40 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDPPS_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vdpps",
		UID:      "VDPPS_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VDPPS ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 40 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VDPPS_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vdpps",
		UID:      "VDPPS_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VDPPS ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 40 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VEXTRACTPS_Rmr32_XMM1_Imm8_VEX = &Instruction{
		Mnemonic: "vextractps",
		UID:      "VEXTRACTPS_Rmr32_XMM1_Imm8_VEX",
		Syntax:   "VEXTRACTPS r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 17 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VEXTRACTPS_Rmr32_XMM1_Imm8_EVEX = &Instruction{
		Mnemonic: "vextractps",
		UID:      "VEXTRACTPS_Rmr32_XMM1_Imm8_EVEX",
		Syntax:   "VEXTRACTPS r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 17 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VEXTRACTPS_M32_XMM1_Imm8_VEX = &Instruction{
		Mnemonic: "vextractps",
		UID:      "VEXTRACTPS_M32_XMM1_Imm8_VEX",
		Syntax:   "VEXTRACTPS r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 17 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VEXTRACTPS_M32_XMM1_Imm8_EVEX = &Instruction{
		Mnemonic: "vextractps",
		UID:      "VEXTRACTPS_M32_XMM1_Imm8_EVEX",
		Syntax:   "VEXTRACTPS r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 17 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VGF2P8AFFINEINVQB_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VGF2P8AFFINEINVQB xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W1 CF /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8AFFINEINVQB_XMM1_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_XMM1_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W1 CF /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEINVQB_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VGF2P8AFFINEINVQB xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W1 CF /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8AFFINEINVQB_XMM1_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_XMM1_XMMV_M128_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W1 CF /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEINVQB_XMM1_XMMV_M64bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_XMM1_XMMV_M64bcst128_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEINVQB xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W1 CF /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEINVQB_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VGF2P8AFFINEINVQB ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.W1 CF /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8AFFINEINVQB_YMM1_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_YMM1_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F3A.W1 CF /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEINVQB_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VGF2P8AFFINEINVQB ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.W1 CF /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8AFFINEINVQB_YMM1_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_YMM1_YMMV_M256_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F3A.W1 CF /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEINVQB_YMM1_YMMV_M64bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_YMM1_YMMV_M64bcst256_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEINVQB ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F3A.W1 CF /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEINVQB_ZMM1_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_ZMM1_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F3A.W1 CF /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEINVQB_ZMM1_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_ZMM1_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F3A.W1 CF /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEINVQB_ZMM1_ZMMV_M64bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineinvqb",
		UID:      "VGF2P8AFFINEINVQB_ZMM1_ZMMV_M64bcst512_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEINVQB zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F3A.W1 CF /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEQB_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VGF2P8AFFINEQB xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W1 CE /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8AFFINEQB_XMM1_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_XMM1_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEQB xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W1 CE /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEQB_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VGF2P8AFFINEQB xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W1 CE /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8AFFINEQB_XMM1_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_XMM1_XMMV_M128_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEQB xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W1 CE /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEQB_XMM1_XMMV_M64bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_XMM1_XMMV_M64bcst128_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEQB xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W1 CE /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEQB_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VGF2P8AFFINEQB ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.W1 CE /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8AFFINEQB_YMM1_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_YMM1_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEQB ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F3A.W1 CE /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEQB_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VGF2P8AFFINEQB ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.W1 CE /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8AFFINEQB_YMM1_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_YMM1_YMMV_M256_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEQB ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F3A.W1 CE /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEQB_YMM1_YMMV_M64bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_YMM1_YMMV_M64bcst256_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEQB ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F3A.W1 CE /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEQB_ZMM1_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_ZMM1_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEQB zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F3A.W1 CE /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEQB_ZMM1_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_ZMM1_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEQB zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F3A.W1 CE /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8AFFINEQB_ZMM1_ZMMV_M64bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vgf2p8affineqb",
		UID:      "VGF2P8AFFINEQB_ZMM1_ZMMV_M64bcst512_Imm8_EVEX",
		Syntax:   "VGF2P8AFFINEQB zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F3A.W1 CE /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xce},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F GFNI"},
		Tuple:      TupleFull,
	}
	VGF2P8MULB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vgf2p8mulb",
		UID:      "VGF2P8MULB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VGF2P8MULB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.W0 CF /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8MULB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vgf2p8mulb",
		UID:      "VGF2P8MULB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VGF2P8MULB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 CF /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFullMem,
	}
	VGF2P8MULB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vgf2p8mulb",
		UID:      "VGF2P8MULB_XMM1_XMMV_M128_VEX",
		Syntax:   "VGF2P8MULB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.W0 CF /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8MULB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vgf2p8mulb",
		UID:      "VGF2P8MULB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VGF2P8MULB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 CF /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFullMem,
	}
	VGF2P8MULB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vgf2p8mulb",
		UID:      "VGF2P8MULB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VGF2P8MULB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.W0 CF /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8MULB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vgf2p8mulb",
		UID:      "VGF2P8MULB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VGF2P8MULB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 CF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFullMem,
	}
	VGF2P8MULB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vgf2p8mulb",
		UID:      "VGF2P8MULB_YMM1_YMMV_M256_VEX",
		Syntax:   "VGF2P8MULB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.W0 CF /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX GFNI"},
	}
	VGF2P8MULB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vgf2p8mulb",
		UID:      "VGF2P8MULB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VGF2P8MULB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 CF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL GFNI"},
		Tuple:      TupleFullMem,
	}
	VGF2P8MULB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vgf2p8mulb",
		UID:      "VGF2P8MULB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VGF2P8MULB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 CF /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F GFNI"},
		Tuple:      TupleFullMem,
	}
	VGF2P8MULB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vgf2p8mulb",
		UID:      "VGF2P8MULB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VGF2P8MULB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 CF /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xcf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F GFNI"},
		Tuple:      TupleFullMem,
	}
	VHADDPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vhaddpd",
		UID:      "VHADDPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VHADDPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 7C /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHADDPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vhaddpd",
		UID:      "VHADDPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VHADDPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 7C /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHADDPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vhaddpd",
		UID:      "VHADDPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VHADDPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 7C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHADDPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vhaddpd",
		UID:      "VHADDPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VHADDPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 7C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHADDPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vhaddps",
		UID:      "VHADDPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VHADDPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG 7C /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHADDPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vhaddps",
		UID:      "VHADDPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VHADDPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG 7C /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHADDPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vhaddps",
		UID:      "VHADDPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VHADDPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG 7C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHADDPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vhaddps",
		UID:      "VHADDPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VHADDPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG 7C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHSUBPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vhsubpd",
		UID:      "VHSUBPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VHSUBPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 7D /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHSUBPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vhsubpd",
		UID:      "VHSUBPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VHSUBPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 7D /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHSUBPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vhsubpd",
		UID:      "VHSUBPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VHSUBPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 7D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHSUBPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vhsubpd",
		UID:      "VHSUBPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VHSUBPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 7D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHSUBPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vhsubps",
		UID:      "VHSUBPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VHSUBPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG 7D /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHSUBPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vhsubps",
		UID:      "VHSUBPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VHSUBPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG 7D /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHSUBPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vhsubps",
		UID:      "VHSUBPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VHSUBPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG 7D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VHSUBPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vhsubps",
		UID:      "VHSUBPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VHSUBPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG 7D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VINSERTPS_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vinsertps",
		UID:      "VINSERTPS_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VINSERTPS xmm1, xmmV, xmm2/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 21 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VINSERTPS_XMM1_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vinsertps",
		UID:      "VINSERTPS_XMM1_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VINSERTPS xmm1, xmmV, xmm2/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W0 21 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VINSERTPS_XMM1_XMMV_M32_Imm8_VEX = &Instruction{
		Mnemonic: "vinsertps",
		UID:      "VINSERTPS_XMM1_XMMV_M32_Imm8_VEX",
		Syntax:   "VINSERTPS xmm1, xmmV, xmm2/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 21 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VINSERTPS_XMM1_XMMV_M32_Imm8_EVEX = &Instruction{
		Mnemonic: "vinsertps",
		UID:      "VINSERTPS_XMM1_XMMV_M32_Imm8_EVEX",
		Syntax:   "VINSERTPS xmm1, xmmV, xmm2/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W0 21 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VLDDQU_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vlddqu",
		UID:      "VLDDQU_XMM1_M128_VEX",
		Syntax:   "VLDDQU xmm1, m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG F0 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VLDDQU_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vlddqu",
		UID:      "VLDDQU_YMM1_M256_VEX",
		Syntax:   "VLDDQU ymm1, m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG F0 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VLDMXCSR_M32_VEX = &Instruction{
		Mnemonic: "vldmxcsr",
		UID:      "VLDMXCSR_M32_VEX",
		Syntax:   "VLDMXCSR m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F.WIG AE /2",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xae},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMASKMOVDQU_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmaskmovdqu",
		UID:      "VMASKMOVDQU_XMM1_XMM2_VEX",
		Syntax:   "VMASKMOVDQU xmm1, xmm2",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F7 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMAXPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMAXPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5F /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMAXPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMAXPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VMAXPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5F /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMAXPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VMAXPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VMAXPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VMAXPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMAXPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VMAXPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VMAXPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMAXPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VMAXPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VMAXPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VMAXPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VMAXPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vmaxpd",
		UID:      "VMAXPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VMAXPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMAXPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5F /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMAXPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMAXPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5F /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VMAXPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5F /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMAXPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VMAXPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5F /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VMAXPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5F /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VMAXPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5F /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMAXPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VMAXPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5F /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VMAXPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5F /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMAXPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VMAXPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5F /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VMAXPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5F /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VMAXPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5F /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VMAXPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5F /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vmaxps",
		UID:      "VMAXPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VMAXPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5F /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMAXSD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmaxsd",
		UID:      "VMAXSD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMAXSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 5F /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMAXSD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmaxsd",
		UID:      "VMAXSD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMAXSD xmm1 {k1}{z}, xmmV, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 5F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMAXSD_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vmaxsd",
		UID:      "VMAXSD_XMM1_XMMV_M64_VEX",
		Syntax:   "VMAXSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 5F /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMAXSD_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vmaxsd",
		UID:      "VMAXSD_XMM1_XMMV_M64_EVEX",
		Syntax:   "VMAXSD xmm1 {k1}{z}, xmmV, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 5F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMAXSS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmaxss",
		UID:      "VMAXSS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMAXSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 5F /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMAXSS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmaxss",
		UID:      "VMAXSS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMAXSS xmm1 {k1}{z}, xmmV, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 5F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMAXSS_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vmaxss",
		UID:      "VMAXSS_XMM1_XMMV_M32_VEX",
		Syntax:   "VMAXSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 5F /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMAXSS_XMM1_XMMV_M32_EVEX = &Instruction{
		Mnemonic: "vmaxss",
		UID:      "VMAXSS_XMM1_XMMV_M32_EVEX",
		Syntax:   "VMAXSS xmm1 {k1}{z}, xmmV, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 5F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMCALL = &Instruction{
		Mnemonic: "vmcall",
		UID:      "VMCALL",
		Syntax:   "VMCALL",
		Encoding: &Encoding{
			Syntax: "0F 01 C1",
			Opcode: []byte{0x0f, 0x01, 0xc1},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	VMCLEAR_M64 = &Instruction{
		Mnemonic: "vmclear",
		UID:      "VMCLEAR_M64",
		Syntax:   "VMCLEAR m64",
		Encoding: &Encoding{
			Syntax:            "66 0F C7 /6",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0xc7},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	VMINPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMINPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5D /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMINPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMINPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VMINPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5D /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMINPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VMINPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VMINPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VMINPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMINPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VMINPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VMINPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMINPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VMINPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VMINPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VMINPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VMINPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vminpd",
		UID:      "VMINPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VMINPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMINPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5D /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMINPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMINPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5D /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VMINPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5D /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMINPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VMINPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5D /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VMINPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5D /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VMINPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5D /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMINPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VMINPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5D /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VMINPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5D /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMINPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VMINPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5D /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VMINPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5D /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VMINPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5D /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VMINPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5D /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMINPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vminps",
		UID:      "VMINPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VMINPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5D /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMINSD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vminsd",
		UID:      "VMINSD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMINSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 5D /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMINSD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vminsd",
		UID:      "VMINSD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMINSD xmm1 {k1}{z}, xmmV, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 5D /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMINSD_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vminsd",
		UID:      "VMINSD_XMM1_XMMV_M64_VEX",
		Syntax:   "VMINSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 5D /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMINSD_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vminsd",
		UID:      "VMINSD_XMM1_XMMV_M64_EVEX",
		Syntax:   "VMINSD xmm1 {k1}{z}, xmmV, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 5D /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMINSS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vminss",
		UID:      "VMINSS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMINSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 5D /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMINSS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vminss",
		UID:      "VMINSS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMINSS xmm1 {k1}{z}, xmmV, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 5D /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMINSS_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vminss",
		UID:      "VMINSS_XMM1_XMMV_M32_VEX",
		Syntax:   "VMINSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 5D /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMINSS_XMM1_XMMV_M32_EVEX = &Instruction{
		Mnemonic: "vminss",
		UID:      "VMINSS_XMM1_XMMV_M32_EVEX",
		Syntax:   "VMINSS xmm1 {k1}{z}, xmmV, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 5D /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Suppress:  true,
			Opcode:    []byte{0x5d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMLAUNCH = &Instruction{
		Mnemonic: "vmlaunch",
		UID:      "VMLAUNCH",
		Syntax:   "VMLAUNCH",
		Encoding: &Encoding{
			Syntax: "0F 01 C2",
			Opcode: []byte{0x0f, 0x01, 0xc2},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	VMLOAD_EAX = &Instruction{
		Mnemonic: "vmload",
		UID:      "VMLOAD_EAX",
		Syntax:   "VMLOAD EAX",
		Encoding: &Encoding{
			Syntax: "0F 01 DA",
			Opcode: []byte{0x0f, 0x01, 0xda},
		},
		Parameters:  []*Parameter{ParamEAX},
		Mode16:      false,
		Mode32:      true,
		Mode64:      false,
		AddressSize: true,
	}
	VMLOAD_RAX = &Instruction{
		Mnemonic: "vmload",
		UID:      "VMLOAD_RAX",
		Syntax:   "VMLOAD RAX",
		Encoding: &Encoding{
			Syntax: "0F 01 DA",
			Opcode: []byte{0x0f, 0x01, 0xda},
		},
		Parameters:  []*Parameter{ParamRAX},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		AddressSize: true,
	}
	VMMCALL = &Instruction{
		Mnemonic: "vmmcall",
		UID:      "VMMCALL",
		Syntax:   "VMMCALL",
		Encoding: &Encoding{
			Syntax: "0F 01 D9",
			Opcode: []byte{0x0f, 0x01, 0xd9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	VMOVAPD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_XMM1_XMM2_VEX",
		Syntax:   "VMOVAPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 28 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_XMM1_XMM2_EVEX",
		Syntax:   "VMOVAPD xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 28 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_XMM1_M128_VEX",
		Syntax:   "VMOVAPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 28 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPD_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_XMM1_M128_EVEX",
		Syntax:   "VMOVAPD xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 28 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_YMM1_YMM2_VEX",
		Syntax:   "VMOVAPD ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 28 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPD_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_YMM1_YMM2_EVEX",
		Syntax:   "VMOVAPD ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 28 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_YMM1_M256_VEX",
		Syntax:   "VMOVAPD ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 28 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPD_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_YMM1_M256_EVEX",
		Syntax:   "VMOVAPD ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 28 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVAPD zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 28 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_ZMM1_M512_EVEX",
		Syntax:   "VMOVAPD zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 28 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_XMM2_XMM1_VEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_XMM2_XMM1_VEX",
		Syntax:   "VMOVAPD xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 29 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPD_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_XMM2_XMM1_EVEX",
		Syntax:   "VMOVAPD xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 29 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_YMM2_YMM1_VEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_YMM2_YMM1_VEX",
		Syntax:   "VMOVAPD ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 29 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPD_YMM2_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_YMM2_YMM1_EVEX",
		Syntax:   "VMOVAPD ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 29 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_ZMM2_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_ZMM2_ZMM1_EVEX",
		Syntax:   "VMOVAPD zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 29 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM2, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_M128_XMM1_VEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_M128_XMM1_VEX",
		Syntax:   "VMOVAPD xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 29 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPD_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_M128_XMM1_EVEX",
		Syntax:   "VMOVAPD xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 29 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_M256_YMM1_VEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_M256_YMM1_VEX",
		Syntax:   "VMOVAPD ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 29 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPD_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_M256_YMM1_EVEX",
		Syntax:   "VMOVAPD ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 29 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPD_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovapd",
		UID:      "VMOVAPD_M512_ZMM1_EVEX",
		Syntax:   "VMOVAPD zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 29 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_XMM1_XMM2_VEX",
		Syntax:   "VMOVAPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 28 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPS_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_XMM1_XMM2_EVEX",
		Syntax:   "VMOVAPS xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 28 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_XMM1_M128_VEX",
		Syntax:   "VMOVAPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 28 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPS_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_XMM1_M128_EVEX",
		Syntax:   "VMOVAPS xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 28 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_YMM1_YMM2_VEX",
		Syntax:   "VMOVAPS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 28 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPS_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_YMM1_YMM2_EVEX",
		Syntax:   "VMOVAPS ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 28 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_YMM1_M256_VEX",
		Syntax:   "VMOVAPS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 28 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPS_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_YMM1_M256_EVEX",
		Syntax:   "VMOVAPS ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 28 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVAPS zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 28 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_ZMM1_M512_EVEX",
		Syntax:   "VMOVAPS zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 28 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_XMM2_XMM1_VEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_XMM2_XMM1_VEX",
		Syntax:   "VMOVAPS xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 29 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPS_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_XMM2_XMM1_EVEX",
		Syntax:   "VMOVAPS xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 29 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_YMM2_YMM1_VEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_YMM2_YMM1_VEX",
		Syntax:   "VMOVAPS ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 29 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPS_YMM2_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_YMM2_YMM1_EVEX",
		Syntax:   "VMOVAPS ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 29 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_ZMM2_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_ZMM2_ZMM1_EVEX",
		Syntax:   "VMOVAPS zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 29 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM2, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_M128_XMM1_VEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_M128_XMM1_VEX",
		Syntax:   "VMOVAPS xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 29 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPS_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_M128_XMM1_EVEX",
		Syntax:   "VMOVAPS xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 29 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_M256_YMM1_VEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_M256_YMM1_VEX",
		Syntax:   "VMOVAPS ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 29 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVAPS_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_M256_YMM1_EVEX",
		Syntax:   "VMOVAPS ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 29 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVAPS_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovaps",
		UID:      "VMOVAPS_M512_ZMM1_EVEX",
		Syntax:   "VMOVAPS zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 29 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVD_XMM1_Rmr32_VEX = &Instruction{
		Mnemonic: "vmovd",
		UID:      "VMOVD_XMM1_Rmr32_VEX",
		Syntax:   "VMOVD xmm1, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.W0 6E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMOVD_XMM1_Rmr32_EVEX = &Instruction{
		Mnemonic: "vmovd",
		UID:      "VMOVD_XMM1_Rmr32_EVEX",
		Syntax:   "VMOVD xmm1, r/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 6E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x6e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMOVD_XMM1_M32_VEX = &Instruction{
		Mnemonic: "vmovd",
		UID:      "VMOVD_XMM1_M32_VEX",
		Syntax:   "VMOVD xmm1, r/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.W0 6E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMOVD_XMM1_M32_EVEX = &Instruction{
		Mnemonic: "vmovd",
		UID:      "VMOVD_XMM1_M32_EVEX",
		Syntax:   "VMOVD xmm1, r/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 6E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x6e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMOVD_Rmr32_XMM1_VEX = &Instruction{
		Mnemonic: "vmovd",
		UID:      "VMOVD_Rmr32_XMM1_VEX",
		Syntax:   "VMOVD r/m32, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.W0 7E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMOVD_Rmr32_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovd",
		UID:      "VMOVD_Rmr32_XMM1_EVEX",
		Syntax:   "VMOVD r/m32, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 7E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x7e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMOVD_M32_XMM1_VEX = &Instruction{
		Mnemonic: "vmovd",
		UID:      "VMOVD_M32_XMM1_VEX",
		Syntax:   "VMOVD r/m32, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.W0 7E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMOVD_M32_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovd",
		UID:      "VMOVD_M32_XMM1_EVEX",
		Syntax:   "VMOVD r/m32, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 7E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x7e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMOVDDUP_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmovddup",
		UID:      "VMOVDDUP_XMM1_XMM2_VEX",
		Syntax:   "VMOVDDUP xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG 12 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDDUP_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovddup",
		UID:      "VMOVDDUP_XMM1_XMM2_EVEX",
		Syntax:   "VMOVDDUP xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W1 12 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMOVDDUP,
	}
	VMOVDDUP_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vmovddup",
		UID:      "VMOVDDUP_XMM1_M64_VEX",
		Syntax:   "VMOVDDUP xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG 12 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDDUP_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vmovddup",
		UID:      "VMOVDDUP_XMM1_M64_EVEX",
		Syntax:   "VMOVDDUP xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W1 12 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMOVDDUP,
	}
	VMOVDDUP_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vmovddup",
		UID:      "VMOVDDUP_YMM1_YMM2_VEX",
		Syntax:   "VMOVDDUP ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG 12 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDDUP_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovddup",
		UID:      "VMOVDDUP_YMM1_YMM2_EVEX",
		Syntax:   "VMOVDDUP ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W1 12 /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMOVDDUP,
	}
	VMOVDDUP_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vmovddup",
		UID:      "VMOVDDUP_YMM1_M256_VEX",
		Syntax:   "VMOVDDUP ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG 12 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDDUP_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovddup",
		UID:      "VMOVDDUP_YMM1_M256_EVEX",
		Syntax:   "VMOVDDUP ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W1 12 /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMOVDDUP,
	}
	VMOVDDUP_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovddup",
		UID:      "VMOVDDUP_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVDDUP zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W1 12 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMOVDDUP,
	}
	VMOVDDUP_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovddup",
		UID:      "VMOVDDUP_ZMM1_M512_EVEX",
		Syntax:   "VMOVDDUP zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W1 12 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMOVDDUP,
	}
	VMOVDQA_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmovdqa",
		UID:      "VMOVDQA_XMM1_XMM2_VEX",
		Syntax:   "VMOVDQA xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 6F /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQA_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vmovdqa",
		UID:      "VMOVDQA_XMM1_M128_VEX",
		Syntax:   "VMOVDQA xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 6F /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQA_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vmovdqa",
		UID:      "VMOVDQA_YMM1_YMM2_VEX",
		Syntax:   "VMOVDQA ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 6F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQA_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vmovdqa",
		UID:      "VMOVDQA_YMM1_M256_VEX",
		Syntax:   "VMOVDQA ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 6F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQA_XMM2_XMM1_VEX = &Instruction{
		Mnemonic: "vmovdqa",
		UID:      "VMOVDQA_XMM2_XMM1_VEX",
		Syntax:   "VMOVDQA xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 7F /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQA_YMM2_YMM1_VEX = &Instruction{
		Mnemonic: "vmovdqa",
		UID:      "VMOVDQA_YMM2_YMM1_VEX",
		Syntax:   "VMOVDQA ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 7F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQA_M128_XMM1_VEX = &Instruction{
		Mnemonic: "vmovdqa",
		UID:      "VMOVDQA_M128_XMM1_VEX",
		Syntax:   "VMOVDQA xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 7F /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQA_M256_YMM1_VEX = &Instruction{
		Mnemonic: "vmovdqa",
		UID:      "VMOVDQA_M256_YMM1_VEX",
		Syntax:   "VMOVDQA ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 7F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQA32_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_XMM1_XMM2_EVEX",
		Syntax:   "VMOVDQA32 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 6F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_XMM1_M128_EVEX",
		Syntax:   "VMOVDQA32 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 6F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_YMM1_YMM2_EVEX",
		Syntax:   "VMOVDQA32 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 6F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_YMM1_M256_EVEX",
		Syntax:   "VMOVDQA32 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 6F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVDQA32 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 6F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_ZMM1_M512_EVEX",
		Syntax:   "VMOVDQA32 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 6F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_XMM2_XMM1_EVEX",
		Syntax:   "VMOVDQA32 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 7F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_YMM2_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_YMM2_YMM1_EVEX",
		Syntax:   "VMOVDQA32 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 7F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_ZMM2_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_ZMM2_ZMM1_EVEX",
		Syntax:   "VMOVDQA32 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 7F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM2, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_M128_XMM1_EVEX",
		Syntax:   "VMOVDQA32 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 7F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_M256_YMM1_EVEX",
		Syntax:   "VMOVDQA32 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 7F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA32_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa32",
		UID:      "VMOVDQA32_M512_ZMM1_EVEX",
		Syntax:   "VMOVDQA32 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 7F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_XMM1_XMM2_EVEX",
		Syntax:   "VMOVDQA64 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 6F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_XMM1_M128_EVEX",
		Syntax:   "VMOVDQA64 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 6F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_YMM1_YMM2_EVEX",
		Syntax:   "VMOVDQA64 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 6F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_YMM1_M256_EVEX",
		Syntax:   "VMOVDQA64 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 6F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVDQA64 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 6F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_ZMM1_M512_EVEX",
		Syntax:   "VMOVDQA64 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 6F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_XMM2_XMM1_EVEX",
		Syntax:   "VMOVDQA64 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 7F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_YMM2_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_YMM2_YMM1_EVEX",
		Syntax:   "VMOVDQA64 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 7F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_ZMM2_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_ZMM2_ZMM1_EVEX",
		Syntax:   "VMOVDQA64 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 7F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM2, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_M128_XMM1_EVEX",
		Syntax:   "VMOVDQA64 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 7F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_M256_YMM1_EVEX",
		Syntax:   "VMOVDQA64 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 7F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQA64_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqa64",
		UID:      "VMOVDQA64_M512_ZMM1_EVEX",
		Syntax:   "VMOVDQA64 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 7F /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmovdqu",
		UID:      "VMOVDQU_XMM1_XMM2_VEX",
		Syntax:   "VMOVDQU xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 6F /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQU_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vmovdqu",
		UID:      "VMOVDQU_XMM1_M128_VEX",
		Syntax:   "VMOVDQU xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 6F /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQU_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vmovdqu",
		UID:      "VMOVDQU_YMM1_YMM2_VEX",
		Syntax:   "VMOVDQU ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 6F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQU_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vmovdqu",
		UID:      "VMOVDQU_YMM1_M256_VEX",
		Syntax:   "VMOVDQU ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 6F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQU_XMM2_XMM1_VEX = &Instruction{
		Mnemonic: "vmovdqu",
		UID:      "VMOVDQU_XMM2_XMM1_VEX",
		Syntax:   "VMOVDQU xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 7F /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQU_YMM2_YMM1_VEX = &Instruction{
		Mnemonic: "vmovdqu",
		UID:      "VMOVDQU_YMM2_YMM1_VEX",
		Syntax:   "VMOVDQU ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 7F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQU_M128_XMM1_VEX = &Instruction{
		Mnemonic: "vmovdqu",
		UID:      "VMOVDQU_M128_XMM1_VEX",
		Syntax:   "VMOVDQU xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 7F /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQU_M256_YMM1_VEX = &Instruction{
		Mnemonic: "vmovdqu",
		UID:      "VMOVDQU_M256_YMM1_VEX",
		Syntax:   "VMOVDQU ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 7F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVDQU16_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_XMM1_XMM2_EVEX",
		Syntax:   "VMOVDQU16 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W1 6F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_XMM1_M128_EVEX",
		Syntax:   "VMOVDQU16 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W1 6F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_YMM1_YMM2_EVEX",
		Syntax:   "VMOVDQU16 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W1 6F /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_YMM1_M256_EVEX",
		Syntax:   "VMOVDQU16 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W1 6F /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVDQU16 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W1 6F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_ZMM1_M512_EVEX",
		Syntax:   "VMOVDQU16 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W1 6F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_XMM2_XMM1_EVEX",
		Syntax:   "VMOVDQU16 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W1 7F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_YMM2_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_YMM2_YMM1_EVEX",
		Syntax:   "VMOVDQU16 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W1 7F /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_ZMM2_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_ZMM2_ZMM1_EVEX",
		Syntax:   "VMOVDQU16 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W1 7F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM2, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_M128_XMM1_EVEX",
		Syntax:   "VMOVDQU16 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W1 7F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_M256_YMM1_EVEX",
		Syntax:   "VMOVDQU16 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W1 7F /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU16_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu16",
		UID:      "VMOVDQU16_M512_ZMM1_EVEX",
		Syntax:   "VMOVDQU16 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W1 7F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_XMM1_XMM2_EVEX",
		Syntax:   "VMOVDQU32 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 6F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_XMM1_M128_EVEX",
		Syntax:   "VMOVDQU32 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 6F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_YMM1_YMM2_EVEX",
		Syntax:   "VMOVDQU32 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 6F /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_YMM1_M256_EVEX",
		Syntax:   "VMOVDQU32 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 6F /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVDQU32 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 6F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_ZMM1_M512_EVEX",
		Syntax:   "VMOVDQU32 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 6F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_XMM2_XMM1_EVEX",
		Syntax:   "VMOVDQU32 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 7F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_YMM2_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_YMM2_YMM1_EVEX",
		Syntax:   "VMOVDQU32 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 7F /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_ZMM2_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_ZMM2_ZMM1_EVEX",
		Syntax:   "VMOVDQU32 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 7F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM2, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_M128_XMM1_EVEX",
		Syntax:   "VMOVDQU32 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 7F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_M256_YMM1_EVEX",
		Syntax:   "VMOVDQU32 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 7F /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU32_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu32",
		UID:      "VMOVDQU32_M512_ZMM1_EVEX",
		Syntax:   "VMOVDQU32 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 7F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_XMM1_XMM2_EVEX",
		Syntax:   "VMOVDQU64 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W1 6F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_XMM1_M128_EVEX",
		Syntax:   "VMOVDQU64 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W1 6F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_YMM1_YMM2_EVEX",
		Syntax:   "VMOVDQU64 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W1 6F /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_YMM1_M256_EVEX",
		Syntax:   "VMOVDQU64 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W1 6F /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVDQU64 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W1 6F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_ZMM1_M512_EVEX",
		Syntax:   "VMOVDQU64 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W1 6F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_XMM2_XMM1_EVEX",
		Syntax:   "VMOVDQU64 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W1 7F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_YMM2_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_YMM2_YMM1_EVEX",
		Syntax:   "VMOVDQU64 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W1 7F /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_ZMM2_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_ZMM2_ZMM1_EVEX",
		Syntax:   "VMOVDQU64 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W1 7F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM2, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_M128_XMM1_EVEX",
		Syntax:   "VMOVDQU64 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W1 7F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_M256_YMM1_EVEX",
		Syntax:   "VMOVDQU64 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W1 7F /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU64_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu64",
		UID:      "VMOVDQU64_M512_ZMM1_EVEX",
		Syntax:   "VMOVDQU64 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W1 7F /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_XMM1_XMM2_EVEX",
		Syntax:   "VMOVDQU8 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W0 6F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_XMM1_M128_EVEX",
		Syntax:   "VMOVDQU8 xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W0 6F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_YMM1_YMM2_EVEX",
		Syntax:   "VMOVDQU8 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W0 6F /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_YMM1_M256_EVEX",
		Syntax:   "VMOVDQU8 ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W0 6F /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVDQU8 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W0 6F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_ZMM1_M512_EVEX",
		Syntax:   "VMOVDQU8 zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W0 6F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_XMM2_XMM1_EVEX",
		Syntax:   "VMOVDQU8 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W0 7F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_YMM2_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_YMM2_YMM1_EVEX",
		Syntax:   "VMOVDQU8 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W0 7F /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_ZMM2_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_ZMM2_ZMM1_EVEX",
		Syntax:   "VMOVDQU8 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W0 7F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM2, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_M128_XMM1_EVEX",
		Syntax:   "VMOVDQU8 xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.W0 7F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_M256_YMM1_EVEX",
		Syntax:   "VMOVDQU8 ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.W0 7F /r",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVDQU8_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovdqu8",
		UID:      "VMOVDQU8_M512_ZMM1_EVEX",
		Syntax:   "VMOVDQU8 zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.W0 7F /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x7f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VMOVHLPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmovhlps",
		UID:      "VMOVHLPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMOVHLPS xmm1, xmmV, xmm2",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 12 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVHLPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovhlps",
		UID:      "VMOVHLPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMOVHLPS xmm1, xmmV, xmm2",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 12 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	VMOVHPD_M64_XMM1_VEX = &Instruction{
		Mnemonic: "vmovhpd",
		UID:      "VMOVHPD_M64_XMM1_VEX",
		Syntax:   "VMOVHPD m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 17 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVHPD_M64_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovhpd",
		UID:      "VMOVHPD_M64_XMM1_EVEX",
		Syntax:   "VMOVHPD m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 17 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVHPD_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vmovhpd",
		UID:      "VMOVHPD_XMM1_XMMV_M64_VEX",
		Syntax:   "VMOVHPD xmm1, xmmV, m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 16 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVHPD_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vmovhpd",
		UID:      "VMOVHPD_XMM1_XMMV_M64_EVEX",
		Syntax:   "VMOVHPD xmm1, xmmV, m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 16 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVHPS_M64_XMM1_VEX = &Instruction{
		Mnemonic: "vmovhps",
		UID:      "VMOVHPS_M64_XMM1_VEX",
		Syntax:   "VMOVHPS m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 17 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVHPS_M64_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovhps",
		UID:      "VMOVHPS_M64_XMM1_EVEX",
		Syntax:   "VMOVHPS m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 17 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      Tuple2,
	}
	VMOVHPS_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vmovhps",
		UID:      "VMOVHPS_XMM1_XMMV_M64_VEX",
		Syntax:   "VMOVHPS xmm1, xmmV, m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 16 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVHPS_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vmovhps",
		UID:      "VMOVHPS_XMM1_XMMV_M64_EVEX",
		Syntax:   "VMOVHPS xmm1, xmmV, m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 16 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      Tuple2,
	}
	VMOVLHPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmovlhps",
		UID:      "VMOVLHPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMOVLHPS xmm1, xmmV, xmm2",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 16 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVLHPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovlhps",
		UID:      "VMOVLHPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMOVLHPS xmm1, xmmV, xmm2",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 16 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
	}
	VMOVLPD_M64_XMM1_VEX = &Instruction{
		Mnemonic: "vmovlpd",
		UID:      "VMOVLPD_M64_XMM1_VEX",
		Syntax:   "VMOVLPD m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 13 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x13},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVLPD_M64_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovlpd",
		UID:      "VMOVLPD_M64_XMM1_EVEX",
		Syntax:   "VMOVLPD m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 13 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x13},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVLPD_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vmovlpd",
		UID:      "VMOVLPD_XMM1_XMMV_M64_VEX",
		Syntax:   "VMOVLPD xmm1, xmmV, m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 12 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVLPD_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vmovlpd",
		UID:      "VMOVLPD_XMM1_XMMV_M64_EVEX",
		Syntax:   "VMOVLPD xmm1, xmmV, m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 12 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVLPS_M64_XMM1_VEX = &Instruction{
		Mnemonic: "vmovlps",
		UID:      "VMOVLPS_M64_XMM1_VEX",
		Syntax:   "VMOVLPS m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 13 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x13},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVLPS_M64_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovlps",
		UID:      "VMOVLPS_M64_XMM1_EVEX",
		Syntax:   "VMOVLPS m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 13 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x13},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      Tuple2,
	}
	VMOVLPS_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vmovlps",
		UID:      "VMOVLPS_XMM1_XMMV_M64_VEX",
		Syntax:   "VMOVLPS xmm1, xmmV, m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 12 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVLPS_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vmovlps",
		UID:      "VMOVLPS_XMM1_XMMV_M64_EVEX",
		Syntax:   "VMOVLPS xmm1, xmmV, m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 12 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      Tuple2,
	}
	VMOVMSKPD_R32_XMM2_VEX = &Instruction{
		Mnemonic: "vmovmskpd",
		UID:      "VMOVMSKPD_R32_XMM2_VEX",
		Syntax:   "VMOVMSKPD r32, xmm2",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 50 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x50},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVMSKPD_R32_YMM2_VEX = &Instruction{
		Mnemonic: "vmovmskpd",
		UID:      "VMOVMSKPD_R32_YMM2_VEX",
		Syntax:   "VMOVMSKPD r32, ymm2",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 50 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x50},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVMSKPS_R32_XMM2_VEX = &Instruction{
		Mnemonic: "vmovmskps",
		UID:      "VMOVMSKPS_R32_XMM2_VEX",
		Syntax:   "VMOVMSKPS r32, xmm2",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 50 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x50},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVMSKPS_R32_YMM2_VEX = &Instruction{
		Mnemonic: "vmovmskps",
		UID:      "VMOVMSKPS_R32_YMM2_VEX",
		Syntax:   "VMOVMSKPS r32, ymm2",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 50 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x50},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVNTDQ_M128_XMM1_VEX = &Instruction{
		Mnemonic: "vmovntdq",
		UID:      "VMOVNTDQ_M128_XMM1_VEX",
		Syntax:   "VMOVNTDQ m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E7 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVNTDQ_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovntdq",
		UID:      "VMOVNTDQ_M128_XMM1_EVEX",
		Syntax:   "VMOVNTDQ m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 E7 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xe7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTDQ_M256_YMM1_VEX = &Instruction{
		Mnemonic: "vmovntdq",
		UID:      "VMOVNTDQ_M256_YMM1_VEX",
		Syntax:   "VMOVNTDQ m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E7 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVNTDQ_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovntdq",
		UID:      "VMOVNTDQ_M256_YMM1_EVEX",
		Syntax:   "VMOVNTDQ m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 E7 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xe7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTDQ_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovntdq",
		UID:      "VMOVNTDQ_M512_ZMM1_EVEX",
		Syntax:   "VMOVNTDQ m512, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 E7 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xe7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTDQA_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vmovntdqa",
		UID:      "VMOVNTDQA_XMM1_M128_VEX",
		Syntax:   "VMOVNTDQA xmm1, m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 2A /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVNTDQA_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovntdqa",
		UID:      "VMOVNTDQA_XMM1_M128_EVEX",
		Syntax:   "VMOVNTDQA xmm1, m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 2A /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTDQA_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vmovntdqa",
		UID:      "VMOVNTDQA_YMM1_M256_VEX",
		Syntax:   "VMOVNTDQA ymm1, m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 2A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VMOVNTDQA_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovntdqa",
		UID:      "VMOVNTDQA_YMM1_M256_EVEX",
		Syntax:   "VMOVNTDQA ymm1, m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 2A /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTDQA_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovntdqa",
		UID:      "VMOVNTDQA_ZMM1_M512_EVEX",
		Syntax:   "VMOVNTDQA zmm1, m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 2A /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x2a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTPD_M128_XMM1_VEX = &Instruction{
		Mnemonic: "vmovntpd",
		UID:      "VMOVNTPD_M128_XMM1_VEX",
		Syntax:   "VMOVNTPD m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 2B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVNTPD_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovntpd",
		UID:      "VMOVNTPD_M128_XMM1_EVEX",
		Syntax:   "VMOVNTPD m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 2B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTPD_M256_YMM1_VEX = &Instruction{
		Mnemonic: "vmovntpd",
		UID:      "VMOVNTPD_M256_YMM1_VEX",
		Syntax:   "VMOVNTPD m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 2B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVNTPD_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovntpd",
		UID:      "VMOVNTPD_M256_YMM1_EVEX",
		Syntax:   "VMOVNTPD m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 2B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTPD_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovntpd",
		UID:      "VMOVNTPD_M512_ZMM1_EVEX",
		Syntax:   "VMOVNTPD m512, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 2B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTPS_M128_XMM1_VEX = &Instruction{
		Mnemonic: "vmovntps",
		UID:      "VMOVNTPS_M128_XMM1_VEX",
		Syntax:   "VMOVNTPS m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 2B /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVNTPS_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovntps",
		UID:      "VMOVNTPS_M128_XMM1_EVEX",
		Syntax:   "VMOVNTPS m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 2B /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTPS_M256_YMM1_VEX = &Instruction{
		Mnemonic: "vmovntps",
		UID:      "VMOVNTPS_M256_YMM1_VEX",
		Syntax:   "VMOVNTPS m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 2B /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVNTPS_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovntps",
		UID:      "VMOVNTPS_M256_YMM1_EVEX",
		Syntax:   "VMOVNTPS m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 2B /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVNTPS_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovntps",
		UID:      "VMOVNTPS_M512_ZMM1_EVEX",
		Syntax:   "VMOVNTPS m512, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 2B /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVQ_XMM1_Rmr64_VEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_XMM1_Rmr64_VEX",
		Syntax:   "VMOVQ xmm1, rmr64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.W1 6E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x6e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVQ_XMM1_Rmr64_EVEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_XMM1_Rmr64_EVEX",
		Syntax:   "VMOVQ xmm1, rmr64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 6E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x6e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_XMM1_XMM2_VEX",
		Syntax:   "VMOVQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 7E /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_XMM1_XMM2_EVEX",
		Syntax:   "VMOVQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W1 7E /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x7e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVQ_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_XMM1_M64_VEX",
		Syntax:   "VMOVQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 7E /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x7e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVQ_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_XMM1_M64_EVEX",
		Syntax:   "VMOVQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W1 7E /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x7e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVQ_Rmr64_XMM1_VEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_Rmr64_XMM1_VEX",
		Syntax:   "VMOVQ rmr64, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.W1 7E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			Opcode:    []byte{0x7e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamXMM1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVQ_Rmr64_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_Rmr64_XMM1_EVEX",
		Syntax:   "VMOVQ rmr64, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 7E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x7e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamXMM1},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVQ_XMM2_XMM1_VEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_XMM2_XMM1_VEX",
		Syntax:   "VMOVQ xmm2/m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D6 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVQ_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_XMM2_XMM1_EVEX",
		Syntax:   "VMOVQ xmm2/m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 D6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0xd6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVQ_M64_XMM1_VEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_M64_XMM1_VEX",
		Syntax:   "VMOVQ xmm2/m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D6 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVQ_M64_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovq",
		UID:      "VMOVQ_M64_XMM1_EVEX",
		Syntax:   "VMOVQ xmm2/m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 D6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0xd6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVSD_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vmovsd",
		UID:      "VMOVSD_XMM1_M64_VEX",
		Syntax:   "VMOVSD xmm1, m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 10 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVSD_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vmovsd",
		UID:      "VMOVSD_XMM1_M64_EVEX",
		Syntax:   "VMOVSD xmm1 {k1}{z}, m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 10 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVSD_M64_XMM1_VEX = &Instruction{
		Mnemonic: "vmovsd",
		UID:      "VMOVSD_M64_XMM1_VEX",
		Syntax:   "VMOVSD m64, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 11 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVSD_M64_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovsd",
		UID:      "VMOVSD_M64_XMM1_EVEX",
		Syntax:   "VMOVSD m64 {k1}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 11 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMOVSD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmovsd",
		UID:      "VMOVSD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMOVSD xmm1, xmmV, xmm2",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 10 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVSD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovsd",
		UID:      "VMOVSD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMOVSD xmm1 {k1}{z}, xmmV, xmm2",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 10 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
	}
	VMOVSD_XMM2_XMMV_XMM1_VEX = &Instruction{
		Mnemonic: "vmovsd",
		UID:      "VMOVSD_XMM2_XMMV_XMM1_VEX",
		Syntax:   "VMOVSD xmm2, xmmV, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 11 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMMV, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMOVSD_XMM2_XMMV_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovsd",
		UID:      "VMOVSD_XMM2_XMMV_XMM1_EVEX",
		Syntax:   "VMOVSD xmm2 {k1}{z}, xmmV, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 11 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMMV, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
	}
	VMOVSHDUP_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmovshdup",
		UID:      "VMOVSHDUP_XMM1_XMM2_VEX",
		Syntax:   "VMOVSHDUP xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 16 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVSHDUP_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovshdup",
		UID:      "VMOVSHDUP_XMM1_XMM2_EVEX",
		Syntax:   "VMOVSHDUP xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 16 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSHDUP_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vmovshdup",
		UID:      "VMOVSHDUP_XMM1_M128_VEX",
		Syntax:   "VMOVSHDUP xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 16 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVSHDUP_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovshdup",
		UID:      "VMOVSHDUP_XMM1_M128_EVEX",
		Syntax:   "VMOVSHDUP xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 16 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSHDUP_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vmovshdup",
		UID:      "VMOVSHDUP_YMM1_YMM2_VEX",
		Syntax:   "VMOVSHDUP ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 16 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVSHDUP_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovshdup",
		UID:      "VMOVSHDUP_YMM1_YMM2_EVEX",
		Syntax:   "VMOVSHDUP ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 16 /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSHDUP_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vmovshdup",
		UID:      "VMOVSHDUP_YMM1_M256_VEX",
		Syntax:   "VMOVSHDUP ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 16 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVSHDUP_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovshdup",
		UID:      "VMOVSHDUP_YMM1_M256_EVEX",
		Syntax:   "VMOVSHDUP ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 16 /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSHDUP_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovshdup",
		UID:      "VMOVSHDUP_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVSHDUP zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 16 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSHDUP_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovshdup",
		UID:      "VMOVSHDUP_ZMM1_M512_EVEX",
		Syntax:   "VMOVSHDUP zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 16 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSLDUP_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmovsldup",
		UID:      "VMOVSLDUP_XMM1_XMM2_VEX",
		Syntax:   "VMOVSLDUP xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 12 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVSLDUP_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovsldup",
		UID:      "VMOVSLDUP_XMM1_XMM2_EVEX",
		Syntax:   "VMOVSLDUP xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 12 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSLDUP_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vmovsldup",
		UID:      "VMOVSLDUP_XMM1_M128_VEX",
		Syntax:   "VMOVSLDUP xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 12 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVSLDUP_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovsldup",
		UID:      "VMOVSLDUP_XMM1_M128_EVEX",
		Syntax:   "VMOVSLDUP xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.W0 12 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSLDUP_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vmovsldup",
		UID:      "VMOVSLDUP_YMM1_YMM2_VEX",
		Syntax:   "VMOVSLDUP ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 12 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVSLDUP_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovsldup",
		UID:      "VMOVSLDUP_YMM1_YMM2_EVEX",
		Syntax:   "VMOVSLDUP ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 12 /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSLDUP_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vmovsldup",
		UID:      "VMOVSLDUP_YMM1_M256_VEX",
		Syntax:   "VMOVSLDUP ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 12 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVSLDUP_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovsldup",
		UID:      "VMOVSLDUP_YMM1_M256_EVEX",
		Syntax:   "VMOVSLDUP ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.W0 12 /r",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSLDUP_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovsldup",
		UID:      "VMOVSLDUP_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVSLDUP zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 12 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSLDUP_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovsldup",
		UID:      "VMOVSLDUP_ZMM1_M512_EVEX",
		Syntax:   "VMOVSLDUP zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.W0 12 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x12},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVSS_XMM1_M32_VEX = &Instruction{
		Mnemonic: "vmovss",
		UID:      "VMOVSS_XMM1_M32_VEX",
		Syntax:   "VMOVSS xmm1, m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 10 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMOVSS_XMM1_M32_EVEX = &Instruction{
		Mnemonic: "vmovss",
		UID:      "VMOVSS_XMM1_M32_EVEX",
		Syntax:   "VMOVSS xmm1 {k1}{z}, m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 10 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMOVSS_M32_XMM1_VEX = &Instruction{
		Mnemonic: "vmovss",
		UID:      "VMOVSS_M32_XMM1_VEX",
		Syntax:   "VMOVSS m32, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 11 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMOVSS_M32_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovss",
		UID:      "VMOVSS_M32_XMM1_EVEX",
		Syntax:   "VMOVSS m32 {k1}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 11 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMOVSS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmovss",
		UID:      "VMOVSS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMOVSS xmm1, xmmV, xmm2",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 10 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMOVSS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovss",
		UID:      "VMOVSS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMOVSS xmm1 {k1}{z}, xmmV, xmm2",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 10 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
	}
	VMOVSS_XMM2_XMMV_XMM1_VEX = &Instruction{
		Mnemonic: "vmovss",
		UID:      "VMOVSS_XMM2_XMMV_XMM1_VEX",
		Syntax:   "VMOVSS xmm2, xmmV, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 11 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMMV, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMOVSS_XMM2_XMMV_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovss",
		UID:      "VMOVSS_XMM2_XMMV_XMM1_EVEX",
		Syntax:   "VMOVSS xmm2 {k1}{z}, xmmV, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 11 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMMV, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
	}
	VMOVUPD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_XMM1_XMM2_VEX",
		Syntax:   "VMOVUPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 10 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_XMM1_XMM2_EVEX",
		Syntax:   "VMOVUPD xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 10 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_XMM1_M128_VEX",
		Syntax:   "VMOVUPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 10 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPD_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_XMM1_M128_EVEX",
		Syntax:   "VMOVUPD xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 10 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_YMM1_YMM2_VEX",
		Syntax:   "VMOVUPD ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 10 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPD_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_YMM1_YMM2_EVEX",
		Syntax:   "VMOVUPD ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 10 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_YMM1_M256_VEX",
		Syntax:   "VMOVUPD ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 10 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPD_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_YMM1_M256_EVEX",
		Syntax:   "VMOVUPD ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 10 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVUPD zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 10 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_ZMM1_M512_EVEX",
		Syntax:   "VMOVUPD zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 10 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_XMM2_XMM1_VEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_XMM2_XMM1_VEX",
		Syntax:   "VMOVUPD xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 11 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPD_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_XMM2_XMM1_EVEX",
		Syntax:   "VMOVUPD xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 11 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_YMM2_YMM1_VEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_YMM2_YMM1_VEX",
		Syntax:   "VMOVUPD ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 11 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPD_YMM2_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_YMM2_YMM1_EVEX",
		Syntax:   "VMOVUPD ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 11 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_ZMM2_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_ZMM2_ZMM1_EVEX",
		Syntax:   "VMOVUPD zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 11 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM2, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_M128_XMM1_VEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_M128_XMM1_VEX",
		Syntax:   "VMOVUPD xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 11 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPD_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_M128_XMM1_EVEX",
		Syntax:   "VMOVUPD xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 11 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_M256_YMM1_VEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_M256_YMM1_VEX",
		Syntax:   "VMOVUPD ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 11 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPD_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_M256_YMM1_EVEX",
		Syntax:   "VMOVUPD ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 11 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPD_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovupd",
		UID:      "VMOVUPD_M512_ZMM1_EVEX",
		Syntax:   "VMOVUPD zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 11 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_XMM1_XMM2_VEX",
		Syntax:   "VMOVUPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 10 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPS_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_XMM1_XMM2_EVEX",
		Syntax:   "VMOVUPS xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 10 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_XMM1_M128_VEX",
		Syntax:   "VMOVUPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 10 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPS_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_XMM1_M128_EVEX",
		Syntax:   "VMOVUPS xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 10 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_YMM1_YMM2_VEX",
		Syntax:   "VMOVUPS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 10 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPS_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_YMM1_YMM2_EVEX",
		Syntax:   "VMOVUPS ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 10 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_YMM1_M256_VEX",
		Syntax:   "VMOVUPS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 10 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPS_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_YMM1_M256_EVEX",
		Syntax:   "VMOVUPS ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 10 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_ZMM1_ZMM2_EVEX",
		Syntax:   "VMOVUPS zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 10 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_ZMM1_M512_EVEX",
		Syntax:   "VMOVUPS zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 10 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x10},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_XMM2_XMM1_VEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_XMM2_XMM1_VEX",
		Syntax:   "VMOVUPS xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 11 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPS_XMM2_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_XMM2_XMM1_EVEX",
		Syntax:   "VMOVUPS xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 11 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM2, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_YMM2_YMM1_VEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_YMM2_YMM1_VEX",
		Syntax:   "VMOVUPS ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 11 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPS_YMM2_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_YMM2_YMM1_EVEX",
		Syntax:   "VMOVUPS ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 11 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM2, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_ZMM2_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_ZMM2_ZMM1_EVEX",
		Syntax:   "VMOVUPS zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 11 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM2, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_M128_XMM1_VEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_M128_XMM1_VEX",
		Syntax:   "VMOVUPS xmm2/m128, xmm1",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 11 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPS_M128_XMM1_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_M128_XMM1_EVEX",
		Syntax:   "VMOVUPS xmm2/m128 {k1}{z}, xmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 11 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM128, ParamXMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_M256_YMM1_VEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_M256_YMM1_VEX",
		Syntax:   "VMOVUPS ymm2/m256, ymm1",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 11 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMOVUPS_M256_YMM1_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_M256_YMM1_EVEX",
		Syntax:   "VMOVUPS ymm2/m256 {k1}{z}, ymm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 11 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM256, ParamYMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMOVUPS_M512_ZMM1_EVEX = &Instruction{
		Mnemonic: "vmovups",
		UID:      "VMOVUPS_M512_ZMM1_EVEX",
		Syntax:   "VMOVUPS zmm2/m512 {k1}{z}, zmm1",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 11 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x11},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM512, ParamZMM1},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFullMem,
	}
	VMPSADBW_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vmpsadbw",
		UID:      "VMPSADBW_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VMPSADBW xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 42 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x42},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMPSADBW_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vmpsadbw",
		UID:      "VMPSADBW_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VMPSADBW xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 42 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x42},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMPSADBW_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vmpsadbw",
		UID:      "VMPSADBW_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VMPSADBW ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 42 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x42},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VMPSADBW_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vmpsadbw",
		UID:      "VMPSADBW_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VMPSADBW ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 42 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x42},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VMPTRLD_M64 = &Instruction{
		Mnemonic: "vmptrld",
		UID:      "VMPTRLD_M64",
		Syntax:   "VMPTRLD m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F C7 /6",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	VMPTRST_M64 = &Instruction{
		Mnemonic: "vmptrst",
		UID:      "VMPTRST_M64",
		Syntax:   "VMPTRST m64",
		Encoding: &Encoding{
			Syntax:        "NP 0F C7 /7",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      8,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	VMRESUME = &Instruction{
		Mnemonic: "vmresume",
		UID:      "VMRESUME",
		Syntax:   "VMRESUME",
		Encoding: &Encoding{
			Syntax: "0F 01 C3",
			Opcode: []byte{0x0f, 0x01, 0xc3},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	VMRUN_EAX = &Instruction{
		Mnemonic: "vmrun",
		UID:      "VMRUN_EAX",
		Syntax:   "VMRUN EAX",
		Encoding: &Encoding{
			Syntax: "0F 01 D8",
			Opcode: []byte{0x0f, 0x01, 0xd8},
		},
		Parameters:  []*Parameter{ParamEAX},
		Mode16:      false,
		Mode32:      true,
		Mode64:      false,
		AddressSize: true,
	}
	VMRUN_RAX = &Instruction{
		Mnemonic: "vmrun",
		UID:      "VMRUN_RAX",
		Syntax:   "VMRUN RAX",
		Encoding: &Encoding{
			Syntax: "0F 01 D8",
			Opcode: []byte{0x0f, 0x01, 0xd8},
		},
		Parameters:  []*Parameter{ParamRAX},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		AddressSize: true,
	}
	VMSAVE_EAX = &Instruction{
		Mnemonic: "vmsave",
		UID:      "VMSAVE_EAX",
		Syntax:   "VMSAVE EAX",
		Encoding: &Encoding{
			Syntax: "0F 01 DB",
			Opcode: []byte{0x0f, 0x01, 0xdb},
		},
		Parameters:  []*Parameter{ParamEAX},
		Mode16:      false,
		Mode32:      true,
		Mode64:      false,
		AddressSize: true,
	}
	VMSAVE_RAX = &Instruction{
		Mnemonic: "vmsave",
		UID:      "VMSAVE_RAX",
		Syntax:   "VMSAVE RAX",
		Encoding: &Encoding{
			Syntax: "0F 01 DB",
			Opcode: []byte{0x0f, 0x01, 0xdb},
		},
		Parameters:  []*Parameter{ParamRAX},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		AddressSize: true,
	}
	VMULPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMULPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 59 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMULPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMULPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 59 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VMULPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 59 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMULPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VMULPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 59 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VMULPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 59 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VMULPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 59 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMULPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VMULPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 59 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VMULPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 59 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMULPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VMULPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 59 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VMULPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 59 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VMULPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 59 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VMULPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 59 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vmulpd",
		UID:      "VMULPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VMULPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 59 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMULPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 59 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMULPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMULPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 59 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VMULPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 59 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMULPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VMULPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 59 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VMULPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 59 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VMULPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 59 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMULPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VMULPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 59 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VMULPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 59 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VMULPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VMULPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 59 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VMULPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 59 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VMULPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 59 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VMULPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 59 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMULPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vmulps",
		UID:      "VMULPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VMULPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 59 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VMULSD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmulsd",
		UID:      "VMULSD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMULSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 59 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMULSD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmulsd",
		UID:      "VMULSD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMULSD xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 59 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMULSD_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vmulsd",
		UID:      "VMULSD_XMM1_XMMV_M64_VEX",
		Syntax:   "VMULSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 59 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VMULSD_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vmulsd",
		UID:      "VMULSD_XMM1_XMMV_M64_EVEX",
		Syntax:   "VMULSD xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 59 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VMULSS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vmulss",
		UID:      "VMULSS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VMULSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 59 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMULSS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vmulss",
		UID:      "VMULSS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VMULSS xmm1 {k1}{z}, xmmV, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 59 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMULSS_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vmulss",
		UID:      "VMULSS_XMM1_XMMV_M32_VEX",
		Syntax:   "VMULSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 59 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VMULSS_XMM1_XMMV_M32_EVEX = &Instruction{
		Mnemonic: "vmulss",
		UID:      "VMULSS_XMM1_XMMV_M32_EVEX",
		Syntax:   "VMULSS xmm1 {k1}{z}, xmmV, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 59 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x59},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VMXOFF = &Instruction{
		Mnemonic: "vmxoff",
		UID:      "VMXOFF",
		Syntax:   "VMXOFF",
		Encoding: &Encoding{
			Syntax: "0F 01 C4",
			Opcode: []byte{0x0f, 0x01, 0xc4},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	VMXON_M64 = &Instruction{
		Mnemonic: "vmxon",
		UID:      "VMXON_M64",
		Syntax:   "VMXON m64",
		Encoding: &Encoding{
			Syntax:            "F3 0F C7 /6",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xc7},
			ModRM:             true,
			ModRMreg:          7,
		},
		Parameters: []*Parameter{ParamM64},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
	}
	VORPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VORPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F 56 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VORPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VORPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 56 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VORPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F 56 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VORPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VORPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 56 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VORPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 56 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VORPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F 56 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VORPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VORPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 56 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VORPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F 56 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VORPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VORPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 56 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VORPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 56 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VORPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 56 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VORPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 56 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vorpd",
		UID:      "VORPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VORPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 56 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VORPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F 56 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VORPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VORPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 56 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VORPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F 56 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VORPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VORPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 56 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VORPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 56 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VORPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F 56 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VORPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VORPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 56 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VORPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F 56 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VORPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VORPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 56 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VORPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 56 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VORPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 56 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VORPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 56 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VORPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vorps",
		UID:      "VORPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VORPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 56 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x56},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VPABSB_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpabsb",
		UID:      "VPABSB_XMM1_XMM2_VEX",
		Syntax:   "VPABSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 1C /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPABSB_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpabsb",
		UID:      "VPABSB_XMM1_XMM2_EVEX",
		Syntax:   "VPABSB xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 1C /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSB_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vpabsb",
		UID:      "VPABSB_XMM1_M128_VEX",
		Syntax:   "VPABSB xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 1C /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPABSB_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpabsb",
		UID:      "VPABSB_XMM1_M128_EVEX",
		Syntax:   "VPABSB xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 1C /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSB_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vpabsb",
		UID:      "VPABSB_YMM1_YMM2_VEX",
		Syntax:   "VPABSB ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 1C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPABSB_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vpabsb",
		UID:      "VPABSB_YMM1_YMM2_EVEX",
		Syntax:   "VPABSB ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 1C /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSB_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vpabsb",
		UID:      "VPABSB_YMM1_M256_VEX",
		Syntax:   "VPABSB ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 1C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPABSB_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vpabsb",
		UID:      "VPABSB_YMM1_M256_EVEX",
		Syntax:   "VPABSB ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 1C /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSB_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpabsb",
		UID:      "VPABSB_ZMM1_ZMM2_EVEX",
		Syntax:   "VPABSB zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 1C /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSB_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vpabsb",
		UID:      "VPABSB_ZMM1_M512_EVEX",
		Syntax:   "VPABSB zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 1C /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_XMM1_XMM2_VEX",
		Syntax:   "VPABSD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 1E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPABSD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_XMM1_XMM2_EVEX",
		Syntax:   "VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 1E /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSD_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_XMM1_M128_VEX",
		Syntax:   "VPABSD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 1E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPABSD_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_XMM1_M128_EVEX",
		Syntax:   "VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 1E /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSD_XMM1_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_XMM1_M32bcst128_EVEX",
		Syntax:   "VPABSD xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 1E /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSD_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_YMM1_YMM2_VEX",
		Syntax:   "VPABSD ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 1E /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPABSD_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_YMM1_YMM2_EVEX",
		Syntax:   "VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 1E /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSD_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_YMM1_M256_VEX",
		Syntax:   "VPABSD ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 1E /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPABSD_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_YMM1_M256_EVEX",
		Syntax:   "VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 1E /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSD_YMM1_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_YMM1_M32bcst256_EVEX",
		Syntax:   "VPABSD ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 1E /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSD_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_ZMM1_ZMM2_EVEX",
		Syntax:   "VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 1E /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSD_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_ZMM1_M512_EVEX",
		Syntax:   "VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 1E /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSD_ZMM1_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpabsd",
		UID:      "VPABSD_ZMM1_M32bcst512_EVEX",
		Syntax:   "VPABSD zmm1 {k1}{z}, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 1E /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpabsq",
		UID:      "VPABSQ_XMM1_XMM2_EVEX",
		Syntax:   "VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 1F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSQ_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpabsq",
		UID:      "VPABSQ_XMM1_M128_EVEX",
		Syntax:   "VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 1F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSQ_XMM1_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpabsq",
		UID:      "VPABSQ_XMM1_M64bcst128_EVEX",
		Syntax:   "VPABSQ xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 1F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSQ_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vpabsq",
		UID:      "VPABSQ_YMM1_YMM2_EVEX",
		Syntax:   "VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 1F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSQ_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vpabsq",
		UID:      "VPABSQ_YMM1_M256_EVEX",
		Syntax:   "VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 1F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSQ_YMM1_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpabsq",
		UID:      "VPABSQ_YMM1_M64bcst256_EVEX",
		Syntax:   "VPABSQ ymm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 1F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSQ_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpabsq",
		UID:      "VPABSQ_ZMM1_ZMM2_EVEX",
		Syntax:   "VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 1F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSQ_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vpabsq",
		UID:      "VPABSQ_ZMM1_M512_EVEX",
		Syntax:   "VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 1F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSQ_ZMM1_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpabsq",
		UID:      "VPABSQ_ZMM1_M64bcst512_EVEX",
		Syntax:   "VPABSQ zmm1 {k1}{z}, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 1F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPABSW_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpabsw",
		UID:      "VPABSW_XMM1_XMM2_VEX",
		Syntax:   "VPABSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 1D /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPABSW_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpabsw",
		UID:      "VPABSW_XMM1_XMM2_EVEX",
		Syntax:   "VPABSW xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 1D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSW_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vpabsw",
		UID:      "VPABSW_XMM1_M128_VEX",
		Syntax:   "VPABSW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 1D /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPABSW_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpabsw",
		UID:      "VPABSW_XMM1_M128_EVEX",
		Syntax:   "VPABSW xmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 1D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSW_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vpabsw",
		UID:      "VPABSW_YMM1_YMM2_VEX",
		Syntax:   "VPABSW ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 1D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPABSW_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vpabsw",
		UID:      "VPABSW_YMM1_YMM2_EVEX",
		Syntax:   "VPABSW ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 1D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSW_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vpabsw",
		UID:      "VPABSW_YMM1_M256_VEX",
		Syntax:   "VPABSW ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 1D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x1d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPABSW_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vpabsw",
		UID:      "VPABSW_YMM1_M256_EVEX",
		Syntax:   "VPABSW ymm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 1D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSW_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpabsw",
		UID:      "VPABSW_ZMM1_ZMM2_EVEX",
		Syntax:   "VPABSW zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 1D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPABSW_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vpabsw",
		UID:      "VPABSW_ZMM1_M512_EVEX",
		Syntax:   "VPABSW zmm1 {k1}{z}, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 1D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x1d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKSSDW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPACKSSDW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 6B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPACKSSDW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPACKSSDW xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 6B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKSSDW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPACKSSDW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 6B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPACKSSDW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPACKSSDW xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 6B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKSSDW_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPACKSSDW xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 6B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKSSDW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPACKSSDW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 6B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPACKSSDW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPACKSSDW ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 6B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKSSDW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPACKSSDW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 6B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPACKSSDW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPACKSSDW ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 6B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKSSDW_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPACKSSDW ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 6B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKSSDW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPACKSSDW zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 6B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKSSDW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPACKSSDW zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 6B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKSSDW_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpackssdw",
		UID:      "VPACKSSDW_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPACKSSDW zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 6B /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKSSWB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpacksswb",
		UID:      "VPACKSSWB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPACKSSWB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 63 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPACKSSWB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpacksswb",
		UID:      "VPACKSSWB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPACKSSWB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 63 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKSSWB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpacksswb",
		UID:      "VPACKSSWB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPACKSSWB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 63 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPACKSSWB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpacksswb",
		UID:      "VPACKSSWB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPACKSSWB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 63 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKSSWB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpacksswb",
		UID:      "VPACKSSWB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPACKSSWB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 63 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPACKSSWB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpacksswb",
		UID:      "VPACKSSWB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPACKSSWB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 63 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKSSWB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpacksswb",
		UID:      "VPACKSSWB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPACKSSWB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 63 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPACKSSWB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpacksswb",
		UID:      "VPACKSSWB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPACKSSWB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 63 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKSSWB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpacksswb",
		UID:      "VPACKSSWB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPACKSSWB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 63 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKSSWB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpacksswb",
		UID:      "VPACKSSWB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPACKSSWB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 63 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKUSDW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPACKUSDW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38 2B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPACKUSDW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPACKUSDW xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 2B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKUSDW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPACKUSDW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38 2B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPACKUSDW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPACKUSDW xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 2B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKUSDW_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPACKUSDW xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 2B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKUSDW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPACKUSDW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38 2B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPACKUSDW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPACKUSDW ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 2B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKUSDW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPACKUSDW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38 2B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPACKUSDW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPACKUSDW ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 2B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKUSDW_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPACKUSDW ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 2B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKUSDW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPACKUSDW zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 2B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKUSDW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPACKUSDW zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 2B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKUSDW_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpackusdw",
		UID:      "VPACKUSDW_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPACKUSDW zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 2B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x2b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFull,
	}
	VPACKUSWB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpackuswb",
		UID:      "VPACKUSWB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPACKUSWB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 67 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x67},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPACKUSWB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpackuswb",
		UID:      "VPACKUSWB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPACKUSWB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 67 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x67},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKUSWB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpackuswb",
		UID:      "VPACKUSWB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPACKUSWB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 67 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x67},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPACKUSWB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpackuswb",
		UID:      "VPACKUSWB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPACKUSWB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 67 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x67},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKUSWB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpackuswb",
		UID:      "VPACKUSWB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPACKUSWB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 67 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x67},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPACKUSWB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpackuswb",
		UID:      "VPACKUSWB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPACKUSWB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 67 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x67},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKUSWB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpackuswb",
		UID:      "VPACKUSWB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPACKUSWB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 67 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x67},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPACKUSWB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpackuswb",
		UID:      "VPACKUSWB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPACKUSWB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 67 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x67},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKUSWB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpackuswb",
		UID:      "VPACKUSWB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPACKUSWB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 67 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x67},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPACKUSWB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpackuswb",
		UID:      "VPACKUSWB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPACKUSWB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 67 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x67},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpaddb",
		UID:      "VPADDB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPADDB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG FC /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpaddb",
		UID:      "VPADDB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPADDB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG FC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpaddb",
		UID:      "VPADDB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPADDB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG FC /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpaddb",
		UID:      "VPADDB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPADDB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG FC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpaddb",
		UID:      "VPADDB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPADDB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG FC /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpaddb",
		UID:      "VPADDB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPADDB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG FC /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpaddb",
		UID:      "VPADDB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPADDB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG FC /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpaddb",
		UID:      "VPADDB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPADDB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG FC /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpaddb",
		UID:      "VPADDB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPADDB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG FC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpaddb",
		UID:      "VPADDB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPADDB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG FC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPADDD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG FE /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPADDD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 FE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPADDD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG FE /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPADDD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 FE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDD_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPADDD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 FE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPADDD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG FE /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPADDD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 FE /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPADDD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG FE /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPADDD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 FE /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDD_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPADDD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 FE /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPADDD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 FE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPADDD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 FE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDD_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpaddd",
		UID:      "VPADDD_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPADDD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 FE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfe},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPADDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D4 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPADDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 D4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPADDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D4 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPADDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 D4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPADDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 D4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDQ_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPADDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D4 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPADDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 D4 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDQ_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_YMM1_YMMV_M256_VEX",
		Syntax:   "VPADDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D4 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPADDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 D4 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPADDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 D4 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPADDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 D4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPADDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 D4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpaddq",
		UID:      "VPADDQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPADDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 D4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPADDSB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpaddsb",
		UID:      "VPADDSB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPADDSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG EC /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xec},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDSB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpaddsb",
		UID:      "VPADDSB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPADDSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG EC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xec},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpaddsb",
		UID:      "VPADDSB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPADDSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG EC /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xec},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDSB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpaddsb",
		UID:      "VPADDSB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPADDSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG EC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xec},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpaddsb",
		UID:      "VPADDSB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPADDSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG EC /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xec},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDSB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpaddsb",
		UID:      "VPADDSB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPADDSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG EC /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xec},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpaddsb",
		UID:      "VPADDSB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPADDSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG EC /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xec},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDSB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpaddsb",
		UID:      "VPADDSB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPADDSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG EC /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xec},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpaddsb",
		UID:      "VPADDSB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPADDSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG EC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xec},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpaddsb",
		UID:      "VPADDSB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPADDSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG EC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xec},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpaddsw",
		UID:      "VPADDSW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPADDSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG ED /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xed},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDSW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpaddsw",
		UID:      "VPADDSW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPADDSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG ED /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xed},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpaddsw",
		UID:      "VPADDSW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPADDSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG ED /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xed},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDSW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpaddsw",
		UID:      "VPADDSW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPADDSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG ED /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xed},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpaddsw",
		UID:      "VPADDSW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPADDSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG ED /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xed},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDSW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpaddsw",
		UID:      "VPADDSW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPADDSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG ED /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xed},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpaddsw",
		UID:      "VPADDSW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPADDSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG ED /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xed},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDSW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpaddsw",
		UID:      "VPADDSW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPADDSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG ED /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xed},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpaddsw",
		UID:      "VPADDSW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPADDSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG ED /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xed},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDSW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpaddsw",
		UID:      "VPADDSW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPADDSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG ED /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xed},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpaddusb",
		UID:      "VPADDUSB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPADDUSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG DC /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDUSB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpaddusb",
		UID:      "VPADDUSB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPADDUSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG DC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpaddusb",
		UID:      "VPADDUSB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPADDUSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG DC /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDUSB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpaddusb",
		UID:      "VPADDUSB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPADDUSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG DC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpaddusb",
		UID:      "VPADDUSB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPADDUSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG DC /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDUSB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpaddusb",
		UID:      "VPADDUSB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPADDUSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG DC /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpaddusb",
		UID:      "VPADDUSB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPADDUSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG DC /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDUSB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpaddusb",
		UID:      "VPADDUSB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPADDUSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG DC /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpaddusb",
		UID:      "VPADDUSB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPADDUSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG DC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpaddusb",
		UID:      "VPADDUSB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPADDUSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG DC /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdc},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpaddusw",
		UID:      "VPADDUSW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPADDUSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG DD /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDUSW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpaddusw",
		UID:      "VPADDUSW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPADDUSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG DD /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpaddusw",
		UID:      "VPADDUSW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPADDUSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG DD /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDUSW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpaddusw",
		UID:      "VPADDUSW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPADDUSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG DD /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpaddusw",
		UID:      "VPADDUSW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPADDUSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG DD /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDUSW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpaddusw",
		UID:      "VPADDUSW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPADDUSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG DD /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpaddusw",
		UID:      "VPADDUSW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPADDUSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG DD /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDUSW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpaddusw",
		UID:      "VPADDUSW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPADDUSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG DD /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpaddusw",
		UID:      "VPADDUSW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPADDUSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG DD /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDUSW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpaddusw",
		UID:      "VPADDUSW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPADDUSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG DD /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpaddw",
		UID:      "VPADDW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPADDW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG FD /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpaddw",
		UID:      "VPADDW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPADDW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG FD /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpaddw",
		UID:      "VPADDW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPADDW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG FD /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPADDW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpaddw",
		UID:      "VPADDW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPADDW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG FD /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpaddw",
		UID:      "VPADDW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPADDW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG FD /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpaddw",
		UID:      "VPADDW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPADDW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG FD /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpaddw",
		UID:      "VPADDW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPADDW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG FD /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPADDW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpaddw",
		UID:      "VPADDW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPADDW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG FD /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpaddw",
		UID:      "VPADDW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPADDW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG FD /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPADDW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpaddw",
		UID:      "VPADDW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPADDW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG FD /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfd},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPALIGNR_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpalignr",
		UID:      "VPALIGNR_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPALIGNR xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 0F /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPALIGNR_XMM1_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpalignr",
		UID:      "VPALIGNR_XMM1_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPALIGNR xmm1 {k1}{z}, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 0F /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPALIGNR_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vpalignr",
		UID:      "VPALIGNR_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VPALIGNR xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 0F /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPALIGNR_XMM1_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpalignr",
		UID:      "VPALIGNR_XMM1_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPALIGNR xmm1 {k1}{z}, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 0F /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPALIGNR_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpalignr",
		UID:      "VPALIGNR_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPALIGNR ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 0F /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPALIGNR_YMM1_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpalignr",
		UID:      "VPALIGNR_YMM1_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPALIGNR ymm1 {k1}{z}, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F3A.WIG 0F /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPALIGNR_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vpalignr",
		UID:      "VPALIGNR_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VPALIGNR ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 0F /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPALIGNR_YMM1_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpalignr",
		UID:      "VPALIGNR_YMM1_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPALIGNR ymm1 {k1}{z}, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F3A.WIG 0F /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPALIGNR_ZMM1_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpalignr",
		UID:      "VPALIGNR_ZMM1_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPALIGNR zmm1 {k1}{z}, zmmV, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F3A.WIG 0F /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPALIGNR_ZMM1_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpalignr",
		UID:      "VPALIGNR_ZMM1_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPALIGNR zmm1 {k1}{z}, zmmV, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F3A.WIG 0F /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAND_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpand",
		UID:      "VPAND_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPAND xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG DB /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPAND_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpand",
		UID:      "VPAND_XMM1_XMMV_M128_VEX",
		Syntax:   "VPAND xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG DB /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPAND_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpand",
		UID:      "VPAND_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPAND ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG DB /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPAND_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpand",
		UID:      "VPAND_YMM1_YMMV_M256_VEX",
		Syntax:   "VPAND ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG DB /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPANDD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpandd",
		UID:      "VPANDD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPANDD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpandd",
		UID:      "VPANDD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPANDD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDD_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpandd",
		UID:      "VPANDD_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPANDD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpandd",
		UID:      "VPANDD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPANDD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 DB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpandd",
		UID:      "VPANDD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPANDD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 DB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDD_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpandd",
		UID:      "VPANDD_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPANDD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 DB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpandd",
		UID:      "VPANDD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPANDD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpandd",
		UID:      "VPANDD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPANDD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDD_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpandd",
		UID:      "VPANDD_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPANDD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDN_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpandn",
		UID:      "VPANDN_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPANDN xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG DF /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPANDN_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpandn",
		UID:      "VPANDN_XMM1_XMMV_M128_VEX",
		Syntax:   "VPANDN xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG DF /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPANDN_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpandn",
		UID:      "VPANDN_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPANDN ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG DF /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPANDN_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpandn",
		UID:      "VPANDN_YMM1_YMMV_M256_VEX",
		Syntax:   "VPANDN ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG DF /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPANDND_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpandnd",
		UID:      "VPANDND_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPANDND xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDND_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpandnd",
		UID:      "VPANDND_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPANDND xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDND_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpandnd",
		UID:      "VPANDND_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPANDND xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDND_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpandnd",
		UID:      "VPANDND_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPANDND ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 DF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDND_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpandnd",
		UID:      "VPANDND_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPANDND ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 DF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDND_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpandnd",
		UID:      "VPANDND_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPANDND ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 DF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDND_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpandnd",
		UID:      "VPANDND_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPANDND zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDND_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpandnd",
		UID:      "VPANDND_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPANDND zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDND_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpandnd",
		UID:      "VPANDND_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPANDND zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDNQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpandnq",
		UID:      "VPANDNQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPANDNQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDNQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpandnq",
		UID:      "VPANDNQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPANDNQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDNQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpandnq",
		UID:      "VPANDNQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPANDNQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDNQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpandnq",
		UID:      "VPANDNQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPANDNQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 DF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDNQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpandnq",
		UID:      "VPANDNQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPANDNQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 DF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDNQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpandnq",
		UID:      "VPANDNQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPANDNQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 DF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDNQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpandnq",
		UID:      "VPANDNQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPANDNQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDNQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpandnq",
		UID:      "VPANDNQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPANDNQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDNQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpandnq",
		UID:      "VPANDNQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPANDNQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 DF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdf},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpandq",
		UID:      "VPANDQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPANDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpandq",
		UID:      "VPANDQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPANDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpandq",
		UID:      "VPANDQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPANDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpandq",
		UID:      "VPANDQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPANDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 DB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpandq",
		UID:      "VPANDQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPANDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 DB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpandq",
		UID:      "VPANDQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPANDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 DB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpandq",
		UID:      "VPANDQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPANDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpandq",
		UID:      "VPANDQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPANDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPANDQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpandq",
		UID:      "VPANDQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPANDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 DB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xdb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPAVGB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpavgb",
		UID:      "VPAVGB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPAVGB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E0 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPAVGB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpavgb",
		UID:      "VPAVGB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPAVGB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E0 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpavgb",
		UID:      "VPAVGB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPAVGB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E0 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPAVGB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpavgb",
		UID:      "VPAVGB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPAVGB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E0 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpavgb",
		UID:      "VPAVGB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPAVGB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E0 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPAVGB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpavgb",
		UID:      "VPAVGB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPAVGB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E0 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpavgb",
		UID:      "VPAVGB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPAVGB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E0 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPAVGB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpavgb",
		UID:      "VPAVGB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPAVGB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E0 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpavgb",
		UID:      "VPAVGB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPAVGB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E0 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpavgb",
		UID:      "VPAVGB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPAVGB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E0 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe0},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpavgw",
		UID:      "VPAVGW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPAVGW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E3 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPAVGW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpavgw",
		UID:      "VPAVGW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPAVGW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpavgw",
		UID:      "VPAVGW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPAVGW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E3 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPAVGW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpavgw",
		UID:      "VPAVGW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPAVGW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpavgw",
		UID:      "VPAVGW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPAVGW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E3 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPAVGW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpavgw",
		UID:      "VPAVGW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPAVGW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E3 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpavgw",
		UID:      "VPAVGW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPAVGW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E3 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPAVGW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpavgw",
		UID:      "VPAVGW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPAVGW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E3 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpavgw",
		UID:      "VPAVGW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPAVGW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPAVGW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpavgw",
		UID:      "VPAVGW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPAVGW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPBLENDVB_XMM1_XMMV_XMM2_XMMIH_VEX = &Instruction{
		Mnemonic: "vpblendvb",
		UID:      "VPBLENDVB_XMM1_XMMV_XMM2_XMMIH_VEX",
		Syntax:   "VPBLENDVB xmm1, xmmV, xmm2/m128, xmmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 4C /r /is4",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamXMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPBLENDVB_XMM1_XMMV_M128_XMMIH_VEX = &Instruction{
		Mnemonic: "vpblendvb",
		UID:      "VPBLENDVB_XMM1_XMMV_M128_XMMIH_VEX",
		Syntax:   "VPBLENDVB xmm1, xmmV, xmm2/m128, xmmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 4C /r /is4",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamXMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPBLENDVB_YMM1_YMMV_YMM2_YMMIH_VEX = &Instruction{
		Mnemonic: "vpblendvb",
		UID:      "VPBLENDVB_YMM1_YMMV_YMM2_YMMIH_VEX",
		Syntax:   "VPBLENDVB ymm1, ymmV, ymm2/m256, ymmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.W0 4C /r /is4",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamYMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPBLENDVB_YMM1_YMMV_M256_YMMIH_VEX = &Instruction{
		Mnemonic: "vpblendvb",
		UID:      "VPBLENDVB_YMM1_YMMV_M256_YMMIH_VEX",
		Syntax:   "VPBLENDVB ymm1, ymmV, ymm2/m256, ymmIH",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.W0 4C /r /is4",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEXis4:    true,
			Opcode:    []byte{0x4c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamYMMIH},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPBLENDW_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpblendw",
		UID:      "VPBLENDW_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPBLENDW xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 0E /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPBLENDW_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vpblendw",
		UID:      "VPBLENDW_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VPBLENDW xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 0E /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPBLENDW_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpblendw",
		UID:      "VPBLENDW_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPBLENDW ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 0E /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPBLENDW_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vpblendw",
		UID:      "VPBLENDW_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VPBLENDW ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 0E /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCLMULQDQ_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpclmulqdq",
		UID:      "VPCLMULQDQ_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPCLMULQDQ xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 44 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"PCLMULQDQ AVX"},
		DataSize:   128,
	}
	VPCLMULQDQ_XMM1_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpclmulqdq",
		UID:      "VPCLMULQDQ_XMM1_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPCLMULQDQ xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 44 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VPCLMULQDQ AVX512VL"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VPCLMULQDQ_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vpclmulqdq",
		UID:      "VPCLMULQDQ_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VPCLMULQDQ xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 44 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"PCLMULQDQ AVX"},
		DataSize:   128,
	}
	VPCLMULQDQ_XMM1_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpclmulqdq",
		UID:      "VPCLMULQDQ_XMM1_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPCLMULQDQ xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 44 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VPCLMULQDQ AVX512VL"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VPCLMULQDQ_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpclmulqdq",
		UID:      "VPCLMULQDQ_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPCLMULQDQ ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 44 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VPCLMULQDQ"},
		DataSize:   256,
	}
	VPCLMULQDQ_YMM1_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpclmulqdq",
		UID:      "VPCLMULQDQ_YMM1_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPCLMULQDQ ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F3A.WIG 44 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VPCLMULQDQ AVX512VL"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VPCLMULQDQ_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vpclmulqdq",
		UID:      "VPCLMULQDQ_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VPCLMULQDQ ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 44 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VPCLMULQDQ"},
		DataSize:   256,
	}
	VPCLMULQDQ_YMM1_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpclmulqdq",
		UID:      "VPCLMULQDQ_YMM1_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPCLMULQDQ ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F3A.WIG 44 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VPCLMULQDQ AVX512VL"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VPCLMULQDQ_ZMM1_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpclmulqdq",
		UID:      "VPCLMULQDQ_ZMM1_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPCLMULQDQ zmm1, zmmV, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F3A.WIG 44 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VPCLMULQDQ AVX512F"},
		Tuple:      TupleFullMem,
	}
	VPCLMULQDQ_ZMM1_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpclmulqdq",
		UID:      "VPCLMULQDQ_ZMM1_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPCLMULQDQ zmm1, zmmV, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F3A.WIG 44 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x44},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"VPCLMULQDQ AVX512F"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQB_K1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqb",
		UID:      "VPCMPEQB_K1_XMMV_XMM2_EVEX",
		Syntax:   "VPCMPEQB k1 {k2}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 74 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x74},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQB_K1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpcmpeqb",
		UID:      "VPCMPEQB_K1_XMMV_M128_EVEX",
		Syntax:   "VPCMPEQB k1 {k2}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 74 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x74},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQB_K1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqb",
		UID:      "VPCMPEQB_K1_YMMV_YMM2_EVEX",
		Syntax:   "VPCMPEQB k1 {k2}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 74 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x74},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQB_K1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpcmpeqb",
		UID:      "VPCMPEQB_K1_YMMV_M256_EVEX",
		Syntax:   "VPCMPEQB k1 {k2}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 74 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x74},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQB_K1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqb",
		UID:      "VPCMPEQB_K1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPCMPEQB k1 {k2}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 74 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x74},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQB_K1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpcmpeqb",
		UID:      "VPCMPEQB_K1_ZMMV_M512_EVEX",
		Syntax:   "VPCMPEQB k1 {k2}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 74 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x74},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpcmpeqb",
		UID:      "VPCMPEQB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPCMPEQB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 74 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x74},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPEQB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpcmpeqb",
		UID:      "VPCMPEQB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPCMPEQB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 74 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x74},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPEQB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpcmpeqb",
		UID:      "VPCMPEQB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPCMPEQB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 74 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x74},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPEQB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpcmpeqb",
		UID:      "VPCMPEQB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPCMPEQB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 74 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x74},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPEQD_K1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_K1_XMMV_XMM2_EVEX",
		Syntax:   "VPCMPEQD k1 {k2}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 76 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQD_K1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_K1_XMMV_M128_EVEX",
		Syntax:   "VPCMPEQD k1 {k2}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 76 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQD_K1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_K1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPCMPEQD k1 {k2}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 76 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQD_K1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_K1_YMMV_YMM2_EVEX",
		Syntax:   "VPCMPEQD k1 {k2}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 76 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQD_K1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_K1_YMMV_M256_EVEX",
		Syntax:   "VPCMPEQD k1 {k2}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 76 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQD_K1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_K1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPCMPEQD k1 {k2}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 76 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQD_K1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_K1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPCMPEQD k1 {k2}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 76 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQD_K1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_K1_ZMMV_M512_EVEX",
		Syntax:   "VPCMPEQD k1 {k2}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 76 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQD_K1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_K1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPCMPEQD k1 {k2}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 76 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPCMPEQD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 76 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPEQD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPCMPEQD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 76 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPEQD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPCMPEQD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 76 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPEQD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpcmpeqd",
		UID:      "VPCMPEQD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPCMPEQD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 76 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x76},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPEQQ_K1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_K1_XMMV_XMM2_EVEX",
		Syntax:   "VPCMPEQQ k1 {k2}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 29 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQQ_K1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_K1_XMMV_M128_EVEX",
		Syntax:   "VPCMPEQQ k1 {k2}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 29 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQQ_K1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_K1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPCMPEQQ k1 {k2}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 29 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQQ_K1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_K1_YMMV_YMM2_EVEX",
		Syntax:   "VPCMPEQQ k1 {k2}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 29 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQQ_K1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_K1_YMMV_M256_EVEX",
		Syntax:   "VPCMPEQQ k1 {k2}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 29 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQQ_K1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_K1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPCMPEQQ k1 {k2}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 29 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQQ_K1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_K1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPCMPEQQ k1 {k2}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 29 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQQ_K1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_K1_ZMMV_M512_EVEX",
		Syntax:   "VPCMPEQQ k1 {k2}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 29 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQQ_K1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_K1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPCMPEQQ k1 {k2}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 29 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPEQQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPCMPEQQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 29 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPEQQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPCMPEQQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 29 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPEQQ_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPCMPEQQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 29 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPEQQ_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpcmpeqq",
		UID:      "VPCMPEQQ_YMM1_YMMV_M256_VEX",
		Syntax:   "VPCMPEQQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 29 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x29},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPEQW_K1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqw",
		UID:      "VPCMPEQW_K1_XMMV_XMM2_EVEX",
		Syntax:   "VPCMPEQW k1 {k2}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 75 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x75},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQW_K1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpcmpeqw",
		UID:      "VPCMPEQW_K1_XMMV_M128_EVEX",
		Syntax:   "VPCMPEQW k1 {k2}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 75 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x75},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQW_K1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqw",
		UID:      "VPCMPEQW_K1_YMMV_YMM2_EVEX",
		Syntax:   "VPCMPEQW k1 {k2}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 75 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x75},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQW_K1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpcmpeqw",
		UID:      "VPCMPEQW_K1_YMMV_M256_EVEX",
		Syntax:   "VPCMPEQW k1 {k2}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 75 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x75},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQW_K1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpeqw",
		UID:      "VPCMPEQW_K1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPCMPEQW k1 {k2}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 75 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x75},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQW_K1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpcmpeqw",
		UID:      "VPCMPEQW_K1_ZMMV_M512_EVEX",
		Syntax:   "VPCMPEQW k1 {k2}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 75 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x75},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPEQW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpcmpeqw",
		UID:      "VPCMPEQW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPCMPEQW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 75 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x75},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPEQW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpcmpeqw",
		UID:      "VPCMPEQW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPCMPEQW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 75 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x75},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPEQW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpcmpeqw",
		UID:      "VPCMPEQW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPCMPEQW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 75 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x75},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPEQW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpcmpeqw",
		UID:      "VPCMPEQW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPCMPEQW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 75 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x75},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPESTRI_XMM1_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpcmpestri",
		UID:      "VPCMPESTRI_XMM1_XMM2_Imm8_VEX",
		Syntax:   "VPCMPESTRI xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A 61 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPESTRI_XMM1_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vpcmpestri",
		UID:      "VPCMPESTRI_XMM1_M128_Imm8_VEX",
		Syntax:   "VPCMPESTRI xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A 61 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPESTRM_XMM1_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpcmpestrm",
		UID:      "VPCMPESTRM_XMM1_XMM2_Imm8_VEX",
		Syntax:   "VPCMPESTRM xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A 60 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPESTRM_XMM1_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vpcmpestrm",
		UID:      "VPCMPESTRM_XMM1_M128_Imm8_VEX",
		Syntax:   "VPCMPESTRM xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A 60 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPGTB_K1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtb",
		UID:      "VPCMPGTB_K1_XMMV_XMM2_EVEX",
		Syntax:   "VPCMPGTB k1 {k2}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 64 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x64},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTB_K1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpcmpgtb",
		UID:      "VPCMPGTB_K1_XMMV_M128_EVEX",
		Syntax:   "VPCMPGTB k1 {k2}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 64 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x64},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTB_K1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtb",
		UID:      "VPCMPGTB_K1_YMMV_YMM2_EVEX",
		Syntax:   "VPCMPGTB k1 {k2}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 64 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x64},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTB_K1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpcmpgtb",
		UID:      "VPCMPGTB_K1_YMMV_M256_EVEX",
		Syntax:   "VPCMPGTB k1 {k2}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 64 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x64},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTB_K1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtb",
		UID:      "VPCMPGTB_K1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPCMPGTB k1 {k2}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 64 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x64},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTB_K1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpcmpgtb",
		UID:      "VPCMPGTB_K1_ZMMV_M512_EVEX",
		Syntax:   "VPCMPGTB k1 {k2}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 64 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x64},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpcmpgtb",
		UID:      "VPCMPGTB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPCMPGTB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 64 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x64},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPGTB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpcmpgtb",
		UID:      "VPCMPGTB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPCMPGTB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 64 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x64},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPGTB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpcmpgtb",
		UID:      "VPCMPGTB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPCMPGTB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 64 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x64},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPGTB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpcmpgtb",
		UID:      "VPCMPGTB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPCMPGTB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 64 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x64},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPGTD_K1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_K1_XMMV_XMM2_EVEX",
		Syntax:   "VPCMPGTD k1 {k2}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 66 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTD_K1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_K1_XMMV_M128_EVEX",
		Syntax:   "VPCMPGTD k1 {k2}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 66 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTD_K1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_K1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPCMPGTD k1 {k2}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 66 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTD_K1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_K1_YMMV_YMM2_EVEX",
		Syntax:   "VPCMPGTD k1 {k2}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 66 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTD_K1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_K1_YMMV_M256_EVEX",
		Syntax:   "VPCMPGTD k1 {k2}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 66 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTD_K1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_K1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPCMPGTD k1 {k2}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 66 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTD_K1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_K1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPCMPGTD k1 {k2}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 66 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTD_K1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_K1_ZMMV_M512_EVEX",
		Syntax:   "VPCMPGTD k1 {k2}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 66 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTD_K1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_K1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPCMPGTD k1 {k2}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 66 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPCMPGTD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 66 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPGTD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPCMPGTD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 66 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPGTD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPCMPGTD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 66 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPGTD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpcmpgtd",
		UID:      "VPCMPGTD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPCMPGTD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 66 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x66},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPGTQ_K1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_K1_XMMV_XMM2_EVEX",
		Syntax:   "VPCMPGTQ k1 {k2}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 37 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTQ_K1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_K1_XMMV_M128_EVEX",
		Syntax:   "VPCMPGTQ k1 {k2}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 37 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTQ_K1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_K1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPCMPGTQ k1 {k2}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 37 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTQ_K1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_K1_YMMV_YMM2_EVEX",
		Syntax:   "VPCMPGTQ k1 {k2}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 37 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTQ_K1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_K1_YMMV_M256_EVEX",
		Syntax:   "VPCMPGTQ k1 {k2}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 37 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTQ_K1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_K1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPCMPGTQ k1 {k2}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 37 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTQ_K1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_K1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPCMPGTQ k1 {k2}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 37 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTQ_K1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_K1_ZMMV_M512_EVEX",
		Syntax:   "VPCMPGTQ k1 {k2}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 37 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTQ_K1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_K1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPCMPGTQ k1 {k2}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 37 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPCMPGTQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPCMPGTQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 37 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPGTQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPCMPGTQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 37 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPGTQ_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPCMPGTQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 37 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPGTQ_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpcmpgtq",
		UID:      "VPCMPGTQ_YMM1_YMMV_M256_VEX",
		Syntax:   "VPCMPGTQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 37 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x37},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPGTW_K1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtw",
		UID:      "VPCMPGTW_K1_XMMV_XMM2_EVEX",
		Syntax:   "VPCMPGTW k1 {k2}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 65 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x65},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTW_K1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpcmpgtw",
		UID:      "VPCMPGTW_K1_XMMV_M128_EVEX",
		Syntax:   "VPCMPGTW k1 {k2}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 65 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x65},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTW_K1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtw",
		UID:      "VPCMPGTW_K1_YMMV_YMM2_EVEX",
		Syntax:   "VPCMPGTW k1 {k2}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 65 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x65},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTW_K1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpcmpgtw",
		UID:      "VPCMPGTW_K1_YMMV_M256_EVEX",
		Syntax:   "VPCMPGTW k1 {k2}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 65 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x65},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTW_K1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpcmpgtw",
		UID:      "VPCMPGTW_K1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPCMPGTW k1 {k2}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 65 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x65},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTW_K1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpcmpgtw",
		UID:      "VPCMPGTW_K1_ZMMV_M512_EVEX",
		Syntax:   "VPCMPGTW k1 {k2}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 65 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x65},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamK1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPCMPGTW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpcmpgtw",
		UID:      "VPCMPGTW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPCMPGTW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 65 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x65},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPGTW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpcmpgtw",
		UID:      "VPCMPGTW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPCMPGTW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 65 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x65},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPGTW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpcmpgtw",
		UID:      "VPCMPGTW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPCMPGTW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 65 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x65},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPGTW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpcmpgtw",
		UID:      "VPCMPGTW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPCMPGTW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 65 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x65},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPCMPISTRI_XMM1_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpcmpistri",
		UID:      "VPCMPISTRI_XMM1_XMM2_Imm8_VEX",
		Syntax:   "VPCMPISTRI xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 63 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPISTRI_XMM1_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vpcmpistri",
		UID:      "VPCMPISTRI_XMM1_M128_Imm8_VEX",
		Syntax:   "VPCMPISTRI xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 63 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x63},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPISTRM_XMM1_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpcmpistrm",
		UID:      "VPCMPISTRM_XMM1_XMM2_Imm8_VEX",
		Syntax:   "VPCMPISTRM xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 62 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPCMPISTRM_XMM1_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vpcmpistrm",
		UID:      "VPCMPISTRM_XMM1_M128_Imm8_VEX",
		Syntax:   "VPCMPISTRM xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 62 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPEXTRB_Rmr32_XMM1_Imm8_VEX = &Instruction{
		Mnemonic: "vpextrb",
		UID:      "VPEXTRB_Rmr32_XMM1_Imm8_VEX",
		Syntax:   "VPEXTRB r32/m8, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 14 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   8,
	}
	VPEXTRB_Rmr32_XMM1_Imm8_EVEX = &Instruction{
		Mnemonic: "vpextrb",
		UID:      "VPEXTRB_Rmr32_XMM1_Imm8_EVEX",
		Syntax:   "VPEXTRB r32/m8, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 14 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		DataSize:   8,
		Tuple:      Tuple1Scalar,
	}
	VPEXTRB_M8_XMM1_Imm8_VEX = &Instruction{
		Mnemonic: "vpextrb",
		UID:      "VPEXTRB_M8_XMM1_Imm8_VEX",
		Syntax:   "VPEXTRB r32/m8, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 14 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM8, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   8,
	}
	VPEXTRB_M8_XMM1_Imm8_EVEX = &Instruction{
		Mnemonic: "vpextrb",
		UID:      "VPEXTRB_M8_XMM1_Imm8_EVEX",
		Syntax:   "VPEXTRB r32/m8, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 14 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM8, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		DataSize:   8,
		Tuple:      Tuple1Scalar,
	}
	VPEXTRD_Rmr32_XMM1_Imm8_VEX = &Instruction{
		Mnemonic: "vpextrd",
		UID:      "VPEXTRD_Rmr32_XMM1_Imm8_VEX",
		Syntax:   "VPEXTRD r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 16 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VPEXTRD_Rmr32_XMM1_Imm8_EVEX = &Instruction{
		Mnemonic: "vpextrd",
		UID:      "VPEXTRD_Rmr32_XMM1_Imm8_EVEX",
		Syntax:   "VPEXTRD r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W0 16 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VPEXTRD_M32_XMM1_Imm8_VEX = &Instruction{
		Mnemonic: "vpextrd",
		UID:      "VPEXTRD_M32_XMM1_Imm8_VEX",
		Syntax:   "VPEXTRD r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 16 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VPEXTRD_M32_XMM1_Imm8_EVEX = &Instruction{
		Mnemonic: "vpextrd",
		UID:      "VPEXTRD_M32_XMM1_Imm8_EVEX",
		Syntax:   "VPEXTRD r/m32, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W0 16 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VPEXTRQ_Rmr64_XMM1_Imm8_VEX = &Instruction{
		Mnemonic: "vpextrq",
		UID:      "VPEXTRQ_Rmr64_XMM1_Imm8_VEX",
		Syntax:   "VPEXTRQ r/m64, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W1 16 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VPEXTRQ_Rmr64_XMM1_Imm8_EVEX = &Instruction{
		Mnemonic: "vpextrq",
		UID:      "VPEXTRQ_Rmr64_XMM1_Imm8_EVEX",
		Syntax:   "VPEXTRQ r/m64, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W1 16 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VPEXTRQ_M64_XMM1_Imm8_VEX = &Instruction{
		Mnemonic: "vpextrq",
		UID:      "VPEXTRQ_M64_XMM1_Imm8_VEX",
		Syntax:   "VPEXTRQ r/m64, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W1 16 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VPEXTRQ_M64_XMM1_Imm8_EVEX = &Instruction{
		Mnemonic: "vpextrq",
		UID:      "VPEXTRQ_M64_XMM1_Imm8_EVEX",
		Syntax:   "VPEXTRQ r/m64, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W1 16 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x16},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM64, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VPEXTRW_R32_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpextrw",
		UID:      "VPEXTRW_R32_XMM2_Imm8_VEX",
		Syntax:   "VPEXTRW r32, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.W0 C5 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   16,
	}
	VPEXTRW_R32_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpextrw",
		UID:      "VPEXTRW_R32_XMM2_Imm8_EVEX",
		Syntax:   "VPEXTRW r32, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG C5 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xc5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		DataSize:   16,
	}
	VPEXTRW_Rmr32_XMM1_Imm8_VEX = &Instruction{
		Mnemonic: "vpextrw",
		UID:      "VPEXTRW_Rmr32_XMM1_Imm8_VEX",
		Syntax:   "VPEXTRW r32/m16, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 15 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   16,
	}
	VPEXTRW_Rmr32_XMM1_Imm8_EVEX = &Instruction{
		Mnemonic: "vpextrw",
		UID:      "VPEXTRW_Rmr32_XMM1_Imm8_EVEX",
		Syntax:   "VPEXTRW r32/m16, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 15 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamRmr32, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		DataSize:   16,
		Tuple:      Tuple1Scalar,
	}
	VPEXTRW_M16_XMM1_Imm8_VEX = &Instruction{
		Mnemonic: "vpextrw",
		UID:      "VPEXTRW_M16_XMM1_Imm8_VEX",
		Syntax:   "VPEXTRW r32/m16, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 15 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM16, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   16,
	}
	VPEXTRW_M16_XMM1_Imm8_EVEX = &Instruction{
		Mnemonic: "vpextrw",
		UID:      "VPEXTRW_M16_XMM1_Imm8_EVEX",
		Syntax:   "VPEXTRW r32/m16, xmm1, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 15 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamM16, ParamXMM1, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		DataSize:   16,
		Tuple:      Tuple1Scalar,
	}
	VPHADDD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vphaddd",
		UID:      "VPHADDD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPHADDD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 02 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x02},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHADDD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vphaddd",
		UID:      "VPHADDD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPHADDD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 02 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x02},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHADDD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vphaddd",
		UID:      "VPHADDD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPHADDD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 02 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x02},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHADDD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vphaddd",
		UID:      "VPHADDD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPHADDD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 02 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x02},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHADDSW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vphaddsw",
		UID:      "VPHADDSW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPHADDSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 03 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x03},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHADDSW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vphaddsw",
		UID:      "VPHADDSW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPHADDSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 03 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x03},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHADDSW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vphaddsw",
		UID:      "VPHADDSW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPHADDSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 03 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x03},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHADDSW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vphaddsw",
		UID:      "VPHADDSW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPHADDSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 03 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x03},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHADDW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vphaddw",
		UID:      "VPHADDW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPHADDW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 01 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x01},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHADDW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vphaddw",
		UID:      "VPHADDW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPHADDW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 01 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x01},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHADDW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vphaddw",
		UID:      "VPHADDW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPHADDW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 01 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x01},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHADDW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vphaddw",
		UID:      "VPHADDW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPHADDW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 01 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x01},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHMINPOSUW_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vphminposuw",
		UID:      "VPHMINPOSUW_XMM1_XMM2_VEX",
		Syntax:   "VPHMINPOSUW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 41 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x41},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHMINPOSUW_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vphminposuw",
		UID:      "VPHMINPOSUW_XMM1_M128_VEX",
		Syntax:   "VPHMINPOSUW xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 41 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x41},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHSUBD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vphsubd",
		UID:      "VPHSUBD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPHSUBD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 06 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x06},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHSUBD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vphsubd",
		UID:      "VPHSUBD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPHSUBD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 06 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x06},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHSUBD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vphsubd",
		UID:      "VPHSUBD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPHSUBD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 06 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x06},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHSUBD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vphsubd",
		UID:      "VPHSUBD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPHSUBD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 06 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x06},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHSUBSW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vphsubsw",
		UID:      "VPHSUBSW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPHSUBSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 07 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x07},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHSUBSW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vphsubsw",
		UID:      "VPHSUBSW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPHSUBSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 07 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x07},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHSUBSW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vphsubsw",
		UID:      "VPHSUBSW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPHSUBSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 07 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x07},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHSUBSW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vphsubsw",
		UID:      "VPHSUBSW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPHSUBSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 07 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x07},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHSUBW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vphsubw",
		UID:      "VPHSUBW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPHSUBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 05 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x05},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHSUBW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vphsubw",
		UID:      "VPHSUBW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPHSUBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 05 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x05},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPHSUBW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vphsubw",
		UID:      "VPHSUBW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPHSUBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 05 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x05},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPHSUBW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vphsubw",
		UID:      "VPHSUBW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPHSUBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 05 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x05},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPINSRB_XMM1_XMMV_Rmr32_Imm8_VEX = &Instruction{
		Mnemonic: "vpinsrb",
		UID:      "VPINSRB_XMM1_XMMV_Rmr32_Imm8_VEX",
		Syntax:   "VPINSRB xmm1, xmmV, r32/m8, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 20 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   8,
	}
	VPINSRB_XMM1_XMMV_Rmr32_Imm8_EVEX = &Instruction{
		Mnemonic: "vpinsrb",
		UID:      "VPINSRB_XMM1_XMMV_Rmr32_Imm8_EVEX",
		Syntax:   "VPINSRB xmm1, xmmV, r32/m8, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 20 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		DataSize:   8,
		Tuple:      Tuple1Scalar,
	}
	VPINSRB_XMM1_XMMV_M8_Imm8_VEX = &Instruction{
		Mnemonic: "vpinsrb",
		UID:      "VPINSRB_XMM1_XMMV_M8_Imm8_VEX",
		Syntax:   "VPINSRB xmm1, xmmV, r32/m8, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 20 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM8, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   8,
	}
	VPINSRB_XMM1_XMMV_M8_Imm8_EVEX = &Instruction{
		Mnemonic: "vpinsrb",
		UID:      "VPINSRB_XMM1_XMMV_M8_Imm8_EVEX",
		Syntax:   "VPINSRB xmm1, xmmV, r32/m8, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.WIG 20 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM8, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		DataSize:   8,
		Tuple:      Tuple1Scalar,
	}
	VPINSRD_XMM1_XMMV_Rmr32_Imm8_VEX = &Instruction{
		Mnemonic: "vpinsrd",
		UID:      "VPINSRD_XMM1_XMMV_Rmr32_Imm8_VEX",
		Syntax:   "VPINSRD xmm1, xmmV, r/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 22 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VPINSRD_XMM1_XMMV_Rmr32_Imm8_EVEX = &Instruction{
		Mnemonic: "vpinsrd",
		UID:      "VPINSRD_XMM1_XMMV_Rmr32_Imm8_EVEX",
		Syntax:   "VPINSRD xmm1, xmmV, r/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W0 22 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VPINSRD_XMM1_XMMV_M32_Imm8_VEX = &Instruction{
		Mnemonic: "vpinsrd",
		UID:      "VPINSRD_XMM1_XMMV_M32_Imm8_VEX",
		Syntax:   "VPINSRD xmm1, xmmV, r/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W0 22 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VPINSRD_XMM1_XMMV_M32_Imm8_EVEX = &Instruction{
		Mnemonic: "vpinsrd",
		UID:      "VPINSRD_XMM1_XMMV_M32_Imm8_EVEX",
		Syntax:   "VPINSRD xmm1, xmmV, r/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W0 22 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			EVEX:      true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VPINSRQ_XMM1_XMMV_Rmr64_Imm8_VEX = &Instruction{
		Mnemonic: "vpinsrq",
		UID:      "VPINSRQ_XMM1_XMMV_Rmr64_Imm8_VEX",
		Syntax:   "VPINSRQ xmm1, xmmV, r/m64, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W1 22 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VPINSRQ_XMM1_XMMV_Rmr64_Imm8_EVEX = &Instruction{
		Mnemonic: "vpinsrq",
		UID:      "VPINSRQ_XMM1_XMMV_Rmr64_Imm8_EVEX",
		Syntax:   "VPINSRQ xmm1, xmmV, r/m64, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W1 22 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VPINSRQ_XMM1_XMMV_M64_Imm8_VEX = &Instruction{
		Mnemonic: "vpinsrq",
		UID:      "VPINSRQ_XMM1_XMMV_M64_Imm8_VEX",
		Syntax:   "VPINSRQ xmm1, xmmV, r/m64, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.W1 22 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VPINSRQ_XMM1_XMMV_M64_Imm8_EVEX = &Instruction{
		Mnemonic: "vpinsrq",
		UID:      "VPINSRQ_XMM1_XMMV_M64_Imm8_EVEX",
		Syntax:   "VPINSRQ xmm1, xmmV, r/m64, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F3A.W1 22 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 3,
			VEX_W:     true,
			EVEX:      true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VPINSRW_XMM1_XMMV_Rmr32_Imm8_VEX = &Instruction{
		Mnemonic: "vpinsrw",
		UID:      "VPINSRW_XMM1_XMMV_Rmr32_Imm8_VEX",
		Syntax:   "VPINSRW xmm1, xmmV, r32/m16, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.W0 C4 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   16,
	}
	VPINSRW_XMM1_XMMV_Rmr32_Imm8_EVEX = &Instruction{
		Mnemonic: "vpinsrw",
		UID:      "VPINSRW_XMM1_XMMV_Rmr32_Imm8_EVEX",
		Syntax:   "VPINSRW xmm1, xmmV, r32/m16, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG C4 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xc4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamRmr32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		DataSize:   16,
		Tuple:      Tuple1Scalar,
	}
	VPINSRW_XMM1_XMMV_M16_Imm8_VEX = &Instruction{
		Mnemonic: "vpinsrw",
		UID:      "VPINSRW_XMM1_XMMV_M16_Imm8_VEX",
		Syntax:   "VPINSRW xmm1, xmmV, r32/m16, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.W0 C4 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM16, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   16,
	}
	VPINSRW_XMM1_XMMV_M16_Imm8_EVEX = &Instruction{
		Mnemonic: "vpinsrw",
		UID:      "VPINSRW_XMM1_XMMV_M16_Imm8_EVEX",
		Syntax:   "VPINSRW xmm1, xmmV, r32/m16, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG C4 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xc4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM16, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		DataSize:   16,
		Tuple:      Tuple1Scalar,
	}
	VPMADDUBSW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmaddubsw",
		UID:      "VPMADDUBSW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMADDUBSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 04 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x04},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMADDUBSW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmaddubsw",
		UID:      "VPMADDUBSW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMADDUBSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 04 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x04},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDUBSW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmaddubsw",
		UID:      "VPMADDUBSW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMADDUBSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 04 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x04},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMADDUBSW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmaddubsw",
		UID:      "VPMADDUBSW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMADDUBSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 04 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x04},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDUBSW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmaddubsw",
		UID:      "VPMADDUBSW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMADDUBSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 04 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x04},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMADDUBSW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmaddubsw",
		UID:      "VPMADDUBSW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMADDUBSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 04 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x04},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDUBSW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmaddubsw",
		UID:      "VPMADDUBSW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMADDUBSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 04 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x04},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMADDUBSW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmaddubsw",
		UID:      "VPMADDUBSW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMADDUBSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 04 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x04},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDUBSW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmaddubsw",
		UID:      "VPMADDUBSW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMADDUBSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 04 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x04},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDUBSW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmaddubsw",
		UID:      "VPMADDUBSW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMADDUBSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 04 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x04},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDWD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmaddwd",
		UID:      "VPMADDWD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMADDWD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F5 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMADDWD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmaddwd",
		UID:      "VPMADDWD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMADDWD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG F5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDWD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmaddwd",
		UID:      "VPMADDWD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMADDWD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F5 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMADDWD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmaddwd",
		UID:      "VPMADDWD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMADDWD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG F5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDWD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmaddwd",
		UID:      "VPMADDWD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMADDWD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F5 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMADDWD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmaddwd",
		UID:      "VPMADDWD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMADDWD ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG F5 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDWD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmaddwd",
		UID:      "VPMADDWD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMADDWD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F5 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMADDWD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmaddwd",
		UID:      "VPMADDWD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMADDWD ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG F5 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDWD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmaddwd",
		UID:      "VPMADDWD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMADDWD zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG F5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMADDWD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmaddwd",
		UID:      "VPMADDWD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMADDWD zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG F5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmaxsb",
		UID:      "VPMAXSB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMAXSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 3C /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXSB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsb",
		UID:      "VPMAXSB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMAXSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 3C /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmaxsb",
		UID:      "VPMAXSB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMAXSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 3C /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXSB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmaxsb",
		UID:      "VPMAXSB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMAXSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 3C /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmaxsb",
		UID:      "VPMAXSB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMAXSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 3C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXSB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsb",
		UID:      "VPMAXSB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMAXSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 3C /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmaxsb",
		UID:      "VPMAXSB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMAXSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 3C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXSB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmaxsb",
		UID:      "VPMAXSB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMAXSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 3C /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsb",
		UID:      "VPMAXSB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMAXSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 3C /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmaxsb",
		UID:      "VPMAXSB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMAXSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 3C /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMAXSD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 3D /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXSD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMAXSD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMAXSD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 3D /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXSD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMAXSD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSD_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPMAXSD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMAXSD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 3D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXSD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMAXSD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 3D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMAXSD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 3D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXSD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMAXSD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 3D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSD_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPMAXSD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 3D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMAXSD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMAXSD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSD_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpmaxsd",
		UID:      "VPMAXSD_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPMAXSD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsq",
		UID:      "VPMAXSQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMAXSQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmaxsq",
		UID:      "VPMAXSQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMAXSQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpmaxsq",
		UID:      "VPMAXSQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPMAXSQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsq",
		UID:      "VPMAXSQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMAXSQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 3D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmaxsq",
		UID:      "VPMAXSQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMAXSQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 3D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpmaxsq",
		UID:      "VPMAXSQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPMAXSQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 3D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsq",
		UID:      "VPMAXSQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMAXSQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmaxsq",
		UID:      "VPMAXSQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMAXSQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpmaxsq",
		UID:      "VPMAXSQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPMAXSQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 3D /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXSW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmaxsw",
		UID:      "VPMAXSW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMAXSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG EE /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xee},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXSW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsw",
		UID:      "VPMAXSW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMAXSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG EE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xee},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmaxsw",
		UID:      "VPMAXSW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMAXSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG EE /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xee},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXSW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmaxsw",
		UID:      "VPMAXSW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMAXSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG EE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xee},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmaxsw",
		UID:      "VPMAXSW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMAXSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG EE /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xee},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXSW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsw",
		UID:      "VPMAXSW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMAXSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG EE /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xee},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmaxsw",
		UID:      "VPMAXSW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMAXSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG EE /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xee},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXSW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmaxsw",
		UID:      "VPMAXSW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMAXSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG EE /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xee},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxsw",
		UID:      "VPMAXSW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMAXSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG EE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xee},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXSW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmaxsw",
		UID:      "VPMAXSW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMAXSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG EE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xee},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmaxub",
		UID:      "VPMAXUB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMAXUB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F DE /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXUB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxub",
		UID:      "VPMAXUB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMAXUB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG DE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmaxub",
		UID:      "VPMAXUB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMAXUB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F DE /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXUB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmaxub",
		UID:      "VPMAXUB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMAXUB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG DE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmaxub",
		UID:      "VPMAXUB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMAXUB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F DE /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXUB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxub",
		UID:      "VPMAXUB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMAXUB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG DE /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmaxub",
		UID:      "VPMAXUB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMAXUB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F DE /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXUB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmaxub",
		UID:      "VPMAXUB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMAXUB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG DE /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxub",
		UID:      "VPMAXUB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMAXUB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG DE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmaxub",
		UID:      "VPMAXUB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMAXUB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG DE /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xde},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMAXUD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 3F /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXUD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMAXUD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMAXUD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 3F /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXUD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMAXUD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUD_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPMAXUD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMAXUD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 3F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXUD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMAXUD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 3F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMAXUD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 3F /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXUD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMAXUD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 3F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUD_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPMAXUD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 3F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMAXUD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMAXUD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUD_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpmaxud",
		UID:      "VPMAXUD_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPMAXUD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxuq",
		UID:      "VPMAXUQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMAXUQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmaxuq",
		UID:      "VPMAXUQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMAXUQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpmaxuq",
		UID:      "VPMAXUQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPMAXUQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxuq",
		UID:      "VPMAXUQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMAXUQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 3F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmaxuq",
		UID:      "VPMAXUQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMAXUQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 3F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpmaxuq",
		UID:      "VPMAXUQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPMAXUQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 3F /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxuq",
		UID:      "VPMAXUQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMAXUQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmaxuq",
		UID:      "VPMAXUQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMAXUQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpmaxuq",
		UID:      "VPMAXUQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPMAXUQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 3F /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3f},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMAXUW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmaxuw",
		UID:      "VPMAXUW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMAXUW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38 3E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXUW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxuw",
		UID:      "VPMAXUW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMAXUW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 3E /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmaxuw",
		UID:      "VPMAXUW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMAXUW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38 3E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMAXUW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmaxuw",
		UID:      "VPMAXUW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMAXUW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 3E /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmaxuw",
		UID:      "VPMAXUW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMAXUW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38 3E /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXUW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxuw",
		UID:      "VPMAXUW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMAXUW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 3E /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmaxuw",
		UID:      "VPMAXUW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMAXUW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38 3E /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMAXUW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmaxuw",
		UID:      "VPMAXUW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMAXUW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 3E /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmaxuw",
		UID:      "VPMAXUW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMAXUW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 3E /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMAXUW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmaxuw",
		UID:      "VPMAXUW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMAXUW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 3E /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpminsb",
		UID:      "VPMINSB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMINSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38 38 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x38},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINSB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpminsb",
		UID:      "VPMINSB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMINSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 38 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x38},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpminsb",
		UID:      "VPMINSB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMINSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38 38 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x38},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINSB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpminsb",
		UID:      "VPMINSB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMINSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 38 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x38},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpminsb",
		UID:      "VPMINSB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMINSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38 38 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x38},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINSB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpminsb",
		UID:      "VPMINSB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMINSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 38 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x38},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpminsb",
		UID:      "VPMINSB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMINSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38 38 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x38},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINSB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpminsb",
		UID:      "VPMINSB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMINSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 38 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x38},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpminsb",
		UID:      "VPMINSB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMINSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 38 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x38},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpminsb",
		UID:      "VPMINSB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMINSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 38 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x38},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMINSD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 39 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINSD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMINSD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMINSD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 39 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINSD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMINSD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSD_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPMINSD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMINSD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 39 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINSD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMINSD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 39 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMINSD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 39 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINSD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMINSD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 39 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSD_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPMINSD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 39 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMINSD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMINSD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSD_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpminsd",
		UID:      "VPMINSD_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPMINSD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpminsq",
		UID:      "VPMINSQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMINSQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpminsq",
		UID:      "VPMINSQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMINSQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpminsq",
		UID:      "VPMINSQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPMINSQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpminsq",
		UID:      "VPMINSQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMINSQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 39 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpminsq",
		UID:      "VPMINSQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMINSQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 39 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpminsq",
		UID:      "VPMINSQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPMINSQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 39 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpminsq",
		UID:      "VPMINSQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMINSQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpminsq",
		UID:      "VPMINSQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMINSQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpminsq",
		UID:      "VPMINSQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPMINSQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 39 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x39},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINSW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpminsw",
		UID:      "VPMINSW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMINSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F EA /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xea},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINSW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpminsw",
		UID:      "VPMINSW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMINSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG EA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xea},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpminsw",
		UID:      "VPMINSW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMINSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F EA /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xea},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINSW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpminsw",
		UID:      "VPMINSW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMINSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG EA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xea},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpminsw",
		UID:      "VPMINSW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMINSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F EA /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xea},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINSW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpminsw",
		UID:      "VPMINSW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMINSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG EA /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xea},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpminsw",
		UID:      "VPMINSW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMINSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F EA /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xea},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINSW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpminsw",
		UID:      "VPMINSW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMINSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG EA /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xea},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpminsw",
		UID:      "VPMINSW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMINSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG EA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xea},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINSW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpminsw",
		UID:      "VPMINSW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMINSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG EA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xea},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpminub",
		UID:      "VPMINUB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMINUB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F DA /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xda},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINUB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpminub",
		UID:      "VPMINUB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMINUB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F DA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xda},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpminub",
		UID:      "VPMINUB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMINUB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F DA /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xda},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINUB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpminub",
		UID:      "VPMINUB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMINUB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F DA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xda},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpminub",
		UID:      "VPMINUB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMINUB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F DA /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xda},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINUB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpminub",
		UID:      "VPMINUB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMINUB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F DA /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xda},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpminub",
		UID:      "VPMINUB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMINUB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F DA /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xda},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINUB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpminub",
		UID:      "VPMINUB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMINUB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F DA /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xda},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpminub",
		UID:      "VPMINUB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMINUB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F DA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xda},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpminub",
		UID:      "VPMINUB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMINUB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F DA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xda},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMINUD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 3B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINUD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMINUD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMINUD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 3B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINUD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMINUD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUD_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPMINUD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMINUD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 3B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINUD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMINUD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 3B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMINUD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 3B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINUD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMINUD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 3B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUD_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPMINUD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 3B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMINUD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMINUD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUD_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpminud",
		UID:      "VPMINUD_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPMINUD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpminuq",
		UID:      "VPMINUQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMINUQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpminuq",
		UID:      "VPMINUQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMINUQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpminuq",
		UID:      "VPMINUQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPMINUQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpminuq",
		UID:      "VPMINUQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMINUQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 3B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpminuq",
		UID:      "VPMINUQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMINUQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 3B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpminuq",
		UID:      "VPMINUQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPMINUQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 3B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpminuq",
		UID:      "VPMINUQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMINUQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpminuq",
		UID:      "VPMINUQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMINUQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpminuq",
		UID:      "VPMINUQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPMINUQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 3B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMINUW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpminuw",
		UID:      "VPMINUW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMINUW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38 3A /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINUW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpminuw",
		UID:      "VPMINUW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMINUW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38 3A /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpminuw",
		UID:      "VPMINUW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMINUW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38 3A /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMINUW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpminuw",
		UID:      "VPMINUW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMINUW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38 3A /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpminuw",
		UID:      "VPMINUW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMINUW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38 3A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINUW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpminuw",
		UID:      "VPMINUW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMINUW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38 3A /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpminuw",
		UID:      "VPMINUW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMINUW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38 3A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x3a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMINUW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpminuw",
		UID:      "VPMINUW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMINUW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38 3A /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpminuw",
		UID:      "VPMINUW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMINUW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38 3A /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMINUW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpminuw",
		UID:      "VPMINUW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMINUW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38 3A /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x3a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMOVMSKB_R32_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovmskb",
		UID:      "VPMOVMSKB_R32_XMM2_VEX",
		Syntax:   "VPMOVMSKB r32, xmm2",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D7 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVMSKB_R32_YMM2_VEX = &Instruction{
		Mnemonic: "vpmovmskb",
		UID:      "VPMOVMSKB_R32_YMM2_VEX",
		Syntax:   "VPMOVMSKB r32, ymm2",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D7 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd7},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamR32, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXBD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxbd",
		UID:      "VPMOVSXBD_XMM1_XMM2_VEX",
		Syntax:   "VPMOVSXBD xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 21 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXBD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxbd",
		UID:      "VPMOVSXBD_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXBD xmm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 21 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXBD_XMM1_M32_VEX = &Instruction{
		Mnemonic: "vpmovsxbd",
		UID:      "VPMOVSXBD_XMM1_M32_VEX",
		Syntax:   "VPMOVSXBD xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 21 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXBD_XMM1_M32_EVEX = &Instruction{
		Mnemonic: "vpmovsxbd",
		UID:      "VPMOVSXBD_XMM1_M32_EVEX",
		Syntax:   "VPMOVSXBD xmm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 21 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXBD_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxbd",
		UID:      "VPMOVSXBD_YMM1_XMM2_VEX",
		Syntax:   "VPMOVSXBD ymm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 21 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXBD_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxbd",
		UID:      "VPMOVSXBD_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXBD ymm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 21 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXBD_YMM1_M64_VEX = &Instruction{
		Mnemonic: "vpmovsxbd",
		UID:      "VPMOVSXBD_YMM1_M64_VEX",
		Syntax:   "VPMOVSXBD ymm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 21 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXBD_YMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovsxbd",
		UID:      "VPMOVSXBD_YMM1_M64_EVEX",
		Syntax:   "VPMOVSXBD ymm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 21 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXBD_ZMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxbd",
		UID:      "VPMOVSXBD_ZMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXBD zmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 21 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXBD_ZMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpmovsxbd",
		UID:      "VPMOVSXBD_ZMM1_M128_EVEX",
		Syntax:   "VPMOVSXBD zmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 21 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x21},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXBQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxbq",
		UID:      "VPMOVSXBQ_XMM1_XMM2_VEX",
		Syntax:   "VPMOVSXBQ xmm1, xmm2/m16",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 22 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXBQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxbq",
		UID:      "VPMOVSXBQ_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXBQ xmm1 {k1}{z}, xmm2/m16",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 22 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVSXBQ_XMM1_M16_VEX = &Instruction{
		Mnemonic: "vpmovsxbq",
		UID:      "VPMOVSXBQ_XMM1_M16_VEX",
		Syntax:   "VPMOVSXBQ xmm1, xmm2/m16",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 22 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM16},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXBQ_XMM1_M16_EVEX = &Instruction{
		Mnemonic: "vpmovsxbq",
		UID:      "VPMOVSXBQ_XMM1_M16_EVEX",
		Syntax:   "VPMOVSXBQ xmm1 {k1}{z}, xmm2/m16",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 22 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM16},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVSXBQ_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxbq",
		UID:      "VPMOVSXBQ_YMM1_XMM2_VEX",
		Syntax:   "VPMOVSXBQ ymm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 22 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXBQ_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxbq",
		UID:      "VPMOVSXBQ_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXBQ ymm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 22 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVSXBQ_YMM1_M32_VEX = &Instruction{
		Mnemonic: "vpmovsxbq",
		UID:      "VPMOVSXBQ_YMM1_M32_VEX",
		Syntax:   "VPMOVSXBQ ymm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 22 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXBQ_YMM1_M32_EVEX = &Instruction{
		Mnemonic: "vpmovsxbq",
		UID:      "VPMOVSXBQ_YMM1_M32_EVEX",
		Syntax:   "VPMOVSXBQ ymm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 22 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVSXBQ_ZMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxbq",
		UID:      "VPMOVSXBQ_ZMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXBQ zmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 22 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVSXBQ_ZMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovsxbq",
		UID:      "VPMOVSXBQ_ZMM1_M64_EVEX",
		Syntax:   "VPMOVSXBQ zmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 22 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x22},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVSXBW_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxbw",
		UID:      "VPMOVSXBW_XMM1_XMM2_VEX",
		Syntax:   "VPMOVSXBW xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 20 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXBW_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxbw",
		UID:      "VPMOVSXBW_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXBW xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 20 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXBW_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vpmovsxbw",
		UID:      "VPMOVSXBW_XMM1_M64_VEX",
		Syntax:   "VPMOVSXBW xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 20 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXBW_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovsxbw",
		UID:      "VPMOVSXBW_XMM1_M64_EVEX",
		Syntax:   "VPMOVSXBW xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 20 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXBW_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxbw",
		UID:      "VPMOVSXBW_YMM1_XMM2_VEX",
		Syntax:   "VPMOVSXBW ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 20 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXBW_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxbw",
		UID:      "VPMOVSXBW_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXBW ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 20 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXBW_YMM1_M128_VEX = &Instruction{
		Mnemonic: "vpmovsxbw",
		UID:      "VPMOVSXBW_YMM1_M128_VEX",
		Syntax:   "VPMOVSXBW ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 20 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXBW_YMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpmovsxbw",
		UID:      "VPMOVSXBW_YMM1_M128_EVEX",
		Syntax:   "VPMOVSXBW ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 20 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXBW_ZMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxbw",
		UID:      "VPMOVSXBW_ZMM1_YMM2_EVEX",
		Syntax:   "VPMOVSXBW zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 20 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXBW_ZMM1_M256_EVEX = &Instruction{
		Mnemonic: "vpmovsxbw",
		UID:      "VPMOVSXBW_ZMM1_M256_EVEX",
		Syntax:   "VPMOVSXBW zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 20 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x20},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXDQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxdq",
		UID:      "VPMOVSXDQ_XMM1_XMM2_VEX",
		Syntax:   "VPMOVSXDQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 25 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x25},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXDQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxdq",
		UID:      "VPMOVSXDQ_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXDQ xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 25 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x25},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXDQ_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vpmovsxdq",
		UID:      "VPMOVSXDQ_XMM1_M64_VEX",
		Syntax:   "VPMOVSXDQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 25 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x25},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXDQ_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovsxdq",
		UID:      "VPMOVSXDQ_XMM1_M64_EVEX",
		Syntax:   "VPMOVSXDQ xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 25 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x25},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXDQ_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxdq",
		UID:      "VPMOVSXDQ_YMM1_XMM2_VEX",
		Syntax:   "VPMOVSXDQ ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 25 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x25},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXDQ_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxdq",
		UID:      "VPMOVSXDQ_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXDQ ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 25 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x25},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXDQ_YMM1_M128_VEX = &Instruction{
		Mnemonic: "vpmovsxdq",
		UID:      "VPMOVSXDQ_YMM1_M128_VEX",
		Syntax:   "VPMOVSXDQ ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 25 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x25},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXDQ_YMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpmovsxdq",
		UID:      "VPMOVSXDQ_YMM1_M128_EVEX",
		Syntax:   "VPMOVSXDQ ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 25 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x25},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXDQ_ZMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxdq",
		UID:      "VPMOVSXDQ_ZMM1_YMM2_EVEX",
		Syntax:   "VPMOVSXDQ zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 25 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x25},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXDQ_ZMM1_M256_EVEX = &Instruction{
		Mnemonic: "vpmovsxdq",
		UID:      "VPMOVSXDQ_ZMM1_M256_EVEX",
		Syntax:   "VPMOVSXDQ zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 25 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x25},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXWD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxwd",
		UID:      "VPMOVSXWD_XMM1_XMM2_VEX",
		Syntax:   "VPMOVSXWD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 23 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x23},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXWD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxwd",
		UID:      "VPMOVSXWD_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXWD xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 23 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x23},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXWD_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vpmovsxwd",
		UID:      "VPMOVSXWD_XMM1_M64_VEX",
		Syntax:   "VPMOVSXWD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 23 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x23},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXWD_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovsxwd",
		UID:      "VPMOVSXWD_XMM1_M64_EVEX",
		Syntax:   "VPMOVSXWD xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 23 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x23},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXWD_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxwd",
		UID:      "VPMOVSXWD_YMM1_XMM2_VEX",
		Syntax:   "VPMOVSXWD ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 23 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x23},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXWD_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxwd",
		UID:      "VPMOVSXWD_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXWD ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 23 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x23},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXWD_YMM1_M128_VEX = &Instruction{
		Mnemonic: "vpmovsxwd",
		UID:      "VPMOVSXWD_YMM1_M128_VEX",
		Syntax:   "VPMOVSXWD ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 23 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x23},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXWD_YMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpmovsxwd",
		UID:      "VPMOVSXWD_YMM1_M128_EVEX",
		Syntax:   "VPMOVSXWD ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 23 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x23},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXWD_ZMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxwd",
		UID:      "VPMOVSXWD_ZMM1_YMM2_EVEX",
		Syntax:   "VPMOVSXWD zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 23 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x23},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXWD_ZMM1_M256_EVEX = &Instruction{
		Mnemonic: "vpmovsxwd",
		UID:      "VPMOVSXWD_ZMM1_M256_EVEX",
		Syntax:   "VPMOVSXWD zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 23 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x23},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVSXWQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxwq",
		UID:      "VPMOVSXWQ_XMM1_XMM2_VEX",
		Syntax:   "VPMOVSXWQ xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 24 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x24},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXWQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxwq",
		UID:      "VPMOVSXWQ_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXWQ xmm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 24 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x24},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXWQ_XMM1_M32_VEX = &Instruction{
		Mnemonic: "vpmovsxwq",
		UID:      "VPMOVSXWQ_XMM1_M32_VEX",
		Syntax:   "VPMOVSXWQ xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 24 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x24},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVSXWQ_XMM1_M32_EVEX = &Instruction{
		Mnemonic: "vpmovsxwq",
		UID:      "VPMOVSXWQ_XMM1_M32_EVEX",
		Syntax:   "VPMOVSXWQ xmm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 24 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x24},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXWQ_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovsxwq",
		UID:      "VPMOVSXWQ_YMM1_XMM2_VEX",
		Syntax:   "VPMOVSXWQ ymm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 24 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x24},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXWQ_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxwq",
		UID:      "VPMOVSXWQ_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXWQ ymm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 24 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x24},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXWQ_YMM1_M64_VEX = &Instruction{
		Mnemonic: "vpmovsxwq",
		UID:      "VPMOVSXWQ_YMM1_M64_VEX",
		Syntax:   "VPMOVSXWQ ymm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 24 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x24},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVSXWQ_YMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovsxwq",
		UID:      "VPMOVSXWQ_YMM1_M64_EVEX",
		Syntax:   "VPMOVSXWQ ymm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 24 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x24},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXWQ_ZMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovsxwq",
		UID:      "VPMOVSXWQ_ZMM1_XMM2_EVEX",
		Syntax:   "VPMOVSXWQ zmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 24 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x24},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVSXWQ_ZMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpmovsxwq",
		UID:      "VPMOVSXWQ_ZMM1_M128_EVEX",
		Syntax:   "VPMOVSXWQ zmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 24 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x24},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXBD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxbd",
		UID:      "VPMOVZXBD_XMM1_XMM2_VEX",
		Syntax:   "VPMOVZXBD xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 31 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXBD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxbd",
		UID:      "VPMOVZXBD_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXBD xmm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 31 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXBD_XMM1_M32_VEX = &Instruction{
		Mnemonic: "vpmovzxbd",
		UID:      "VPMOVZXBD_XMM1_M32_VEX",
		Syntax:   "VPMOVZXBD xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 31 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXBD_XMM1_M32_EVEX = &Instruction{
		Mnemonic: "vpmovzxbd",
		UID:      "VPMOVZXBD_XMM1_M32_EVEX",
		Syntax:   "VPMOVZXBD xmm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 31 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXBD_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxbd",
		UID:      "VPMOVZXBD_YMM1_XMM2_VEX",
		Syntax:   "VPMOVZXBD ymm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 31 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXBD_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxbd",
		UID:      "VPMOVZXBD_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXBD ymm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 31 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXBD_YMM1_M64_VEX = &Instruction{
		Mnemonic: "vpmovzxbd",
		UID:      "VPMOVZXBD_YMM1_M64_VEX",
		Syntax:   "VPMOVZXBD ymm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 31 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXBD_YMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovzxbd",
		UID:      "VPMOVZXBD_YMM1_M64_EVEX",
		Syntax:   "VPMOVZXBD ymm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 31 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXBD_ZMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxbd",
		UID:      "VPMOVZXBD_ZMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXBD zmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 31 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXBD_ZMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpmovzxbd",
		UID:      "VPMOVZXBD_ZMM1_M128_EVEX",
		Syntax:   "VPMOVZXBD zmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 31 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x31},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXBQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxbq",
		UID:      "VPMOVZXBQ_XMM1_XMM2_VEX",
		Syntax:   "VPMOVZXBQ xmm1, xmm2/m16",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 32 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXBQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxbq",
		UID:      "VPMOVZXBQ_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXBQ xmm1 {k1}{z}, xmm2/m16",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 32 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVZXBQ_XMM1_M16_VEX = &Instruction{
		Mnemonic: "vpmovzxbq",
		UID:      "VPMOVZXBQ_XMM1_M16_VEX",
		Syntax:   "VPMOVZXBQ xmm1, xmm2/m16",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 32 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM16},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXBQ_XMM1_M16_EVEX = &Instruction{
		Mnemonic: "vpmovzxbq",
		UID:      "VPMOVZXBQ_XMM1_M16_EVEX",
		Syntax:   "VPMOVZXBQ xmm1 {k1}{z}, xmm2/m16",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 32 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM16},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVZXBQ_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxbq",
		UID:      "VPMOVZXBQ_YMM1_XMM2_VEX",
		Syntax:   "VPMOVZXBQ ymm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 32 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXBQ_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxbq",
		UID:      "VPMOVZXBQ_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXBQ ymm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 32 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVZXBQ_YMM1_M32_VEX = &Instruction{
		Mnemonic: "vpmovzxbq",
		UID:      "VPMOVZXBQ_YMM1_M32_VEX",
		Syntax:   "VPMOVZXBQ ymm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 32 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXBQ_YMM1_M32_EVEX = &Instruction{
		Mnemonic: "vpmovzxbq",
		UID:      "VPMOVZXBQ_YMM1_M32_EVEX",
		Syntax:   "VPMOVZXBQ ymm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 32 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVZXBQ_ZMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxbq",
		UID:      "VPMOVZXBQ_ZMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXBQ zmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 32 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVZXBQ_ZMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovzxbq",
		UID:      "VPMOVZXBQ_ZMM1_M64_EVEX",
		Syntax:   "VPMOVZXBQ zmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 32 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x32},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleEighthMem,
	}
	VPMOVZXBW_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxbw",
		UID:      "VPMOVZXBW_XMM1_XMM2_VEX",
		Syntax:   "VPMOVZXBW xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 30 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXBW_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxbw",
		UID:      "VPMOVZXBW_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXBW xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 30 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXBW_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vpmovzxbw",
		UID:      "VPMOVZXBW_XMM1_M64_VEX",
		Syntax:   "VPMOVZXBW xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 30 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXBW_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovzxbw",
		UID:      "VPMOVZXBW_XMM1_M64_EVEX",
		Syntax:   "VPMOVZXBW xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 30 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXBW_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxbw",
		UID:      "VPMOVZXBW_YMM1_XMM2_VEX",
		Syntax:   "VPMOVZXBW ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 30 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXBW_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxbw",
		UID:      "VPMOVZXBW_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXBW ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 30 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXBW_YMM1_M128_VEX = &Instruction{
		Mnemonic: "vpmovzxbw",
		UID:      "VPMOVZXBW_YMM1_M128_VEX",
		Syntax:   "VPMOVZXBW ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 30 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXBW_YMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpmovzxbw",
		UID:      "VPMOVZXBW_YMM1_M128_EVEX",
		Syntax:   "VPMOVZXBW ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 30 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXBW_ZMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxbw",
		UID:      "VPMOVZXBW_ZMM1_YMM2_EVEX",
		Syntax:   "VPMOVZXBW zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 30 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXBW_ZMM1_M256_EVEX = &Instruction{
		Mnemonic: "vpmovzxbw",
		UID:      "VPMOVZXBW_ZMM1_M256_EVEX",
		Syntax:   "VPMOVZXBW zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 30 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x30},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXDQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxdq",
		UID:      "VPMOVZXDQ_XMM1_XMM2_VEX",
		Syntax:   "VPMOVZXDQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 35 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x35},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXDQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxdq",
		UID:      "VPMOVZXDQ_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXDQ xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 35 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x35},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXDQ_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vpmovzxdq",
		UID:      "VPMOVZXDQ_XMM1_M64_VEX",
		Syntax:   "VPMOVZXDQ xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 35 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x35},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXDQ_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovzxdq",
		UID:      "VPMOVZXDQ_XMM1_M64_EVEX",
		Syntax:   "VPMOVZXDQ xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 35 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x35},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXDQ_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxdq",
		UID:      "VPMOVZXDQ_YMM1_XMM2_VEX",
		Syntax:   "VPMOVZXDQ ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 35 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x35},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXDQ_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxdq",
		UID:      "VPMOVZXDQ_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXDQ ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 35 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x35},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXDQ_YMM1_M128_VEX = &Instruction{
		Mnemonic: "vpmovzxdq",
		UID:      "VPMOVZXDQ_YMM1_M128_VEX",
		Syntax:   "VPMOVZXDQ ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 35 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x35},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXDQ_YMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpmovzxdq",
		UID:      "VPMOVZXDQ_YMM1_M128_EVEX",
		Syntax:   "VPMOVZXDQ ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 35 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x35},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXDQ_ZMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxdq",
		UID:      "VPMOVZXDQ_ZMM1_YMM2_EVEX",
		Syntax:   "VPMOVZXDQ zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 35 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x35},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXDQ_ZMM1_M256_EVEX = &Instruction{
		Mnemonic: "vpmovzxdq",
		UID:      "VPMOVZXDQ_ZMM1_M256_EVEX",
		Syntax:   "VPMOVZXDQ zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 35 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x35},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXWD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxwd",
		UID:      "VPMOVZXWD_XMM1_XMM2_VEX",
		Syntax:   "VPMOVZXWD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 33 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXWD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxwd",
		UID:      "VPMOVZXWD_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXWD xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 33 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXWD_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vpmovzxwd",
		UID:      "VPMOVZXWD_XMM1_M64_VEX",
		Syntax:   "VPMOVZXWD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 33 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXWD_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovzxwd",
		UID:      "VPMOVZXWD_XMM1_M64_EVEX",
		Syntax:   "VPMOVZXWD xmm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 33 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXWD_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxwd",
		UID:      "VPMOVZXWD_YMM1_XMM2_VEX",
		Syntax:   "VPMOVZXWD ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 33 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXWD_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxwd",
		UID:      "VPMOVZXWD_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXWD ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 33 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXWD_YMM1_M128_VEX = &Instruction{
		Mnemonic: "vpmovzxwd",
		UID:      "VPMOVZXWD_YMM1_M128_VEX",
		Syntax:   "VPMOVZXWD ymm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 33 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXWD_YMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpmovzxwd",
		UID:      "VPMOVZXWD_YMM1_M128_EVEX",
		Syntax:   "VPMOVZXWD ymm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 33 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXWD_ZMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxwd",
		UID:      "VPMOVZXWD_ZMM1_YMM2_EVEX",
		Syntax:   "VPMOVZXWD zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 33 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXWD_ZMM1_M256_EVEX = &Instruction{
		Mnemonic: "vpmovzxwd",
		UID:      "VPMOVZXWD_ZMM1_M256_EVEX",
		Syntax:   "VPMOVZXWD zmm1 {k1}{z}, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 33 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x33},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleHalfMem,
	}
	VPMOVZXWQ_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxwq",
		UID:      "VPMOVZXWQ_XMM1_XMM2_VEX",
		Syntax:   "VPMOVZXWQ xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 34 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x34},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXWQ_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxwq",
		UID:      "VPMOVZXWQ_XMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXWQ xmm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 34 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x34},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXWQ_XMM1_M32_VEX = &Instruction{
		Mnemonic: "vpmovzxwq",
		UID:      "VPMOVZXWQ_XMM1_M32_VEX",
		Syntax:   "VPMOVZXWQ xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 34 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x34},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMOVZXWQ_XMM1_M32_EVEX = &Instruction{
		Mnemonic: "vpmovzxwq",
		UID:      "VPMOVZXWQ_XMM1_M32_EVEX",
		Syntax:   "VPMOVZXWQ xmm1 {k1}{z}, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 34 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x34},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXWQ_YMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vpmovzxwq",
		UID:      "VPMOVZXWQ_YMM1_XMM2_VEX",
		Syntax:   "VPMOVZXWQ ymm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 34 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x34},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXWQ_YMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxwq",
		UID:      "VPMOVZXWQ_YMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXWQ ymm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 34 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x34},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXWQ_YMM1_M64_VEX = &Instruction{
		Mnemonic: "vpmovzxwq",
		UID:      "VPMOVZXWQ_YMM1_M64_VEX",
		Syntax:   "VPMOVZXWQ ymm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 34 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x34},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMOVZXWQ_YMM1_M64_EVEX = &Instruction{
		Mnemonic: "vpmovzxwq",
		UID:      "VPMOVZXWQ_YMM1_M64_EVEX",
		Syntax:   "VPMOVZXWQ ymm1 {k1}{z}, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 34 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x34},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXWQ_ZMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmovzxwq",
		UID:      "VPMOVZXWQ_ZMM1_XMM2_EVEX",
		Syntax:   "VPMOVZXWQ zmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 34 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x34},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMOVZXWQ_ZMM1_M128_EVEX = &Instruction{
		Mnemonic: "vpmovzxwq",
		UID:      "VPMOVZXWQ_ZMM1_M128_EVEX",
		Syntax:   "VPMOVZXWQ zmm1 {k1}{z}, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 34 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x34},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleQuarterMem,
	}
	VPMULDQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMULDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 28 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULDQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMULDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 28 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULDQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMULDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 28 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULDQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMULDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 28 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULDQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPMULDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 28 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULDQ_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMULDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 28 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULDQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMULDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 28 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULDQ_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMULDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 28 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULDQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMULDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 28 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULDQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPMULDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 28 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULDQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMULDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 28 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULDQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMULDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 28 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULDQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpmuldq",
		UID:      "VPMULDQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPMULDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 28 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x28},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULHRSW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmulhrsw",
		UID:      "VPMULHRSW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMULHRSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 0B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULHRSW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmulhrsw",
		UID:      "VPMULHRSW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMULHRSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 0B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHRSW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmulhrsw",
		UID:      "VPMULHRSW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMULHRSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 0B /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULHRSW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmulhrsw",
		UID:      "VPMULHRSW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMULHRSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 0B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHRSW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmulhrsw",
		UID:      "VPMULHRSW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMULHRSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 0B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULHRSW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmulhrsw",
		UID:      "VPMULHRSW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMULHRSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 0B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHRSW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmulhrsw",
		UID:      "VPMULHRSW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMULHRSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 0B /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULHRSW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmulhrsw",
		UID:      "VPMULHRSW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMULHRSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 0B /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHRSW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmulhrsw",
		UID:      "VPMULHRSW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMULHRSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 0B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHRSW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmulhrsw",
		UID:      "VPMULHRSW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMULHRSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 0B /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHUW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmulhuw",
		UID:      "VPMULHUW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMULHUW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E4 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULHUW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmulhuw",
		UID:      "VPMULHUW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMULHUW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHUW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmulhuw",
		UID:      "VPMULHUW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMULHUW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E4 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULHUW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmulhuw",
		UID:      "VPMULHUW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMULHUW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHUW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmulhuw",
		UID:      "VPMULHUW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMULHUW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E4 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULHUW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmulhuw",
		UID:      "VPMULHUW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMULHUW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E4 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHUW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmulhuw",
		UID:      "VPMULHUW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMULHUW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E4 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULHUW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmulhuw",
		UID:      "VPMULHUW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMULHUW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E4 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHUW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmulhuw",
		UID:      "VPMULHUW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMULHUW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHUW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmulhuw",
		UID:      "VPMULHUW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMULHUW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmulhw",
		UID:      "VPMULHW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMULHW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E5 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULHW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmulhw",
		UID:      "VPMULHW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMULHW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmulhw",
		UID:      "VPMULHW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMULHW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E5 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULHW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmulhw",
		UID:      "VPMULHW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMULHW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmulhw",
		UID:      "VPMULHW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMULHW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E5 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULHW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmulhw",
		UID:      "VPMULHW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMULHW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E5 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmulhw",
		UID:      "VPMULHW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMULHW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E5 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULHW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmulhw",
		UID:      "VPMULHW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMULHW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E5 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmulhw",
		UID:      "VPMULHW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMULHW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULHW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmulhw",
		UID:      "VPMULHW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMULHW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULLD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMULLD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 40 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULLD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMULLD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULLD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMULLD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 40 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULLD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMULLD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULLD_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPMULLD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W0 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULLD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMULLD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 40 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULLD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMULLD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 40 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULLD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMULLD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 40 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULLD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMULLD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 40 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULLD_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPMULLD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W0 40 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULLD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMULLD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULLD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMULLD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULLD_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpmulld",
		UID:      "VPMULLD_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPMULLD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W0 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULLQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmullq",
		UID:      "VPMULLQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMULLQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VPMULLQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmullq",
		UID:      "VPMULLQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMULLQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VPMULLQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpmullq",
		UID:      "VPMULLQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPMULLQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.W1 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VPMULLQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmullq",
		UID:      "VPMULLQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMULLQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 40 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VLA VX512DQ"},
		Tuple:      TupleFull,
	}
	VPMULLQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmullq",
		UID:      "VPMULLQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMULLQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 40 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VLA VX512DQ"},
		Tuple:      TupleFull,
	}
	VPMULLQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpmullq",
		UID:      "VPMULLQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPMULLQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.W1 40 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VLA VX512DQ"},
		Tuple:      TupleFull,
	}
	VPMULLQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmullq",
		UID:      "VPMULLQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMULLQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VPMULLQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmullq",
		UID:      "VPMULLQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMULLQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VPMULLQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpmullq",
		UID:      "VPMULLQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPMULLQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.W1 40 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x40},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VPMULLW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmullw",
		UID:      "VPMULLW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMULLW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D5 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULLW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmullw",
		UID:      "VPMULLW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMULLW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG D5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULLW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmullw",
		UID:      "VPMULLW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMULLW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D5 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULLW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmullw",
		UID:      "VPMULLW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMULLW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG D5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULLW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmullw",
		UID:      "VPMULLW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMULLW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D5 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULLW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmullw",
		UID:      "VPMULLW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMULLW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG D5 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULLW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmullw",
		UID:      "VPMULLW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMULLW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D5 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULLW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmullw",
		UID:      "VPMULLW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMULLW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG D5 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULLW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmullw",
		UID:      "VPMULLW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMULLW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG D5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULLW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmullw",
		UID:      "VPMULLW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMULLW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG D5 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd5},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPMULUDQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPMULUDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F4 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULUDQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPMULUDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 F4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULUDQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPMULUDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F4 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPMULUDQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPMULUDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 F4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULUDQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPMULUDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 F4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULUDQ_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPMULUDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F4 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULUDQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPMULUDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 F4 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULUDQ_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_YMM1_YMMV_M256_VEX",
		Syntax:   "VPMULUDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F4 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPMULUDQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPMULUDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 F4 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULUDQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPMULUDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 F4 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULUDQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPMULUDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 F4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULUDQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPMULUDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 F4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPMULUDQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpmuludq",
		UID:      "VPMULUDQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPMULUDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 F4 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf4},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPOR_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpor",
		UID:      "VPOR_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPOR xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG EB /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPOR_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpor",
		UID:      "VPOR_XMM1_XMMV_M128_VEX",
		Syntax:   "VPOR xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG EB /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPOR_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpor",
		UID:      "VPOR_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPOR ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG EB /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPOR_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpor",
		UID:      "VPOR_YMM1_YMMV_M256_VEX",
		Syntax:   "VPOR ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG EB /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPORD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpord",
		UID:      "VPORD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPORD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpord",
		UID:      "VPORD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPORD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORD_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpord",
		UID:      "VPORD_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPORD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpord",
		UID:      "VPORD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPORD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 EB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpord",
		UID:      "VPORD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPORD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 EB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORD_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpord",
		UID:      "VPORD_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPORD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 EB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpord",
		UID:      "VPORD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPORD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPORD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpord",
		UID:      "VPORD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPORD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPORD_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpord",
		UID:      "VPORD_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPORD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPORQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vporq",
		UID:      "VPORQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPORQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vporq",
		UID:      "VPORQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPORQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vporq",
		UID:      "VPORQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPORQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vporq",
		UID:      "VPORQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPORQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 EB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vporq",
		UID:      "VPORQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPORQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 EB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vporq",
		UID:      "VPORQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPORQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 EB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPORQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vporq",
		UID:      "VPORQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPORQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPORQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vporq",
		UID:      "VPORQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPORQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPORQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vporq",
		UID:      "VPORQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPORQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 EB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xeb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSADBW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsadbw",
		UID:      "VPSADBW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSADBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F6 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   128,
	}
	VPSADBW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsadbw",
		UID:      "VPSADBW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSADBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG F6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VPSADBW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsadbw",
		UID:      "VPSADBW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSADBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F6 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   128,
	}
	VPSADBW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsadbw",
		UID:      "VPSADBW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSADBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG F6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		DataSize:   128,
		Tuple:      TupleFullMem,
	}
	VPSADBW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsadbw",
		UID:      "VPSADBW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSADBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F6 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
		DataSize:   256,
	}
	VPSADBW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpsadbw",
		UID:      "VPSADBW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPSADBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG F6 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VPSADBW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsadbw",
		UID:      "VPSADBW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSADBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F6 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
		DataSize:   256,
	}
	VPSADBW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpsadbw",
		UID:      "VPSADBW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPSADBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG F6 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		DataSize:   256,
		Tuple:      TupleFullMem,
	}
	VPSADBW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpsadbw",
		UID:      "VPSADBW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPSADBW zmm1, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG F6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSADBW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpsadbw",
		UID:      "VPSADBW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPSADBW zmm1, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG F6 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0xf6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpshufb",
		UID:      "VPSHUFB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSHUFB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 00 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x00},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSHUFB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpshufb",
		UID:      "VPSHUFB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSHUFB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 00 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x00},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpshufb",
		UID:      "VPSHUFB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSHUFB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 00 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x00},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSHUFB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpshufb",
		UID:      "VPSHUFB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSHUFB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F38.WIG 00 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x00},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpshufb",
		UID:      "VPSHUFB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSHUFB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 00 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x00},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSHUFB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpshufb",
		UID:      "VPSHUFB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPSHUFB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 00 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x00},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpshufb",
		UID:      "VPSHUFB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSHUFB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 00 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x00},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSHUFB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpshufb",
		UID:      "VPSHUFB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPSHUFB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F38.WIG 00 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x00},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpshufb",
		UID:      "VPSHUFB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPSHUFB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 00 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x00},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpshufb",
		UID:      "VPSHUFB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPSHUFB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F38.WIG 00 /r",
			VEXpp:     1,
			VEXm_mmmm: 2,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x00},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFD_XMM1_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_XMM1_XMM2_Imm8_VEX",
		Syntax:   "VPSHUFD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 70 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSHUFD_XMM1_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_XMM1_XMM2_Imm8_EVEX",
		Syntax:   "VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 70 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSHUFD_XMM1_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_XMM1_M128_Imm8_VEX",
		Syntax:   "VPSHUFD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 70 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSHUFD_XMM1_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_XMM1_M128_Imm8_EVEX",
		Syntax:   "VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 70 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSHUFD_XMM1_M32bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_XMM1_M32bcst128_Imm8_EVEX",
		Syntax:   "VPSHUFD xmm1 {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 70 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSHUFD_YMM1_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_YMM1_YMM2_Imm8_VEX",
		Syntax:   "VPSHUFD ymm1, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 70 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSHUFD_YMM1_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_YMM1_YMM2_Imm8_EVEX",
		Syntax:   "VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 70 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSHUFD_YMM1_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_YMM1_M256_Imm8_VEX",
		Syntax:   "VPSHUFD ymm1, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 70 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSHUFD_YMM1_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_YMM1_M256_Imm8_EVEX",
		Syntax:   "VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 70 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSHUFD_YMM1_M32bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_YMM1_M32bcst256_Imm8_EVEX",
		Syntax:   "VPSHUFD ymm1 {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 70 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSHUFD_ZMM1_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_ZMM1_ZMM2_Imm8_EVEX",
		Syntax:   "VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 70 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSHUFD_ZMM1_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_ZMM1_M512_Imm8_EVEX",
		Syntax:   "VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 70 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSHUFD_ZMM1_M32bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufd",
		UID:      "VPSHUFD_ZMM1_M32bcst512_Imm8_EVEX",
		Syntax:   "VPSHUFD zmm1 {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 70 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSHUFHW_XMM1_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpshufhw",
		UID:      "VPSHUFHW_XMM1_XMM2_Imm8_VEX",
		Syntax:   "VPSHUFHW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 70 /r ib",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSHUFHW_XMM1_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufhw",
		UID:      "VPSHUFHW_XMM1_XMM2_Imm8_EVEX",
		Syntax:   "VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.WIG 70 /r ib",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFHW_XMM1_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vpshufhw",
		UID:      "VPSHUFHW_XMM1_M128_Imm8_VEX",
		Syntax:   "VPSHUFHW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F3.0F.WIG 70 /r ib",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSHUFHW_XMM1_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufhw",
		UID:      "VPSHUFHW_XMM1_M128_Imm8_EVEX",
		Syntax:   "VPSHUFHW xmm1 {k1}{z}, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F3.0F.WIG 70 /r ib",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFHW_YMM1_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpshufhw",
		UID:      "VPSHUFHW_YMM1_YMM2_Imm8_VEX",
		Syntax:   "VPSHUFHW ymm1, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 70 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSHUFHW_YMM1_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufhw",
		UID:      "VPSHUFHW_YMM1_YMM2_Imm8_EVEX",
		Syntax:   "VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.WIG 70 /r ib",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFHW_YMM1_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vpshufhw",
		UID:      "VPSHUFHW_YMM1_M256_Imm8_VEX",
		Syntax:   "VPSHUFHW ymm1, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F3.0F.WIG 70 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSHUFHW_YMM1_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufhw",
		UID:      "VPSHUFHW_YMM1_M256_Imm8_EVEX",
		Syntax:   "VPSHUFHW ymm1 {k1}{z}, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F3.0F.WIG 70 /r ib",
			VEX_L:     true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFHW_ZMM1_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufhw",
		UID:      "VPSHUFHW_ZMM1_ZMM2_Imm8_EVEX",
		Syntax:   "VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.WIG 70 /r ib",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFHW_ZMM1_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshufhw",
		UID:      "VPSHUFHW_ZMM1_M512_Imm8_EVEX",
		Syntax:   "VPSHUFHW zmm1 {k1}{z}, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F3.0F.WIG 70 /r ib",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFLW_XMM1_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpshuflw",
		UID:      "VPSHUFLW_XMM1_XMM2_Imm8_VEX",
		Syntax:   "VPSHUFLW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG 70 /r ib",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSHUFLW_XMM1_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshuflw",
		UID:      "VPSHUFLW_XMM1_XMM2_Imm8_EVEX",
		Syntax:   "VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.WIG 70 /r ib",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFLW_XMM1_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vpshuflw",
		UID:      "VPSHUFLW_XMM1_M128_Imm8_VEX",
		Syntax:   "VPSHUFLW xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.F2.0F.WIG 70 /r ib",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSHUFLW_XMM1_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshuflw",
		UID:      "VPSHUFLW_XMM1_M128_Imm8_EVEX",
		Syntax:   "VPSHUFLW xmm1 {k1}{z}, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.F2.0F.WIG 70 /r ib",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFLW_YMM1_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpshuflw",
		UID:      "VPSHUFLW_YMM1_YMM2_Imm8_VEX",
		Syntax:   "VPSHUFLW ymm1, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG 70 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSHUFLW_YMM1_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshuflw",
		UID:      "VPSHUFLW_YMM1_YMM2_Imm8_EVEX",
		Syntax:   "VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.WIG 70 /r ib",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFLW_YMM1_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vpshuflw",
		UID:      "VPSHUFLW_YMM1_M256_Imm8_VEX",
		Syntax:   "VPSHUFLW ymm1, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.F2.0F.WIG 70 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSHUFLW_YMM1_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshuflw",
		UID:      "VPSHUFLW_YMM1_M256_Imm8_EVEX",
		Syntax:   "VPSHUFLW ymm1 {k1}{z}, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.F2.0F.WIG 70 /r ib",
			VEX_L:     true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFLW_ZMM1_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshuflw",
		UID:      "VPSHUFLW_ZMM1_ZMM2_Imm8_EVEX",
		Syntax:   "VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.WIG 70 /r ib",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSHUFLW_ZMM1_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpshuflw",
		UID:      "VPSHUFLW_ZMM1_M512_Imm8_EVEX",
		Syntax:   "VPSHUFLW zmm1 {k1}{z}, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.F2.0F.WIG 70 /r ib",
			VEXpp:     3,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x70},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSIGNB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsignb",
		UID:      "VPSIGNB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSIGNB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 08 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x08},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSIGNB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsignb",
		UID:      "VPSIGNB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSIGNB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 08 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x08},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSIGNB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsignb",
		UID:      "VPSIGNB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSIGNB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 08 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x08},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSIGNB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsignb",
		UID:      "VPSIGNB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSIGNB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 08 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x08},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSIGND_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsignd",
		UID:      "VPSIGND_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSIGND xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 0A /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x0a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSIGND_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsignd",
		UID:      "VPSIGND_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSIGND xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 0A /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x0a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSIGND_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsignd",
		UID:      "VPSIGND_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSIGND ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 0A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x0a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSIGND_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsignd",
		UID:      "VPSIGND_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSIGND ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 0A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x0a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSIGNW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsignw",
		UID:      "VPSIGNW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSIGNW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 09 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x09},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSIGNW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsignw",
		UID:      "VPSIGNW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSIGNW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 09 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x09},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSIGNW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsignw",
		UID:      "VPSIGNW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSIGNW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 09 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x09},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSIGNW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsignw",
		UID:      "VPSIGNW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSIGNW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 09 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x09},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSLLD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F2 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSLLD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSLLD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 F2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSLLD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F2 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSLLD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSLLD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 F2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLD_YMM1_YMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_YMM1_YMMV_XMM2_VEX",
		Syntax:   "VPSLLD ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F2 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLD_YMM1_YMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_YMM1_YMMV_XMM2_EVEX",
		Syntax:   "VPSLLD ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 F2 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLD_YMM1_YMMV_M128_VEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_YMM1_YMMV_M128_VEX",
		Syntax:   "VPSLLD ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F2 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLD_YMM1_YMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_YMM1_YMMV_M128_EVEX",
		Syntax:   "VPSLLD ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 F2 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLD_ZMM1_ZMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_ZMM1_ZMMV_XMM2_EVEX",
		Syntax:   "VPSLLD zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 F2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLD_ZMM1_ZMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_ZMM1_ZMMV_M128_EVEX",
		Syntax:   "VPSLLD zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 F2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLD_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPSLLD xmmV, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 72 /6 ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSLLD_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSLLD xmmV {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 72 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLD_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSLLD xmmV {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 72 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLD_XMMV_M32bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_XMMV_M32bcst128_Imm8_EVEX",
		Syntax:   "VPSLLD xmmV {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 72 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLD_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPSLLD ymmV, ymm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 72 /6 ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLD_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSLLD ymmV {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 72 /6 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLD_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSLLD ymmV {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 72 /6 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLD_YMMV_M32bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_YMMV_M32bcst256_Imm8_EVEX",
		Syntax:   "VPSLLD ymmV {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 72 /6 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLD_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSLLD zmmV {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 72 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLD_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSLLD zmmV {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 72 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLD_ZMMV_M32bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslld",
		UID:      "VPSLLD_ZMMV_M32bcst512_Imm8_EVEX",
		Syntax:   "VPSLLD zmmV {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 72 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLDQ_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpslldq",
		UID:      "VPSLLDQ_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPSLLDQ xmmV, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 73 /7 ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  8,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSLLDQ_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslldq",
		UID:      "VPSLLDQ_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSLLDQ xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 73 /7 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  8,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLDQ_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslldq",
		UID:      "VPSLLDQ_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSLLDQ xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 73 /7 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  8,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLDQ_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpslldq",
		UID:      "VPSLLDQ_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPSLLDQ ymmV, ymm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 73 /7 ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  8,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLDQ_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslldq",
		UID:      "VPSLLDQ_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSLLDQ ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 73 /7 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  8,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLDQ_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslldq",
		UID:      "VPSLLDQ_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSLLDQ ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 73 /7 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  8,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLDQ_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslldq",
		UID:      "VPSLLDQ_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSLLDQ zmmV, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 73 /7 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  8,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLDQ_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpslldq",
		UID:      "VPSLLDQ_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSLLDQ zmmV, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 73 /7 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  8,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSLLQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F3 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSLLQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSLLQ xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 F3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSLLQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F3 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSLLQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSLLQ xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 F3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLQ_YMM1_YMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_YMM1_YMMV_XMM2_VEX",
		Syntax:   "VPSLLQ ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F3 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLQ_YMM1_YMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_YMM1_YMMV_XMM2_EVEX",
		Syntax:   "VPSLLQ ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 F3 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLQ_YMM1_YMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_YMM1_YMMV_M128_VEX",
		Syntax:   "VPSLLQ ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F3 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLQ_YMM1_YMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_YMM1_YMMV_M128_EVEX",
		Syntax:   "VPSLLQ ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 F3 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLQ_ZMM1_ZMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_ZMM1_ZMMV_XMM2_EVEX",
		Syntax:   "VPSLLQ zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 F3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLQ_ZMM1_ZMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_ZMM1_ZMMV_M128_EVEX",
		Syntax:   "VPSLLQ zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 F3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSLLQ_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPSLLQ xmmV, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 73 /6 ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSLLQ_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSLLQ xmmV {k1}{z}, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 73 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLQ_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSLLQ xmmV {k1}{z}, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 73 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLQ_XMMV_M64bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_XMMV_M64bcst128_Imm8_EVEX",
		Syntax:   "VPSLLQ xmmV {k1}{z}, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 73 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLQ_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPSLLQ ymmV, ymm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 73 /6 ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLQ_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSLLQ ymmV {k1}{z}, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 73 /6 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLQ_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSLLQ ymmV {k1}{z}, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 73 /6 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLQ_YMMV_M64bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_YMMV_M64bcst256_Imm8_EVEX",
		Syntax:   "VPSLLQ ymmV {k1}{z}, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 73 /6 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLQ_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSLLQ zmmV {k1}{z}, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 73 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLQ_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSLLQ zmmV {k1}{z}, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 73 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLQ_ZMMV_M64bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllq",
		UID:      "VPSLLQ_ZMMV_M64bcst512_Imm8_EVEX",
		Syntax:   "VPSLLQ zmmV {k1}{z}, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 73 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSLLW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSLLW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F1 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSLLW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSLLW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG F1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSLLW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSLLW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F1 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSLLW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSLLW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG F1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSLLW_YMM1_YMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_YMM1_YMMV_XMM2_VEX",
		Syntax:   "VPSLLW ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F1 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLW_YMM1_YMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_YMM1_YMMV_XMM2_EVEX",
		Syntax:   "VPSLLW ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG F1 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSLLW_YMM1_YMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_YMM1_YMMV_M128_VEX",
		Syntax:   "VPSLLW ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F1 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLW_YMM1_YMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_YMM1_YMMV_M128_EVEX",
		Syntax:   "VPSLLW ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG F1 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSLLW_ZMM1_ZMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_ZMM1_ZMMV_XMM2_EVEX",
		Syntax:   "VPSLLW zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG F1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSLLW_ZMM1_ZMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_ZMM1_ZMMV_M128_EVEX",
		Syntax:   "VPSLLW zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG F1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSLLW_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPSLLW xmmV, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 71 /6 ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSLLW_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSLLW xmmV {k1}{z}, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 71 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLW_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSLLW xmmV {k1}{z}, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 71 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLW_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPSLLW ymmV, ymm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 71 /6 ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSLLW_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSLLW ymmV {k1}{z}, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 71 /6 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLW_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSLLW ymmV {k1}{z}, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 71 /6 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLW_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSLLW zmmV {k1}{z}, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 71 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSLLW_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsllw",
		UID:      "VPSLLW_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSLLW zmmV {k1}{z}, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 71 /6 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  7,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRAD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSRAD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E2 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRAD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSRAD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 E2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSRAD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E2 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRAD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSRAD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 E2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAD_YMM1_YMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_YMM1_YMMV_XMM2_VEX",
		Syntax:   "VPSRAD ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E2 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRAD_YMM1_YMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_YMM1_YMMV_XMM2_EVEX",
		Syntax:   "VPSRAD ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 E2 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAD_YMM1_YMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_YMM1_YMMV_M128_VEX",
		Syntax:   "VPSRAD ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E2 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRAD_YMM1_YMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_YMM1_YMMV_M128_EVEX",
		Syntax:   "VPSRAD ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 E2 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAD_ZMM1_ZMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_ZMM1_ZMMV_XMM2_EVEX",
		Syntax:   "VPSRAD zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 E2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAD_ZMM1_ZMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_ZMM1_ZMMV_M128_EVEX",
		Syntax:   "VPSRAD zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 E2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAD_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPSRAD xmmV, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 72 /4 ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRAD_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSRAD xmmV {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAD_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSRAD xmmV {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAD_XMMV_M32bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_XMMV_M32bcst128_Imm8_EVEX",
		Syntax:   "VPSRAD xmmV {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAD_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPSRAD ymmV, ymm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 72 /4 ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRAD_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSRAD ymmV {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 72 /4 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAD_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSRAD ymmV {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 72 /4 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAD_YMMV_M32bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_YMMV_M32bcst256_Imm8_EVEX",
		Syntax:   "VPSRAD ymmV {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 72 /4 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAD_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSRAD zmmV {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAD_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSRAD zmmV {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAD_ZMMV_M32bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrad",
		UID:      "VPSRAD_ZMMV_M32bcst512_Imm8_EVEX",
		Syntax:   "VPSRAD zmmV {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSRAQ xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 E2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSRAQ xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 E2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAQ_YMM1_YMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_YMM1_YMMV_XMM2_EVEX",
		Syntax:   "VPSRAQ ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 E2 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAQ_YMM1_YMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_YMM1_YMMV_M128_EVEX",
		Syntax:   "VPSRAQ ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 E2 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAQ_ZMM1_ZMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_ZMM1_ZMMV_XMM2_EVEX",
		Syntax:   "VPSRAQ zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 E2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAQ_ZMM1_ZMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_ZMM1_ZMMV_M128_EVEX",
		Syntax:   "VPSRAQ zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 E2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRAQ_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSRAQ xmmV {k1}{z}, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAQ_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSRAQ xmmV {k1}{z}, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAQ_XMMV_M64bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_XMMV_M64bcst128_Imm8_EVEX",
		Syntax:   "VPSRAQ xmmV {k1}{z}, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAQ_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSRAQ ymmV {k1}{z}, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 72 /4 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAQ_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSRAQ ymmV {k1}{z}, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 72 /4 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAQ_YMMV_M64bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_YMMV_M64bcst256_Imm8_EVEX",
		Syntax:   "VPSRAQ ymmV {k1}{z}, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 72 /4 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAQ_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSRAQ zmmV {k1}{z}, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAQ_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSRAQ zmmV {k1}{z}, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAQ_ZMMV_M64bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraq",
		UID:      "VPSRAQ_ZMMV_M64bcst512_Imm8_EVEX",
		Syntax:   "VPSRAQ zmmV {k1}{z}, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 72 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRAW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSRAW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E1 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRAW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSRAW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRAW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSRAW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E1 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRAW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSRAW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRAW_YMM1_YMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_YMM1_YMMV_XMM2_VEX",
		Syntax:   "VPSRAW ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E1 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRAW_YMM1_YMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_YMM1_YMMV_XMM2_EVEX",
		Syntax:   "VPSRAW ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E1 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRAW_YMM1_YMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_YMM1_YMMV_M128_VEX",
		Syntax:   "VPSRAW ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E1 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRAW_YMM1_YMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_YMM1_YMMV_M128_EVEX",
		Syntax:   "VPSRAW ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E1 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRAW_ZMM1_ZMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_ZMM1_ZMMV_XMM2_EVEX",
		Syntax:   "VPSRAW zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRAW_ZMM1_ZMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_ZMM1_ZMMV_M128_EVEX",
		Syntax:   "VPSRAW zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRAW_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPSRAW xmmV, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 71 /4 ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRAW_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSRAW xmmV {k1}{z}, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 71 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRAW_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSRAW xmmV {k1}{z}, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 71 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRAW_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPSRAW ymmV, ymm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 71 /4 ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRAW_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSRAW ymmV {k1}{z}, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 71 /4 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRAW_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSRAW ymmV {k1}{z}, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 71 /4 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRAW_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSRAW zmmV {k1}{z}, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 71 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRAW_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsraw",
		UID:      "VPSRAW_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSRAW zmmV {k1}{z}, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 71 /4 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  5,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSRLD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D2 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRLD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSRLD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 D2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSRLD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D2 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRLD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSRLD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 D2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLD_YMM1_YMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_YMM1_YMMV_XMM2_VEX",
		Syntax:   "VPSRLD ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D2 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRLD_YMM1_YMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_YMM1_YMMV_XMM2_EVEX",
		Syntax:   "VPSRLD ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 D2 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLD_YMM1_YMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_YMM1_YMMV_M128_VEX",
		Syntax:   "VPSRLD ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D2 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRLD_YMM1_YMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_YMM1_YMMV_M128_EVEX",
		Syntax:   "VPSRLD ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 D2 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLD_ZMM1_ZMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_ZMM1_ZMMV_XMM2_EVEX",
		Syntax:   "VPSRLD zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 D2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLD_ZMM1_ZMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_ZMM1_ZMMV_M128_EVEX",
		Syntax:   "VPSRLD zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 D2 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd2},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLD_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPSRLD xmmV, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 72 /2 ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRLD_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSRLD xmmV {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 72 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLD_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSRLD xmmV {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 72 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLD_XMMV_M32bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_XMMV_M32bcst128_Imm8_EVEX",
		Syntax:   "VPSRLD xmmV {k1}{z}, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 72 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLD_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPSRLD ymmV, ymm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 72 /2 ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRLD_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSRLD ymmV {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 72 /2 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLD_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSRLD ymmV {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 72 /2 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLD_YMMV_M32bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_YMMV_M32bcst256_Imm8_EVEX",
		Syntax:   "VPSRLD ymmV {k1}{z}, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 72 /2 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLD_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSRLD zmmV {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 72 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLD_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSRLD zmmV {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 72 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLD_ZMMV_M32bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrld",
		UID:      "VPSRLD_ZMMV_M32bcst512_Imm8_EVEX",
		Syntax:   "VPSRLD zmmV {k1}{z}, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 72 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x72},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLDQ_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsrldq",
		UID:      "VPSRLDQ_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPSRLDQ xmmV, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 73 /3 ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRLDQ_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrldq",
		UID:      "VPSRLDQ_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSRLDQ xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 73 /3 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLDQ_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrldq",
		UID:      "VPSRLDQ_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSRLDQ xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 73 /3 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLDQ_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsrldq",
		UID:      "VPSRLDQ_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPSRLDQ ymmV, ymm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 73 /3 ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRLDQ_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrldq",
		UID:      "VPSRLDQ_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSRLDQ ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 73 /3 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLDQ_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrldq",
		UID:      "VPSRLDQ_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSRLDQ ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 73 /3 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLDQ_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrldq",
		UID:      "VPSRLDQ_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSRLDQ zmmV, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 73 /3 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLDQ_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrldq",
		UID:      "VPSRLDQ_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSRLDQ zmmV, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 73 /3 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSRLQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D3 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRLQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSRLQ xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 D3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSRLQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D3 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRLQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSRLQ xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 D3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLQ_YMM1_YMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_YMM1_YMMV_XMM2_VEX",
		Syntax:   "VPSRLQ ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D3 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRLQ_YMM1_YMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_YMM1_YMMV_XMM2_EVEX",
		Syntax:   "VPSRLQ ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 D3 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLQ_YMM1_YMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_YMM1_YMMV_M128_VEX",
		Syntax:   "VPSRLQ ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D3 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRLQ_YMM1_YMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_YMM1_YMMV_M128_EVEX",
		Syntax:   "VPSRLQ ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 D3 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLQ_ZMM1_ZMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_ZMM1_ZMMV_XMM2_EVEX",
		Syntax:   "VPSRLQ zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 D3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLQ_ZMM1_ZMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_ZMM1_ZMMV_M128_EVEX",
		Syntax:   "VPSRLQ zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 D3 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd3},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleMem128,
	}
	VPSRLQ_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPSRLQ xmmV, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 73 /2 ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRLQ_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSRLQ xmmV {k1}{z}, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 73 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLQ_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSRLQ xmmV {k1}{z}, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 73 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLQ_XMMV_M64bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_XMMV_M64bcst128_Imm8_EVEX",
		Syntax:   "VPSRLQ xmmV {k1}{z}, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 73 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLQ_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPSRLQ ymmV, ymm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 73 /2 ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRLQ_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSRLQ ymmV {k1}{z}, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 73 /2 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLQ_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSRLQ ymmV {k1}{z}, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 73 /2 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLQ_YMMV_M64bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_YMMV_M64bcst256_Imm8_EVEX",
		Syntax:   "VPSRLQ ymmV {k1}{z}, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 73 /2 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLQ_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSRLQ zmmV {k1}{z}, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 73 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLQ_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSRLQ zmmV {k1}{z}, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 73 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLQ_ZMMV_M64bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlq",
		UID:      "VPSRLQ_ZMMV_M64bcst512_Imm8_EVEX",
		Syntax:   "VPSRLQ zmmV {k1}{z}, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 73 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x73},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSRLW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSRLW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D1 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRLW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSRLW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG D1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRLW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSRLW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D1 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRLW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSRLW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG D1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRLW_YMM1_YMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_YMM1_YMMV_XMM2_VEX",
		Syntax:   "VPSRLW ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D1 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRLW_YMM1_YMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_YMM1_YMMV_XMM2_EVEX",
		Syntax:   "VPSRLW ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG D1 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRLW_YMM1_YMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_YMM1_YMMV_M128_VEX",
		Syntax:   "VPSRLW ymm1, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D1 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRLW_YMM1_YMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_YMM1_YMMV_M128_EVEX",
		Syntax:   "VPSRLW ymm1 {k1}{z}, ymmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG D1 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRLW_ZMM1_ZMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_ZMM1_ZMMV_XMM2_EVEX",
		Syntax:   "VPSRLW zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG D1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRLW_ZMM1_ZMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_ZMM1_ZMMV_M128_EVEX",
		Syntax:   "VPSRLW zmm1 {k1}{z}, zmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG D1 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd1},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleMem128,
	}
	VPSRLW_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VPSRLW xmmV, xmm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 71 /2 ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSRLW_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VPSRLW xmmV {k1}{z}, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 71 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLW_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_XMMV_M128_Imm8_EVEX",
		Syntax:   "VPSRLW xmmV {k1}{z}, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 71 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLW_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VPSRLW ymmV, ymm2, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 71 /2 ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSRLW_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VPSRLW ymmV {k1}{z}, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 71 /2 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLW_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_YMMV_M256_Imm8_EVEX",
		Syntax:   "VPSRLW ymmV {k1}{z}, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 71 /2 ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLW_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VPSRLW zmmV {k1}{z}, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 71 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSRLW_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vpsrlw",
		UID:      "VPSRLW_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VPSRLW zmmV {k1}{z}, zmm2/m512, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 71 /2 ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x71},
			ModRM:     true,
			ModRMreg:  3,
		},
		Parameters: []*Parameter{ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsubb",
		UID:      "VPSUBB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSUBB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F8 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsubb",
		UID:      "VPSUBB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSUBB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG F8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsubb",
		UID:      "VPSUBB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSUBB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F8 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsubb",
		UID:      "VPSUBB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSUBB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG F8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsubb",
		UID:      "VPSUBB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSUBB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F8 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpsubb",
		UID:      "VPSUBB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPSUBB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG F8 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsubb",
		UID:      "VPSUBB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSUBB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F8 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpsubb",
		UID:      "VPSUBB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPSUBB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG F8 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpsubb",
		UID:      "VPSUBB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPSUBB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG F8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpsubb",
		UID:      "VPSUBB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPSUBB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG F8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSUBD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG FA /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSUBD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 FA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSUBD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG FA /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSUBD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 FA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBD_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPSUBD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 FA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSUBD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG FA /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPSUBD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 FA /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSUBD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG FA /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPSUBD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 FA /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBD_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPSUBD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 FA /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPSUBD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 FA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPSUBD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 FA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBD_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpsubd",
		UID:      "VPSUBD_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPSUBD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 FA /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfa},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSUBQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG FB /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSUBQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 FB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSUBQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG FB /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSUBQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 FB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPSUBQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 FB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBQ_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSUBQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG FB /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPSUBQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 FB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBQ_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSUBQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG FB /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPSUBQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 FB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPSUBQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 FB /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPSUBQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 FB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPSUBQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 FB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpsubq",
		UID:      "VPSUBQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPSUBQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 FB /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xfb},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPSUBSB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsubsb",
		UID:      "VPSUBSB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSUBSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E8 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBSB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsubsb",
		UID:      "VPSUBSB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSUBSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsubsb",
		UID:      "VPSUBSB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSUBSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E8 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBSB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsubsb",
		UID:      "VPSUBSB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSUBSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsubsb",
		UID:      "VPSUBSB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSUBSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E8 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBSB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpsubsb",
		UID:      "VPSUBSB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPSUBSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E8 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsubsb",
		UID:      "VPSUBSB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSUBSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E8 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBSB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpsubsb",
		UID:      "VPSUBSB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPSUBSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E8 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpsubsb",
		UID:      "VPSUBSB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPSUBSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpsubsb",
		UID:      "VPSUBSB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPSUBSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsubsw",
		UID:      "VPSUBSW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSUBSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E9 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBSW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsubsw",
		UID:      "VPSUBSW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSUBSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsubsw",
		UID:      "VPSUBSW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSUBSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG E9 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBSW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsubsw",
		UID:      "VPSUBSW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSUBSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG E9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsubsw",
		UID:      "VPSUBSW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSUBSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E9 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBSW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpsubsw",
		UID:      "VPSUBSW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPSUBSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E9 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsubsw",
		UID:      "VPSUBSW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSUBSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG E9 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xe9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBSW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpsubsw",
		UID:      "VPSUBSW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPSUBSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG E9 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpsubsw",
		UID:      "VPSUBSW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPSUBSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBSW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpsubsw",
		UID:      "VPSUBSW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPSUBSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG E9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xe9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSB_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsubusb",
		UID:      "VPSUBUSB_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSUBUSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D8 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBUSB_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsubusb",
		UID:      "VPSUBUSB_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSUBUSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG D8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSB_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsubusb",
		UID:      "VPSUBUSB_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSUBUSB xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D8 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBUSB_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsubusb",
		UID:      "VPSUBUSB_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSUBUSB xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG D8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSB_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsubusb",
		UID:      "VPSUBUSB_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSUBUSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D8 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBUSB_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpsubusb",
		UID:      "VPSUBUSB_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPSUBUSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG D8 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSB_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsubusb",
		UID:      "VPSUBUSB_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSUBUSB ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D8 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBUSB_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpsubusb",
		UID:      "VPSUBUSB_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPSUBUSB ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG D8 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSB_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpsubusb",
		UID:      "VPSUBUSB_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPSUBUSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG D8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSB_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpsubusb",
		UID:      "VPSUBUSB_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPSUBUSB zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG D8 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd8},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsubusw",
		UID:      "VPSUBUSW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSUBUSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D9 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBUSW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsubusw",
		UID:      "VPSUBUSW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSUBUSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG D9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsubusw",
		UID:      "VPSUBUSW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSUBUSW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG D9 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBUSW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsubusw",
		UID:      "VPSUBUSW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSUBUSW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG D9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsubusw",
		UID:      "VPSUBUSW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSUBUSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D9 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBUSW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpsubusw",
		UID:      "VPSUBUSW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPSUBUSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG D9 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsubusw",
		UID:      "VPSUBUSW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSUBUSW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG D9 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xd9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBUSW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpsubusw",
		UID:      "VPSUBUSW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPSUBUSW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG D9 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpsubusw",
		UID:      "VPSUBUSW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPSUBUSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG D9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBUSW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpsubusw",
		UID:      "VPSUBUSW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPSUBUSW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG D9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xd9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpsubw",
		UID:      "VPSUBW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPSUBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F9 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpsubw",
		UID:      "VPSUBW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPSUBW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG F9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpsubw",
		UID:      "VPSUBW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPSUBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG F9 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPSUBW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpsubw",
		UID:      "VPSUBW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPSUBW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG F9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpsubw",
		UID:      "VPSUBW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPSUBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F9 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpsubw",
		UID:      "VPSUBW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPSUBW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG F9 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpsubw",
		UID:      "VPSUBW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPSUBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG F9 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xf9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPSUBW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpsubw",
		UID:      "VPSUBW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPSUBW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG F9 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpsubw",
		UID:      "VPSUBW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPSUBW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG F9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPSUBW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpsubw",
		UID:      "VPSUBW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPSUBW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG F9 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xf9},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPTEST_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vptest",
		UID:      "VPTEST_XMM1_XMM2_VEX",
		Syntax:   "VPTEST xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 17 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPTEST_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vptest",
		UID:      "VPTEST_XMM1_M128_VEX",
		Syntax:   "VPTEST xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F38.WIG 17 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPTEST_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vptest",
		UID:      "VPTEST_YMM1_YMM2_VEX",
		Syntax:   "VPTEST ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 17 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPTEST_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vptest",
		UID:      "VPTEST_YMM1_M256_VEX",
		Syntax:   "VPTEST ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F38.WIG 17 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 2,
			Opcode:    []byte{0x17},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKHBW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpunpckhbw",
		UID:      "VPUNPCKHBW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPUNPCKHBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 68 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x68},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKHBW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhbw",
		UID:      "VPUNPCKHBW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPUNPCKHBW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 68 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x68},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHBW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpunpckhbw",
		UID:      "VPUNPCKHBW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPUNPCKHBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 68 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x68},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKHBW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpunpckhbw",
		UID:      "VPUNPCKHBW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPUNPCKHBW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 68 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x68},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHBW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpunpckhbw",
		UID:      "VPUNPCKHBW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPUNPCKHBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 68 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x68},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKHBW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhbw",
		UID:      "VPUNPCKHBW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPUNPCKHBW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 68 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x68},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHBW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpunpckhbw",
		UID:      "VPUNPCKHBW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPUNPCKHBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 68 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x68},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKHBW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpunpckhbw",
		UID:      "VPUNPCKHBW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPUNPCKHBW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 68 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x68},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHBW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhbw",
		UID:      "VPUNPCKHBW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPUNPCKHBW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 68 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x68},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHBW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpunpckhbw",
		UID:      "VPUNPCKHBW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPUNPCKHBW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 68 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x68},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHDQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPUNPCKHDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 6A /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKHDQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPUNPCKHDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 6A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHDQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPUNPCKHDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 6A /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKHDQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPUNPCKHDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 6A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHDQ_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPUNPCKHDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 6A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHDQ_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPUNPCKHDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 6A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKHDQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPUNPCKHDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 6A /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHDQ_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_YMM1_YMMV_M256_VEX",
		Syntax:   "VPUNPCKHDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 6A /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKHDQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPUNPCKHDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 6A /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHDQ_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPUNPCKHDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 6A /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHDQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPUNPCKHDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 6A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHDQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPUNPCKHDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 6A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHDQ_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpunpckhdq",
		UID:      "VPUNPCKHDQ_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPUNPCKHDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 6A /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHQDQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPUNPCKHQDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 6D /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKHQDQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPUNPCKHQDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 6D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHQDQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPUNPCKHQDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 6D /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKHQDQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPUNPCKHQDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 6D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHQDQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPUNPCKHQDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 6D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHQDQ_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPUNPCKHQDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 6D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKHQDQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPUNPCKHQDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 6D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHQDQ_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_YMM1_YMMV_M256_VEX",
		Syntax:   "VPUNPCKHQDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 6D /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKHQDQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPUNPCKHQDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 6D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHQDQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPUNPCKHQDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 6D /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHQDQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPUNPCKHQDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 6D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHQDQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPUNPCKHQDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 6D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHQDQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpunpckhqdq",
		UID:      "VPUNPCKHQDQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPUNPCKHQDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 6D /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6d},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKHWD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpunpckhwd",
		UID:      "VPUNPCKHWD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPUNPCKHWD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 69 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x69},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKHWD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhwd",
		UID:      "VPUNPCKHWD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPUNPCKHWD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 69 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x69},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHWD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpunpckhwd",
		UID:      "VPUNPCKHWD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPUNPCKHWD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 69 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x69},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKHWD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpunpckhwd",
		UID:      "VPUNPCKHWD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPUNPCKHWD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 69 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x69},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHWD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpunpckhwd",
		UID:      "VPUNPCKHWD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPUNPCKHWD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 69 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x69},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKHWD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhwd",
		UID:      "VPUNPCKHWD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPUNPCKHWD ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 69 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x69},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHWD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpunpckhwd",
		UID:      "VPUNPCKHWD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPUNPCKHWD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 69 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x69},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKHWD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpunpckhwd",
		UID:      "VPUNPCKHWD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPUNPCKHWD ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 69 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x69},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHWD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckhwd",
		UID:      "VPUNPCKHWD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPUNPCKHWD zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 69 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x69},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKHWD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpunpckhwd",
		UID:      "VPUNPCKHWD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPUNPCKHWD zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 69 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x69},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLBW_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpunpcklbw",
		UID:      "VPUNPCKLBW_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPUNPCKLBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 60 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKLBW_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpunpcklbw",
		UID:      "VPUNPCKLBW_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPUNPCKLBW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 60 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLBW_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpunpcklbw",
		UID:      "VPUNPCKLBW_XMM1_XMMV_M128_VEX",
		Syntax:   "VPUNPCKLBW xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 60 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKLBW_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpunpcklbw",
		UID:      "VPUNPCKLBW_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPUNPCKLBW xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 60 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLBW_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpunpcklbw",
		UID:      "VPUNPCKLBW_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPUNPCKLBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 60 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKLBW_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpunpcklbw",
		UID:      "VPUNPCKLBW_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPUNPCKLBW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 60 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLBW_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpunpcklbw",
		UID:      "VPUNPCKLBW_YMM1_YMMV_M256_VEX",
		Syntax:   "VPUNPCKLBW ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 60 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKLBW_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpunpcklbw",
		UID:      "VPUNPCKLBW_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPUNPCKLBW ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 60 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLBW_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpunpcklbw",
		UID:      "VPUNPCKLBW_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPUNPCKLBW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 60 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLBW_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpunpcklbw",
		UID:      "VPUNPCKLBW_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPUNPCKLBW zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 60 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x60},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLDQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPUNPCKLDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 62 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKLDQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPUNPCKLDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 62 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLDQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPUNPCKLDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 62 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKLDQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPUNPCKLDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 62 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLDQ_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPUNPCKLDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 62 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLDQ_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPUNPCKLDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 62 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKLDQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPUNPCKLDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 62 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLDQ_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_YMM1_YMMV_M256_VEX",
		Syntax:   "VPUNPCKLDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 62 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKLDQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPUNPCKLDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 62 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLDQ_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPUNPCKLDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 62 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLDQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPUNPCKLDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 62 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLDQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPUNPCKLDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 62 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLDQ_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpunpckldq",
		UID:      "VPUNPCKLDQ_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPUNPCKLDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 62 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x62},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLQDQ_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPUNPCKLQDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 6C /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKLQDQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPUNPCKLQDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 6C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLQDQ_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_XMM1_XMMV_M128_VEX",
		Syntax:   "VPUNPCKLQDQ xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 6C /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKLQDQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPUNPCKLQDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 6C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLQDQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPUNPCKLQDQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 6C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLQDQ_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPUNPCKLQDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 6C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKLQDQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPUNPCKLQDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 6C /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLQDQ_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_YMM1_YMMV_M256_VEX",
		Syntax:   "VPUNPCKLQDQ ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 6C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKLQDQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPUNPCKLQDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 6C /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLQDQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPUNPCKLQDQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 6C /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLQDQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPUNPCKLQDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 6C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLQDQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPUNPCKLQDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 6C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLQDQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpunpcklqdq",
		UID:      "VPUNPCKLQDQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPUNPCKLQDQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 6C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x6c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPUNPCKLWD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpunpcklwd",
		UID:      "VPUNPCKLWD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPUNPCKLWD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 61 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKLWD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpunpcklwd",
		UID:      "VPUNPCKLWD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPUNPCKLWD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 61 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLWD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpunpcklwd",
		UID:      "VPUNPCKLWD_XMM1_XMMV_M128_VEX",
		Syntax:   "VPUNPCKLWD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 61 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPUNPCKLWD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpunpcklwd",
		UID:      "VPUNPCKLWD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPUNPCKLWD xmm1 {k1}{z}, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.WIG 61 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLWD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpunpcklwd",
		UID:      "VPUNPCKLWD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPUNPCKLWD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 61 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKLWD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpunpcklwd",
		UID:      "VPUNPCKLWD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPUNPCKLWD ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 61 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLWD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpunpcklwd",
		UID:      "VPUNPCKLWD_YMM1_YMMV_M256_VEX",
		Syntax:   "VPUNPCKLWD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 61 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPUNPCKLWD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpunpcklwd",
		UID:      "VPUNPCKLWD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPUNPCKLWD ymm1 {k1}{z}, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.WIG 61 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLWD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpunpcklwd",
		UID:      "VPUNPCKLWD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPUNPCKLWD zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 61 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPUNPCKLWD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpunpcklwd",
		UID:      "VPUNPCKLWD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPUNPCKLWD zmm1 {k1}{z}, zmmV, zmm2/m512",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.WIG 61 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x61},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512BW"},
		Tuple:      TupleFullMem,
	}
	VPXOR_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vpxor",
		UID:      "VPXOR_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VPXOR xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG EF /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPXOR_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vpxor",
		UID:      "VPXOR_XMM1_XMMV_M128_VEX",
		Syntax:   "VPXOR xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG EF /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VPXOR_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vpxor",
		UID:      "VPXOR_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VPXOR ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG EF /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPXOR_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vpxor",
		UID:      "VPXOR_YMM1_YMMV_M256_VEX",
		Syntax:   "VPXOR ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG EF /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX2"},
	}
	VPXORD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpxord",
		UID:      "VPXORD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPXORD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpxord",
		UID:      "VPXORD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPXORD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORD_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vpxord",
		UID:      "VPXORD_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VPXORD xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W0 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpxord",
		UID:      "VPXORD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPXORD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 EF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpxord",
		UID:      "VPXORD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPXORD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 EF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORD_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vpxord",
		UID:      "VPXORD_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VPXORD ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W0 EF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpxord",
		UID:      "VPXORD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPXORD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpxord",
		UID:      "VPXORD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPXORD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORD_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vpxord",
		UID:      "VPXORD_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VPXORD zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W0 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORQ_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vpxorq",
		UID:      "VPXORQ_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VPXORQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORQ_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vpxorq",
		UID:      "VPXORQ_XMM1_XMMV_M128_EVEX",
		Syntax:   "VPXORQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORQ_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vpxorq",
		UID:      "VPXORQ_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VPXORQ xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORQ_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vpxorq",
		UID:      "VPXORQ_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VPXORQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 EF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORQ_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vpxorq",
		UID:      "VPXORQ_YMM1_YMMV_M256_EVEX",
		Syntax:   "VPXORQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 EF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORQ_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vpxorq",
		UID:      "VPXORQ_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VPXORQ ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 EF /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORQ_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vpxorq",
		UID:      "VPXORQ_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VPXORQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORQ_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vpxorq",
		UID:      "VPXORQ_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VPXORQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VPXORQ_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vpxorq",
		UID:      "VPXORQ_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VPXORQ zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 EF /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xef},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VRCPPS_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vrcpps",
		UID:      "VRCPPS_XMM1_XMM2_VEX",
		Syntax:   "VRCPPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 53 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x53},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRCPPS_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vrcpps",
		UID:      "VRCPPS_XMM1_M128_VEX",
		Syntax:   "VRCPPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 53 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x53},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRCPPS_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vrcpps",
		UID:      "VRCPPS_YMM1_YMM2_VEX",
		Syntax:   "VRCPPS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 53 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x53},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRCPPS_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vrcpps",
		UID:      "VRCPPS_YMM1_M256_VEX",
		Syntax:   "VRCPPS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 53 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x53},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRCPSS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vrcpss",
		UID:      "VRCPSS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VRCPSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 53 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x53},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRCPSS_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vrcpss",
		UID:      "VRCPSS_XMM1_XMMV_M32_VEX",
		Syntax:   "VRCPSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 53 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x53},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDPD_XMM1_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vroundpd",
		UID:      "VROUNDPD_XMM1_XMM2_Imm8_VEX",
		Syntax:   "VROUNDPD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 09 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x09},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDPD_XMM1_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vroundpd",
		UID:      "VROUNDPD_XMM1_M128_Imm8_VEX",
		Syntax:   "VROUNDPD xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 09 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x09},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDPD_YMM1_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vroundpd",
		UID:      "VROUNDPD_YMM1_YMM2_Imm8_VEX",
		Syntax:   "VROUNDPD ymm1, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 09 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x09},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDPD_YMM1_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vroundpd",
		UID:      "VROUNDPD_YMM1_M256_Imm8_VEX",
		Syntax:   "VROUNDPD ymm1, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 09 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x09},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDPS_XMM1_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vroundps",
		UID:      "VROUNDPS_XMM1_XMM2_Imm8_VEX",
		Syntax:   "VROUNDPS xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 08 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x08},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDPS_XMM1_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vroundps",
		UID:      "VROUNDPS_XMM1_M128_Imm8_VEX",
		Syntax:   "VROUNDPS xmm1, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F3A.WIG 08 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x08},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDPS_YMM1_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vroundps",
		UID:      "VROUNDPS_YMM1_YMM2_Imm8_VEX",
		Syntax:   "VROUNDPS ymm1, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 08 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x08},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDPS_YMM1_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vroundps",
		UID:      "VROUNDPS_YMM1_M256_Imm8_VEX",
		Syntax:   "VROUNDPS ymm1, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F3A.WIG 08 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x08},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDSD_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vroundsd",
		UID:      "VROUNDSD_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VROUNDSD xmm1, xmmV, xmm2/m64, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.66.0F3A.WIG 0B /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDSD_XMM1_XMMV_M64_Imm8_VEX = &Instruction{
		Mnemonic: "vroundsd",
		UID:      "VROUNDSD_XMM1_XMMV_M64_Imm8_VEX",
		Syntax:   "VROUNDSD xmm1, xmmV, xmm2/m64, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.66.0F3A.WIG 0B /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0b},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDSS_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vroundss",
		UID:      "VROUNDSS_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VROUNDSS xmm1, xmmV, xmm2/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.66.0F3A.WIG 0A /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VROUNDSS_XMM1_XMMV_M32_Imm8_VEX = &Instruction{
		Mnemonic: "vroundss",
		UID:      "VROUNDSS_XMM1_XMMV_M32_Imm8_VEX",
		Syntax:   "VROUNDSS xmm1, xmmV, xmm2/m32, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.66.0F3A.WIG 0A /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 3,
			Opcode:    []byte{0x0a},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRSQRTPS_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vrsqrtps",
		UID:      "VRSQRTPS_XMM1_XMM2_VEX",
		Syntax:   "VRSQRTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 52 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x52},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRSQRTPS_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vrsqrtps",
		UID:      "VRSQRTPS_XMM1_M128_VEX",
		Syntax:   "VRSQRTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 52 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x52},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRSQRTPS_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vrsqrtps",
		UID:      "VRSQRTPS_YMM1_YMM2_VEX",
		Syntax:   "VRSQRTPS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 52 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x52},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRSQRTPS_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vrsqrtps",
		UID:      "VRSQRTPS_YMM1_M256_VEX",
		Syntax:   "VRSQRTPS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 52 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x52},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRSQRTSS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vrsqrtss",
		UID:      "VRSQRTSS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VRSQRTSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 52 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x52},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VRSQRTSS_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vrsqrtss",
		UID:      "VRSQRTSS_XMM1_XMMV_M32_VEX",
		Syntax:   "VRSQRTSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 52 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x52},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSHUFPD_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VSHUFPD xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG C6 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSHUFPD_XMM1_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_XMM1_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VSHUFPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 C6 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPD_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VSHUFPD xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG C6 /r ib",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSHUFPD_XMM1_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_XMM1_XMMV_M128_Imm8_EVEX",
		Syntax:   "VSHUFPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 C6 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPD_XMM1_XMMV_M64bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_XMM1_XMMV_M64bcst128_Imm8_EVEX",
		Syntax:   "VSHUFPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 C6 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPD_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VSHUFPD ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG C6 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSHUFPD_YMM1_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_YMM1_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VSHUFPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 C6 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPD_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VSHUFPD ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG C6 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSHUFPD_YMM1_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_YMM1_YMMV_M256_Imm8_EVEX",
		Syntax:   "VSHUFPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 C6 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPD_YMM1_YMMV_M64bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_YMM1_YMMV_M64bcst256_Imm8_EVEX",
		Syntax:   "VSHUFPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 C6 /r ib",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPD_ZMM1_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_ZMM1_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VSHUFPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 C6 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPD_ZMM1_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_ZMM1_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VSHUFPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 C6 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPD_ZMM1_ZMMV_M64bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufpd",
		UID:      "VSHUFPD_ZMM1_ZMMV_M64bcst512_Imm8_EVEX",
		Syntax:   "VSHUFPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 C6 /r ib",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPS_XMM1_XMMV_XMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_XMM1_XMMV_XMM2_Imm8_VEX",
		Syntax:   "VSHUFPS xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG C6 /r ib",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSHUFPS_XMM1_XMMV_XMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_XMM1_XMMV_XMM2_Imm8_EVEX",
		Syntax:   "VSHUFPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 C6 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPS_XMM1_XMMV_M128_Imm8_VEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_XMM1_XMMV_M128_Imm8_VEX",
		Syntax:   "VSHUFPS xmm1, xmmV, xmm2/m128, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG C6 /r ib",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSHUFPS_XMM1_XMMV_M128_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_XMM1_XMMV_M128_Imm8_EVEX",
		Syntax:   "VSHUFPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 C6 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPS_XMM1_XMMV_M32bcst128_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_XMM1_XMMV_M32bcst128_Imm8_EVEX",
		Syntax:   "VSHUFPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 C6 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPS_YMM1_YMMV_YMM2_Imm8_VEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_YMM1_YMMV_YMM2_Imm8_VEX",
		Syntax:   "VSHUFPS ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG C6 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSHUFPS_YMM1_YMMV_YMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_YMM1_YMMV_YMM2_Imm8_EVEX",
		Syntax:   "VSHUFPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 C6 /r ib",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPS_YMM1_YMMV_M256_Imm8_VEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_YMM1_YMMV_M256_Imm8_VEX",
		Syntax:   "VSHUFPS ymm1, ymmV, ymm2/m256, imm8",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG C6 /r ib",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSHUFPS_YMM1_YMMV_M256_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_YMM1_YMMV_M256_Imm8_EVEX",
		Syntax:   "VSHUFPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 C6 /r ib",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPS_YMM1_YMMV_M32bcst256_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_YMM1_YMMV_M32bcst256_Imm8_EVEX",
		Syntax:   "VSHUFPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 C6 /r ib",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPS_ZMM1_ZMMV_ZMM2_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_ZMM1_ZMMV_ZMM2_Imm8_EVEX",
		Syntax:   "VSHUFPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 C6 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPS_ZMM1_ZMMV_M512_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_ZMM1_ZMMV_M512_Imm8_EVEX",
		Syntax:   "VSHUFPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 C6 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSHUFPS_ZMM1_ZMMV_M32bcst512_Imm8_EVEX = &Instruction{
		Mnemonic: "vshufps",
		UID:      "VSHUFPS_ZMM1_ZMMV_M32bcst512_Imm8_EVEX",
		Syntax:   "VSHUFPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst, imm8",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 C6 /r ib",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0xc6},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst, ParamImm8},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_XMM1_XMM2_VEX",
		Syntax:   "VSQRTPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 51 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSQRTPD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_XMM1_XMM2_EVEX",
		Syntax:   "VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 51 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPD_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_XMM1_M128_VEX",
		Syntax:   "VSQRTPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 51 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSQRTPD_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_XMM1_M128_EVEX",
		Syntax:   "VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 51 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPD_XMM1_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_XMM1_M64bcst128_EVEX",
		Syntax:   "VSQRTPD xmm1 {k1}{z}, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 51 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPD_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_YMM1_YMM2_VEX",
		Syntax:   "VSQRTPD ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 51 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSQRTPD_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_YMM1_YMM2_EVEX",
		Syntax:   "VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 51 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPD_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_YMM1_M256_VEX",
		Syntax:   "VSQRTPD ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 51 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSQRTPD_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_YMM1_M256_EVEX",
		Syntax:   "VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 51 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPD_YMM1_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_YMM1_M64bcst256_EVEX",
		Syntax:   "VSQRTPD ymm1 {k1}{z}, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 51 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPD_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_ZMM1_ZMM2_EVEX",
		Syntax:   "VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 51 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPD_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_ZMM1_M512_EVEX",
		Syntax:   "VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 51 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPD_ZMM1_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vsqrtpd",
		UID:      "VSQRTPD_ZMM1_M64bcst512_EVEX",
		Syntax:   "VSQRTPD zmm1 {k1}{z}, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 51 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPS_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_XMM1_XMM2_VEX",
		Syntax:   "VSQRTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 51 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSQRTPS_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_XMM1_XMM2_EVEX",
		Syntax:   "VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 51 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPS_XMM1_M128_VEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_XMM1_M128_VEX",
		Syntax:   "VSQRTPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 51 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSQRTPS_XMM1_M128_EVEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_XMM1_M128_EVEX",
		Syntax:   "VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 51 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPS_XMM1_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_XMM1_M32bcst128_EVEX",
		Syntax:   "VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 51 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPS_YMM1_YMM2_VEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_YMM1_YMM2_VEX",
		Syntax:   "VSQRTPS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 51 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSQRTPS_YMM1_YMM2_EVEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_YMM1_YMM2_EVEX",
		Syntax:   "VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 51 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPS_YMM1_M256_VEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_YMM1_M256_VEX",
		Syntax:   "VSQRTPS ymm1, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 51 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSQRTPS_YMM1_M256_EVEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_YMM1_M256_EVEX",
		Syntax:   "VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 51 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPS_YMM1_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_YMM1_M32bcst256_EVEX",
		Syntax:   "VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 51 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPS_ZMM1_ZMM2_EVEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_ZMM1_ZMM2_EVEX",
		Syntax:   "VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 51 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPS_ZMM1_M512_EVEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_ZMM1_M512_EVEX",
		Syntax:   "VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 51 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTPS_ZMM1_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vsqrtps",
		UID:      "VSQRTPS_ZMM1_M32bcst512_EVEX",
		Syntax:   "VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 51 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSQRTSD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vsqrtsd",
		UID:      "VSQRTSD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VSQRTSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 51 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VSQRTSD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vsqrtsd",
		UID:      "VSQRTSD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VSQRTSD xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 51 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VSQRTSD_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vsqrtsd",
		UID:      "VSQRTSD_XMM1_XMMV_M64_VEX",
		Syntax:   "VSQRTSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 51 /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VSQRTSD_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vsqrtsd",
		UID:      "VSQRTSD_XMM1_XMMV_M64_EVEX",
		Syntax:   "VSQRTSD xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 51 /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VSQRTSS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vsqrtss",
		UID:      "VSQRTSS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VSQRTSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 51 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VSQRTSS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vsqrtss",
		UID:      "VSQRTSS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VSQRTSS xmm1 {k1}{z}, xmmV, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 51 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VSQRTSS_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vsqrtss",
		UID:      "VSQRTSS_XMM1_XMMV_M32_VEX",
		Syntax:   "VSQRTSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 51 /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VSQRTSS_XMM1_XMMV_M32_EVEX = &Instruction{
		Mnemonic: "vsqrtss",
		UID:      "VSQRTSS_XMM1_XMMV_M32_EVEX",
		Syntax:   "VSQRTSS xmm1 {k1}{z}, xmmV, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 51 /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x51},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VSTMXCSR_M32_VEX = &Instruction{
		Mnemonic: "vstmxcsr",
		UID:      "VSTMXCSR_M32_VEX",
		Syntax:   "VSTMXCSR m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LZ.0F.WIG AE /3",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0xae},
			ModRM:     true,
			ModRMreg:  4,
		},
		Parameters: []*Parameter{ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSUBPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VSUBPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5C /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSUBPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VSUBPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VSUBPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 5C /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSUBPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VSUBPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VSUBPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 5C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VSUBPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSUBPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VSUBPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5C /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VSUBPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 5C /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSUBPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VSUBPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5C /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VSUBPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 5C /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VSUBPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VSUBPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vsubpd",
		UID:      "VSUBPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VSUBPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 5C /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VSUBPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5C /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSUBPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VSUBPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5C /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VSUBPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 5C /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSUBPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VSUBPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5C /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VSUBPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 5C /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VSUBPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5C /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSUBPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VSUBPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5C /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VSUBPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 5C /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VSUBPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VSUBPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5C /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VSUBPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 5C /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VSUBPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5C /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VSUBPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5C /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vsubps",
		UID:      "VSUBPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VSUBPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 5C /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VSUBSD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vsubsd",
		UID:      "VSUBSD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VSUBSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 5C /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VSUBSD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vsubsd",
		UID:      "VSUBSD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VSUBSD xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 5C /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VSUBSD_XMM1_XMMV_M64_VEX = &Instruction{
		Mnemonic: "vsubsd",
		UID:      "VSUBSD_XMM1_XMMV_M64_VEX",
		Syntax:   "VSUBSD xmm1, xmmV, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F2.0F.WIG 5C /r",
			VEX:       true,
			VEXpp:     3,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VSUBSD_XMM1_XMMV_M64_EVEX = &Instruction{
		Mnemonic: "vsubsd",
		UID:      "VSUBSD_XMM1_XMMV_M64_EVEX",
		Syntax:   "VSUBSD xmm1 {k1}{z}, xmmV, xmm2/m64{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F2.0F.W1 5C /r",
			VEXpp:     3,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VSUBSS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vsubss",
		UID:      "VSUBSS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VSUBSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 5C /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VSUBSS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vsubss",
		UID:      "VSUBSS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VSUBSS xmm1 {k1}{z}, xmmV, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 5C /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VSUBSS_XMM1_XMMV_M32_VEX = &Instruction{
		Mnemonic: "vsubss",
		UID:      "VSUBSS_XMM1_XMMV_M32_VEX",
		Syntax:   "VSUBSS xmm1, xmmV, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.F3.0F.WIG 5C /r",
			VEX:       true,
			VEXpp:     2,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VSUBSS_XMM1_XMMV_M32_EVEX = &Instruction{
		Mnemonic: "vsubss",
		UID:      "VSUBSS_XMM1_XMMV_M32_EVEX",
		Syntax:   "VSUBSS xmm1 {k1}{z}, xmmV, xmm2/m32{er}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.F3.0F.W0 5C /r",
			VEXpp:     2,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Rounding:  true,
			Suppress:  true,
			Opcode:    []byte{0x5c},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VUCOMISD_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vucomisd",
		UID:      "VUCOMISD_XMM1_XMM2_VEX",
		Syntax:   "VUCOMISD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.66.0F.WIG 2E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VUCOMISD_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vucomisd",
		UID:      "VUCOMISD_XMM1_XMM2_EVEX",
		Syntax:   "VUCOMISD xmm1, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.66.0F.W1 2E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VUCOMISD_XMM1_M64_VEX = &Instruction{
		Mnemonic: "vucomisd",
		UID:      "VUCOMISD_XMM1_M64_VEX",
		Syntax:   "VUCOMISD xmm1, xmm2/m64",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.66.0F.WIG 2E /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   64,
	}
	VUCOMISD_XMM1_M64_EVEX = &Instruction{
		Mnemonic: "vucomisd",
		UID:      "VUCOMISD_XMM1_M64_EVEX",
		Syntax:   "VUCOMISD xmm1, xmm2/m64{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.66.0F.W1 2E /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM64},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   64,
		Tuple:      Tuple1Scalar,
	}
	VUCOMISS_XMM1_XMM2_VEX = &Instruction{
		Mnemonic: "vucomiss",
		UID:      "VUCOMISS_XMM1_XMM2_VEX",
		Syntax:   "VUCOMISS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.0F.WIG 2E /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VUCOMISS_XMM1_XMM2_EVEX = &Instruction{
		Mnemonic: "vucomiss",
		UID:      "VUCOMISS_XMM1_XMM2_EVEX",
		Syntax:   "VUCOMISS xmm1, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.0F.W0 2E /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VUCOMISS_XMM1_M32_VEX = &Instruction{
		Mnemonic: "vucomiss",
		UID:      "VUCOMISS_XMM1_M32_VEX",
		Syntax:   "VUCOMISS xmm1, xmm2/m32",
		Encoding: &Encoding{
			Syntax:    "VEX.LIG.0F.WIG 2E /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x2e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
		DataSize:   32,
	}
	VUCOMISS_XMM1_M32_EVEX = &Instruction{
		Mnemonic: "vucomiss",
		UID:      "VUCOMISS_XMM1_M32_EVEX",
		Syntax:   "VUCOMISS xmm1, xmm2/m32{sae}",
		Encoding: &Encoding{
			Syntax:    "EVEX.LLIG.0F.W0 2E /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Suppress:  true,
			Opcode:    []byte{0x2e},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM32},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		DataSize:   32,
		Tuple:      Tuple1Scalar,
	}
	VUNPCKHPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VUNPCKHPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 15 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKHPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VUNPCKHPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 15 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VUNPCKHPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 15 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKHPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VUNPCKHPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 15 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VUNPCKHPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 15 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VUNPCKHPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 15 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKHPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VUNPCKHPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 15 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VUNPCKHPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 15 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKHPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VUNPCKHPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 15 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VUNPCKHPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 15 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VUNPCKHPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 15 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VUNPCKHPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 15 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vunpckhpd",
		UID:      "VUNPCKHPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VUNPCKHPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 15 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VUNPCKHPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 15 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKHPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VUNPCKHPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 15 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VUNPCKHPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 15 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKHPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VUNPCKHPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 15 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VUNPCKHPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 15 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VUNPCKHPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 15 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKHPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VUNPCKHPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 15 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VUNPCKHPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 15 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKHPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VUNPCKHPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 15 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VUNPCKHPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 15 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VUNPCKHPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 15 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VUNPCKHPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 15 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKHPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vunpckhps",
		UID:      "VUNPCKHPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VUNPCKHPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 15 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x15},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VUNPCKLPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 14 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKLPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VUNPCKLPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 14 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VUNPCKLPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 14 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKLPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VUNPCKLPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 14 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VUNPCKLPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 14 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VUNPCKLPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 14 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKLPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VUNPCKLPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 14 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VUNPCKLPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 14 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKLPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VUNPCKLPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 14 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VUNPCKLPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 14 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VUNPCKLPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 14 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VUNPCKLPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 14 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vunpcklpd",
		UID:      "VUNPCKLPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VUNPCKLPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 14 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VUNPCKLPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 14 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKLPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VUNPCKLPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 14 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VUNPCKLPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 14 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKLPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VUNPCKLPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 14 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VUNPCKLPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 14 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VUNPCKLPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 14 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKLPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VUNPCKLPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 14 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VUNPCKLPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 14 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VUNPCKLPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VUNPCKLPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 14 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VUNPCKLPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 14 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VUNPCKLPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 14 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VUNPCKLPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 14 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VUNPCKLPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vunpcklps",
		UID:      "VUNPCKLPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VUNPCKLPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 14 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x14},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512F"},
		Tuple:      TupleFull,
	}
	VXORPD_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VXORPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 57 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VXORPD_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VXORPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 57 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPD_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_XMM1_XMMV_M128_VEX",
		Syntax:   "VXORPD xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.66.0F.WIG 57 /r",
			VEX:       true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VXORPD_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_XMM1_XMMV_M128_EVEX",
		Syntax:   "VXORPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 57 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPD_XMM1_XMMV_M64bcst128_EVEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_XMM1_XMMV_M64bcst128_EVEX",
		Syntax:   "VXORPD xmm1 {k1}{z}, xmmV, xmm2/m128/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.66.0F.W1 57 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPD_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VXORPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 57 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VXORPD_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VXORPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 57 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPD_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_YMM1_YMMV_M256_VEX",
		Syntax:   "VXORPD ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.66.0F.WIG 57 /r",
			VEX:       true,
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VXORPD_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_YMM1_YMMV_M256_EVEX",
		Syntax:   "VXORPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 57 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPD_YMM1_YMMV_M64bcst256_EVEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_YMM1_YMMV_M64bcst256_EVEX",
		Syntax:   "VXORPD ymm1 {k1}{z}, ymmV, ymm2/m256/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.66.0F.W1 57 /r",
			VEX_L:     true,
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPD_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VXORPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 57 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPD_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VXORPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 57 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPD_ZMM1_ZMMV_M64bcst512_EVEX = &Instruction{
		Mnemonic: "vxorpd",
		UID:      "VXORPD_ZMM1_ZMMV_M64bcst512_EVEX",
		Syntax:   "VXORPD zmm1 {k1}{z}, zmmV, zmm2/m512/m64bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.66.0F.W1 57 /r",
			VEXpp:     1,
			VEXm_mmmm: 1,
			VEX_W:     true,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM64bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPS_XMM1_XMMV_XMM2_VEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_XMM1_XMMV_XMM2_VEX",
		Syntax:   "VXORPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 57 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VXORPS_XMM1_XMMV_XMM2_EVEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_XMM1_XMMV_XMM2_EVEX",
		Syntax:   "VXORPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 57 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamXMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPS_XMM1_XMMV_M128_VEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_XMM1_XMMV_M128_VEX",
		Syntax:   "VXORPS xmm1, xmmV, xmm2/m128",
		Encoding: &Encoding{
			Syntax:    "VEX.128.0F.WIG 57 /r",
			VEX:       true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VXORPS_XMM1_XMMV_M128_EVEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_XMM1_XMMV_M128_EVEX",
		Syntax:   "VXORPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 57 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM128},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPS_XMM1_XMMV_M32bcst128_EVEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_XMM1_XMMV_M32bcst128_EVEX",
		Syntax:   "VXORPS xmm1 {k1}{z}, xmmV, xmm2/m128/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.128.0F.W0 57 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPS_YMM1_YMMV_YMM2_VEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_YMM1_YMMV_YMM2_VEX",
		Syntax:   "VXORPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 57 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VXORPS_YMM1_YMMV_YMM2_EVEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_YMM1_YMMV_YMM2_EVEX",
		Syntax:   "VXORPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 57 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamYMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPS_YMM1_YMMV_M256_VEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_YMM1_YMMV_M256_VEX",
		Syntax:   "VXORPS ymm1, ymmV, ymm2/m256",
		Encoding: &Encoding{
			Syntax:    "VEX.256.0F.WIG 57 /r",
			VEX:       true,
			VEX_L:     true,
			VEXm_mmmm: 1,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX"},
	}
	VXORPS_YMM1_YMMV_M256_EVEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_YMM1_YMMV_M256_EVEX",
		Syntax:   "VXORPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 57 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM256},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPS_YMM1_YMMV_M32bcst256_EVEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_YMM1_YMMV_M32bcst256_EVEX",
		Syntax:   "VXORPS ymm1 {k1}{z}, ymmV, ymm2/m256/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.256.0F.W0 57 /r",
			VEX_L:     true,
			VEXm_mmmm: 1,
			EVEX:      true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamYMM1, ParamYMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512VL AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPS_ZMM1_ZMMV_ZMM2_EVEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_ZMM1_ZMMV_ZMM2_EVEX",
		Syntax:   "VXORPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 57 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamZMM2},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPS_ZMM1_ZMMV_M512_EVEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_ZMM1_ZMMV_M512_EVEX",
		Syntax:   "VXORPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 57 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM512},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	VXORPS_ZMM1_ZMMV_M32bcst512_EVEX = &Instruction{
		Mnemonic: "vxorps",
		UID:      "VXORPS_ZMM1_ZMMV_M32bcst512_EVEX",
		Syntax:   "VXORPS zmm1 {k1}{z}, zmmV, zmm2/m512/m32bcst",
		Encoding: &Encoding{
			Syntax:    "EVEX.512.0F.W0 57 /r",
			VEXm_mmmm: 1,
			EVEX:      true,
			EVEX_Lp:   true,
			Mask:      true,
			Zero:      true,
			Opcode:    []byte{0x57},
			ModRM:     true,
		},
		Parameters: []*Parameter{ParamZMM1, ParamZMMV, ParamM32bcst},
		Mode16:     false,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"AVX512DQ"},
		Tuple:      TupleFull,
	}
	WAIT = &Instruction{
		Mnemonic: "wait",
		UID:      "WAIT",
		Syntax:   "WAIT",
		Encoding: &Encoding{
			Syntax: "9B",
			Opcode: []byte{0x9b},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	WBINVD = &Instruction{
		Mnemonic: "wbinvd",
		UID:      "WBINVD",
		Syntax:   "WBINVD",
		Encoding: &Encoding{
			Syntax: "0F 09",
			Opcode: []byte{0x0f, 0x09},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"486"},
	}
	WBNOINVD = &Instruction{
		Mnemonic: "wbnoinvd",
		UID:      "WBNOINVD",
		Syntax:   "WBNOINVD",
		Encoding: &Encoding{
			Syntax:            "F3 0F 09",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0x09},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"WBNOINVD"},
	}
	WRFSBASE_Rmr32 = &Instruction{
		Mnemonic: "wrfsbase",
		UID:      "WRFSBASE_Rmr32",
		Syntax:   "WRFSBASE rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /2",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          3,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		CPUID:       []string{"FSGSBASE"},
		OperandSize: true,
		DataSize:    32,
	}
	WRFSBASE_Rmr64_REX = &Instruction{
		Mnemonic: "wrfsbase",
		UID:      "WRFSBASE_Rmr64_REX",
		Syntax:   "WRFSBASE rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F AE /2",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          3,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"FSGSBASE"},
		DataSize:   64,
	}
	WRGSBASE_Rmr32 = &Instruction{
		Mnemonic: "wrgsbase",
		UID:      "WRGSBASE_Rmr32",
		Syntax:   "WRGSBASE rmr32",
		Encoding: &Encoding{
			Syntax:            "F3 0F AE /3",
			MandatoryPrefixes: []Prefix{0xf3},
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          4,
		},
		Parameters:  []*Parameter{ParamRmr32},
		Mode16:      false,
		Mode32:      false,
		Mode64:      true,
		CPUID:       []string{"FSGSBASE"},
		OperandSize: true,
		DataSize:    32,
	}
	WRGSBASE_Rmr64_REX = &Instruction{
		Mnemonic: "wrgsbase",
		UID:      "WRGSBASE_Rmr64_REX",
		Syntax:   "WRGSBASE rmr64",
		Encoding: &Encoding{
			Syntax:            "F3 REX.W 0F AE /3",
			MandatoryPrefixes: []Prefix{0xf3},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0xae},
			ModRM:             true,
			ModRMreg:          4,
		},
		Parameters: []*Parameter{ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"FSGSBASE"},
		DataSize:   64,
	}
	WRMSR = &Instruction{
		Mnemonic: "wrmsr",
		UID:      "WRMSR",
		Syntax:   "WRMSR",
		Encoding: &Encoding{
			Syntax: "0F 30",
			Opcode: []byte{0x0f, 0x30},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"Pentium"},
	}
	WRPKRU = &Instruction{
		Mnemonic: "wrpkru",
		UID:      "WRPKRU",
		Syntax:   "WRPKRU",
		Encoding: &Encoding{
			Syntax:        "NP 0F 01 EF",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x01, 0xef},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"OSPKE"},
	}
	WRSSD_M32_R32 = &Instruction{
		Mnemonic: "wrssd",
		UID:      "WRSSD_M32_R32",
		Syntax:   "WRSSD m32, r32",
		Encoding: &Encoding{
			Syntax:   "0F 38 F6 !(11):rrr:bbb /r",
			Opcode:   []byte{0x0f, 0x38, 0xf6},
			ModRM:    true,
			ModRMmod: 5,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"CET_SS"},
		OperandSize: true,
	}
	WRSSQ_M64_R64_REX = &Instruction{
		Mnemonic: "wrssq",
		UID:      "WRSSQ_M64_R64_REX",
		Syntax:   "WRSSQ m64, r64",
		Encoding: &Encoding{
			Syntax:   "REX.W 0F 38 F6 !(11):rrr:bbb /r",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x0f, 0x38, 0xf6},
			ModRM:    true,
			ModRMmod: 5,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"CET_SS"},
	}
	WRUSSD_M32_R32 = &Instruction{
		Mnemonic: "wrussd",
		UID:      "WRUSSD_M32_R32",
		Syntax:   "WRUSSD m32, r32",
		Encoding: &Encoding{
			Syntax:            "66 0F 38 F5 !(11):rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x38, 0xf5},
			ModRM:             true,
			ModRMmod:          5,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"CET_SS"},
		OperandSize: true,
	}
	WRUSSQ_M64_R64_REX = &Instruction{
		Mnemonic: "wrussq",
		UID:      "WRUSSQ_M64_R64_REX",
		Syntax:   "WRUSSQ m64, r64",
		Encoding: &Encoding{
			Syntax:            "66 REX.W 0F 38 F5 !(11):rrr:bbb /r",
			MandatoryPrefixes: []Prefix{0x66},
			REX:               true,
			REX_W:             true,
			Opcode:            []byte{0x0f, 0x38, 0xf5},
			ModRM:             true,
			ModRMmod:          5,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"CET_SS"},
	}
	XABORT_Imm8 = &Instruction{
		Mnemonic: "xabort",
		UID:      "XABORT_Imm8",
		Syntax:   "XABORT imm8",
		Encoding: &Encoding{
			Syntax: "C6 F8 ib",
			Opcode: []byte{0xc6, 0xf8},
		},
		Parameters: []*Parameter{ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"RTM"},
	}
	XADD_Rmr8_R8 = &Instruction{
		Mnemonic: "xadd",
		UID:      "XADD_Rmr8_R8",
		Syntax:   "XADD r/m8, r8",
		Encoding: &Encoding{
			Syntax: "0F C0 /r",
			Opcode: []byte{0x0f, 0xc0},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XADD_Rmr16_R16 = &Instruction{
		Mnemonic: "xadd",
		UID:      "XADD_Rmr16_R16",
		Syntax:   "XADD r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F C1 /r",
			Opcode: []byte{0x0f, 0xc1},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XADD_Rmr32_R32 = &Instruction{
		Mnemonic: "xadd",
		UID:      "XADD_Rmr32_R32",
		Syntax:   "XADD r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F C1 /r",
			Opcode: []byte{0x0f, 0xc1},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XADD_Rmr64_R64_REX = &Instruction{
		Mnemonic: "xadd",
		UID:      "XADD_Rmr64_R64_REX",
		Syntax:   "XADD r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F C1 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xc1},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XADD_M8_R8 = &Instruction{
		Mnemonic: "xadd",
		UID:      "XADD_M8_R8",
		Syntax:   "XADD r/m8, r8",
		Encoding: &Encoding{
			Syntax: "0F C0 /r",
			Opcode: []byte{0x0f, 0xc0},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XADD_M16_R16 = &Instruction{
		Mnemonic: "xadd",
		UID:      "XADD_M16_R16",
		Syntax:   "XADD r/m16, r16",
		Encoding: &Encoding{
			Syntax: "0F C1 /r",
			Opcode: []byte{0x0f, 0xc1},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XADD_M32_R32 = &Instruction{
		Mnemonic: "xadd",
		UID:      "XADD_M32_R32",
		Syntax:   "XADD r/m32, r32",
		Encoding: &Encoding{
			Syntax: "0F C1 /r",
			Opcode: []byte{0x0f, 0xc1},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XADD_M64_R64_REX = &Instruction{
		Mnemonic: "xadd",
		UID:      "XADD_M64_R64_REX",
		Syntax:   "XADD r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 0F C1 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x0f, 0xc1},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XBEGIN_Rel16 = &Instruction{
		Mnemonic: "xbegin",
		UID:      "XBEGIN_Rel16",
		Syntax:   "XBEGIN rel16",
		Encoding: &Encoding{
			Syntax:     "C7 F8 cw",
			Opcode:     []byte{0xc7, 0xf8},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"RTM"},
		OperandSize: true,
		DataSize:    16,
	}
	XBEGIN_Rel32 = &Instruction{
		Mnemonic: "xbegin",
		UID:      "XBEGIN_Rel32",
		Syntax:   "XBEGIN rel32",
		Encoding: &Encoding{
			Syntax:     "C7 F8 cd",
			Opcode:     []byte{0xc7, 0xf8},
			CodeOffset: true,
		},
		Parameters:  []*Parameter{ParamRel32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"RTM"},
		OperandSize: true,
		DataSize:    32,
	}
	XCHG_AX_R16op = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_AX_R16op",
		Syntax:   "XCHG AX, r16op",
		Encoding: &Encoding{
			Syntax:           "90+rw",
			Opcode:           []byte{0x90},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamAX, ParamR16op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XCHG_EAX_R32op = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_EAX_R32op",
		Syntax:   "XCHG EAX, r32op",
		Encoding: &Encoding{
			Syntax:           "90+rd",
			Opcode:           []byte{0x90},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamEAX, ParamR32op},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XCHG_RAX_R64op_REX = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_RAX_R64op_REX",
		Syntax:   "XCHG RAX, r64op",
		Encoding: &Encoding{
			Syntax:           "REX.W 90+rd",
			REX:              true,
			REX_W:            true,
			Opcode:           []byte{0x90},
			RegisterModifier: 1,
		},
		Parameters: []*Parameter{ParamRAX, ParamR64op},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XCHG_R8_Rmr8 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R8_Rmr8",
		Syntax:   "XCHG r8, r/m8",
		Encoding: &Encoding{
			Syntax: "86 /r",
			Opcode: []byte{0x86},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XCHG_R8_M8 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R8_M8",
		Syntax:   "XCHG r8, r/m8",
		Encoding: &Encoding{
			Syntax: "86 /r",
			Opcode: []byte{0x86},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XCHG_R16_Rmr16 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R16_Rmr16",
		Syntax:   "XCHG r16, r/m16",
		Encoding: &Encoding{
			Syntax: "87 /r",
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XCHG_R16_M16 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R16_M16",
		Syntax:   "XCHG r16, r/m16",
		Encoding: &Encoding{
			Syntax: "87 /r",
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XCHG_R32_Rmr32 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R32_Rmr32",
		Syntax:   "XCHG r32, r/m32",
		Encoding: &Encoding{
			Syntax: "87 /r",
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XCHG_R32_M32 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R32_M32",
		Syntax:   "XCHG r32, r/m32",
		Encoding: &Encoding{
			Syntax: "87 /r",
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XCHG_R64_Rmr64_REX = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R64_Rmr64_REX",
		Syntax:   "XCHG r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 87 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XCHG_R64_M64_REX = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R64_M64_REX",
		Syntax:   "XCHG r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 87 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XCHG_Rmr8_R8 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_Rmr8_R8",
		Syntax:   "XCHG r/m8, r8",
		Encoding: &Encoding{
			Syntax: "86 /r",
			Opcode: []byte{0x86},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XCHG_Rmr16_R16 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_Rmr16_R16",
		Syntax:   "XCHG r/m16, r16",
		Encoding: &Encoding{
			Syntax: "87 /r",
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XCHG_Rmr32_R32 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_Rmr32_R32",
		Syntax:   "XCHG r/m32, r32",
		Encoding: &Encoding{
			Syntax: "87 /r",
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XCHG_Rmr64_R64_REX = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_Rmr64_R64_REX",
		Syntax:   "XCHG r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 87 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XCHG_R16op_AX = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R16op_AX",
		Syntax:   "XCHG r16op, AX",
		Encoding: &Encoding{
			Syntax:           "90+rw",
			Opcode:           []byte{0x90},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR16op, ParamAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XCHG_R32op_EAX = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R32op_EAX",
		Syntax:   "XCHG r32op, EAX",
		Encoding: &Encoding{
			Syntax:           "90+rd",
			Opcode:           []byte{0x90},
			RegisterModifier: 1,
		},
		Parameters:  []*Parameter{ParamR32op, ParamEAX},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XCHG_R64op_RAX_REX = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_R64op_RAX_REX",
		Syntax:   "XCHG r64op, RAX",
		Encoding: &Encoding{
			Syntax:           "REX.W 90+rd",
			REX:              true,
			REX_W:            true,
			Opcode:           []byte{0x90},
			RegisterModifier: 1,
		},
		Parameters: []*Parameter{ParamR64op, ParamRAX},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XCHG_M8_R8 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_M8_R8",
		Syntax:   "XCHG r/m8, r8",
		Encoding: &Encoding{
			Syntax: "86 /r",
			Opcode: []byte{0x86},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XCHG_M16_R16 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_M16_R16",
		Syntax:   "XCHG r/m16, r16",
		Encoding: &Encoding{
			Syntax: "87 /r",
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XCHG_M32_R32 = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_M32_R32",
		Syntax:   "XCHG r/m32, r32",
		Encoding: &Encoding{
			Syntax: "87 /r",
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XCHG_M64_R64_REX = &Instruction{
		Mnemonic: "xchg",
		UID:      "XCHG_M64_R64_REX",
		Syntax:   "XCHG r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 87 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x87},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XEND = &Instruction{
		Mnemonic: "xend",
		UID:      "XEND",
		Syntax:   "XEND",
		Encoding: &Encoding{
			Syntax:        "NP 0F 01 D5",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x01, 0xd5},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"RTM"},
	}
	XGETBV = &Instruction{
		Mnemonic: "xgetbv",
		UID:      "XGETBV",
		Syntax:   "XGETBV",
		Encoding: &Encoding{
			Syntax:        "NP 0F 01 D0",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x01, 0xd0},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	XLATB = &Instruction{
		Mnemonic: "xlatb",
		UID:      "XLATB",
		Syntax:   "XLATB",
		Encoding: &Encoding{
			Syntax: "D7",
			Opcode: []byte{0xd7},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	XLATB_REX = &Instruction{
		Mnemonic: "xlatb",
		UID:      "XLATB_REX",
		Syntax:   "XLATB",
		Encoding: &Encoding{
			Syntax: "REX.W D7",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0xd7},
		},
		Mode16: false,
		Mode32: false,
		Mode64: true,
	}
	XOR_AL_Imm8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_AL_Imm8",
		Syntax:   "XOR AL, imm8",
		Encoding: &Encoding{
			Syntax: "34 ib",
			Opcode: []byte{0x34},
		},
		Parameters: []*Parameter{ParamAL, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XOR_AX_Imm16 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_AX_Imm16",
		Syntax:   "XOR AX, imm16",
		Encoding: &Encoding{
			Syntax: "35 iw",
			Opcode: []byte{0x35},
		},
		Parameters:  []*Parameter{ParamAX, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XOR_EAX_Imm32 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_EAX_Imm32",
		Syntax:   "XOR EAX, imm32",
		Encoding: &Encoding{
			Syntax: "35 id",
			Opcode: []byte{0x35},
		},
		Parameters:  []*Parameter{ParamEAX, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XOR_RAX_Imm32_REX = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_RAX_Imm32_REX",
		Syntax:   "XOR RAX, imm32",
		Encoding: &Encoding{
			Syntax: "REX.W 35 id",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x35},
		},
		Parameters: []*Parameter{ParamRAX, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XOR_R8_Rmr8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_R8_Rmr8",
		Syntax:   "XOR r8, r/m8",
		Encoding: &Encoding{
			Syntax: "32 /r",
			Opcode: []byte{0x32},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamRmr8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XOR_R8_M8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_R8_M8",
		Syntax:   "XOR r8, r/m8",
		Encoding: &Encoding{
			Syntax: "32 /r",
			Opcode: []byte{0x32},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR8, ParamM8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XOR_R16_Rmr16 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_R16_Rmr16",
		Syntax:   "XOR r16, r/m16",
		Encoding: &Encoding{
			Syntax: "33 /r",
			Opcode: []byte{0x33},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamRmr16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XOR_R16_M16 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_R16_M16",
		Syntax:   "XOR r16, r/m16",
		Encoding: &Encoding{
			Syntax: "33 /r",
			Opcode: []byte{0x33},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR16, ParamM16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XOR_R32_Rmr32 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_R32_Rmr32",
		Syntax:   "XOR r32, r/m32",
		Encoding: &Encoding{
			Syntax: "33 /r",
			Opcode: []byte{0x33},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamRmr32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XOR_R32_M32 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_R32_M32",
		Syntax:   "XOR r32, r/m32",
		Encoding: &Encoding{
			Syntax: "33 /r",
			Opcode: []byte{0x33},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamR32, ParamM32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XOR_R64_Rmr64_REX = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_R64_Rmr64_REX",
		Syntax:   "XOR r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 33 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x33},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamRmr64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XOR_R64_M64_REX = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_R64_M64_REX",
		Syntax:   "XOR r64, r/m64",
		Encoding: &Encoding{
			Syntax: "REX.W 33 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x33},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamR64, ParamM64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XOR_Rmr8_Imm8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr8_Imm8",
		Syntax:   "XOR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /6 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamRmr8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XOR_Rmr8_R8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr8_R8",
		Syntax:   "XOR r/m8, r8",
		Encoding: &Encoding{
			Syntax: "30 /r",
			Opcode: []byte{0x30},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XOR_Rmr16_Imm8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr16_Imm8",
		Syntax:   "XOR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /6 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XOR_Rmr16_Imm16 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr16_Imm16",
		Syntax:   "XOR r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /6 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XOR_Rmr16_R16 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr16_R16",
		Syntax:   "XOR r/m16, r16",
		Encoding: &Encoding{
			Syntax: "31 /r",
			Opcode: []byte{0x31},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XOR_Rmr32_Imm8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr32_Imm8",
		Syntax:   "XOR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /6 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XOR_Rmr32_Imm32 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr32_Imm32",
		Syntax:   "XOR r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /6 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XOR_Rmr32_R32 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr32_R32",
		Syntax:   "XOR r/m32, r32",
		Encoding: &Encoding{
			Syntax: "31 /r",
			Opcode: []byte{0x31},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamRmr32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XOR_Rmr64_Imm8_REX = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr64_Imm8_REX",
		Syntax:   "XOR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /6 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XOR_Rmr64_Imm32_REX = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr64_Imm32_REX",
		Syntax:   "XOR r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /6 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamRmr64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XOR_Rmr64_R64_REX = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_Rmr64_R64_REX",
		Syntax:   "XOR r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 31 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x31},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamRmr64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XOR_M8_Imm8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M8_Imm8",
		Syntax:   "XOR r/m8, imm8",
		Encoding: &Encoding{
			Syntax:   "80 /6 ib",
			Opcode:   []byte{0x80},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM8, ParamImm8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XOR_M8_R8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M8_R8",
		Syntax:   "XOR r/m8, r8",
		Encoding: &Encoding{
			Syntax: "30 /r",
			Opcode: []byte{0x30},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM8, ParamR8},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		DataSize:   8,
	}
	XOR_M16_Imm8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M16_Imm8",
		Syntax:   "XOR r/m16, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /6 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XOR_M16_Imm16 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M16_Imm16",
		Syntax:   "XOR r/m16, imm16",
		Encoding: &Encoding{
			Syntax:   "81 /6 iw",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamM16, ParamImm16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XOR_M16_R16 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M16_R16",
		Syntax:   "XOR r/m16, r16",
		Encoding: &Encoding{
			Syntax: "31 /r",
			Opcode: []byte{0x31},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM16, ParamR16},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    16,
	}
	XOR_M32_Imm8 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M32_Imm8",
		Syntax:   "XOR r/m32, imm8",
		Encoding: &Encoding{
			Syntax:   "83 /6 ib",
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm8},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XOR_M32_Imm32 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M32_Imm32",
		Syntax:   "XOR r/m32, imm32",
		Encoding: &Encoding{
			Syntax:   "81 /6 id",
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters:  []*Parameter{ParamM32, ParamImm32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XOR_M32_R32 = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M32_R32",
		Syntax:   "XOR r/m32, r32",
		Encoding: &Encoding{
			Syntax: "31 /r",
			Opcode: []byte{0x31},
			ModRM:  true,
		},
		Parameters:  []*Parameter{ParamM32, ParamR32},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		OperandSize: true,
		DataSize:    32,
	}
	XOR_M64_Imm8_REX = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M64_Imm8_REX",
		Syntax:   "XOR r/m64, imm8",
		Encoding: &Encoding{
			Syntax:   "REX.W 83 /6 ib",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x83},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM64, ParamImm8},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XOR_M64_Imm32_REX = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M64_Imm32_REX",
		Syntax:   "XOR r/m64, imm32",
		Encoding: &Encoding{
			Syntax:   "REX.W 81 /6 id",
			REX:      true,
			REX_W:    true,
			Opcode:   []byte{0x81},
			ModRM:    true,
			ModRMreg: 7,
		},
		Parameters: []*Parameter{ParamM64, ParamImm32},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XOR_M64_R64_REX = &Instruction{
		Mnemonic: "xor",
		UID:      "XOR_M64_R64_REX",
		Syntax:   "XOR r/m64, r64",
		Encoding: &Encoding{
			Syntax: "REX.W 31 /r",
			REX:    true,
			REX_W:  true,
			Opcode: []byte{0x31},
			ModRM:  true,
		},
		Parameters: []*Parameter{ParamM64, ParamR64},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		DataSize:   64,
	}
	XORPD_XMM1_XMM2 = &Instruction{
		Mnemonic: "xorpd",
		UID:      "XORPD_XMM1_XMM2",
		Syntax:   "XORPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 57 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x57},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	XORPD_XMM1_M128 = &Instruction{
		Mnemonic: "xorpd",
		UID:      "XORPD_XMM1_M128",
		Syntax:   "XORPD xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:            "66 0F 57 /r",
			MandatoryPrefixes: []Prefix{0x66},
			Opcode:            []byte{0x0f, 0x57},
			ModRM:             true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE2"},
	}
	XORPS_XMM1_XMM2 = &Instruction{
		Mnemonic: "xorps",
		UID:      "XORPS_XMM1_XMM2",
		Syntax:   "XORPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 57 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x57},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamXMM2},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	XORPS_XMM1_M128 = &Instruction{
		Mnemonic: "xorps",
		UID:      "XORPS_XMM1_M128",
		Syntax:   "XORPS xmm1, xmm2/m128",
		Encoding: &Encoding{
			Syntax:        "NP 0F 57 /r",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x57},
			ModRM:         true,
		},
		Parameters: []*Parameter{ParamXMM1, ParamM128},
		Mode16:     true,
		Mode32:     true,
		Mode64:     true,
		CPUID:      []string{"SSE"},
	}
	XRESLDTRK = &Instruction{
		Mnemonic: "xresldtrk",
		UID:      "XRESLDTRK",
		Syntax:   "XRESLDTRK",
		Encoding: &Encoding{
			Syntax:            "F2 0F 01 E9",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x01, 0xe9},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"TSXLDTRK"},
	}
	XRSTOR_M = &Instruction{
		Mnemonic: "xrstor",
		UID:      "XRSTOR_M",
		Syntax:   "XRSTOR mem",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE /5",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      6,
		},
		Parameters:  []*Parameter{ParamM},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"XSAVE"},
		OperandSize: true,
	}
	XRSTOR64_M_REX = &Instruction{
		Mnemonic: "xrstor64",
		UID:      "XRSTOR64_M_REX",
		Syntax:   "XRSTOR64 mem",
		Encoding: &Encoding{
			Syntax:        "NP REX.W 0F AE /5",
			NoVEXPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      6,
		},
		Parameters: []*Parameter{ParamM},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"XSAVE"},
	}
	XRSTORS_M = &Instruction{
		Mnemonic: "xrstors",
		UID:      "XRSTORS_M",
		Syntax:   "XRSTORS mem",
		Encoding: &Encoding{
			Syntax:        "NP 0F C7 /3",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      4,
		},
		Parameters:  []*Parameter{ParamM},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"XSS"},
		OperandSize: true,
	}
	XRSTORS64_M_REX = &Instruction{
		Mnemonic: "xrstors64",
		UID:      "XRSTORS64_M_REX",
		Syntax:   "XRSTORS64 mem",
		Encoding: &Encoding{
			Syntax:        "NP REX.W 0F C7 /3",
			NoVEXPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      4,
		},
		Parameters: []*Parameter{ParamM},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"XSS"},
	}
	XSAVE_M = &Instruction{
		Mnemonic: "xsave",
		UID:      "XSAVE_M",
		Syntax:   "XSAVE mem",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE /4",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      5,
		},
		Parameters:  []*Parameter{ParamM},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"XSAVE"},
		OperandSize: true,
	}
	XSAVE64_M_REX = &Instruction{
		Mnemonic: "xsave64",
		UID:      "XSAVE64_M_REX",
		Syntax:   "XSAVE64 mem",
		Encoding: &Encoding{
			Syntax:        "NP REX.W 0F AE /4",
			NoVEXPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      5,
		},
		Parameters: []*Parameter{ParamM},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"XSAVE"},
	}
	XSAVEC_M = &Instruction{
		Mnemonic: "xsavec",
		UID:      "XSAVEC_M",
		Syntax:   "XSAVEC mem",
		Encoding: &Encoding{
			Syntax:        "NP 0F C7 /4",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      5,
		},
		Parameters:  []*Parameter{ParamM},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"XSAVEC"},
		OperandSize: true,
	}
	XSAVEC64_M_REX = &Instruction{
		Mnemonic: "xsavec64",
		UID:      "XSAVEC64_M_REX",
		Syntax:   "XSAVEC64 mem",
		Encoding: &Encoding{
			Syntax:        "NP REX.W 0F C7 /4",
			NoVEXPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      5,
		},
		Parameters: []*Parameter{ParamM},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"XSAVEC"},
	}
	XSAVEOPT_M = &Instruction{
		Mnemonic: "xsaveopt",
		UID:      "XSAVEOPT_M",
		Syntax:   "XSAVEOPT mem",
		Encoding: &Encoding{
			Syntax:        "NP 0F AE /6",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters:  []*Parameter{ParamM},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"XSAVEOPT Save state components specified by EDX:EAX"},
		OperandSize: true,
	}
	XSAVEOPT64_M_REX = &Instruction{
		Mnemonic: "xsaveopt64",
		UID:      "XSAVEOPT64_M_REX",
		Syntax:   "XSAVEOPT64 mem",
		Encoding: &Encoding{
			Syntax:        "NP REX.W 0F AE /6",
			NoVEXPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xae},
			ModRM:         true,
			ModRMreg:      7,
		},
		Parameters: []*Parameter{ParamM},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"XSAVEOPT Save state components specified by EDX:EAX"},
	}
	XSAVES_M = &Instruction{
		Mnemonic: "xsaves",
		UID:      "XSAVES_M",
		Syntax:   "XSAVES mem",
		Encoding: &Encoding{
			Syntax:        "NP 0F C7 /5",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      6,
		},
		Parameters:  []*Parameter{ParamM},
		Mode16:      true,
		Mode32:      true,
		Mode64:      true,
		CPUID:       []string{"XSS"},
		OperandSize: true,
	}
	XSAVES64_M_REX = &Instruction{
		Mnemonic: "xsaves64",
		UID:      "XSAVES64_M_REX",
		Syntax:   "XSAVES64 mem",
		Encoding: &Encoding{
			Syntax:        "NP REX.W 0F C7 /5",
			NoVEXPrefixes: true,
			REX:           true,
			REX_W:         true,
			Opcode:        []byte{0x0f, 0xc7},
			ModRM:         true,
			ModRMreg:      6,
		},
		Parameters: []*Parameter{ParamM},
		Mode16:     false,
		Mode32:     false,
		Mode64:     true,
		CPUID:      []string{"XSS"},
	}
	XSETBV = &Instruction{
		Mnemonic: "xsetbv",
		UID:      "XSETBV",
		Syntax:   "XSETBV",
		Encoding: &Encoding{
			Syntax:        "NP 0F 01 D1",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x01, 0xd1},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
	}
	XSUSLDTRK = &Instruction{
		Mnemonic: "xsusldtrk",
		UID:      "XSUSLDTRK",
		Syntax:   "XSUSLDTRK",
		Encoding: &Encoding{
			Syntax:            "F2 0F 01 E8",
			MandatoryPrefixes: []Prefix{0xf2},
			Opcode:            []byte{0x0f, 0x01, 0xe8},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"TSXLDTRK"},
	}
	XTEST = &Instruction{
		Mnemonic: "xtest",
		UID:      "XTEST",
		Syntax:   "XTEST",
		Encoding: &Encoding{
			Syntax:        "NP 0F 01 D6",
			NoVEXPrefixes: true,
			Opcode:        []byte{0x0f, 0x01, 0xd6},
		},
		Mode16: true,
		Mode32: true,
		Mode64: true,
		CPUID:  []string{"HLE or RTM"},
	}
)

var Instructions = []*Instruction{
	AAA,
	AAD,
	AAD_Imm8u,
	AAM,
	AAM_Imm8u,
	AAS,
	ADC_AL_Imm8,
	ADC_AX_Imm16,
	ADC_EAX_Imm32,
	ADC_RAX_Imm32_REX,
	ADC_R8_Rmr8,
	ADC_R8_M8,
	ADC_R16_Rmr16,
	ADC_R16_M16,
	ADC_R32_Rmr32,
	ADC_R32_M32,
	ADC_R64_Rmr64_REX,
	ADC_R64_M64_REX,
	ADC_Rmr8_Imm8,
	ADC_Rmr8_R8,
	ADC_Rmr16_Imm8,
	ADC_Rmr16_Imm16,
	ADC_Rmr16_R16,
	ADC_Rmr32_Imm8,
	ADC_Rmr32_Imm32,
	ADC_Rmr32_R32,
	ADC_Rmr64_Imm8_REX,
	ADC_Rmr64_Imm32_REX,
	ADC_Rmr64_R64_REX,
	ADC_M8_Imm8,
	ADC_M8_R8,
	ADC_M16_Imm8,
	ADC_M16_Imm16,
	ADC_M16_R16,
	ADC_M32_Imm8,
	ADC_M32_Imm32,
	ADC_M32_R32,
	ADC_M64_Imm8_REX,
	ADC_M64_Imm32_REX,
	ADC_M64_R64_REX,
	ADCX_R32_Rmr32,
	ADCX_R32_M32,
	ADCX_R64_Rmr64_REX,
	ADCX_R64_M64_REX,
	ADD_AL_Imm8,
	ADD_AX_Imm16,
	ADD_EAX_Imm32,
	ADD_RAX_Imm32_REX,
	ADD_R8_Rmr8,
	ADD_R8_M8,
	ADD_R16_Rmr16,
	ADD_R16_M16,
	ADD_R32_Rmr32,
	ADD_R32_M32,
	ADD_R64_Rmr64_REX,
	ADD_R64_M64_REX,
	ADD_Rmr8_Imm8,
	ADD_Rmr8_R8,
	ADD_Rmr16_Imm8,
	ADD_Rmr16_Imm16,
	ADD_Rmr16_R16,
	ADD_Rmr32_Imm8,
	ADD_Rmr32_Imm32,
	ADD_Rmr32_R32,
	ADD_Rmr64_Imm8_REX,
	ADD_Rmr64_Imm32_REX,
	ADD_Rmr64_R64_REX,
	ADD_M8_Imm8,
	ADD_M8_R8,
	ADD_M16_Imm8,
	ADD_M16_Imm16,
	ADD_M16_R16,
	ADD_M32_Imm8,
	ADD_M32_Imm32,
	ADD_M32_R32,
	ADD_M64_Imm8_REX,
	ADD_M64_Imm32_REX,
	ADD_M64_R64_REX,
	ADDPD_XMM1_XMM2,
	ADDPD_XMM1_M128,
	ADDPS_XMM1_XMM2,
	ADDPS_XMM1_M128,
	ADDSD_XMM1_XMM2,
	ADDSD_XMM1_M64,
	ADDSS_XMM1_XMM2,
	ADDSS_XMM1_M32,
	ADDSUBPD_XMM1_XMM2,
	ADDSUBPD_XMM1_M128,
	ADDSUBPS_XMM1_XMM2,
	ADDSUBPS_XMM1_M128,
	ADOX_R32_Rmr32,
	ADOX_R32_M32,
	ADOX_R64_Rmr64_REX,
	ADOX_R64_M64_REX,
	AESDEC_XMM1_XMM2,
	AESDEC_XMM1_M128,
	AESDEC128KL_XMM1_M384,
	AESDEC256KL_XMM1_M512,
	AESDECLAST_XMM1_XMM2,
	AESDECLAST_XMM1_M128,
	AESDECWIDE128KL_M384,
	AESDECWIDE256KL_M512,
	AESENC_XMM1_XMM2,
	AESENC_XMM1_M128,
	AESENC128KL_XMM1_M384,
	AESENC256KL_XMM1_M512,
	AESENCLAST_XMM1_XMM2,
	AESENCLAST_XMM1_M128,
	AESENCWIDE128KL_M384,
	AESENCWIDE256KL_M512,
	AESIMC_XMM1_XMM2,
	AESIMC_XMM1_M128,
	AESKEYGENASSIST_XMM1_XMM2_Imm8,
	AESKEYGENASSIST_XMM1_M128_Imm8,
	AND_AL_Imm8,
	AND_AX_Imm16,
	AND_EAX_Imm32,
	AND_RAX_Imm32_REX,
	AND_R8_Rmr8,
	AND_R8_M8,
	AND_R16_Rmr16,
	AND_R16_M16,
	AND_R32_Rmr32,
	AND_R32_M32,
	AND_R64_Rmr64_REX,
	AND_R64_M64_REX,
	AND_Rmr8_Imm8,
	AND_Rmr8_R8,
	AND_Rmr16_Imm8,
	AND_Rmr16_Imm16,
	AND_Rmr16_R16,
	AND_Rmr32_Imm8,
	AND_Rmr32_Imm32,
	AND_Rmr32_R32,
	AND_Rmr64_Imm8_REX,
	AND_Rmr64_Imm32_REX,
	AND_Rmr64_R64_REX,
	AND_M8_Imm8,
	AND_M8_R8,
	AND_M16_Imm8,
	AND_M16_Imm16,
	AND_M16_R16,
	AND_M32_Imm8,
	AND_M32_Imm32,
	AND_M32_R32,
	AND_M64_Imm8_REX,
	AND_M64_Imm32_REX,
	AND_M64_R64_REX,
	ANDN_R32_R32V_Rmr32_VEX,
	ANDN_R32_R32V_M32_VEX,
	ANDN_R64_R64V_Rmr64_VEX,
	ANDN_R64_R64V_M64_VEX,
	ANDNPD_XMM1_XMM2,
	ANDNPD_XMM1_M128,
	ANDNPS_XMM1_XMM2,
	ANDNPS_XMM1_M128,
	ANDPD_XMM1_XMM2,
	ANDPD_XMM1_M128,
	ANDPS_XMM1_XMM2,
	ANDPS_XMM1_M128,
	ARPL_Rmr16_R16,
	ARPL_M16_R16,
	BEXTR_R32_Rmr32_R32V_VEX,
	BEXTR_R32_M32_R32V_VEX,
	BEXTR_R64_Rmr64_R64V_VEX,
	BEXTR_R64_M64_R64V_VEX,
	BLENDPD_XMM1_XMM2_Imm8,
	BLENDPD_XMM1_M128_Imm8,
	BLENDPS_XMM1_XMM2_Imm8,
	BLENDPS_XMM1_M128_Imm8,
	BLENDVPD_XMM1_XMM2,
	BLENDVPD_XMM1_M128,
	BLENDVPD_XMM1_XMM2_XMM0,
	BLENDVPD_XMM1_M128_XMM0,
	BLENDVPS_XMM1_XMM2,
	BLENDVPS_XMM1_M128,
	BLENDVPS_XMM1_XMM2_XMM0,
	BLENDVPS_XMM1_M128_XMM0,
	BLSI_R32V_Rmr32_VEX,
	BLSI_R32V_M32_VEX,
	BLSI_R64V_Rmr64_VEX,
	BLSI_R64V_M64_VEX,
	BLSMSK_R32V_Rmr32_VEX,
	BLSMSK_R32V_M32_VEX,
	BLSMSK_R64V_Rmr64_VEX,
	BLSMSK_R64V_M64_VEX,
	BLSR_R32V_Rmr32_VEX,
	BLSR_R32V_M32_VEX,
	BLSR_R64V_Rmr64_VEX,
	BLSR_R64V_M64_VEX,
	BOUND_R16_M16x16,
	BOUND_R32_M32x32,
	BSF_R16_Rmr16,
	BSF_R16_M16,
	BSF_R32_Rmr32,
	BSF_R32_M32,
	BSF_R64_Rmr64_REX,
	BSF_R64_M64_REX,
	BSR_R16_Rmr16,
	BSR_R16_M16,
	BSR_R32_Rmr32,
	BSR_R32_M32,
	BSR_R64_Rmr64_REX,
	BSR_R64_M64_REX,
	BSWAP_R32op,
	BSWAP_R64op_REX,
	BT_Rmr16_Imm8,
	BT_Rmr16_R16,
	BT_Rmr32_Imm8,
	BT_Rmr32_R32,
	BT_Rmr64_Imm8_REX,
	BT_Rmr64_R64_REX,
	BT_M16_Imm8,
	BT_M16_R16,
	BT_M32_Imm8,
	BT_M32_R32,
	BT_M64_Imm8_REX,
	BT_M64_R64_REX,
	BTC_Rmr16_Imm8,
	BTC_Rmr16_R16,
	BTC_Rmr32_Imm8,
	BTC_Rmr32_R32,
	BTC_Rmr64_Imm8_REX,
	BTC_Rmr64_R64_REX,
	BTC_M16_Imm8,
	BTC_M16_R16,
	BTC_M32_Imm8,
	BTC_M32_R32,
	BTC_M64_Imm8_REX,
	BTC_M64_R64_REX,
	BTR_Rmr16_Imm8,
	BTR_Rmr16_R16,
	BTR_Rmr32_Imm8,
	BTR_Rmr32_R32,
	BTR_Rmr64_Imm8_REX,
	BTR_Rmr64_R64_REX,
	BTR_M16_Imm8,
	BTR_M16_R16,
	BTR_M32_Imm8,
	BTR_M32_R32,
	BTR_M64_Imm8_REX,
	BTR_M64_R64_REX,
	BTS_Rmr16_Imm8,
	BTS_Rmr16_R16,
	BTS_Rmr32_Imm8,
	BTS_Rmr32_R32,
	BTS_Rmr64_Imm8_REX,
	BTS_Rmr64_R64_REX,
	BTS_M16_Imm8,
	BTS_M16_R16,
	BTS_M32_Imm8,
	BTS_M32_R32,
	BTS_M64_Imm8_REX,
	BTS_M64_R64_REX,
	BZHI_R32_Rmr32_R32V_VEX,
	BZHI_R32_M32_R32V_VEX,
	BZHI_R64_Rmr64_R64V_VEX,
	BZHI_R64_M64_R64V_VEX,
	CALL_Rel16,
	CALL_Rel32,
	CALL_Rmr16,
	CALL_Rmr32,
	CALL_Rmr64,
	CALL_M16,
	CALL_M32,
	CALL_M64,
	CALL_FAR_Ptr16v16,
	CALL_FAR_Ptr16v32,
	CALL_FAR_M16v16,
	CALL_FAR_M16v32,
	CALL_FAR_M16v64,
	CBW,
	CDQ,
	CDQE_REX,
	CLAC,
	CLC,
	CLD,
	CLDEMOTE_M8,
	CLFLUSH_M8,
	CLFLUSHOPT_M8,
	CLGI,
	CLI,
	CLRSSBSY_M64,
	CLTS,
	CLUI,
	CLWB_M8,
	CMC,
	CMOVA_R16_Rmr16,
	CMOVA_R16_M16,
	CMOVA_R32_Rmr32,
	CMOVA_R32_M32,
	CMOVA_R64_Rmr64_REX,
	CMOVA_R64_M64_REX,
	CMOVAE_R16_Rmr16,
	CMOVAE_R16_M16,
	CMOVAE_R32_Rmr32,
	CMOVAE_R32_M32,
	CMOVAE_R64_Rmr64_REX,
	CMOVAE_R64_M64_REX,
	CMOVB_R16_Rmr16,
	CMOVB_R16_M16,
	CMOVB_R32_Rmr32,
	CMOVB_R32_M32,
	CMOVB_R64_Rmr64_REX,
	CMOVB_R64_M64_REX,
	CMOVBE_R16_Rmr16,
	CMOVBE_R16_M16,
	CMOVBE_R32_Rmr32,
	CMOVBE_R32_M32,
	CMOVBE_R64_Rmr64_REX,
	CMOVBE_R64_M64_REX,
	CMOVC_R16_Rmr16,
	CMOVC_R16_M16,
	CMOVC_R32_Rmr32,
	CMOVC_R32_M32,
	CMOVC_R64_Rmr64_REX,
	CMOVC_R64_M64_REX,
	CMOVE_R16_Rmr16,
	CMOVE_R16_M16,
	CMOVE_R32_Rmr32,
	CMOVE_R32_M32,
	CMOVE_R64_Rmr64_REX,
	CMOVE_R64_M64_REX,
	CMOVG_R16_Rmr16,
	CMOVG_R16_M16,
	CMOVG_R32_Rmr32,
	CMOVG_R32_M32,
	CMOVG_R64_Rmr64_REX,
	CMOVG_R64_M64_REX,
	CMOVGE_R16_Rmr16,
	CMOVGE_R16_M16,
	CMOVGE_R32_Rmr32,
	CMOVGE_R32_M32,
	CMOVGE_R64_Rmr64_REX,
	CMOVGE_R64_M64_REX,
	CMOVL_R16_Rmr16,
	CMOVL_R16_M16,
	CMOVL_R32_Rmr32,
	CMOVL_R32_M32,
	CMOVL_R64_Rmr64_REX,
	CMOVL_R64_M64_REX,
	CMOVLE_R16_Rmr16,
	CMOVLE_R16_M16,
	CMOVLE_R32_Rmr32,
	CMOVLE_R32_M32,
	CMOVLE_R64_Rmr64_REX,
	CMOVLE_R64_M64_REX,
	CMOVNA_R16_Rmr16,
	CMOVNA_R16_M16,
	CMOVNA_R32_Rmr32,
	CMOVNA_R32_M32,
	CMOVNA_R64_Rmr64_REX,
	CMOVNA_R64_M64_REX,
	CMOVNAE_R16_Rmr16,
	CMOVNAE_R16_M16,
	CMOVNAE_R32_Rmr32,
	CMOVNAE_R32_M32,
	CMOVNAE_R64_Rmr64_REX,
	CMOVNAE_R64_M64_REX,
	CMOVNB_R16_Rmr16,
	CMOVNB_R16_M16,
	CMOVNB_R32_Rmr32,
	CMOVNB_R32_M32,
	CMOVNB_R64_Rmr64_REX,
	CMOVNB_R64_M64_REX,
	CMOVNBE_R16_Rmr16,
	CMOVNBE_R16_M16,
	CMOVNBE_R32_Rmr32,
	CMOVNBE_R32_M32,
	CMOVNBE_R64_Rmr64_REX,
	CMOVNBE_R64_M64_REX,
	CMOVNC_R16_Rmr16,
	CMOVNC_R16_M16,
	CMOVNC_R32_Rmr32,
	CMOVNC_R32_M32,
	CMOVNC_R64_Rmr64_REX,
	CMOVNC_R64_M64_REX,
	CMOVNE_R16_Rmr16,
	CMOVNE_R16_M16,
	CMOVNE_R32_Rmr32,
	CMOVNE_R32_M32,
	CMOVNE_R64_Rmr64_REX,
	CMOVNE_R64_M64_REX,
	CMOVNG_R16_Rmr16,
	CMOVNG_R16_M16,
	CMOVNG_R32_Rmr32,
	CMOVNG_R32_M32,
	CMOVNG_R64_Rmr64_REX,
	CMOVNG_R64_M64_REX,
	CMOVNGE_R16_Rmr16,
	CMOVNGE_R16_M16,
	CMOVNGE_R32_Rmr32,
	CMOVNGE_R32_M32,
	CMOVNGE_R64_Rmr64_REX,
	CMOVNGE_R64_M64_REX,
	CMOVNL_R16_Rmr16,
	CMOVNL_R16_M16,
	CMOVNL_R32_Rmr32,
	CMOVNL_R32_M32,
	CMOVNL_R64_Rmr64_REX,
	CMOVNL_R64_M64_REX,
	CMOVNLE_R16_Rmr16,
	CMOVNLE_R16_M16,
	CMOVNLE_R32_Rmr32,
	CMOVNLE_R32_M32,
	CMOVNLE_R64_Rmr64_REX,
	CMOVNLE_R64_M64_REX,
	CMOVNO_R16_Rmr16,
	CMOVNO_R16_M16,
	CMOVNO_R32_Rmr32,
	CMOVNO_R32_M32,
	CMOVNO_R64_Rmr64_REX,
	CMOVNO_R64_M64_REX,
	CMOVNP_R16_Rmr16,
	CMOVNP_R16_M16,
	CMOVNP_R32_Rmr32,
	CMOVNP_R32_M32,
	CMOVNP_R64_Rmr64_REX,
	CMOVNP_R64_M64_REX,
	CMOVNS_R16_Rmr16,
	CMOVNS_R16_M16,
	CMOVNS_R32_Rmr32,
	CMOVNS_R32_M32,
	CMOVNS_R64_Rmr64_REX,
	CMOVNS_R64_M64_REX,
	CMOVNZ_R16_Rmr16,
	CMOVNZ_R16_M16,
	CMOVNZ_R32_Rmr32,
	CMOVNZ_R32_M32,
	CMOVNZ_R64_Rmr64_REX,
	CMOVNZ_R64_M64_REX,
	CMOVO_R16_Rmr16,
	CMOVO_R16_M16,
	CMOVO_R32_Rmr32,
	CMOVO_R32_M32,
	CMOVO_R64_Rmr64_REX,
	CMOVO_R64_M64_REX,
	CMOVP_R16_Rmr16,
	CMOVP_R16_M16,
	CMOVP_R32_Rmr32,
	CMOVP_R32_M32,
	CMOVP_R64_Rmr64_REX,
	CMOVP_R64_M64_REX,
	CMOVPE_R16_Rmr16,
	CMOVPE_R16_M16,
	CMOVPE_R32_Rmr32,
	CMOVPE_R32_M32,
	CMOVPE_R64_Rmr64_REX,
	CMOVPE_R64_M64_REX,
	CMOVPO_R16_Rmr16,
	CMOVPO_R16_M16,
	CMOVPO_R32_Rmr32,
	CMOVPO_R32_M32,
	CMOVPO_R64_Rmr64_REX,
	CMOVPO_R64_M64_REX,
	CMOVS_R16_Rmr16,
	CMOVS_R16_M16,
	CMOVS_R32_Rmr32,
	CMOVS_R32_M32,
	CMOVS_R64_Rmr64_REX,
	CMOVS_R64_M64_REX,
	CMOVZ_R16_Rmr16,
	CMOVZ_R16_M16,
	CMOVZ_R32_Rmr32,
	CMOVZ_R32_M32,
	CMOVZ_R64_Rmr64_REX,
	CMOVZ_R64_M64_REX,
	CMP_AL_Imm8,
	CMP_AX_Imm16,
	CMP_EAX_Imm32,
	CMP_RAX_Imm32_REX,
	CMP_R8_Rmr8,
	CMP_R8_M8,
	CMP_R16_Rmr16,
	CMP_R16_M16,
	CMP_R32_Rmr32,
	CMP_R32_M32,
	CMP_R64_Rmr64_REX,
	CMP_R64_M64_REX,
	CMP_Rmr8_Imm8,
	CMP_Rmr8_R8,
	CMP_Rmr16_Imm8,
	CMP_Rmr16_Imm16,
	CMP_Rmr16_R16,
	CMP_Rmr32_Imm8,
	CMP_Rmr32_Imm32,
	CMP_Rmr32_R32,
	CMP_Rmr64_Imm8_REX,
	CMP_Rmr64_Imm32_REX,
	CMP_Rmr64_R64_REX,
	CMP_M8_Imm8,
	CMP_M8_R8,
	CMP_M16_Imm8,
	CMP_M16_Imm16,
	CMP_M16_R16,
	CMP_M32_Imm8,
	CMP_M32_Imm32,
	CMP_M32_R32,
	CMP_M64_Imm8_REX,
	CMP_M64_Imm32_REX,
	CMP_M64_R64_REX,
	CMPEQPD_XMM1_XMM2,
	CMPEQPD_XMM1_M128,
	CMPEQPS_XMM1_XMM2,
	CMPEQPS_XMM1_M128,
	CMPEQSD_XMM1_XMM2,
	CMPEQSD_XMM1_M64,
	CMPEQSS_XMM1_XMM2,
	CMPEQSS_XMM1_M32,
	CMPLEPD_XMM1_XMM2,
	CMPLEPD_XMM1_M128,
	CMPLEPS_XMM1_XMM2,
	CMPLEPS_XMM1_M128,
	CMPLESD_XMM1_XMM2,
	CMPLESD_XMM1_M64,
	CMPLESS_XMM1_XMM2,
	CMPLESS_XMM1_M32,
	CMPLTPD_XMM1_XMM2,
	CMPLTPD_XMM1_M128,
	CMPLTPS_XMM1_XMM2,
	CMPLTPS_XMM1_M128,
	CMPLTSD_XMM1_XMM2,
	CMPLTSD_XMM1_M64,
	CMPLTSS_XMM1_XMM2,
	CMPLTSS_XMM1_M32,
	CMPNEQPD_XMM1_XMM2,
	CMPNEQPD_XMM1_M128,
	CMPNEQPS_XMM1_XMM2,
	CMPNEQPS_XMM1_M128,
	CMPNEQSD_XMM1_XMM2,
	CMPNEQSD_XMM1_M64,
	CMPNEQSS_XMM1_XMM2,
	CMPNEQSS_XMM1_M32,
	CMPNLEPD_XMM1_XMM2,
	CMPNLEPD_XMM1_M128,
	CMPNLEPS_XMM1_XMM2,
	CMPNLEPS_XMM1_M128,
	CMPNLESD_XMM1_XMM2,
	CMPNLESD_XMM1_M64,
	CMPNLESS_XMM1_XMM2,
	CMPNLESS_XMM1_M32,
	CMPNLTPD_XMM1_XMM2,
	CMPNLTPD_XMM1_M128,
	CMPNLTPS_XMM1_XMM2,
	CMPNLTPS_XMM1_M128,
	CMPNLTSD_XMM1_XMM2,
	CMPNLTSD_XMM1_M64,
	CMPNLTSS_XMM1_XMM2,
	CMPNLTSS_XMM1_M32,
	CMPORDPD_XMM1_XMM2,
	CMPORDPD_XMM1_M128,
	CMPORDPS_XMM1_XMM2,
	CMPORDPS_XMM1_M128,
	CMPORDSD_XMM1_XMM2,
	CMPORDSD_XMM1_M64,
	CMPORDSS_XMM1_XMM2,
	CMPORDSS_XMM1_M32,
	CMPPD_XMM1_XMM2_Imm5u,
	CMPPD_XMM1_M128_Imm5u,
	CMPPS_XMM1_XMM2_Imm5u,
	CMPPS_XMM1_M128_Imm5u,
	CMPS_StrSrc8_StrDst8,
	CMPS_StrSrc16_StrDst16,
	CMPS_StrSrc32_StrDst32,
	CMPS_StrSrc64_StrDst64_REX,
	CMPSB,
	CMPSB_StrSrc8_StrDst8,
	CMPSD,
	CMPSD_StrSrc32_StrDst32,
	CMPSD_XMM1_XMM2_Imm5u,
	CMPSD_XMM1_M64_Imm5u,
	CMPSQ_REX,
	CMPSQ_StrSrc64_StrDst64_REX,
	CMPSS_XMM1_XMM2_Imm5u,
	CMPSS_XMM1_M32_Imm5u,
	CMPSW,
	CMPSW_StrSrc16_StrDst16,
	CMPUNORDPD_XMM1_XMM2,
	CMPUNORDPD_XMM1_M128,
	CMPUNORDPS_XMM1_XMM2,
	CMPUNORDPS_XMM1_M128,
	CMPUNORDSD_XMM1_XMM2,
	CMPUNORDSD_XMM1_M64,
	CMPUNORDSS_XMM1_XMM2,
	CMPUNORDSS_XMM1_M32,
	CMPXCHG_Rmr8_R8,
	CMPXCHG_Rmr16_R16,
	CMPXCHG_Rmr32_R32,
	CMPXCHG_Rmr64_R64_REX,
	CMPXCHG_M8_R8,
	CMPXCHG_M16_R16,
	CMPXCHG_M32_R32,
	CMPXCHG_M64_R64_REX,
	CMPXCHG16B_M128_REX,
	CMPXCHG8B_M64,
	COMISD_XMM1_XMM2,
	COMISD_XMM1_M64,
	COMISS_XMM1_XMM2,
	COMISS_XMM1_M32,
	CPUID,
	CQO_REX,
	CRC32_R32_Rmr8,
	CRC32_R32_Rmr16,
	CRC32_R32_Rmr32,
	CRC32_R32_M8,
	CRC32_R32_M16,
	CRC32_R32_M32,
	CRC32_R64_Rmr8_REX,
	CRC32_R64_Rmr64_REX,
	CRC32_R64_M8_REX,
	CRC32_R64_M64_REX,
	CVTDQ2PD_XMM1_XMM2,
	CVTDQ2PD_XMM1_M64,
	CVTDQ2PS_XMM1_XMM2,
	CVTDQ2PS_XMM1_M128,
	CVTPD2DQ_XMM1_XMM2,
	CVTPD2DQ_XMM1_M128,
	CVTPD2PI_MM1_XMM2,
	CVTPD2PI_MM1_M128,
	CVTPD2PS_XMM1_XMM2,
	CVTPD2PS_XMM1_M128,
	CVTPI2PD_XMM1_MM2,
	CVTPI2PD_XMM1_M64,
	CVTPI2PS_XMM1_MM2,
	CVTPI2PS_XMM1_M64,
	CVTPS2DQ_XMM1_XMM2,
	CVTPS2DQ_XMM1_M128,
	CVTPS2PD_XMM1_XMM2,
	CVTPS2PD_XMM1_M64,
	CVTPS2PI_MM1_XMM2,
	CVTPS2PI_MM1_M64,
	CVTSD2SI_R32_XMM2,
	CVTSD2SI_R32_M64,
	CVTSD2SI_R64_XMM2_REX,
	CVTSD2SI_R64_M64_REX,
	CVTSD2SS_XMM1_XMM2,
	CVTSD2SS_XMM1_M64,
	CVTSI2SD_XMM1_Rmr32,
	CVTSI2SD_XMM1_Rmr64_REX,
	CVTSI2SD_XMM1_M32,
	CVTSI2SD_XMM1_M64_REX,
	CVTSI2SS_XMM1_Rmr32,
	CVTSI2SS_XMM1_Rmr64_REX,
	CVTSI2SS_XMM1_M32,
	CVTSI2SS_XMM1_M64_REX,
	CVTSS2SD_XMM1_XMM2,
	CVTSS2SD_XMM1_M32,
	CVTSS2SI_R32_XMM2,
	CVTSS2SI_R32_M32,
	CVTSS2SI_R64_XMM2_REX,
	CVTSS2SI_R64_M32_REX,
	CVTTPD2DQ_XMM1_XMM2,
	CVTTPD2DQ_XMM1_M128,
	CVTTPD2PI_MM1_XMM2,
	CVTTPD2PI_MM1_M128,
	CVTTPS2DQ_XMM1_XMM2,
	CVTTPS2DQ_XMM1_M128,
	CVTTPS2PI_MM1_XMM2,
	CVTTPS2PI_MM1_M64,
	CVTTSD2SI_R32_XMM2,
	CVTTSD2SI_R32_M64,
	CVTTSD2SI_R64_XMM2_REX,
	CVTTSD2SI_R64_M64_REX,
	CVTTSS2SI_R32_XMM2,
	CVTTSS2SI_R32_M32,
	CVTTSS2SI_R64_XMM2_REX,
	CVTTSS2SI_R64_M32_REX,
	CWD,
	CWDE,
	DAA,
	DAS,
	DEC_Rmr8,
	DEC_Rmr16,
	DEC_Rmr32,
	DEC_Rmr64_REX,
	DEC_R16op,
	DEC_R32op,
	DEC_M8,
	DEC_M16,
	DEC_M32,
	DEC_M64_REX,
	DIV_Rmr8,
	DIV_Rmr16,
	DIV_Rmr32,
	DIV_Rmr64_REX,
	DIV_M8,
	DIV_M16,
	DIV_M32,
	DIV_M64_REX,
	DIVPD_XMM1_XMM2,
	DIVPD_XMM1_M128,
	DIVPS_XMM1_XMM2,
	DIVPS_XMM1_M128,
	DIVSD_XMM1_XMM2,
	DIVSD_XMM1_M64,
	DIVSS_XMM1_XMM2,
	DIVSS_XMM1_M32,
	DPPD_XMM1_XMM2_Imm8,
	DPPD_XMM1_M128_Imm8,
	DPPS_XMM1_XMM2_Imm8,
	DPPS_XMM1_M128_Imm8,
	EMMS,
	ENCODEKEY128_R32_Rmr32,
	ENCODEKEY256_R32_Rmr32,
	ENDBR32,
	ENDBR64,
	ENQCMD_R32_M512,
	ENQCMD_R64_M512,
	ENQCMDS_R32_M512,
	ENQCMDS_R64_M512,
	ENTER_Imm16u_Imm5u,
	EXTRACTPS_Rmr32_XMM1_Imm8,
	EXTRACTPS_M32_XMM1_Imm8,
	EXTRQ_XMM1_XMM2,
	EXTRQ_XMM2_Imm8_Imm8,
	F2XM1,
	FABS,
	FADD_M32fp,
	FADD_M64fp,
	FADD_ST_STi,
	FADD_STi_ST,
	FADDP,
	FADDP_STi_ST,
	FBLD_M80bcd,
	FBSTP_M80bcd,
	FCHS,
	FCLEX,
	FCMOVB_ST_STi,
	FCMOVBE_ST_STi,
	FCMOVE_ST_STi,
	FCMOVNB_ST_STi,
	FCMOVNBE_ST_STi,
	FCMOVNE_ST_STi,
	FCMOVNU_ST_STi,
	FCMOVU_ST_STi,
	FCOM,
	FCOM_STi,
	FCOM_M32fp,
	FCOM_M64fp,
	FCOMI_ST_STi,
	FCOMIP_ST_STi,
	FCOMP,
	FCOMP_STi,
	FCOMP_M32fp,
	FCOMP_M64fp,
	FCOMPP,
	FCOS,
	FDECSTP,
	FDIV_M32fp,
	FDIV_M64fp,
	FDIV_ST_STi,
	FDIV_STi_ST,
	FDIVP,
	FDIVP_STi_ST,
	FDIVR_M32fp,
	FDIVR_M64fp,
	FDIVR_ST_STi,
	FDIVR_STi_ST,
	FDIVRP,
	FDIVRP_STi_ST,
	FEMMS,
	FFREE_STi,
	FFREEP_STi,
	FIADD_M16int,
	FIADD_M32int,
	FICOM_M16int,
	FICOM_M32int,
	FICOMP_M16int,
	FICOMP_M32int,
	FIDIV_M16int,
	FIDIV_M32int,
	FIDIVR_M16int,
	FIDIVR_M32int,
	FILD_M16int,
	FILD_M32int,
	FILD_M64int,
	FIMUL_M16int,
	FIMUL_M32int,
	FINCSTP,
	FINIT,
	FIST_M16int,
	FIST_M32int,
	FISTP_M16int,
	FISTP_M32int,
	FISTP_M64int,
	FISTTP_M16int,
	FISTTP_M32int,
	FISTTP_M64int,
	FISUB_M16int,
	FISUB_M32int,
	FISUBR_M16int,
	FISUBR_M32int,
	FLD_STi,
	FLD_M32fp,
	FLD_M64fp,
	FLD_M80fp,
	FLD1,
	FLDCW_M2byte,
	FLDENV_M14l28byte,
	FLDL2E,
	FLDL2T,
	FLDLG2,
	FLDLN2,
	FLDPI,
	FLDZ,
	FMUL_M32fp,
	FMUL_M64fp,
	FMUL_ST_STi,
	FMUL_STi_ST,
	FMULP,
	FMULP_STi_ST,
	FNCLEX,
	FNINIT,
	FNOP,
	FNSAVE_M94l108byte,
	FNSTCW_M2byte,
	FNSTENV_M14l28byte,
	FNSTSW_AX,
	FNSTSW_M2byte,
	FPATAN,
	FPREM,
	FPREM1,
	FPTAN,
	FRNDINT,
	FRSTOR_M94l108byte,
	FSAVE_M94l108byte,
	FSCALE,
	FSIN,
	FSINCOS,
	FSQRT,
	FST_STi,
	FST_M32fp,
	FST_M64fp,
	FSTCW_M2byte,
	FSTENV_M14l28byte,
	FSTP_STi,
	FSTP_M32fp,
	FSTP_M64fp,
	FSTP_M80fp,
	FSTSW_AX,
	FSTSW_M2byte,
	FSUB_M32fp,
	FSUB_M64fp,
	FSUB_ST_STi,
	FSUB_STi_ST,
	FSUBP,
	FSUBP_STi_ST,
	FSUBR_M32fp,
	FSUBR_M64fp,
	FSUBR_ST_STi,
	FSUBR_STi_ST,
	FSUBRP,
	FSUBRP_STi_ST,
	FTST,
	FUCOM,
	FUCOM_STi,
	FUCOMI_ST_STi,
	FUCOMIP_ST_STi,
	FUCOMP,
	FUCOMP_STi,
	FUCOMPP,
	FWAIT,
	FXAM,
	FXCH,
	FXCH_STi,
	FXRSTOR_M512byte,
	FXRSTOR64_M512byte_REX,
	FXSAVE_M512byte,
	FXSAVE64_M512byte_REX,
	FXTRACT,
	FYL2X,
	FYL2XP1,
	GETSEC,
	GF2P8AFFINEINVQB_XMM1_XMM2_Imm8,
	GF2P8AFFINEINVQB_XMM1_M128_Imm8,
	GF2P8AFFINEQB_XMM1_XMM2_Imm8,
	GF2P8AFFINEQB_XMM1_M128_Imm8,
	GF2P8MULB_XMM1_XMM2,
	GF2P8MULB_XMM1_M128,
	HADDPD_XMM1_XMM2,
	HADDPD_XMM1_M128,
	HADDPS_XMM1_XMM2,
	HADDPS_XMM1_M128,
	HLT,
	HRESET_Imm8,
	HSUBPD_XMM1_XMM2,
	HSUBPD_XMM1_M128,
	HSUBPS_XMM1_XMM2,
	HSUBPS_XMM1_M128,
	IDIV_Rmr8,
	IDIV_Rmr16,
	IDIV_Rmr32,
	IDIV_Rmr64_REX,
	IDIV_M8,
	IDIV_M16,
	IDIV_M32,
	IDIV_M64_REX,
	IMUL_Rmr8,
	IMUL_Rmr16,
	IMUL_Rmr32,
	IMUL_Rmr64_REX,
	IMUL_M8,
	IMUL_M16,
	IMUL_M32,
	IMUL_M64_REX,
	IMUL_R16_Rmr16,
	IMUL_R16_M16,
	IMUL_R32_Rmr32,
	IMUL_R32_M32,
	IMUL_R64_Rmr64_REX,
	IMUL_R64_M64_REX,
	IMUL_R16_Rmr16_Imm8,
	IMUL_R16_Rmr16_Imm16,
	IMUL_R16_M16_Imm8,
	IMUL_R16_M16_Imm16,
	IMUL_R32_Rmr32_Imm8,
	IMUL_R32_Rmr32_Imm32,
	IMUL_R32_M32_Imm8,
	IMUL_R32_M32_Imm32,
	IMUL_R64_Rmr64_Imm8_REX,
	IMUL_R64_Rmr64_Imm32_REX,
	IMUL_R64_M64_Imm8_REX,
	IMUL_R64_M64_Imm32_REX,
	IN_AL_DX,
	IN_AL_Imm8u,
	IN_AX_DX,
	IN_AX_Imm8u,
	IN_EAX_DX,
	IN_EAX_Imm8u,
	INC_Rmr8,
	INC_Rmr16,
	INC_Rmr32,
	INC_Rmr64_REX,
	INC_R16op,
	INC_R32op,
	INC_M8,
	INC_M16,
	INC_M32,
	INC_M64_REX,
	INCSSPD_Rmr32,
	INCSSPQ_Rmr64_REX,
	INS_StrDst8_DX,
	INS_StrDst16_DX,
	INS_StrDst32_DX,
	INSB,
	INSB_StrDst8_DX,
	INSD,
	INSD_StrDst32_DX,
	INSERTPS_XMM1_XMM2_Imm8,
	INSERTPS_XMM1_M32_Imm8,
	INSW,
	INSW_StrDst16_DX,
	INT_Imm8u,
	INT3,
	INTO,
	INVD,
	INVLPG_M,
	INVPCID_R32_M128,
	INVPCID_R64_M128,
	IRET,
	IRETD,
	IRETQ_REX,
	JA_Rel8,
	JA_Rel16,
	JA_Rel32,
	JAE_Rel8,
	JAE_Rel16,
	JAE_Rel32,
	JB_Rel8,
	JB_Rel16,
	JB_Rel32,
	JBE_Rel8,
	JBE_Rel16,
	JBE_Rel32,
	JC_Rel8,
	JC_Rel16,
	JC_Rel32,
	JCXZ_Rel8,
	JE_Rel8,
	JE_Rel16,
	JE_Rel32,
	JECXZ_Rel8,
	JG_Rel8,
	JG_Rel16,
	JG_Rel32,
	JGE_Rel8,
	JGE_Rel16,
	JGE_Rel32,
	JL_Rel8,
	JL_Rel16,
	JL_Rel32,
	JLE_Rel8,
	JLE_Rel16,
	JLE_Rel32,
	JMP_Rel8,
	JMP_Rel16,
	JMP_Rel32,
	JMP_Rmr16,
	JMP_Rmr32,
	JMP_Rmr64,
	JMP_M16,
	JMP_M32,
	JMP_M64,
	JMP_FAR_Ptr16v16,
	JMP_FAR_Ptr16v32,
	JMP_FAR_M16v16,
	JMP_FAR_M16v32,
	JMP_FAR_M16v64_REX,
	JNA_Rel8,
	JNA_Rel16,
	JNA_Rel32,
	JNAE_Rel8,
	JNAE_Rel16,
	JNAE_Rel32,
	JNB_Rel8,
	JNB_Rel16,
	JNB_Rel32,
	JNBE_Rel8,
	JNBE_Rel16,
	JNBE_Rel32,
	JNC_Rel8,
	JNC_Rel16,
	JNC_Rel32,
	JNE_Rel8,
	JNE_Rel16,
	JNE_Rel32,
	JNG_Rel8,
	JNG_Rel16,
	JNG_Rel32,
	JNGE_Rel8,
	JNGE_Rel16,
	JNGE_Rel32,
	JNL_Rel8,
	JNL_Rel16,
	JNL_Rel32,
	JNLE_Rel8,
	JNLE_Rel16,
	JNLE_Rel32,
	JNO_Rel8,
	JNO_Rel16,
	JNO_Rel32,
	JNP_Rel8,
	JNP_Rel16,
	JNP_Rel32,
	JNS_Rel8,
	JNS_Rel16,
	JNS_Rel32,
	JNZ_Rel8,
	JNZ_Rel16,
	JNZ_Rel32,
	JO_Rel8,
	JO_Rel16,
	JO_Rel32,
	JP_Rel8,
	JP_Rel16,
	JP_Rel32,
	JPE_Rel8,
	JPE_Rel16,
	JPE_Rel32,
	JPO_Rel8,
	JPO_Rel16,
	JPO_Rel32,
	JRCXZ_Rel8,
	JS_Rel8,
	JS_Rel16,
	JS_Rel32,
	JZ_Rel8,
	JZ_Rel16,
	JZ_Rel32,
	KADDB_K1_KV_K2_VEX,
	KADDD_K1_KV_K2_VEX,
	KADDQ_K1_KV_K2_VEX,
	KADDW_K1_KV_K2_VEX,
	KANDB_K1_KV_K2_VEX,
	KANDD_K1_KV_K2_VEX,
	KANDNB_K1_KV_K2_VEX,
	KANDND_K1_KV_K2_VEX,
	KANDNQ_K1_KV_K2_VEX,
	KANDNW_K1_KV_K2_VEX,
	KANDQ_K1_KV_K2_VEX,
	KANDW_K1_KV_K2_VEX,
	KMOVB_R32_K2_VEX,
	KMOVB_K1_Rmr32_VEX,
	KMOVB_K1_K2_VEX,
	KMOVB_K1_M8_VEX,
	KMOVB_M8_K1_VEX,
	KMOVD_R32_K2_VEX,
	KMOVD_K1_Rmr32_VEX,
	KMOVD_K1_K2_VEX,
	KMOVD_K1_M32_VEX,
	KMOVD_M32_K1_VEX,
	KMOVQ_R64_K2_VEX,
	KMOVQ_K1_Rmr64_VEX,
	KMOVQ_K1_K2_VEX,
	KMOVQ_K1_M64_VEX,
	KMOVQ_M64_K1_VEX,
	KMOVW_R32_K2_VEX,
	KMOVW_K1_Rmr32_VEX,
	KMOVW_K1_K2_VEX,
	KMOVW_K1_M16_VEX,
	KMOVW_M16_K1_VEX,
	KNOTB_K1_K2_VEX,
	KNOTD_K1_K2_VEX,
	KNOTQ_K1_K2_VEX,
	KNOTW_K1_K2_VEX,
	KORB_K1_KV_K2_VEX,
	KORD_K1_KV_K2_VEX,
	KORQ_K1_KV_K2_VEX,
	KORTESTB_K1_K2_VEX,
	KORTESTD_K1_K2_VEX,
	KORTESTQ_K1_K2_VEX,
	KORTESTW_K1_K2_VEX,
	KORW_K1_KV_K2_VEX,
	KSHIFTLB_K1_K2_Imm8_VEX,
	KSHIFTLD_K1_K2_Imm8_VEX,
	KSHIFTLQ_K1_K2_Imm8_VEX,
	KSHIFTLW_K1_K2_Imm8_VEX,
	KSHIFTRB_K1_K2_Imm8_VEX,
	KSHIFTRD_K1_K2_Imm8_VEX,
	KSHIFTRQ_K1_K2_Imm8_VEX,
	KSHIFTRW_K1_K2_Imm8_VEX,
	KTESTB_K1_K2_VEX,
	KTESTD_K1_K2_VEX,
	KTESTQ_K1_K2_VEX,
	KTESTW_K1_K2_VEX,
	KUNPCKBW_K1_KV_K2_VEX,
	KUNPCKDQ_K1_KV_K2_VEX,
	KUNPCKWD_K1_KV_K2_VEX,
	KXNORB_K1_KV_K2_VEX,
	KXNORD_K1_KV_K2_VEX,
	KXNORQ_K1_KV_K2_VEX,
	KXNORW_K1_KV_K2_VEX,
	KXORB_K1_KV_K2_VEX,
	KXORD_K1_KV_K2_VEX,
	KXORQ_K1_KV_K2_VEX,
	KXORW_K1_KV_K2_VEX,
	LAHF,
	LAR_R16_Rmr16,
	LAR_R16_M16,
	LAR_R32_Rmr32,
	LAR_R32_M16,
	LAR_R64_Rmr16_REX,
	LAR_R64_M16_REX,
	LDDQU_XMM1_M128,
	LDMXCSR_M32,
	LDS_R16_M16v16,
	LDS_R32_M16v32,
	LEA_R16_M,
	LEA_R32_M,
	LEA_R64_M_REX,
	LEAVE,
	LES_R16_M16v16,
	LES_R32_M16v32,
	LFENCE,
	LFS_R16_M16v16,
	LFS_R32_M16v32,
	LFS_R64_M16v64_REX,
	LGDT_M16x32,
	LGDT_M16x64,
	LGS_R16_M16v16,
	LGS_R32_M16v32,
	LGS_R64_M16v64_REX,
	LIDT_M16x32,
	LIDT_M16x64,
	LLDT_Rmr16,
	LLDT_M16,
	LMSW_Rmr16,
	LMSW_M16,
	LOADIWKEY_XMM1_XMM2,
	LODS_StrSrc8,
	LODS_StrSrc16,
	LODS_StrSrc32,
	LODS_StrSrc64_REX,
	LODS_AL_StrSrc8,
	LODS_AX_StrSrc16,
	LODS_EAX_StrSrc32,
	LODS_RAX_StrSrc64_REX,
	LODSB,
	LODSB_StrSrc8,
	LODSB_AL_StrSrc8,
	LODSD,
	LODSD_StrSrc32,
	LODSD_EAX_StrSrc32,
	LODSQ_REX,
	LODSQ_StrSrc64_REX,
	LODSQ_RAX_StrSrc64_REX,
	LODSW,
	LODSW_StrSrc16,
	LODSW_AX_StrSrc16,
	LOOP_Rel8,
	LOOPE_Rel8,
	LOOPNE_Rel8,
	LSL_R16_Rmr16,
	LSL_R16_M16,
	LSL_R32_Rmr32,
	LSL_R32_M16,
	LSL_R64_Rmr32_REX,
	LSL_R64_M16_REX,
	LSS_R16_M16v16,
	LSS_R32_M16v32,
	LSS_R64_M16v64_REX,
	LTR_Rmr16,
	LTR_M16,
	LZCNT_R16_Rmr16,
	LZCNT_R16_M16,
	LZCNT_R32_Rmr32,
	LZCNT_R32_M32,
	LZCNT_R64_Rmr64_REX,
	LZCNT_R64_M64_REX,
	MASKMOVDQU_XMM1_XMM2,
	MASKMOVQ_MM1_MM2,
	MAXPD_XMM1_XMM2,
	MAXPD_XMM1_M128,
	MAXPS_XMM1_XMM2,
	MAXPS_XMM1_M128,
	MAXSD_XMM1_XMM2,
	MAXSD_XMM1_M64,
	MAXSS_XMM1_XMM2,
	MAXSS_XMM1_M32,
	MFENCE,
	MINPD_XMM1_XMM2,
	MINPD_XMM1_M128,
	MINPS_XMM1_XMM2,
	MINPS_XMM1_M128,
	MINSD_XMM1_XMM2,
	MINSD_XMM1_M64,
	MINSS_XMM1_XMM2,
	MINSS_XMM1_M32,
	MONITOR,
	MOV_AL_Moffs8,
	MOV_AL_Moffs8_REX,
	MOV_AX_Moffs16,
	MOV_EAX_Moffs32,
	MOV_RAX_Moffs64_REX,
	MOV_CR8_Rmr64_REX,
	MOV_R8_Rmr8,
	MOV_R8_M8,
	MOV_R16_Rmr16,
	MOV_R16_M16,
	MOV_R32_Rmr32,
	MOV_R32_M32,
	MOV_R64_Rmr64_REX,
	MOV_R64_M64_REX,
	MOV_Sreg_Rmr16,
	MOV_Sreg_Rmr32,
	MOV_Sreg_M16,
	MOV_CR0toCR7_Rmr32,
	MOV_CR0toCR7_Rmr64,
	MOV_DR0toDR7_Rmr32,
	MOV_DR0toDR7_Rmr64,
	MOV_Rmr8_Imm8u,
	MOV_Rmr8_R8,
	MOV_Rmr16_Imm16,
	MOV_Rmr16_R16,
	MOV_Rmr16_Sreg,
	MOV_Rmr32_Imm32,
	MOV_Rmr32_R32,
	MOV_Rmr32_Sreg,
	MOV_Rmr32_CR0toCR7,
	MOV_Rmr32_DR0toDR7,
	MOV_Rmr64_CR8_REX,
	MOV_Rmr64_Imm32_REX,
	MOV_Rmr64_R64_REX,
	MOV_Rmr64_CR0toCR7,
	MOV_Rmr64_DR0toDR7,
	MOV_R8op_Imm8u,
	MOV_R16op_Imm16,
	MOV_R32op_Imm32,
	MOV_R64op_Imm64_REX,
	MOV_M8_Imm8u,
	MOV_M8_R8,
	MOV_M16_Imm16,
	MOV_M16_R16,
	MOV_M16_Sreg,
	MOV_M32_Imm32,
	MOV_M32_R32,
	MOV_M64_Imm32_REX,
	MOV_M64_R64_REX,
	MOV_Moffs8_AL,
	MOV_Moffs8_AL_REX,
	MOV_Moffs16_AX,
	MOV_Moffs32_EAX,
	MOV_Moffs64_RAX_REX,
	MOVAPD_XMM1_XMM2,
	MOVAPD_XMM1_M128,
	MOVAPD_XMM2_XMM1,
	MOVAPD_M128_XMM1,
	MOVAPS_XMM1_XMM2,
	MOVAPS_XMM1_M128,
	MOVAPS_XMM2_XMM1,
	MOVAPS_M128_XMM1,
	MOVBE_R16_M16,
	MOVBE_R32_M32,
	MOVBE_R64_M64_REX,
	MOVBE_M16_R16,
	MOVBE_M32_R32,
	MOVBE_M64_R64_REX,
	MOVD_MM1_Rmr32,
	MOVD_MM1_M32,
	MOVD_XMM1_Rmr32,
	MOVD_XMM1_M32,
	MOVD_Rmr32_MM1,
	MOVD_Rmr32_XMM1,
	MOVD_M32_MM1,
	MOVD_M32_XMM1,
	MOVDDUP_XMM1_XMM2,
	MOVDDUP_XMM1_M64,
	MOVDIR64B_R16_M512,
	MOVDIR64B_R32_M512,
	MOVDIR64B_R64_M512,
	MOVDIRI_M32_R32,
	MOVDIRI_M64_R64_REX,
	MOVDQ2Q_MM1_XMM2,
	MOVDQA_XMM1_XMM2,
	MOVDQA_XMM1_M128,
	MOVDQA_XMM2_XMM1,
	MOVDQA_M128_XMM1,
	MOVDQU_XMM1_XMM2,
	MOVDQU_XMM1_M128,
	MOVDQU_XMM2_XMM1,
	MOVDQU_M128_XMM1,
	MOVHLPS_XMM1_XMM2,
	MOVHPD_XMM1_M64,
	MOVHPD_M64_XMM1,
	MOVHPS_XMM1_M64,
	MOVHPS_M64_XMM1,
	MOVLHPS_XMM1_XMM2,
	MOVLPD_XMM1_M64,
	MOVLPD_M64_XMM1,
	MOVLPS_XMM1_M64,
	MOVLPS_M64_XMM1,
	MOVMSKPD_R32_XMM2,
	MOVMSKPS_R32_XMM2,
	MOVNTDQ_M128_XMM1,
	MOVNTDQA_XMM1_M128,
	MOVNTI_M32_R32,
	MOVNTI_M64_R64_REX,
	MOVNTPD_M128_XMM1,
	MOVNTPS_M128_XMM1,
	MOVNTQ_M64_MM1,
	MOVNTSD_M64_XMM1,
	MOVNTSS_M32_XMM1,
	MOVQ_MM1_MM2,
	MOVQ_MM1_M64,
	MOVQ_XMM1_Rmr64_REX,
	MOVQ_XMM1_XMM2,
	MOVQ_XMM1_M64,
	MOVQ_Rmr64_XMM1_REX,
	MOVQ_MM2_MM1,
	MOVQ_XMM2_XMM1,
	MOVQ_M64_MM1,
	MOVQ_M64_XMM1,
	MOVQ2DQ_XMM1_MM2,
	MOVS_StrDst8_StrSrc8,
	MOVS_StrDst16_StrSrc16,
	MOVS_StrDst32_StrSrc32,
	MOVS_StrDst64_StrSrc64_REX,
	MOVSB,
	MOVSB_StrDst8_StrSrc8,
	MOVSD,
	MOVSD_StrDst32_StrSrc32,
	MOVSD_XMM1_XMM2,
	MOVSD_XMM1_M64,
	MOVSD_XMM2_XMM1,
	MOVSD_M64_XMM1,
	MOVSHDUP_XMM1_XMM2,
	MOVSHDUP_XMM1_M128,
	MOVSLDUP_XMM1_XMM2,
	MOVSLDUP_XMM1_M128,
	MOVSQ_REX,
	MOVSQ_StrDst64_StrSrc64_REX,
	MOVSS_XMM1_XMM2,
	MOVSS_XMM1_M32,
	MOVSS_XMM2_XMM1,
	MOVSS_M32_XMM1,
	MOVSW,
	MOVSW_StrDst16_StrSrc16,
	MOVSX_R16_Rmr8,
	MOVSX_R16_M8,
	MOVSX_R32_Rmr8,
	MOVSX_R32_Rmr16,
	MOVSX_R32_M8,
	MOVSX_R32_M16,
	MOVSX_R64_Rmr8_REX,
	MOVSX_R64_Rmr16_REX,
	MOVSX_R64_M8_REX,
	MOVSX_R64_M16_REX,
	MOVSXD_R16_Rmr16,
	MOVSXD_R16_M16,
	MOVSXD_R64_Rmr32_REX,
	MOVSXD_R64_M32_REX,
	MOVUPD_XMM1_XMM2,
	MOVUPD_XMM1_M128,
	MOVUPD_XMM2_XMM1,
	MOVUPD_M128_XMM1,
	MOVUPS_XMM1_XMM2,
	MOVUPS_XMM1_M128,
	MOVUPS_XMM2_XMM1,
	MOVUPS_M128_XMM1,
	MOVZX_R16_Rmr8,
	MOVZX_R16_M8,
	MOVZX_R32_Rmr8,
	MOVZX_R32_Rmr16,
	MOVZX_R32_M8,
	MOVZX_R32_M16,
	MOVZX_R64_Rmr8_REX,
	MOVZX_R64_Rmr16_REX,
	MOVZX_R64_M8_REX,
	MOVZX_R64_M16_REX,
	MPSADBW_XMM1_XMM2_Imm8,
	MPSADBW_XMM1_M128_Imm8,
	MUL_Rmr8,
	MUL_Rmr16,
	MUL_Rmr32,
	MUL_Rmr64_REX,
	MUL_M8,
	MUL_M16,
	MUL_M32,
	MUL_M64_REX,
	MULPD_XMM1_XMM2,
	MULPD_XMM1_M128,
	MULPS_XMM1_XMM2,
	MULPS_XMM1_M128,
	MULSD_XMM1_XMM2,
	MULSD_XMM1_M64,
	MULSS_XMM1_XMM2,
	MULSS_XMM1_M32,
	MULX_R32_R32V_Rmr32_VEX,
	MULX_R32_R32V_M32_VEX,
	MULX_R64_R64V_Rmr64_VEX,
	MULX_R64_R64V_M64_VEX,
	MWAIT,
	NEG_Rmr8,
	NEG_Rmr16,
	NEG_Rmr32,
	NEG_Rmr64_REX,
	NEG_M8,
	NEG_M16,
	NEG_M32,
	NEG_M64_REX,
	NOP,
	NOP_Rmr16,
	NOP_Rmr32,
	NOP_M16,
	NOP_M32,
	NOT_Rmr8,
	NOT_Rmr16,
	NOT_Rmr32,
	NOT_Rmr64_REX,
	NOT_M8,
	NOT_M16,
	NOT_M32,
	NOT_M64_REX,
	OR_AL_Imm8,
	OR_AX_Imm16,
	OR_EAX_Imm32,
	OR_RAX_Imm32_REX,
	OR_R8_Rmr8,
	OR_R8_M8,
	OR_R16_Rmr16,
	OR_R16_M16,
	OR_R32_Rmr32,
	OR_R32_M32,
	OR_R64_Rmr64_REX,
	OR_R64_M64_REX,
	OR_Rmr8_Imm8,
	OR_Rmr8_R8,
	OR_Rmr16_Imm8,
	OR_Rmr16_Imm16,
	OR_Rmr16_R16,
	OR_Rmr32_Imm8,
	OR_Rmr32_Imm32,
	OR_Rmr32_R32,
	OR_Rmr64_Imm8_REX,
	OR_Rmr64_Imm32_REX,
	OR_Rmr64_R64_REX,
	OR_M8_Imm8,
	OR_M8_R8,
	OR_M16_Imm8,
	OR_M16_Imm16,
	OR_M16_R16,
	OR_M32_Imm8,
	OR_M32_Imm32,
	OR_M32_R32,
	OR_M64_Imm8_REX,
	OR_M64_Imm32_REX,
	OR_M64_R64_REX,
	ORPD_XMM1_XMM2,
	ORPD_XMM1_M128,
	ORPS_XMM1_XMM2,
	ORPS_XMM1_M128,
	OUT_DX_AL,
	OUT_DX_AX,
	OUT_DX_EAX,
	OUT_Imm8u_AL,
	OUT_Imm8u_AX,
	OUT_Imm8u_EAX,
	OUTS_DX_StrSrc8,
	OUTS_DX_StrSrc16,
	OUTS_DX_StrSrc32,
	OUTSB,
	OUTSB_DX_StrSrc8,
	OUTSD,
	OUTSD_DX_StrSrc32,
	OUTSW,
	OUTSW_DX_StrSrc16,
	PABSB_MM1_MM2,
	PABSB_MM1_M64,
	PABSB_XMM1_XMM2,
	PABSB_XMM1_M128,
	PABSD_MM1_MM2,
	PABSD_MM1_M64,
	PABSD_XMM1_XMM2,
	PABSD_XMM1_M128,
	PABSW_MM1_MM2,
	PABSW_MM1_M64,
	PABSW_XMM1_XMM2,
	PABSW_XMM1_M128,
	PACKSSDW_MM1_MM2,
	PACKSSDW_MM1_M64,
	PACKSSDW_XMM1_XMM2,
	PACKSSDW_XMM1_M128,
	PACKSSWB_MM1_MM2,
	PACKSSWB_MM1_M64,
	PACKSSWB_XMM1_XMM2,
	PACKSSWB_XMM1_M128,
	PACKUSDW_XMM1_XMM2,
	PACKUSDW_XMM1_M128,
	PACKUSWB_MM1_MM2,
	PACKUSWB_MM1_M64,
	PACKUSWB_XMM1_XMM2,
	PACKUSWB_XMM1_M128,
	PADDB_MM1_MM2,
	PADDB_MM1_M64,
	PADDB_XMM1_XMM2,
	PADDB_XMM1_M128,
	PADDD_MM1_MM2,
	PADDD_MM1_M64,
	PADDD_XMM1_XMM2,
	PADDD_XMM1_M128,
	PADDQ_MM1_MM2,
	PADDQ_MM1_M64,
	PADDQ_XMM1_XMM2,
	PADDQ_XMM1_M128,
	PADDSB_MM1_MM2,
	PADDSB_MM1_M64,
	PADDSB_XMM1_XMM2,
	PADDSB_XMM1_M128,
	PADDSW_MM1_MM2,
	PADDSW_MM1_M64,
	PADDSW_XMM1_XMM2,
	PADDSW_XMM1_M128,
	PADDUSB_MM1_MM2,
	PADDUSB_MM1_M64,
	PADDUSB_XMM1_XMM2,
	PADDUSB_XMM1_M128,
	PADDUSW_MM1_MM2,
	PADDUSW_MM1_M64,
	PADDUSW_XMM1_XMM2,
	PADDUSW_XMM1_M128,
	PADDW_MM1_MM2,
	PADDW_MM1_M64,
	PADDW_XMM1_XMM2,
	PADDW_XMM1_M128,
	PALIGNR_MM1_MM2_Imm8,
	PALIGNR_MM1_M64_Imm8,
	PALIGNR_XMM1_XMM2_Imm8,
	PALIGNR_XMM1_M128_Imm8,
	PAND_MM1_MM2,
	PAND_MM1_M64,
	PAND_XMM1_XMM2,
	PAND_XMM1_M128,
	PANDN_MM1_MM2,
	PANDN_MM1_M64,
	PANDN_XMM1_XMM2,
	PANDN_XMM1_M128,
	PAUSE,
	PAVGB_MM1_MM2,
	PAVGB_MM1_M64,
	PAVGB_XMM1_XMM2,
	PAVGB_XMM1_M128,
	PAVGW_MM1_MM2,
	PAVGW_MM1_M64,
	PAVGW_XMM1_XMM2,
	PAVGW_XMM1_M128,
	PBLENDVB_XMM1_XMM2,
	PBLENDVB_XMM1_M128,
	PBLENDVB_XMM1_XMM2_XMM0,
	PBLENDVB_XMM1_M128_XMM0,
	PBLENDW_XMM1_XMM2_Imm8,
	PBLENDW_XMM1_M128_Imm8,
	PCLMULQDQ_XMM1_XMM2_Imm8,
	PCLMULQDQ_XMM1_M128_Imm8,
	PCMPEQB_MM1_MM2,
	PCMPEQB_MM1_M64,
	PCMPEQB_XMM1_XMM2,
	PCMPEQB_XMM1_M128,
	PCMPEQD_MM1_MM2,
	PCMPEQD_MM1_M64,
	PCMPEQD_XMM1_XMM2,
	PCMPEQD_XMM1_M128,
	PCMPEQQ_XMM1_XMM2,
	PCMPEQQ_XMM1_M128,
	PCMPEQW_MM1_MM2,
	PCMPEQW_MM1_M64,
	PCMPEQW_XMM1_XMM2,
	PCMPEQW_XMM1_M128,
	PCMPESTRI_XMM1_XMM2_Imm8,
	PCMPESTRI_XMM1_M128_Imm8,
	PCMPESTRM_XMM1_XMM2_Imm8,
	PCMPESTRM_XMM1_M128_Imm8,
	PCMPGTB_MM1_MM2,
	PCMPGTB_MM1_M64,
	PCMPGTB_XMM1_XMM2,
	PCMPGTB_XMM1_M128,
	PCMPGTD_MM1_MM2,
	PCMPGTD_MM1_M64,
	PCMPGTD_XMM1_XMM2,
	PCMPGTD_XMM1_M128,
	PCMPGTQ_XMM1_XMM2,
	PCMPGTQ_XMM1_M128,
	PCMPGTW_MM1_MM2,
	PCMPGTW_MM1_M64,
	PCMPGTW_XMM1_XMM2,
	PCMPGTW_XMM1_M128,
	PCMPISTRI_XMM1_XMM2_Imm8,
	PCMPISTRI_XMM1_M128_Imm8,
	PCMPISTRM_XMM1_XMM2_Imm8,
	PCMPISTRM_XMM1_M128_Imm8,
	PCONFIG,
	PDEP_R32_R32V_Rmr32_VEX,
	PDEP_R32_R32V_M32_VEX,
	PDEP_R64_R64V_Rmr64_VEX,
	PDEP_R64_R64V_M64_VEX,
	PEXT_R32_R32V_Rmr32_VEX,
	PEXT_R32_R32V_M32_VEX,
	PEXT_R64_R64V_Rmr64_VEX,
	PEXT_R64_R64V_M64_VEX,
	PEXTRB_Rmr32_XMM1_Imm8,
	PEXTRB_M8_XMM1_Imm8,
	PEXTRD_Rmr32_XMM1_Imm8,
	PEXTRD_M32_XMM1_Imm8,
	PEXTRQ_Rmr64_XMM1_Imm8_REX,
	PEXTRQ_M64_XMM1_Imm8_REX,
	PEXTRW_R32_MM2_Imm8,
	PEXTRW_R32_XMM2_Imm8,
	PEXTRW_Rmr32_XMM1_Imm8,
	PEXTRW_M16_XMM1_Imm8,
	PHADDD_MM1_MM2,
	PHADDD_MM1_M64,
	PHADDD_XMM1_XMM2,
	PHADDD_XMM1_M128,
	PHADDSW_MM1_MM2,
	PHADDSW_MM1_M64,
	PHADDSW_XMM1_XMM2,
	PHADDSW_XMM1_M128,
	PHADDW_MM1_MM2,
	PHADDW_MM1_M64,
	PHADDW_XMM1_XMM2,
	PHADDW_XMM1_M128,
	PHMINPOSUW_XMM1_XMM2,
	PHMINPOSUW_XMM1_M128,
	PHSUBD_MM1_MM2,
	PHSUBD_MM1_M64,
	PHSUBD_XMM1_XMM2,
	PHSUBD_XMM1_M128,
	PHSUBSW_MM1_MM2,
	PHSUBSW_MM1_M64,
	PHSUBSW_XMM1_XMM2,
	PHSUBSW_XMM1_M128,
	PHSUBW_MM1_MM2,
	PHSUBW_MM1_M64,
	PHSUBW_XMM1_XMM2,
	PHSUBW_XMM1_M128,
	PINSRB_XMM1_Rmr32_Imm8,
	PINSRB_XMM1_M8_Imm8,
	PINSRD_XMM1_Rmr32_Imm8,
	PINSRD_XMM1_M32_Imm8,
	PINSRQ_XMM1_Rmr64_Imm8_REX,
	PINSRQ_XMM1_M64_Imm8_REX,
	PINSRW_MM1_Rmr32_Imm8,
	PINSRW_MM1_M16_Imm8,
	PINSRW_XMM1_Rmr32_Imm8,
	PINSRW_XMM1_M16_Imm8,
	PMADDUBSW_MM1_MM2,
	PMADDUBSW_MM1_M64,
	PMADDUBSW_XMM1_XMM2,
	PMADDUBSW_XMM1_M128,
	PMADDWD_MM1_MM2,
	PMADDWD_MM1_M64,
	PMADDWD_XMM1_XMM2,
	PMADDWD_XMM1_M128,
	PMAXSB_XMM1_XMM2,
	PMAXSB_XMM1_M128,
	PMAXSD_XMM1_XMM2,
	PMAXSD_XMM1_M128,
	PMAXSW_MM1_MM2,
	PMAXSW_MM1_M64,
	PMAXSW_XMM1_XMM2,
	PMAXSW_XMM1_M128,
	PMAXUB_MM1_MM2,
	PMAXUB_MM1_M64,
	PMAXUB_XMM1_XMM2,
	PMAXUB_XMM1_M128,
	PMAXUD_XMM1_XMM2,
	PMAXUD_XMM1_M128,
	PMAXUW_XMM1_XMM2,
	PMAXUW_XMM1_M128,
	PMINSB_XMM1_XMM2,
	PMINSB_XMM1_M128,
	PMINSD_XMM1_XMM2,
	PMINSD_XMM1_M128,
	PMINSW_MM1_MM2,
	PMINSW_MM1_M64,
	PMINSW_XMM1_XMM2,
	PMINSW_XMM1_M128,
	PMINUB_MM1_MM2,
	PMINUB_MM1_M64,
	PMINUB_XMM1_XMM2,
	PMINUB_XMM1_M128,
	PMINUD_XMM1_XMM2,
	PMINUD_XMM1_M128,
	PMINUW_XMM1_XMM2,
	PMINUW_XMM1_M128,
	PMOVMSKB_R32_MM2,
	PMOVMSKB_R32_XMM2,
	PMOVSXBD_XMM1_XMM2,
	PMOVSXBD_XMM1_M32,
	PMOVSXBQ_XMM1_XMM2,
	PMOVSXBQ_XMM1_M16,
	PMOVSXBW_XMM1_XMM2,
	PMOVSXBW_XMM1_M64,
	PMOVSXDQ_XMM1_XMM2,
	PMOVSXDQ_XMM1_M64,
	PMOVSXWD_XMM1_XMM2,
	PMOVSXWD_XMM1_M64,
	PMOVSXWQ_XMM1_XMM2,
	PMOVSXWQ_XMM1_M32,
	PMOVZXBD_XMM1_XMM2,
	PMOVZXBD_XMM1_M32,
	PMOVZXBQ_XMM1_XMM2,
	PMOVZXBQ_XMM1_M16,
	PMOVZXBW_XMM1_XMM2,
	PMOVZXBW_XMM1_M64,
	PMOVZXDQ_XMM1_XMM2,
	PMOVZXDQ_XMM1_M64,
	PMOVZXWD_XMM1_XMM2,
	PMOVZXWD_XMM1_M64,
	PMOVZXWQ_XMM1_XMM2,
	PMOVZXWQ_XMM1_M32,
	PMULDQ_XMM1_XMM2,
	PMULDQ_XMM1_M128,
	PMULHRSW_MM1_MM2,
	PMULHRSW_MM1_M64,
	PMULHRSW_XMM1_XMM2,
	PMULHRSW_XMM1_M128,
	PMULHUW_MM1_MM2,
	PMULHUW_MM1_M64,
	PMULHUW_XMM1_XMM2,
	PMULHUW_XMM1_M128,
	PMULHW_MM1_MM2,
	PMULHW_MM1_M64,
	PMULHW_XMM1_XMM2,
	PMULHW_XMM1_M128,
	PMULLD_XMM1_XMM2,
	PMULLD_XMM1_M128,
	PMULLW_MM1_MM2,
	PMULLW_MM1_M64,
	PMULLW_XMM1_XMM2,
	PMULLW_XMM1_M128,
	PMULUDQ_MM1_MM2,
	PMULUDQ_MM1_M64,
	PMULUDQ_XMM1_XMM2,
	PMULUDQ_XMM1_M128,
	POP_ES,
	POP_SS,
	POP_DS,
	POP_FS,
	POP_GS,
	POP_Rmr16,
	POP_Rmr32,
	POP_Rmr64,
	POP_R16op,
	POP_R32op,
	POP_R64op,
	POP_M16,
	POP_M32,
	POP_M64,
	POPA,
	POPAD,
	POPCNT_R16_Rmr16,
	POPCNT_R16_M16,
	POPCNT_R32_Rmr32,
	POPCNT_R32_M32,
	POPCNT_R64_Rmr64_REX,
	POPCNT_R64_M64_REX,
	POPD_ES,
	POPD_SS,
	POPD_DS,
	POPD_FS,
	POPD_GS,
	POPF,
	POPFD,
	POPFQ,
	POPQ_FS_REX,
	POPQ_GS_REX,
	POPW_ES,
	POPW_SS,
	POPW_DS,
	POPW_FS,
	POPW_GS,
	POR_MM1_MM2,
	POR_MM1_M64,
	POR_XMM1_XMM2,
	POR_XMM1_M128,
	PREFETCHNTA_M8,
	PREFETCHT0_M8,
	PREFETCHT1_M8,
	PREFETCHT2_M8,
	PREFETCHW_M8,
	PSADBW_MM1_MM2,
	PSADBW_MM1_M64,
	PSADBW_XMM1_XMM2,
	PSADBW_XMM1_M128,
	PSHUFB_MM1_MM2,
	PSHUFB_MM1_M64,
	PSHUFB_XMM1_XMM2,
	PSHUFB_XMM1_M128,
	PSHUFD_XMM1_XMM2_Imm8,
	PSHUFD_XMM1_M128_Imm8,
	PSHUFHW_XMM1_XMM2_Imm8,
	PSHUFHW_XMM1_M128_Imm8,
	PSHUFLW_XMM1_XMM2_Imm8,
	PSHUFLW_XMM1_M128_Imm8,
	PSHUFW_MM1_MM2_Imm8,
	PSHUFW_MM1_M64_Imm8,
	PSIGNB_MM1_MM2,
	PSIGNB_MM1_M64,
	PSIGNB_XMM1_XMM2,
	PSIGNB_XMM1_M128,
	PSIGND_MM1_MM2,
	PSIGND_MM1_M64,
	PSIGND_XMM1_XMM2,
	PSIGND_XMM1_M128,
	PSIGNW_MM1_MM2,
	PSIGNW_MM1_M64,
	PSIGNW_XMM1_XMM2,
	PSIGNW_XMM1_M128,
	PSLLD_MM1_MM2,
	PSLLD_MM1_M64,
	PSLLD_XMM1_XMM2,
	PSLLD_XMM1_M128,
	PSLLD_MM2_Imm8,
	PSLLD_XMM2_Imm8,
	PSLLDQ_XMM2_Imm8,
	PSLLQ_MM1_MM2,
	PSLLQ_MM1_M64,
	PSLLQ_XMM1_XMM2,
	PSLLQ_XMM1_M128,
	PSLLQ_MM2_Imm8,
	PSLLQ_XMM2_Imm8,
	PSLLW_MM1_MM2,
	PSLLW_MM1_M64,
	PSLLW_XMM1_XMM2,
	PSLLW_XMM1_M128,
	PSLLW_MM2_Imm8,
	PSLLW_XMM2_Imm8,
	PSRAD_MM1_MM2,
	PSRAD_MM1_M64,
	PSRAD_XMM1_XMM2,
	PSRAD_XMM1_M128,
	PSRAD_MM2_Imm8,
	PSRAD_XMM2_Imm8,
	PSRAW_MM1_MM2,
	PSRAW_MM1_M64,
	PSRAW_XMM1_XMM2,
	PSRAW_XMM1_M128,
	PSRAW_MM2_Imm8,
	PSRAW_XMM2_Imm8,
	PSRLD_MM1_MM2,
	PSRLD_MM1_M64,
	PSRLD_XMM1_XMM2,
	PSRLD_XMM1_M128,
	PSRLD_MM2_Imm8,
	PSRLD_XMM2_Imm8,
	PSRLDQ_XMM2_Imm8,
	PSRLQ_MM1_MM2,
	PSRLQ_MM1_M64,
	PSRLQ_XMM1_XMM2,
	PSRLQ_XMM1_M128,
	PSRLQ_MM2_Imm8,
	PSRLQ_XMM2_Imm8,
	PSRLW_MM1_MM2,
	PSRLW_MM1_M64,
	PSRLW_XMM1_XMM2,
	PSRLW_XMM1_M128,
	PSRLW_MM2_Imm8,
	PSRLW_XMM2_Imm8,
	PSUBB_MM1_MM2,
	PSUBB_MM1_M64,
	PSUBB_XMM1_XMM2,
	PSUBB_XMM1_M128,
	PSUBD_MM1_MM2,
	PSUBD_MM1_M64,
	PSUBD_XMM1_XMM2,
	PSUBD_XMM1_M128,
	PSUBQ_MM1_MM2,
	PSUBQ_MM1_M64,
	PSUBQ_XMM1_XMM2,
	PSUBQ_XMM1_M128,
	PSUBSB_MM1_MM2,
	PSUBSB_MM1_M64,
	PSUBSB_XMM1_XMM2,
	PSUBSB_XMM1_M128,
	PSUBSW_MM1_MM2,
	PSUBSW_MM1_M64,
	PSUBSW_XMM1_XMM2,
	PSUBSW_XMM1_M128,
	PSUBUSB_MM1_MM2,
	PSUBUSB_MM1_M64,
	PSUBUSB_XMM1_XMM2,
	PSUBUSB_XMM1_M128,
	PSUBUSW_MM1_MM2,
	PSUBUSW_MM1_M64,
	PSUBUSW_XMM1_XMM2,
	PSUBUSW_XMM1_M128,
	PSUBW_MM1_MM2,
	PSUBW_MM1_M64,
	PSUBW_XMM1_XMM2,
	PSUBW_XMM1_M128,
	PTEST_XMM1_XMM2,
	PTEST_XMM1_M128,
	PTWRITE_Rmr32,
	PTWRITE_Rmr64_REX,
	PTWRITE_M32,
	PTWRITE_M64_REX,
	PUNPCKHBW_MM1_MM2,
	PUNPCKHBW_MM1_M64,
	PUNPCKHBW_XMM1_XMM2,
	PUNPCKHBW_XMM1_M128,
	PUNPCKHDQ_MM1_MM2,
	PUNPCKHDQ_MM1_M64,
	PUNPCKHDQ_XMM1_XMM2,
	PUNPCKHDQ_XMM1_M128,
	PUNPCKHQDQ_XMM1_XMM2,
	PUNPCKHQDQ_XMM1_M128,
	PUNPCKHWD_MM1_MM2,
	PUNPCKHWD_MM1_M64,
	PUNPCKHWD_XMM1_XMM2,
	PUNPCKHWD_XMM1_M128,
	PUNPCKLBW_MM1_MM2,
	PUNPCKLBW_MM1_M32,
	PUNPCKLBW_XMM1_XMM2,
	PUNPCKLBW_XMM1_M128,
	PUNPCKLDQ_MM1_MM2,
	PUNPCKLDQ_MM1_M32,
	PUNPCKLDQ_XMM1_XMM2,
	PUNPCKLDQ_XMM1_M128,
	PUNPCKLQDQ_XMM1_XMM2,
	PUNPCKLQDQ_XMM1_M128,
	PUNPCKLWD_MM1_MM2,
	PUNPCKLWD_MM1_M32,
	PUNPCKLWD_XMM1_XMM2,
	PUNPCKLWD_XMM1_M128,
	PUSH_ES,
	PUSH_CS,
	PUSH_SS,
	PUSH_DS,
	PUSH_FS,
	PUSH_GS,
	PUSH_Imm8,
	PUSH_Imm16,
	PUSH_Imm32,
	PUSH_Rmr16,
	PUSH_Rmr32,
	PUSH_Rmr64,
	PUSH_R16op,
	PUSH_R32op,
	PUSH_R64op,
	PUSH_M16,
	PUSH_M32,
	PUSH_M64,
	PUSHA,
	PUSHAD,
	PUSHD_ES,
	PUSHD_CS,
	PUSHD_SS,
	PUSHD_DS,
	PUSHD_FS,
	PUSHD_GS,
	PUSHD_Imm32,
	PUSHF,
	PUSHFD,
	PUSHFQ,
	PUSHQ_FS_REX,
	PUSHQ_GS_REX,
	PUSHW_ES,
	PUSHW_CS,
	PUSHW_SS,
	PUSHW_DS,
	PUSHW_FS,
	PUSHW_GS,
	PUSHW_Imm16,
	PXOR_MM1_MM2,
	PXOR_MM1_M64,
	PXOR_XMM1_XMM2,
	PXOR_XMM1_M128,
	RCL_Rmr8_1,
	RCL_Rmr8_CL,
	RCL_Rmr8_Imm8,
	RCL_Rmr16_1,
	RCL_Rmr16_CL,
	RCL_Rmr16_Imm8,
	RCL_Rmr32_1,
	RCL_Rmr32_CL,
	RCL_Rmr32_Imm8,
	RCL_Rmr64_1_REX,
	RCL_Rmr64_CL_REX,
	RCL_Rmr64_Imm8_REX,
	RCL_M8_1,
	RCL_M8_CL,
	RCL_M8_Imm8,
	RCL_M16_1,
	RCL_M16_CL,
	RCL_M16_Imm8,
	RCL_M32_1,
	RCL_M32_CL,
	RCL_M32_Imm8,
	RCL_M64_1_REX,
	RCL_M64_CL_REX,
	RCL_M64_Imm8_REX,
	RCPPS_XMM1_XMM2,
	RCPPS_XMM1_M128,
	RCPSS_XMM1_XMM2,
	RCPSS_XMM1_M32,
	RCR_Rmr8_1,
	RCR_Rmr8_CL,
	RCR_Rmr8_Imm8,
	RCR_Rmr16_1,
	RCR_Rmr16_CL,
	RCR_Rmr16_Imm8,
	RCR_Rmr32_1,
	RCR_Rmr32_CL,
	RCR_Rmr32_Imm8,
	RCR_Rmr64_1_REX,
	RCR_Rmr64_CL_REX,
	RCR_Rmr64_Imm8_REX,
	RCR_M8_1,
	RCR_M8_CL,
	RCR_M8_Imm8,
	RCR_M16_1,
	RCR_M16_CL,
	RCR_M16_Imm8,
	RCR_M32_1,
	RCR_M32_CL,
	RCR_M32_Imm8,
	RCR_M64_1_REX,
	RCR_M64_CL_REX,
	RCR_M64_Imm8_REX,
	RDFSBASE_Rmr32,
	RDFSBASE_Rmr64_REX,
	RDGSBASE_Rmr32,
	RDGSBASE_Rmr64_REX,
	RDMSR,
	RDPID_Rmr32,
	RDPID_Rmr64,
	RDPKRU,
	RDPMC,
	RDRAND_Rmr16,
	RDRAND_Rmr32,
	RDRAND_Rmr64_REX,
	RDSEED_Rmr16,
	RDSEED_Rmr32,
	RDSEED_Rmr64_REX,
	RDSSPD_Rmr32,
	RDSSPQ_Rmr64_REX,
	RDTSC,
	RDTSCP,
	RET,
	RET_Imm16u,
	RET_FAR,
	RET_FAR_Imm16u,
	ROL_Rmr8_1,
	ROL_Rmr8_CL,
	ROL_Rmr8_Imm8,
	ROL_Rmr16_1,
	ROL_Rmr16_CL,
	ROL_Rmr16_Imm8,
	ROL_Rmr32_1,
	ROL_Rmr32_CL,
	ROL_Rmr32_Imm8,
	ROL_Rmr64_1_REX,
	ROL_Rmr64_CL_REX,
	ROL_Rmr64_Imm8_REX,
	ROL_M8_1,
	ROL_M8_CL,
	ROL_M8_Imm8,
	ROL_M16_1,
	ROL_M16_CL,
	ROL_M16_Imm8,
	ROL_M32_1,
	ROL_M32_CL,
	ROL_M32_Imm8,
	ROL_M64_1_REX,
	ROL_M64_CL_REX,
	ROL_M64_Imm8_REX,
	ROR_Rmr8_1,
	ROR_Rmr8_CL,
	ROR_Rmr8_Imm8,
	ROR_Rmr16_1,
	ROR_Rmr16_CL,
	ROR_Rmr16_Imm8,
	ROR_Rmr32_1,
	ROR_Rmr32_CL,
	ROR_Rmr32_Imm8,
	ROR_Rmr64_1_REX,
	ROR_Rmr64_CL_REX,
	ROR_Rmr64_Imm8_REX,
	ROR_M8_1,
	ROR_M8_CL,
	ROR_M8_Imm8,
	ROR_M16_1,
	ROR_M16_CL,
	ROR_M16_Imm8,
	ROR_M32_1,
	ROR_M32_CL,
	ROR_M32_Imm8,
	ROR_M64_1_REX,
	ROR_M64_CL_REX,
	ROR_M64_Imm8_REX,
	RORX_R32_Rmr32_Imm8_VEX,
	RORX_R32_M32_Imm8_VEX,
	RORX_R64_Rmr64_Imm8_VEX,
	RORX_R64_M64_Imm8_VEX,
	ROUNDPD_XMM1_XMM2_Imm8,
	ROUNDPD_XMM1_M128_Imm8,
	ROUNDPS_XMM1_XMM2_Imm8,
	ROUNDPS_XMM1_M128_Imm8,
	ROUNDSD_XMM1_XMM2_Imm8,
	ROUNDSD_XMM1_M64_Imm8,
	ROUNDSS_XMM1_XMM2_Imm8,
	ROUNDSS_XMM1_M32_Imm8,
	RSM,
	RSQRTPS_XMM1_XMM2,
	RSQRTPS_XMM1_M128,
	RSQRTSS_XMM1_XMM2,
	RSQRTSS_XMM1_M32,
	RSTORSSP_M64,
	SAHF,
	SAL_Rmr8_1,
	SAL_Rmr8_CL,
	SAL_Rmr8_Imm8,
	SAL_Rmr16_1,
	SAL_Rmr16_CL,
	SAL_Rmr16_Imm8,
	SAL_Rmr32_1,
	SAL_Rmr32_CL,
	SAL_Rmr32_Imm8,
	SAL_Rmr64_1_REX,
	SAL_Rmr64_CL_REX,
	SAL_Rmr64_Imm8_REX,
	SAL_M8_1,
	SAL_M8_CL,
	SAL_M8_Imm8,
	SAL_M16_1,
	SAL_M16_CL,
	SAL_M16_Imm8,
	SAL_M32_1,
	SAL_M32_CL,
	SAL_M32_Imm8,
	SAL_M64_1_REX,
	SAL_M64_CL_REX,
	SAL_M64_Imm8_REX,
	SAR_Rmr8_1,
	SAR_Rmr8_CL,
	SAR_Rmr8_Imm8,
	SAR_Rmr16_1,
	SAR_Rmr16_CL,
	SAR_Rmr16_Imm8,
	SAR_Rmr32_1,
	SAR_Rmr32_CL,
	SAR_Rmr32_Imm8,
	SAR_Rmr64_1_REX,
	SAR_Rmr64_CL_REX,
	SAR_Rmr64_Imm8_REX,
	SAR_M8_1,
	SAR_M8_CL,
	SAR_M8_Imm8,
	SAR_M16_1,
	SAR_M16_CL,
	SAR_M16_Imm8,
	SAR_M32_1,
	SAR_M32_CL,
	SAR_M32_Imm8,
	SAR_M64_1_REX,
	SAR_M64_CL_REX,
	SAR_M64_Imm8_REX,
	SARX_R32_Rmr32_R32V_VEX,
	SARX_R32_M32_R32V_VEX,
	SARX_R64_Rmr64_R64V_VEX,
	SARX_R64_M64_R64V_VEX,
	SAVEPREVSSP,
	SBB_AL_Imm8,
	SBB_AX_Imm16,
	SBB_EAX_Imm32,
	SBB_RAX_Imm32_REX,
	SBB_R8_Rmr8,
	SBB_R8_M8,
	SBB_R16_Rmr16,
	SBB_R16_M16,
	SBB_R32_Rmr32,
	SBB_R32_M32,
	SBB_R64_Rmr64_REX,
	SBB_R64_M64_REX,
	SBB_Rmr8_Imm8,
	SBB_Rmr8_R8,
	SBB_Rmr16_Imm8,
	SBB_Rmr16_Imm16,
	SBB_Rmr16_R16,
	SBB_Rmr32_Imm8,
	SBB_Rmr32_Imm32,
	SBB_Rmr32_R32,
	SBB_Rmr64_Imm8_REX,
	SBB_Rmr64_Imm32_REX,
	SBB_Rmr64_R64_REX,
	SBB_M8_Imm8,
	SBB_M8_R8,
	SBB_M16_Imm8,
	SBB_M16_Imm16,
	SBB_M16_R16,
	SBB_M32_Imm8,
	SBB_M32_Imm32,
	SBB_M32_R32,
	SBB_M64_Imm8_REX,
	SBB_M64_Imm32_REX,
	SBB_M64_R64_REX,
	SCAS_StrDst8,
	SCAS_StrDst16,
	SCAS_StrDst32,
	SCAS_StrDst64_REX,
	SCAS_AL_StrDst8,
	SCAS_AX_StrDst16,
	SCAS_EAX_StrDst32,
	SCAS_RAX_StrDst64_REX,
	SCASB,
	SCASB_StrDst8,
	SCASB_AL_StrDst8,
	SCASD,
	SCASD_StrDst32,
	SCASD_EAX_StrDst32,
	SCASQ_REX,
	SCASQ_StrDst64_REX,
	SCASQ_RAX_StrDst64_REX,
	SCASW,
	SCASW_StrDst16,
	SCASW_AX_StrDst16,
	SENDUIPI_Rmr8,
	SENDUIPI_Rmr16,
	SENDUIPI_Rmr32,
	SENDUIPI_Rmr64,
	SERIALIZE,
	SETA_Rmr8,
	SETA_M8,
	SETAE_Rmr8,
	SETAE_M8,
	SETB_Rmr8,
	SETB_M8,
	SETBE_Rmr8,
	SETBE_M8,
	SETC_Rmr8,
	SETC_M8,
	SETE_Rmr8,
	SETE_M8,
	SETG_Rmr8,
	SETG_M8,
	SETGE_Rmr8,
	SETGE_M8,
	SETL_Rmr8,
	SETL_M8,
	SETLE_Rmr8,
	SETLE_M8,
	SETNA_Rmr8,
	SETNA_M8,
	SETNAE_Rmr8,
	SETNAE_M8,
	SETNB_Rmr8,
	SETNB_M8,
	SETNBE_Rmr8,
	SETNBE_M8,
	SETNC_Rmr8,
	SETNC_M8,
	SETNE_Rmr8,
	SETNE_M8,
	SETNG_Rmr8,
	SETNG_M8,
	SETNGE_Rmr8,
	SETNGE_M8,
	SETNL_Rmr8,
	SETNL_M8,
	SETNLE_Rmr8,
	SETNLE_M8,
	SETNO_Rmr8,
	SETNO_M8,
	SETNP_Rmr8,
	SETNP_M8,
	SETNS_Rmr8,
	SETNS_M8,
	SETNZ_Rmr8,
	SETNZ_M8,
	SETO_Rmr8,
	SETO_M8,
	SETP_Rmr8,
	SETP_M8,
	SETPE_Rmr8,
	SETPE_M8,
	SETPO_Rmr8,
	SETPO_M8,
	SETS_Rmr8,
	SETS_M8,
	SETSSBSY,
	SETZ_Rmr8,
	SETZ_M8,
	SFENCE,
	SGDT_M,
	SHA1MSG1_XMM1_XMM2,
	SHA1MSG1_XMM1_M128,
	SHA1MSG2_XMM1_XMM2,
	SHA1MSG2_XMM1_M128,
	SHA1NEXTE_XMM1_XMM2,
	SHA1NEXTE_XMM1_M128,
	SHA1RNDS4_XMM1_XMM2_Imm8,
	SHA1RNDS4_XMM1_M128_Imm8,
	SHA256MSG1_XMM1_XMM2,
	SHA256MSG1_XMM1_M128,
	SHA256MSG2_XMM1_XMM2,
	SHA256MSG2_XMM1_M128,
	SHA256RNDS2_XMM1_XMM2,
	SHA256RNDS2_XMM1_M128,
	SHL_Rmr8_1,
	SHL_Rmr8_CL,
	SHL_Rmr8_Imm8,
	SHL_Rmr16_1,
	SHL_Rmr16_CL,
	SHL_Rmr16_Imm8,
	SHL_Rmr32_1,
	SHL_Rmr32_CL,
	SHL_Rmr32_Imm8,
	SHL_Rmr64_1_REX,
	SHL_Rmr64_CL_REX,
	SHL_Rmr64_Imm8_REX,
	SHL_M8_1,
	SHL_M8_CL,
	SHL_M8_Imm8,
	SHL_M16_1,
	SHL_M16_CL,
	SHL_M16_Imm8,
	SHL_M32_1,
	SHL_M32_CL,
	SHL_M32_Imm8,
	SHL_M64_1_REX,
	SHL_M64_CL_REX,
	SHL_M64_Imm8_REX,
	SHLD_Rmr16_R16_CL,
	SHLD_Rmr16_R16_Imm8,
	SHLD_Rmr32_R32_CL,
	SHLD_Rmr32_R32_Imm8,
	SHLD_Rmr64_R64_CL_REX,
	SHLD_Rmr64_R64_Imm8_REX,
	SHLD_M16_R16_CL,
	SHLD_M16_R16_Imm8,
	SHLD_M32_R32_CL,
	SHLD_M32_R32_Imm8,
	SHLD_M64_R64_CL_REX,
	SHLD_M64_R64_Imm8_REX,
	SHLX_R32_Rmr32_R32V_VEX,
	SHLX_R32_M32_R32V_VEX,
	SHLX_R64_Rmr64_R64V_VEX,
	SHLX_R64_M64_R64V_VEX,
	SHR_Rmr8_1,
	SHR_Rmr8_CL,
	SHR_Rmr8_Imm8,
	SHR_Rmr16_1,
	SHR_Rmr16_CL,
	SHR_Rmr16_Imm8,
	SHR_Rmr32_1,
	SHR_Rmr32_CL,
	SHR_Rmr32_Imm8,
	SHR_Rmr64_1_REX,
	SHR_Rmr64_CL_REX,
	SHR_Rmr64_Imm8_REX,
	SHR_M8_1,
	SHR_M8_CL,
	SHR_M8_Imm8,
	SHR_M16_1,
	SHR_M16_CL,
	SHR_M16_Imm8,
	SHR_M32_1,
	SHR_M32_CL,
	SHR_M32_Imm8,
	SHR_M64_1_REX,
	SHR_M64_CL_REX,
	SHR_M64_Imm8_REX,
	SHRD_Rmr16_R16_CL,
	SHRD_Rmr16_R16_Imm8,
	SHRD_Rmr32_R32_CL,
	SHRD_Rmr32_R32_Imm8,
	SHRD_Rmr64_R64_CL_REX,
	SHRD_Rmr64_R64_Imm8_REX,
	SHRD_M16_R16_CL,
	SHRD_M16_R16_Imm8,
	SHRD_M32_R32_CL,
	SHRD_M32_R32_Imm8,
	SHRD_M64_R64_CL_REX,
	SHRD_M64_R64_Imm8_REX,
	SHRX_R32_Rmr32_R32V_VEX,
	SHRX_R32_M32_R32V_VEX,
	SHRX_R64_Rmr64_R64V_VEX,
	SHRX_R64_M64_R64V_VEX,
	SHUFPD_XMM1_XMM2_Imm8,
	SHUFPD_XMM1_M128_Imm8,
	SHUFPS_XMM1_XMM2_Imm8,
	SHUFPS_XMM1_M128_Imm8,
	SIDT_M,
	SKINIT_EAX,
	SLDT_Rmr16,
	SLDT_Rmr32,
	SLDT_M16,
	SMSW_Rmr16,
	SMSW_Rmr32,
	SMSW_Rmr64_REX,
	SMSW_M16,
	SQRTPD_XMM1_XMM2,
	SQRTPD_XMM1_M128,
	SQRTPS_XMM1_XMM2,
	SQRTPS_XMM1_M128,
	SQRTSD_XMM1_XMM2,
	SQRTSD_XMM1_M64,
	SQRTSS_XMM1_XMM2,
	SQRTSS_XMM1_M32,
	STAC,
	STC,
	STD,
	STGI,
	STI,
	STMXCSR_M32,
	STOS_StrDst8,
	STOS_StrDst16,
	STOS_StrDst32,
	STOS_StrDst64_REX,
	STOS_StrDst8_AL,
	STOS_StrDst16_AX,
	STOS_StrDst32_EAX,
	STOS_StrDst64_RAX_REX,
	STOSB,
	STOSB_StrDst8,
	STOSB_StrDst8_AL,
	STOSD,
	STOSD_StrDst32,
	STOSD_StrDst32_EAX,
	STOSQ_REX,
	STOSQ_StrDst64_REX,
	STOSQ_StrDst64_RAX_REX,
	STOSW,
	STOSW_StrDst16,
	STOSW_StrDst16_AX,
	STR_Rmr16,
	STR_Rmr32,
	STR_Rmr64_REX,
	STR_M16,
	STUI,
	SUB_AL_Imm8,
	SUB_AX_Imm16,
	SUB_EAX_Imm32,
	SUB_RAX_Imm32_REX,
	SUB_R8_Rmr8,
	SUB_R8_M8,
	SUB_R16_Rmr16,
	SUB_R16_M16,
	SUB_R32_Rmr32,
	SUB_R32_M32,
	SUB_R64_Rmr64_REX,
	SUB_R64_M64_REX,
	SUB_Rmr8_Imm8,
	SUB_Rmr8_R8,
	SUB_Rmr16_Imm8,
	SUB_Rmr16_Imm16,
	SUB_Rmr16_R16,
	SUB_Rmr32_Imm8,
	SUB_Rmr32_Imm32,
	SUB_Rmr32_R32,
	SUB_Rmr64_Imm8_REX,
	SUB_Rmr64_Imm32_REX,
	SUB_Rmr64_R64_REX,
	SUB_M8_Imm8,
	SUB_M8_R8,
	SUB_M16_Imm8,
	SUB_M16_Imm16,
	SUB_M16_R16,
	SUB_M32_Imm8,
	SUB_M32_Imm32,
	SUB_M32_R32,
	SUB_M64_Imm8_REX,
	SUB_M64_Imm32_REX,
	SUB_M64_R64_REX,
	SUBPD_XMM1_XMM2,
	SUBPD_XMM1_M128,
	SUBPS_XMM1_XMM2,
	SUBPS_XMM1_M128,
	SUBSD_XMM1_XMM2,
	SUBSD_XMM1_M64,
	SUBSS_XMM1_XMM2,
	SUBSS_XMM1_M32,
	SWAPGS,
	SYSCALL,
	SYSENTER,
	SYSEXIT,
	SYSEXIT_REX,
	SYSRET,
	SYSRET_REX,
	TEST_AL_Imm8,
	TEST_AX_Imm16,
	TEST_EAX_Imm32,
	TEST_RAX_Imm32_REX,
	TEST_Rmr8_Imm8,
	TEST_Rmr8_R8,
	TEST_Rmr16_Imm16,
	TEST_Rmr16_R16,
	TEST_Rmr32_Imm32,
	TEST_Rmr32_R32,
	TEST_Rmr64_Imm32_REX,
	TEST_Rmr64_R64_REX,
	TEST_M8_Imm8,
	TEST_M8_R8,
	TEST_M16_Imm16,
	TEST_M16_R16,
	TEST_M32_Imm32,
	TEST_M32_R32,
	TEST_M64_Imm32_REX,
	TEST_M64_R64_REX,
	TESTUI,
	TPAUSE_Rmr32,
	TZCNT_R16_Rmr16,
	TZCNT_R16_M16,
	TZCNT_R32_Rmr32,
	TZCNT_R32_M32,
	TZCNT_R64_Rmr64_REX,
	TZCNT_R64_M64_REX,
	UCOMISD_XMM1_XMM2,
	UCOMISD_XMM1_M64,
	UCOMISS_XMM1_XMM2,
	UCOMISS_XMM1_M32,
	UD0_R32_Rmr32,
	UD0_R32_M32,
	UD1_R32_Rmr32,
	UD1_R32_M32,
	UD2,
	UIRET,
	UMONITOR_Rmr16,
	UMONITOR_Rmr32,
	UMONITOR_Rmr64,
	UMWAIT_Rmr32,
	UNPCKHPD_XMM1_XMM2,
	UNPCKHPD_XMM1_M128,
	UNPCKHPS_XMM1_XMM2,
	UNPCKHPS_XMM1_M128,
	UNPCKLPD_XMM1_XMM2,
	UNPCKLPD_XMM1_M128,
	UNPCKLPS_XMM1_XMM2,
	UNPCKLPS_XMM1_M128,
	VADDPD_XMM1_XMMV_XMM2_VEX,
	VADDPD_XMM1_XMMV_XMM2_EVEX,
	VADDPD_XMM1_XMMV_M128_VEX,
	VADDPD_XMM1_XMMV_M128_EVEX,
	VADDPD_XMM1_XMMV_M64bcst128_EVEX,
	VADDPD_YMM1_YMMV_YMM2_VEX,
	VADDPD_YMM1_YMMV_YMM2_EVEX,
	VADDPD_YMM1_YMMV_M256_VEX,
	VADDPD_YMM1_YMMV_M256_EVEX,
	VADDPD_YMM1_YMMV_M64bcst256_EVEX,
	VADDPD_ZMM1_ZMMV_ZMM2_EVEX,
	VADDPD_ZMM1_ZMMV_M512_EVEX,
	VADDPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VADDPS_XMM1_XMMV_XMM2_VEX,
	VADDPS_XMM1_XMMV_XMM2_EVEX,
	VADDPS_XMM1_XMMV_M128_VEX,
	VADDPS_XMM1_XMMV_M128_EVEX,
	VADDPS_XMM1_XMMV_M32bcst128_EVEX,
	VADDPS_YMM1_YMMV_YMM2_VEX,
	VADDPS_YMM1_YMMV_YMM2_EVEX,
	VADDPS_YMM1_YMMV_M256_VEX,
	VADDPS_YMM1_YMMV_M256_EVEX,
	VADDPS_YMM1_YMMV_M32bcst256_EVEX,
	VADDPS_ZMM1_ZMMV_ZMM2_EVEX,
	VADDPS_ZMM1_ZMMV_M512_EVEX,
	VADDPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VADDSD_XMM1_XMMV_XMM2_VEX,
	VADDSD_XMM1_XMMV_XMM2_EVEX,
	VADDSD_XMM1_XMMV_M64_VEX,
	VADDSD_XMM1_XMMV_M64_EVEX,
	VADDSS_XMM1_XMMV_XMM2_VEX,
	VADDSS_XMM1_XMMV_XMM2_EVEX,
	VADDSS_XMM1_XMMV_M32_VEX,
	VADDSS_XMM1_XMMV_M32_EVEX,
	VADDSUBPD_XMM1_XMMV_XMM2_VEX,
	VADDSUBPD_XMM1_XMMV_M128_VEX,
	VADDSUBPD_YMM1_YMMV_YMM2_VEX,
	VADDSUBPD_YMM1_YMMV_M256_VEX,
	VADDSUBPS_XMM1_XMMV_XMM2_VEX,
	VADDSUBPS_XMM1_XMMV_M128_VEX,
	VADDSUBPS_YMM1_YMMV_YMM2_VEX,
	VADDSUBPS_YMM1_YMMV_M256_VEX,
	VAESDEC_XMM1_XMMV_XMM2_VEX,
	VAESDEC_XMM1_XMMV_XMM2_EVEX,
	VAESDEC_XMM1_XMMV_M128_VEX,
	VAESDEC_XMM1_XMMV_M128_EVEX,
	VAESDEC_YMM1_YMMV_YMM2_VEX,
	VAESDEC_YMM1_YMMV_YMM2_EVEX,
	VAESDEC_YMM1_YMMV_M256_VEX,
	VAESDEC_YMM1_YMMV_M256_EVEX,
	VAESDEC_ZMM1_ZMMV_ZMM2_EVEX,
	VAESDEC_ZMM1_ZMMV_M512_EVEX,
	VAESDECLAST_XMM1_XMMV_XMM2_VEX,
	VAESDECLAST_XMM1_XMMV_XMM2_EVEX,
	VAESDECLAST_XMM1_XMMV_M128_VEX,
	VAESDECLAST_XMM1_XMMV_M128_EVEX,
	VAESDECLAST_YMM1_YMMV_YMM2_VEX,
	VAESDECLAST_YMM1_YMMV_YMM2_EVEX,
	VAESDECLAST_YMM1_YMMV_M256_VEX,
	VAESDECLAST_YMM1_YMMV_M256_EVEX,
	VAESDECLAST_ZMM1_ZMMV_ZMM2_EVEX,
	VAESDECLAST_ZMM1_ZMMV_M512_EVEX,
	VAESENC_XMM1_XMMV_XMM2_VEX,
	VAESENC_XMM1_XMMV_XMM2_EVEX,
	VAESENC_XMM1_XMMV_M128_VEX,
	VAESENC_XMM1_XMMV_M128_EVEX,
	VAESENC_YMM1_YMMV_YMM2_VEX,
	VAESENC_YMM1_YMMV_YMM2_EVEX,
	VAESENC_YMM1_YMMV_M256_VEX,
	VAESENC_YMM1_YMMV_M256_EVEX,
	VAESENC_ZMM1_ZMMV_ZMM2_EVEX,
	VAESENC_ZMM1_ZMMV_M512_EVEX,
	VAESENCLAST_XMM1_XMMV_XMM2_VEX,
	VAESENCLAST_XMM1_XMMV_XMM2_EVEX,
	VAESENCLAST_XMM1_XMMV_M128_VEX,
	VAESENCLAST_XMM1_XMMV_M128_EVEX,
	VAESENCLAST_YMM1_YMMV_YMM2_VEX,
	VAESENCLAST_YMM1_YMMV_YMM2_EVEX,
	VAESENCLAST_YMM1_YMMV_M256_VEX,
	VAESENCLAST_YMM1_YMMV_M256_EVEX,
	VAESENCLAST_ZMM1_ZMMV_ZMM2_EVEX,
	VAESENCLAST_ZMM1_ZMMV_M512_EVEX,
	VAESIMC_XMM1_XMM2_VEX,
	VAESIMC_XMM1_M128_VEX,
	VAESKEYGENASSIST_XMM1_XMM2_Imm8_VEX,
	VAESKEYGENASSIST_XMM1_M128_Imm8_VEX,
	VANDNPD_XMM1_XMMV_XMM2_VEX,
	VANDNPD_XMM1_XMMV_XMM2_EVEX,
	VANDNPD_XMM1_XMMV_M128_VEX,
	VANDNPD_XMM1_XMMV_M128_EVEX,
	VANDNPD_XMM1_XMMV_M64bcst128_EVEX,
	VANDNPD_YMM1_YMMV_YMM2_VEX,
	VANDNPD_YMM1_YMMV_YMM2_EVEX,
	VANDNPD_YMM1_YMMV_M256_VEX,
	VANDNPD_YMM1_YMMV_M256_EVEX,
	VANDNPD_YMM1_YMMV_M64bcst256_EVEX,
	VANDNPD_ZMM1_ZMMV_ZMM2_EVEX,
	VANDNPD_ZMM1_ZMMV_M512_EVEX,
	VANDNPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VANDNPS_XMM1_XMMV_XMM2_VEX,
	VANDNPS_XMM1_XMMV_XMM2_EVEX,
	VANDNPS_XMM1_XMMV_M128_VEX,
	VANDNPS_XMM1_XMMV_M128_EVEX,
	VANDNPS_XMM1_XMMV_M32bcst128_EVEX,
	VANDNPS_YMM1_YMMV_YMM2_VEX,
	VANDNPS_YMM1_YMMV_YMM2_EVEX,
	VANDNPS_YMM1_YMMV_M256_VEX,
	VANDNPS_YMM1_YMMV_M256_EVEX,
	VANDNPS_YMM1_YMMV_M32bcst256_EVEX,
	VANDNPS_ZMM1_ZMMV_ZMM2_EVEX,
	VANDNPS_ZMM1_ZMMV_M512_EVEX,
	VANDNPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VANDPD_XMM1_XMMV_XMM2_VEX,
	VANDPD_XMM1_XMMV_XMM2_EVEX,
	VANDPD_XMM1_XMMV_M128_VEX,
	VANDPD_XMM1_XMMV_M128_EVEX,
	VANDPD_XMM1_XMMV_M64bcst128_EVEX,
	VANDPD_YMM1_YMMV_YMM2_VEX,
	VANDPD_YMM1_YMMV_YMM2_EVEX,
	VANDPD_YMM1_YMMV_M256_VEX,
	VANDPD_YMM1_YMMV_M256_EVEX,
	VANDPD_YMM1_YMMV_M64bcst256_EVEX,
	VANDPD_ZMM1_ZMMV_ZMM2_EVEX,
	VANDPD_ZMM1_ZMMV_M512_EVEX,
	VANDPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VANDPS_XMM1_XMMV_XMM2_VEX,
	VANDPS_XMM1_XMMV_XMM2_EVEX,
	VANDPS_XMM1_XMMV_M128_VEX,
	VANDPS_XMM1_XMMV_M128_EVEX,
	VANDPS_XMM1_XMMV_M32bcst128_EVEX,
	VANDPS_YMM1_YMMV_YMM2_VEX,
	VANDPS_YMM1_YMMV_YMM2_EVEX,
	VANDPS_YMM1_YMMV_M256_VEX,
	VANDPS_YMM1_YMMV_M256_EVEX,
	VANDPS_YMM1_YMMV_M32bcst256_EVEX,
	VANDPS_ZMM1_ZMMV_ZMM2_EVEX,
	VANDPS_ZMM1_ZMMV_M512_EVEX,
	VANDPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VBLENDPD_XMM1_XMMV_XMM2_Imm8_VEX,
	VBLENDPD_XMM1_XMMV_M128_Imm8_VEX,
	VBLENDPD_YMM1_YMMV_YMM2_Imm8_VEX,
	VBLENDPD_YMM1_YMMV_M256_Imm8_VEX,
	VBLENDPS_XMM1_XMMV_XMM2_Imm8_VEX,
	VBLENDPS_XMM1_XMMV_M128_Imm8_VEX,
	VBLENDPS_YMM1_YMMV_YMM2_Imm8_VEX,
	VBLENDPS_YMM1_YMMV_M256_Imm8_VEX,
	VBLENDVPD_XMM1_XMMV_XMM2_XMMIH_VEX,
	VBLENDVPD_XMM1_XMMV_M128_XMMIH_VEX,
	VBLENDVPD_YMM1_YMMV_YMM2_YMMIH_VEX,
	VBLENDVPD_YMM1_YMMV_M256_YMMIH_VEX,
	VBLENDVPS_XMM1_XMMV_XMM2_XMMIH_VEX,
	VBLENDVPS_XMM1_XMMV_M128_XMMIH_VEX,
	VBLENDVPS_YMM1_YMMV_YMM2_YMMIH_VEX,
	VBLENDVPS_YMM1_YMMV_M256_YMMIH_VEX,
	VCMPPD_K1_XMMV_XMM2_Imm5u_EVEX,
	VCMPPD_K1_XMMV_M128_Imm5u_EVEX,
	VCMPPD_K1_XMMV_M64bcst128_Imm5u_EVEX,
	VCMPPD_K1_YMMV_YMM2_Imm5u_EVEX,
	VCMPPD_K1_YMMV_M256_Imm5u_EVEX,
	VCMPPD_K1_YMMV_M64bcst256_Imm5u_EVEX,
	VCMPPD_K1_ZMMV_ZMM2_Imm5u_EVEX,
	VCMPPD_K1_ZMMV_M512_Imm5u_EVEX,
	VCMPPD_K1_ZMMV_M64bcst512_Imm5u_EVEX,
	VCMPPD_XMM1_XMMV_XMM2_Imm5u_VEX,
	VCMPPD_XMM1_XMMV_M128_Imm5u_VEX,
	VCMPPD_YMM1_YMMV_YMM2_Imm5u_VEX,
	VCMPPD_YMM1_YMMV_M256_Imm5u_VEX,
	VCMPPS_K1_XMMV_XMM2_Imm5u_EVEX,
	VCMPPS_K1_XMMV_M128_Imm5u_EVEX,
	VCMPPS_K1_XMMV_M32bcst128_Imm5u_EVEX,
	VCMPPS_K1_YMMV_YMM2_Imm5u_EVEX,
	VCMPPS_K1_YMMV_M256_Imm5u_EVEX,
	VCMPPS_K1_YMMV_M32bcst256_Imm5u_EVEX,
	VCMPPS_K1_ZMMV_ZMM2_Imm5u_EVEX,
	VCMPPS_K1_ZMMV_M512_Imm5u_EVEX,
	VCMPPS_K1_ZMMV_M32bcst512_Imm5u_EVEX,
	VCMPPS_XMM1_XMMV_XMM2_Imm5u_VEX,
	VCMPPS_XMM1_XMMV_M128_Imm5u_VEX,
	VCMPPS_YMM1_YMMV_YMM2_Imm5u_VEX,
	VCMPPS_YMM1_YMMV_M256_Imm5u_VEX,
	VCMPSD_K1_XMMV_XMM2_Imm5u_EVEX,
	VCMPSD_K1_XMMV_M64_Imm5u_EVEX,
	VCMPSD_XMM1_XMMV_XMM2_Imm5u_VEX,
	VCMPSD_XMM1_XMMV_M64_Imm5u_VEX,
	VCMPSS_K1_XMMV_XMM2_Imm5u_EVEX,
	VCMPSS_K1_XMMV_M32_Imm5u_EVEX,
	VCMPSS_XMM1_XMMV_XMM2_Imm5u_VEX,
	VCMPSS_XMM1_XMMV_M32_Imm5u_VEX,
	VCOMISD_XMM1_XMM2_VEX,
	VCOMISD_XMM1_XMM2_EVEX,
	VCOMISD_XMM1_M64_VEX,
	VCOMISD_XMM1_M64_EVEX,
	VCOMISS_XMM1_XMM2_VEX,
	VCOMISS_XMM1_XMM2_EVEX,
	VCOMISS_XMM1_M32_VEX,
	VCOMISS_XMM1_M32_EVEX,
	VCVTDQ2PD_XMM1_XMM2_VEX,
	VCVTDQ2PD_XMM1_XMM2_EVEX,
	VCVTDQ2PD_XMM1_M64_VEX,
	VCVTDQ2PD_XMM1_M64_EVEX,
	VCVTDQ2PD_XMM1_M32bcst128_EVEX,
	VCVTDQ2PD_YMM1_XMM2_VEX,
	VCVTDQ2PD_YMM1_XMM2_EVEX,
	VCVTDQ2PD_YMM1_M128_VEX,
	VCVTDQ2PD_YMM1_M128_EVEX,
	VCVTDQ2PD_YMM1_M32bcst256_EVEX,
	VCVTDQ2PD_ZMM1_YMM2_EVEX,
	VCVTDQ2PD_ZMM1_M256_EVEX,
	VCVTDQ2PD_ZMM1_M32bcst512_EVEX,
	VCVTDQ2PS_XMM1_XMM2_VEX,
	VCVTDQ2PS_XMM1_XMM2_EVEX,
	VCVTDQ2PS_XMM1_M128_VEX,
	VCVTDQ2PS_XMM1_M128_EVEX,
	VCVTDQ2PS_XMM1_M32bcst128_EVEX,
	VCVTDQ2PS_YMM1_YMM2_VEX,
	VCVTDQ2PS_YMM1_YMM2_EVEX,
	VCVTDQ2PS_YMM1_M256_VEX,
	VCVTDQ2PS_YMM1_M256_EVEX,
	VCVTDQ2PS_YMM1_M32bcst256_EVEX,
	VCVTDQ2PS_ZMM1_ZMM2_EVEX,
	VCVTDQ2PS_ZMM1_M512_EVEX,
	VCVTDQ2PS_ZMM1_M32bcst512_EVEX,
	VCVTPD2DQ_XMM1_XMM2_VEX,
	VCVTPD2DQ_XMM1_XMM2_EVEX,
	VCVTPD2DQ_XMM1_YMM2_VEX,
	VCVTPD2DQ_XMM1_YMM2_EVEX,
	VCVTPD2DQ_XMM1_M128_VEX,
	VCVTPD2DQ_XMM1_M128_EVEX,
	VCVTPD2DQ_XMM1_M256_VEX,
	VCVTPD2DQ_XMM1_M256_EVEX,
	VCVTPD2DQ_XMM1_M64bcst128_EVEX,
	VCVTPD2DQ_XMM1_M64bcst256_EVEX,
	VCVTPD2DQ_YMM1_ZMM2_EVEX,
	VCVTPD2DQ_YMM1_M512_EVEX,
	VCVTPD2DQ_YMM1_M64bcst512_EVEX,
	VCVTPD2PS_XMM1_XMM2_VEX,
	VCVTPD2PS_XMM1_XMM2_EVEX,
	VCVTPD2PS_XMM1_YMM2_VEX,
	VCVTPD2PS_XMM1_YMM2_EVEX,
	VCVTPD2PS_XMM1_M128_VEX,
	VCVTPD2PS_XMM1_M128_EVEX,
	VCVTPD2PS_XMM1_M256_VEX,
	VCVTPD2PS_XMM1_M256_EVEX,
	VCVTPD2PS_XMM1_M64bcst128_EVEX,
	VCVTPD2PS_XMM1_M64bcst256_EVEX,
	VCVTPD2PS_YMM1_ZMM2_EVEX,
	VCVTPD2PS_YMM1_M512_EVEX,
	VCVTPD2PS_YMM1_M64bcst512_EVEX,
	VCVTPS2DQ_XMM1_XMM2_VEX,
	VCVTPS2DQ_XMM1_XMM2_EVEX,
	VCVTPS2DQ_XMM1_M128_VEX,
	VCVTPS2DQ_XMM1_M128_EVEX,
	VCVTPS2DQ_XMM1_M32bcst128_EVEX,
	VCVTPS2DQ_YMM1_YMM2_VEX,
	VCVTPS2DQ_YMM1_YMM2_EVEX,
	VCVTPS2DQ_YMM1_M256_VEX,
	VCVTPS2DQ_YMM1_M256_EVEX,
	VCVTPS2DQ_YMM1_M32bcst256_EVEX,
	VCVTPS2DQ_ZMM1_ZMM2_EVEX,
	VCVTPS2DQ_ZMM1_M512_EVEX,
	VCVTPS2DQ_ZMM1_M32bcst512_EVEX,
	VCVTPS2PD_XMM1_XMM2_VEX,
	VCVTPS2PD_XMM1_XMM2_EVEX,
	VCVTPS2PD_XMM1_M64_VEX,
	VCVTPS2PD_XMM1_M64_EVEX,
	VCVTPS2PD_XMM1_M32bcst128_EVEX,
	VCVTPS2PD_YMM1_XMM2_VEX,
	VCVTPS2PD_YMM1_XMM2_EVEX,
	VCVTPS2PD_YMM1_M128_VEX,
	VCVTPS2PD_YMM1_M128_EVEX,
	VCVTPS2PD_YMM1_M32bcst256_EVEX,
	VCVTPS2PD_ZMM1_YMM2_EVEX,
	VCVTPS2PD_ZMM1_M256_EVEX,
	VCVTPS2PD_ZMM1_M32bcst512_EVEX,
	VCVTSD2SI_R32_XMM2_VEX,
	VCVTSD2SI_R32_XMM2_EVEX,
	VCVTSD2SI_R32_M64_VEX,
	VCVTSD2SI_R32_M64_EVEX,
	VCVTSD2SI_R64_XMM2_VEX,
	VCVTSD2SI_R64_XMM2_EVEX,
	VCVTSD2SI_R64_M64_VEX,
	VCVTSD2SI_R64_M64_EVEX,
	VCVTSD2SS_XMM1_XMMV_XMM2_VEX,
	VCVTSD2SS_XMM1_XMMV_XMM2_EVEX,
	VCVTSD2SS_XMM1_XMMV_M64_VEX,
	VCVTSD2SS_XMM1_XMMV_M64_EVEX,
	VCVTSI2SD_XMM1_XMMV_Rmr32_VEX,
	VCVTSI2SD_XMM1_XMMV_Rmr32_EVEX,
	VCVTSI2SD_XMM1_XMMV_Rmr64_VEX,
	VCVTSI2SD_XMM1_XMMV_Rmr64_EVEX,
	VCVTSI2SD_XMM1_XMMV_M32_VEX,
	VCVTSI2SD_XMM1_XMMV_M32_EVEX,
	VCVTSI2SD_XMM1_XMMV_M64_VEX,
	VCVTSI2SD_XMM1_XMMV_M64_EVEX,
	VCVTSI2SS_XMM1_XMMV_Rmr32_VEX,
	VCVTSI2SS_XMM1_XMMV_Rmr32_EVEX,
	VCVTSI2SS_XMM1_XMMV_Rmr64_VEX,
	VCVTSI2SS_XMM1_XMMV_Rmr64_EVEX,
	VCVTSI2SS_XMM1_XMMV_M32_VEX,
	VCVTSI2SS_XMM1_XMMV_M32_EVEX,
	VCVTSI2SS_XMM1_XMMV_M64_VEX,
	VCVTSI2SS_XMM1_XMMV_M64_EVEX,
	VCVTSS2SD_XMM1_XMMV_XMM2_VEX,
	VCVTSS2SD_XMM1_XMMV_XMM2_EVEX,
	VCVTSS2SD_XMM1_XMMV_M32_VEX,
	VCVTSS2SD_XMM1_XMMV_M32_EVEX,
	VCVTSS2SI_R32_XMM2_VEX,
	VCVTSS2SI_R32_XMM2_EVEX,
	VCVTSS2SI_R32_M32_VEX,
	VCVTSS2SI_R32_M32_EVEX,
	VCVTSS2SI_R64_XMM2_VEX,
	VCVTSS2SI_R64_XMM2_EVEX,
	VCVTSS2SI_R64_M32_VEX,
	VCVTSS2SI_R64_M32_EVEX,
	VCVTTPD2DQ_XMM1_XMM2_VEX,
	VCVTTPD2DQ_XMM1_XMM2_EVEX,
	VCVTTPD2DQ_XMM1_YMM2_VEX,
	VCVTTPD2DQ_XMM1_YMM2_EVEX,
	VCVTTPD2DQ_XMM1_M128_VEX,
	VCVTTPD2DQ_XMM1_M128_EVEX,
	VCVTTPD2DQ_XMM1_M256_VEX,
	VCVTTPD2DQ_XMM1_M256_EVEX,
	VCVTTPD2DQ_XMM1_M64bcst128_EVEX,
	VCVTTPD2DQ_XMM1_M64bcst256_EVEX,
	VCVTTPD2DQ_YMM1_ZMM2_EVEX,
	VCVTTPD2DQ_YMM1_M512_EVEX,
	VCVTTPD2DQ_YMM1_M64bcst512_EVEX,
	VCVTTPS2DQ_XMM1_XMM2_VEX,
	VCVTTPS2DQ_XMM1_XMM2_EVEX,
	VCVTTPS2DQ_XMM1_M128_VEX,
	VCVTTPS2DQ_XMM1_M128_EVEX,
	VCVTTPS2DQ_XMM1_M32bcst128_EVEX,
	VCVTTPS2DQ_YMM1_YMM2_VEX,
	VCVTTPS2DQ_YMM1_YMM2_EVEX,
	VCVTTPS2DQ_YMM1_M256_VEX,
	VCVTTPS2DQ_YMM1_M256_EVEX,
	VCVTTPS2DQ_YMM1_M32bcst256_EVEX,
	VCVTTPS2DQ_ZMM1_ZMM2_EVEX,
	VCVTTPS2DQ_ZMM1_M512_EVEX,
	VCVTTPS2DQ_ZMM1_M32bcst512_EVEX,
	VCVTTSD2SI_R32_XMM2_VEX,
	VCVTTSD2SI_R32_XMM2_EVEX,
	VCVTTSD2SI_R32_M64_VEX,
	VCVTTSD2SI_R32_M64_EVEX,
	VCVTTSD2SI_R64_XMM2_VEX,
	VCVTTSD2SI_R64_XMM2_EVEX,
	VCVTTSD2SI_R64_M64_VEX,
	VCVTTSD2SI_R64_M64_EVEX,
	VCVTTSS2SI_R32_XMM2_VEX,
	VCVTTSS2SI_R32_XMM2_EVEX,
	VCVTTSS2SI_R32_M32_VEX,
	VCVTTSS2SI_R32_M32_EVEX,
	VCVTTSS2SI_R64_XMM2_VEX,
	VCVTTSS2SI_R64_XMM2_EVEX,
	VCVTTSS2SI_R64_M32_VEX,
	VCVTTSS2SI_R64_M32_EVEX,
	VDIVPD_XMM1_XMMV_XMM2_VEX,
	VDIVPD_XMM1_XMMV_XMM2_EVEX,
	VDIVPD_XMM1_XMMV_M128_VEX,
	VDIVPD_XMM1_XMMV_M128_EVEX,
	VDIVPD_XMM1_XMMV_M64bcst128_EVEX,
	VDIVPD_YMM1_YMMV_YMM2_VEX,
	VDIVPD_YMM1_YMMV_YMM2_EVEX,
	VDIVPD_YMM1_YMMV_M256_VEX,
	VDIVPD_YMM1_YMMV_M256_EVEX,
	VDIVPD_YMM1_YMMV_M64bcst256_EVEX,
	VDIVPD_ZMM1_ZMMV_ZMM2_EVEX,
	VDIVPD_ZMM1_ZMMV_M512_EVEX,
	VDIVPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VDIVPS_XMM1_XMMV_XMM2_VEX,
	VDIVPS_XMM1_XMMV_XMM2_EVEX,
	VDIVPS_XMM1_XMMV_M128_VEX,
	VDIVPS_XMM1_XMMV_M128_EVEX,
	VDIVPS_XMM1_XMMV_M32bcst128_EVEX,
	VDIVPS_YMM1_YMMV_YMM2_VEX,
	VDIVPS_YMM1_YMMV_YMM2_EVEX,
	VDIVPS_YMM1_YMMV_M256_VEX,
	VDIVPS_YMM1_YMMV_M256_EVEX,
	VDIVPS_YMM1_YMMV_M32bcst256_EVEX,
	VDIVPS_ZMM1_ZMMV_ZMM2_EVEX,
	VDIVPS_ZMM1_ZMMV_M512_EVEX,
	VDIVPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VDIVSD_XMM1_XMMV_XMM2_VEX,
	VDIVSD_XMM1_XMMV_XMM2_EVEX,
	VDIVSD_XMM1_XMMV_M64_VEX,
	VDIVSD_XMM1_XMMV_M64_EVEX,
	VDIVSS_XMM1_XMMV_XMM2_VEX,
	VDIVSS_XMM1_XMMV_XMM2_EVEX,
	VDIVSS_XMM1_XMMV_M32_VEX,
	VDIVSS_XMM1_XMMV_M32_EVEX,
	VDPPD_XMM1_XMMV_XMM2_Imm8_VEX,
	VDPPD_XMM1_XMMV_M128_Imm8_VEX,
	VDPPS_XMM1_XMMV_XMM2_Imm8_VEX,
	VDPPS_XMM1_XMMV_M128_Imm8_VEX,
	VDPPS_YMM1_YMMV_YMM2_Imm8_VEX,
	VDPPS_YMM1_YMMV_M256_Imm8_VEX,
	VEXTRACTPS_Rmr32_XMM1_Imm8_VEX,
	VEXTRACTPS_Rmr32_XMM1_Imm8_EVEX,
	VEXTRACTPS_M32_XMM1_Imm8_VEX,
	VEXTRACTPS_M32_XMM1_Imm8_EVEX,
	VGF2P8AFFINEINVQB_XMM1_XMMV_XMM2_Imm8_VEX,
	VGF2P8AFFINEINVQB_XMM1_XMMV_XMM2_Imm8_EVEX,
	VGF2P8AFFINEINVQB_XMM1_XMMV_M128_Imm8_VEX,
	VGF2P8AFFINEINVQB_XMM1_XMMV_M128_Imm8_EVEX,
	VGF2P8AFFINEINVQB_XMM1_XMMV_M64bcst128_Imm8_EVEX,
	VGF2P8AFFINEINVQB_YMM1_YMMV_YMM2_Imm8_VEX,
	VGF2P8AFFINEINVQB_YMM1_YMMV_YMM2_Imm8_EVEX,
	VGF2P8AFFINEINVQB_YMM1_YMMV_M256_Imm8_VEX,
	VGF2P8AFFINEINVQB_YMM1_YMMV_M256_Imm8_EVEX,
	VGF2P8AFFINEINVQB_YMM1_YMMV_M64bcst256_Imm8_EVEX,
	VGF2P8AFFINEINVQB_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	VGF2P8AFFINEINVQB_ZMM1_ZMMV_M512_Imm8_EVEX,
	VGF2P8AFFINEINVQB_ZMM1_ZMMV_M64bcst512_Imm8_EVEX,
	VGF2P8AFFINEQB_XMM1_XMMV_XMM2_Imm8_VEX,
	VGF2P8AFFINEQB_XMM1_XMMV_XMM2_Imm8_EVEX,
	VGF2P8AFFINEQB_XMM1_XMMV_M128_Imm8_VEX,
	VGF2P8AFFINEQB_XMM1_XMMV_M128_Imm8_EVEX,
	VGF2P8AFFINEQB_XMM1_XMMV_M64bcst128_Imm8_EVEX,
	VGF2P8AFFINEQB_YMM1_YMMV_YMM2_Imm8_VEX,
	VGF2P8AFFINEQB_YMM1_YMMV_YMM2_Imm8_EVEX,
	VGF2P8AFFINEQB_YMM1_YMMV_M256_Imm8_VEX,
	VGF2P8AFFINEQB_YMM1_YMMV_M256_Imm8_EVEX,
	VGF2P8AFFINEQB_YMM1_YMMV_M64bcst256_Imm8_EVEX,
	VGF2P8AFFINEQB_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	VGF2P8AFFINEQB_ZMM1_ZMMV_M512_Imm8_EVEX,
	VGF2P8AFFINEQB_ZMM1_ZMMV_M64bcst512_Imm8_EVEX,
	VGF2P8MULB_XMM1_XMMV_XMM2_VEX,
	VGF2P8MULB_XMM1_XMMV_XMM2_EVEX,
	VGF2P8MULB_XMM1_XMMV_M128_VEX,
	VGF2P8MULB_XMM1_XMMV_M128_EVEX,
	VGF2P8MULB_YMM1_YMMV_YMM2_VEX,
	VGF2P8MULB_YMM1_YMMV_YMM2_EVEX,
	VGF2P8MULB_YMM1_YMMV_M256_VEX,
	VGF2P8MULB_YMM1_YMMV_M256_EVEX,
	VGF2P8MULB_ZMM1_ZMMV_ZMM2_EVEX,
	VGF2P8MULB_ZMM1_ZMMV_M512_EVEX,
	VHADDPD_XMM1_XMMV_XMM2_VEX,
	VHADDPD_XMM1_XMMV_M128_VEX,
	VHADDPD_YMM1_YMMV_YMM2_VEX,
	VHADDPD_YMM1_YMMV_M256_VEX,
	VHADDPS_XMM1_XMMV_XMM2_VEX,
	VHADDPS_XMM1_XMMV_M128_VEX,
	VHADDPS_YMM1_YMMV_YMM2_VEX,
	VHADDPS_YMM1_YMMV_M256_VEX,
	VHSUBPD_XMM1_XMMV_XMM2_VEX,
	VHSUBPD_XMM1_XMMV_M128_VEX,
	VHSUBPD_YMM1_YMMV_YMM2_VEX,
	VHSUBPD_YMM1_YMMV_M256_VEX,
	VHSUBPS_XMM1_XMMV_XMM2_VEX,
	VHSUBPS_XMM1_XMMV_M128_VEX,
	VHSUBPS_YMM1_YMMV_YMM2_VEX,
	VHSUBPS_YMM1_YMMV_M256_VEX,
	VINSERTPS_XMM1_XMMV_XMM2_Imm8_VEX,
	VINSERTPS_XMM1_XMMV_XMM2_Imm8_EVEX,
	VINSERTPS_XMM1_XMMV_M32_Imm8_VEX,
	VINSERTPS_XMM1_XMMV_M32_Imm8_EVEX,
	VLDDQU_XMM1_M128_VEX,
	VLDDQU_YMM1_M256_VEX,
	VLDMXCSR_M32_VEX,
	VMASKMOVDQU_XMM1_XMM2_VEX,
	VMAXPD_XMM1_XMMV_XMM2_VEX,
	VMAXPD_XMM1_XMMV_XMM2_EVEX,
	VMAXPD_XMM1_XMMV_M128_VEX,
	VMAXPD_XMM1_XMMV_M128_EVEX,
	VMAXPD_XMM1_XMMV_M64bcst128_EVEX,
	VMAXPD_YMM1_YMMV_YMM2_VEX,
	VMAXPD_YMM1_YMMV_YMM2_EVEX,
	VMAXPD_YMM1_YMMV_M256_VEX,
	VMAXPD_YMM1_YMMV_M256_EVEX,
	VMAXPD_YMM1_YMMV_M64bcst256_EVEX,
	VMAXPD_ZMM1_ZMMV_ZMM2_EVEX,
	VMAXPD_ZMM1_ZMMV_M512_EVEX,
	VMAXPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VMAXPS_XMM1_XMMV_XMM2_VEX,
	VMAXPS_XMM1_XMMV_XMM2_EVEX,
	VMAXPS_XMM1_XMMV_M128_VEX,
	VMAXPS_XMM1_XMMV_M128_EVEX,
	VMAXPS_XMM1_XMMV_M32bcst128_EVEX,
	VMAXPS_YMM1_YMMV_YMM2_VEX,
	VMAXPS_YMM1_YMMV_YMM2_EVEX,
	VMAXPS_YMM1_YMMV_M256_VEX,
	VMAXPS_YMM1_YMMV_M256_EVEX,
	VMAXPS_YMM1_YMMV_M32bcst256_EVEX,
	VMAXPS_ZMM1_ZMMV_ZMM2_EVEX,
	VMAXPS_ZMM1_ZMMV_M512_EVEX,
	VMAXPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VMAXSD_XMM1_XMMV_XMM2_VEX,
	VMAXSD_XMM1_XMMV_XMM2_EVEX,
	VMAXSD_XMM1_XMMV_M64_VEX,
	VMAXSD_XMM1_XMMV_M64_EVEX,
	VMAXSS_XMM1_XMMV_XMM2_VEX,
	VMAXSS_XMM1_XMMV_XMM2_EVEX,
	VMAXSS_XMM1_XMMV_M32_VEX,
	VMAXSS_XMM1_XMMV_M32_EVEX,
	VMCALL,
	VMCLEAR_M64,
	VMINPD_XMM1_XMMV_XMM2_VEX,
	VMINPD_XMM1_XMMV_XMM2_EVEX,
	VMINPD_XMM1_XMMV_M128_VEX,
	VMINPD_XMM1_XMMV_M128_EVEX,
	VMINPD_XMM1_XMMV_M64bcst128_EVEX,
	VMINPD_YMM1_YMMV_YMM2_VEX,
	VMINPD_YMM1_YMMV_YMM2_EVEX,
	VMINPD_YMM1_YMMV_M256_VEX,
	VMINPD_YMM1_YMMV_M256_EVEX,
	VMINPD_YMM1_YMMV_M64bcst256_EVEX,
	VMINPD_ZMM1_ZMMV_ZMM2_EVEX,
	VMINPD_ZMM1_ZMMV_M512_EVEX,
	VMINPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VMINPS_XMM1_XMMV_XMM2_VEX,
	VMINPS_XMM1_XMMV_XMM2_EVEX,
	VMINPS_XMM1_XMMV_M128_VEX,
	VMINPS_XMM1_XMMV_M128_EVEX,
	VMINPS_XMM1_XMMV_M32bcst128_EVEX,
	VMINPS_YMM1_YMMV_YMM2_VEX,
	VMINPS_YMM1_YMMV_YMM2_EVEX,
	VMINPS_YMM1_YMMV_M256_VEX,
	VMINPS_YMM1_YMMV_M256_EVEX,
	VMINPS_YMM1_YMMV_M32bcst256_EVEX,
	VMINPS_ZMM1_ZMMV_ZMM2_EVEX,
	VMINPS_ZMM1_ZMMV_M512_EVEX,
	VMINPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VMINSD_XMM1_XMMV_XMM2_VEX,
	VMINSD_XMM1_XMMV_XMM2_EVEX,
	VMINSD_XMM1_XMMV_M64_VEX,
	VMINSD_XMM1_XMMV_M64_EVEX,
	VMINSS_XMM1_XMMV_XMM2_VEX,
	VMINSS_XMM1_XMMV_XMM2_EVEX,
	VMINSS_XMM1_XMMV_M32_VEX,
	VMINSS_XMM1_XMMV_M32_EVEX,
	VMLAUNCH,
	VMLOAD_EAX,
	VMLOAD_RAX,
	VMMCALL,
	VMOVAPD_XMM1_XMM2_VEX,
	VMOVAPD_XMM1_XMM2_EVEX,
	VMOVAPD_XMM1_M128_VEX,
	VMOVAPD_XMM1_M128_EVEX,
	VMOVAPD_YMM1_YMM2_VEX,
	VMOVAPD_YMM1_YMM2_EVEX,
	VMOVAPD_YMM1_M256_VEX,
	VMOVAPD_YMM1_M256_EVEX,
	VMOVAPD_ZMM1_ZMM2_EVEX,
	VMOVAPD_ZMM1_M512_EVEX,
	VMOVAPD_XMM2_XMM1_VEX,
	VMOVAPD_XMM2_XMM1_EVEX,
	VMOVAPD_YMM2_YMM1_VEX,
	VMOVAPD_YMM2_YMM1_EVEX,
	VMOVAPD_ZMM2_ZMM1_EVEX,
	VMOVAPD_M128_XMM1_VEX,
	VMOVAPD_M128_XMM1_EVEX,
	VMOVAPD_M256_YMM1_VEX,
	VMOVAPD_M256_YMM1_EVEX,
	VMOVAPD_M512_ZMM1_EVEX,
	VMOVAPS_XMM1_XMM2_VEX,
	VMOVAPS_XMM1_XMM2_EVEX,
	VMOVAPS_XMM1_M128_VEX,
	VMOVAPS_XMM1_M128_EVEX,
	VMOVAPS_YMM1_YMM2_VEX,
	VMOVAPS_YMM1_YMM2_EVEX,
	VMOVAPS_YMM1_M256_VEX,
	VMOVAPS_YMM1_M256_EVEX,
	VMOVAPS_ZMM1_ZMM2_EVEX,
	VMOVAPS_ZMM1_M512_EVEX,
	VMOVAPS_XMM2_XMM1_VEX,
	VMOVAPS_XMM2_XMM1_EVEX,
	VMOVAPS_YMM2_YMM1_VEX,
	VMOVAPS_YMM2_YMM1_EVEX,
	VMOVAPS_ZMM2_ZMM1_EVEX,
	VMOVAPS_M128_XMM1_VEX,
	VMOVAPS_M128_XMM1_EVEX,
	VMOVAPS_M256_YMM1_VEX,
	VMOVAPS_M256_YMM1_EVEX,
	VMOVAPS_M512_ZMM1_EVEX,
	VMOVD_XMM1_Rmr32_VEX,
	VMOVD_XMM1_Rmr32_EVEX,
	VMOVD_XMM1_M32_VEX,
	VMOVD_XMM1_M32_EVEX,
	VMOVD_Rmr32_XMM1_VEX,
	VMOVD_Rmr32_XMM1_EVEX,
	VMOVD_M32_XMM1_VEX,
	VMOVD_M32_XMM1_EVEX,
	VMOVDDUP_XMM1_XMM2_VEX,
	VMOVDDUP_XMM1_XMM2_EVEX,
	VMOVDDUP_XMM1_M64_VEX,
	VMOVDDUP_XMM1_M64_EVEX,
	VMOVDDUP_YMM1_YMM2_VEX,
	VMOVDDUP_YMM1_YMM2_EVEX,
	VMOVDDUP_YMM1_M256_VEX,
	VMOVDDUP_YMM1_M256_EVEX,
	VMOVDDUP_ZMM1_ZMM2_EVEX,
	VMOVDDUP_ZMM1_M512_EVEX,
	VMOVDQA_XMM1_XMM2_VEX,
	VMOVDQA_XMM1_M128_VEX,
	VMOVDQA_YMM1_YMM2_VEX,
	VMOVDQA_YMM1_M256_VEX,
	VMOVDQA_XMM2_XMM1_VEX,
	VMOVDQA_YMM2_YMM1_VEX,
	VMOVDQA_M128_XMM1_VEX,
	VMOVDQA_M256_YMM1_VEX,
	VMOVDQA32_XMM1_XMM2_EVEX,
	VMOVDQA32_XMM1_M128_EVEX,
	VMOVDQA32_YMM1_YMM2_EVEX,
	VMOVDQA32_YMM1_M256_EVEX,
	VMOVDQA32_ZMM1_ZMM2_EVEX,
	VMOVDQA32_ZMM1_M512_EVEX,
	VMOVDQA32_XMM2_XMM1_EVEX,
	VMOVDQA32_YMM2_YMM1_EVEX,
	VMOVDQA32_ZMM2_ZMM1_EVEX,
	VMOVDQA32_M128_XMM1_EVEX,
	VMOVDQA32_M256_YMM1_EVEX,
	VMOVDQA32_M512_ZMM1_EVEX,
	VMOVDQA64_XMM1_XMM2_EVEX,
	VMOVDQA64_XMM1_M128_EVEX,
	VMOVDQA64_YMM1_YMM2_EVEX,
	VMOVDQA64_YMM1_M256_EVEX,
	VMOVDQA64_ZMM1_ZMM2_EVEX,
	VMOVDQA64_ZMM1_M512_EVEX,
	VMOVDQA64_XMM2_XMM1_EVEX,
	VMOVDQA64_YMM2_YMM1_EVEX,
	VMOVDQA64_ZMM2_ZMM1_EVEX,
	VMOVDQA64_M128_XMM1_EVEX,
	VMOVDQA64_M256_YMM1_EVEX,
	VMOVDQA64_M512_ZMM1_EVEX,
	VMOVDQU_XMM1_XMM2_VEX,
	VMOVDQU_XMM1_M128_VEX,
	VMOVDQU_YMM1_YMM2_VEX,
	VMOVDQU_YMM1_M256_VEX,
	VMOVDQU_XMM2_XMM1_VEX,
	VMOVDQU_YMM2_YMM1_VEX,
	VMOVDQU_M128_XMM1_VEX,
	VMOVDQU_M256_YMM1_VEX,
	VMOVDQU16_XMM1_XMM2_EVEX,
	VMOVDQU16_XMM1_M128_EVEX,
	VMOVDQU16_YMM1_YMM2_EVEX,
	VMOVDQU16_YMM1_M256_EVEX,
	VMOVDQU16_ZMM1_ZMM2_EVEX,
	VMOVDQU16_ZMM1_M512_EVEX,
	VMOVDQU16_XMM2_XMM1_EVEX,
	VMOVDQU16_YMM2_YMM1_EVEX,
	VMOVDQU16_ZMM2_ZMM1_EVEX,
	VMOVDQU16_M128_XMM1_EVEX,
	VMOVDQU16_M256_YMM1_EVEX,
	VMOVDQU16_M512_ZMM1_EVEX,
	VMOVDQU32_XMM1_XMM2_EVEX,
	VMOVDQU32_XMM1_M128_EVEX,
	VMOVDQU32_YMM1_YMM2_EVEX,
	VMOVDQU32_YMM1_M256_EVEX,
	VMOVDQU32_ZMM1_ZMM2_EVEX,
	VMOVDQU32_ZMM1_M512_EVEX,
	VMOVDQU32_XMM2_XMM1_EVEX,
	VMOVDQU32_YMM2_YMM1_EVEX,
	VMOVDQU32_ZMM2_ZMM1_EVEX,
	VMOVDQU32_M128_XMM1_EVEX,
	VMOVDQU32_M256_YMM1_EVEX,
	VMOVDQU32_M512_ZMM1_EVEX,
	VMOVDQU64_XMM1_XMM2_EVEX,
	VMOVDQU64_XMM1_M128_EVEX,
	VMOVDQU64_YMM1_YMM2_EVEX,
	VMOVDQU64_YMM1_M256_EVEX,
	VMOVDQU64_ZMM1_ZMM2_EVEX,
	VMOVDQU64_ZMM1_M512_EVEX,
	VMOVDQU64_XMM2_XMM1_EVEX,
	VMOVDQU64_YMM2_YMM1_EVEX,
	VMOVDQU64_ZMM2_ZMM1_EVEX,
	VMOVDQU64_M128_XMM1_EVEX,
	VMOVDQU64_M256_YMM1_EVEX,
	VMOVDQU64_M512_ZMM1_EVEX,
	VMOVDQU8_XMM1_XMM2_EVEX,
	VMOVDQU8_XMM1_M128_EVEX,
	VMOVDQU8_YMM1_YMM2_EVEX,
	VMOVDQU8_YMM1_M256_EVEX,
	VMOVDQU8_ZMM1_ZMM2_EVEX,
	VMOVDQU8_ZMM1_M512_EVEX,
	VMOVDQU8_XMM2_XMM1_EVEX,
	VMOVDQU8_YMM2_YMM1_EVEX,
	VMOVDQU8_ZMM2_ZMM1_EVEX,
	VMOVDQU8_M128_XMM1_EVEX,
	VMOVDQU8_M256_YMM1_EVEX,
	VMOVDQU8_M512_ZMM1_EVEX,
	VMOVHLPS_XMM1_XMMV_XMM2_VEX,
	VMOVHLPS_XMM1_XMMV_XMM2_EVEX,
	VMOVHPD_M64_XMM1_VEX,
	VMOVHPD_M64_XMM1_EVEX,
	VMOVHPD_XMM1_XMMV_M64_VEX,
	VMOVHPD_XMM1_XMMV_M64_EVEX,
	VMOVHPS_M64_XMM1_VEX,
	VMOVHPS_M64_XMM1_EVEX,
	VMOVHPS_XMM1_XMMV_M64_VEX,
	VMOVHPS_XMM1_XMMV_M64_EVEX,
	VMOVLHPS_XMM1_XMMV_XMM2_VEX,
	VMOVLHPS_XMM1_XMMV_XMM2_EVEX,
	VMOVLPD_M64_XMM1_VEX,
	VMOVLPD_M64_XMM1_EVEX,
	VMOVLPD_XMM1_XMMV_M64_VEX,
	VMOVLPD_XMM1_XMMV_M64_EVEX,
	VMOVLPS_M64_XMM1_VEX,
	VMOVLPS_M64_XMM1_EVEX,
	VMOVLPS_XMM1_XMMV_M64_VEX,
	VMOVLPS_XMM1_XMMV_M64_EVEX,
	VMOVMSKPD_R32_XMM2_VEX,
	VMOVMSKPD_R32_YMM2_VEX,
	VMOVMSKPS_R32_XMM2_VEX,
	VMOVMSKPS_R32_YMM2_VEX,
	VMOVNTDQ_M128_XMM1_VEX,
	VMOVNTDQ_M128_XMM1_EVEX,
	VMOVNTDQ_M256_YMM1_VEX,
	VMOVNTDQ_M256_YMM1_EVEX,
	VMOVNTDQ_M512_ZMM1_EVEX,
	VMOVNTDQA_XMM1_M128_VEX,
	VMOVNTDQA_XMM1_M128_EVEX,
	VMOVNTDQA_YMM1_M256_VEX,
	VMOVNTDQA_YMM1_M256_EVEX,
	VMOVNTDQA_ZMM1_M512_EVEX,
	VMOVNTPD_M128_XMM1_VEX,
	VMOVNTPD_M128_XMM1_EVEX,
	VMOVNTPD_M256_YMM1_VEX,
	VMOVNTPD_M256_YMM1_EVEX,
	VMOVNTPD_M512_ZMM1_EVEX,
	VMOVNTPS_M128_XMM1_VEX,
	VMOVNTPS_M128_XMM1_EVEX,
	VMOVNTPS_M256_YMM1_VEX,
	VMOVNTPS_M256_YMM1_EVEX,
	VMOVNTPS_M512_ZMM1_EVEX,
	VMOVQ_XMM1_Rmr64_VEX,
	VMOVQ_XMM1_Rmr64_EVEX,
	VMOVQ_XMM1_XMM2_VEX,
	VMOVQ_XMM1_XMM2_EVEX,
	VMOVQ_XMM1_M64_VEX,
	VMOVQ_XMM1_M64_EVEX,
	VMOVQ_Rmr64_XMM1_VEX,
	VMOVQ_Rmr64_XMM1_EVEX,
	VMOVQ_XMM2_XMM1_VEX,
	VMOVQ_XMM2_XMM1_EVEX,
	VMOVQ_M64_XMM1_VEX,
	VMOVQ_M64_XMM1_EVEX,
	VMOVSD_XMM1_M64_VEX,
	VMOVSD_XMM1_M64_EVEX,
	VMOVSD_M64_XMM1_VEX,
	VMOVSD_M64_XMM1_EVEX,
	VMOVSD_XMM1_XMMV_XMM2_VEX,
	VMOVSD_XMM1_XMMV_XMM2_EVEX,
	VMOVSD_XMM2_XMMV_XMM1_VEX,
	VMOVSD_XMM2_XMMV_XMM1_EVEX,
	VMOVSHDUP_XMM1_XMM2_VEX,
	VMOVSHDUP_XMM1_XMM2_EVEX,
	VMOVSHDUP_XMM1_M128_VEX,
	VMOVSHDUP_XMM1_M128_EVEX,
	VMOVSHDUP_YMM1_YMM2_VEX,
	VMOVSHDUP_YMM1_YMM2_EVEX,
	VMOVSHDUP_YMM1_M256_VEX,
	VMOVSHDUP_YMM1_M256_EVEX,
	VMOVSHDUP_ZMM1_ZMM2_EVEX,
	VMOVSHDUP_ZMM1_M512_EVEX,
	VMOVSLDUP_XMM1_XMM2_VEX,
	VMOVSLDUP_XMM1_XMM2_EVEX,
	VMOVSLDUP_XMM1_M128_VEX,
	VMOVSLDUP_XMM1_M128_EVEX,
	VMOVSLDUP_YMM1_YMM2_VEX,
	VMOVSLDUP_YMM1_YMM2_EVEX,
	VMOVSLDUP_YMM1_M256_VEX,
	VMOVSLDUP_YMM1_M256_EVEX,
	VMOVSLDUP_ZMM1_ZMM2_EVEX,
	VMOVSLDUP_ZMM1_M512_EVEX,
	VMOVSS_XMM1_M32_VEX,
	VMOVSS_XMM1_M32_EVEX,
	VMOVSS_M32_XMM1_VEX,
	VMOVSS_M32_XMM1_EVEX,
	VMOVSS_XMM1_XMMV_XMM2_VEX,
	VMOVSS_XMM1_XMMV_XMM2_EVEX,
	VMOVSS_XMM2_XMMV_XMM1_VEX,
	VMOVSS_XMM2_XMMV_XMM1_EVEX,
	VMOVUPD_XMM1_XMM2_VEX,
	VMOVUPD_XMM1_XMM2_EVEX,
	VMOVUPD_XMM1_M128_VEX,
	VMOVUPD_XMM1_M128_EVEX,
	VMOVUPD_YMM1_YMM2_VEX,
	VMOVUPD_YMM1_YMM2_EVEX,
	VMOVUPD_YMM1_M256_VEX,
	VMOVUPD_YMM1_M256_EVEX,
	VMOVUPD_ZMM1_ZMM2_EVEX,
	VMOVUPD_ZMM1_M512_EVEX,
	VMOVUPD_XMM2_XMM1_VEX,
	VMOVUPD_XMM2_XMM1_EVEX,
	VMOVUPD_YMM2_YMM1_VEX,
	VMOVUPD_YMM2_YMM1_EVEX,
	VMOVUPD_ZMM2_ZMM1_EVEX,
	VMOVUPD_M128_XMM1_VEX,
	VMOVUPD_M128_XMM1_EVEX,
	VMOVUPD_M256_YMM1_VEX,
	VMOVUPD_M256_YMM1_EVEX,
	VMOVUPD_M512_ZMM1_EVEX,
	VMOVUPS_XMM1_XMM2_VEX,
	VMOVUPS_XMM1_XMM2_EVEX,
	VMOVUPS_XMM1_M128_VEX,
	VMOVUPS_XMM1_M128_EVEX,
	VMOVUPS_YMM1_YMM2_VEX,
	VMOVUPS_YMM1_YMM2_EVEX,
	VMOVUPS_YMM1_M256_VEX,
	VMOVUPS_YMM1_M256_EVEX,
	VMOVUPS_ZMM1_ZMM2_EVEX,
	VMOVUPS_ZMM1_M512_EVEX,
	VMOVUPS_XMM2_XMM1_VEX,
	VMOVUPS_XMM2_XMM1_EVEX,
	VMOVUPS_YMM2_YMM1_VEX,
	VMOVUPS_YMM2_YMM1_EVEX,
	VMOVUPS_ZMM2_ZMM1_EVEX,
	VMOVUPS_M128_XMM1_VEX,
	VMOVUPS_M128_XMM1_EVEX,
	VMOVUPS_M256_YMM1_VEX,
	VMOVUPS_M256_YMM1_EVEX,
	VMOVUPS_M512_ZMM1_EVEX,
	VMPSADBW_XMM1_XMMV_XMM2_Imm8_VEX,
	VMPSADBW_XMM1_XMMV_M128_Imm8_VEX,
	VMPSADBW_YMM1_YMMV_YMM2_Imm8_VEX,
	VMPSADBW_YMM1_YMMV_M256_Imm8_VEX,
	VMPTRLD_M64,
	VMPTRST_M64,
	VMRESUME,
	VMRUN_EAX,
	VMRUN_RAX,
	VMSAVE_EAX,
	VMSAVE_RAX,
	VMULPD_XMM1_XMMV_XMM2_VEX,
	VMULPD_XMM1_XMMV_XMM2_EVEX,
	VMULPD_XMM1_XMMV_M128_VEX,
	VMULPD_XMM1_XMMV_M128_EVEX,
	VMULPD_XMM1_XMMV_M64bcst128_EVEX,
	VMULPD_YMM1_YMMV_YMM2_VEX,
	VMULPD_YMM1_YMMV_YMM2_EVEX,
	VMULPD_YMM1_YMMV_M256_VEX,
	VMULPD_YMM1_YMMV_M256_EVEX,
	VMULPD_YMM1_YMMV_M64bcst256_EVEX,
	VMULPD_ZMM1_ZMMV_ZMM2_EVEX,
	VMULPD_ZMM1_ZMMV_M512_EVEX,
	VMULPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VMULPS_XMM1_XMMV_XMM2_VEX,
	VMULPS_XMM1_XMMV_XMM2_EVEX,
	VMULPS_XMM1_XMMV_M128_VEX,
	VMULPS_XMM1_XMMV_M128_EVEX,
	VMULPS_XMM1_XMMV_M32bcst128_EVEX,
	VMULPS_YMM1_YMMV_YMM2_VEX,
	VMULPS_YMM1_YMMV_YMM2_EVEX,
	VMULPS_YMM1_YMMV_M256_VEX,
	VMULPS_YMM1_YMMV_M256_EVEX,
	VMULPS_YMM1_YMMV_M32bcst256_EVEX,
	VMULPS_ZMM1_ZMMV_ZMM2_EVEX,
	VMULPS_ZMM1_ZMMV_M512_EVEX,
	VMULPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VMULSD_XMM1_XMMV_XMM2_VEX,
	VMULSD_XMM1_XMMV_XMM2_EVEX,
	VMULSD_XMM1_XMMV_M64_VEX,
	VMULSD_XMM1_XMMV_M64_EVEX,
	VMULSS_XMM1_XMMV_XMM2_VEX,
	VMULSS_XMM1_XMMV_XMM2_EVEX,
	VMULSS_XMM1_XMMV_M32_VEX,
	VMULSS_XMM1_XMMV_M32_EVEX,
	VMXOFF,
	VMXON_M64,
	VORPD_XMM1_XMMV_XMM2_VEX,
	VORPD_XMM1_XMMV_XMM2_EVEX,
	VORPD_XMM1_XMMV_M128_VEX,
	VORPD_XMM1_XMMV_M128_EVEX,
	VORPD_XMM1_XMMV_M64bcst128_EVEX,
	VORPD_YMM1_YMMV_YMM2_VEX,
	VORPD_YMM1_YMMV_YMM2_EVEX,
	VORPD_YMM1_YMMV_M256_VEX,
	VORPD_YMM1_YMMV_M256_EVEX,
	VORPD_YMM1_YMMV_M64bcst256_EVEX,
	VORPD_ZMM1_ZMMV_ZMM2_EVEX,
	VORPD_ZMM1_ZMMV_M512_EVEX,
	VORPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VORPS_XMM1_XMMV_XMM2_VEX,
	VORPS_XMM1_XMMV_XMM2_EVEX,
	VORPS_XMM1_XMMV_M128_VEX,
	VORPS_XMM1_XMMV_M128_EVEX,
	VORPS_XMM1_XMMV_M32bcst128_EVEX,
	VORPS_YMM1_YMMV_YMM2_VEX,
	VORPS_YMM1_YMMV_YMM2_EVEX,
	VORPS_YMM1_YMMV_M256_VEX,
	VORPS_YMM1_YMMV_M256_EVEX,
	VORPS_YMM1_YMMV_M32bcst256_EVEX,
	VORPS_ZMM1_ZMMV_ZMM2_EVEX,
	VORPS_ZMM1_ZMMV_M512_EVEX,
	VORPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VPABSB_XMM1_XMM2_VEX,
	VPABSB_XMM1_XMM2_EVEX,
	VPABSB_XMM1_M128_VEX,
	VPABSB_XMM1_M128_EVEX,
	VPABSB_YMM1_YMM2_VEX,
	VPABSB_YMM1_YMM2_EVEX,
	VPABSB_YMM1_M256_VEX,
	VPABSB_YMM1_M256_EVEX,
	VPABSB_ZMM1_ZMM2_EVEX,
	VPABSB_ZMM1_M512_EVEX,
	VPABSD_XMM1_XMM2_VEX,
	VPABSD_XMM1_XMM2_EVEX,
	VPABSD_XMM1_M128_VEX,
	VPABSD_XMM1_M128_EVEX,
	VPABSD_XMM1_M32bcst128_EVEX,
	VPABSD_YMM1_YMM2_VEX,
	VPABSD_YMM1_YMM2_EVEX,
	VPABSD_YMM1_M256_VEX,
	VPABSD_YMM1_M256_EVEX,
	VPABSD_YMM1_M32bcst256_EVEX,
	VPABSD_ZMM1_ZMM2_EVEX,
	VPABSD_ZMM1_M512_EVEX,
	VPABSD_ZMM1_M32bcst512_EVEX,
	VPABSQ_XMM1_XMM2_EVEX,
	VPABSQ_XMM1_M128_EVEX,
	VPABSQ_XMM1_M64bcst128_EVEX,
	VPABSQ_YMM1_YMM2_EVEX,
	VPABSQ_YMM1_M256_EVEX,
	VPABSQ_YMM1_M64bcst256_EVEX,
	VPABSQ_ZMM1_ZMM2_EVEX,
	VPABSQ_ZMM1_M512_EVEX,
	VPABSQ_ZMM1_M64bcst512_EVEX,
	VPABSW_XMM1_XMM2_VEX,
	VPABSW_XMM1_XMM2_EVEX,
	VPABSW_XMM1_M128_VEX,
	VPABSW_XMM1_M128_EVEX,
	VPABSW_YMM1_YMM2_VEX,
	VPABSW_YMM1_YMM2_EVEX,
	VPABSW_YMM1_M256_VEX,
	VPABSW_YMM1_M256_EVEX,
	VPABSW_ZMM1_ZMM2_EVEX,
	VPABSW_ZMM1_M512_EVEX,
	VPACKSSDW_XMM1_XMMV_XMM2_VEX,
	VPACKSSDW_XMM1_XMMV_XMM2_EVEX,
	VPACKSSDW_XMM1_XMMV_M128_VEX,
	VPACKSSDW_XMM1_XMMV_M128_EVEX,
	VPACKSSDW_XMM1_XMMV_M32bcst128_EVEX,
	VPACKSSDW_YMM1_YMMV_YMM2_VEX,
	VPACKSSDW_YMM1_YMMV_YMM2_EVEX,
	VPACKSSDW_YMM1_YMMV_M256_VEX,
	VPACKSSDW_YMM1_YMMV_M256_EVEX,
	VPACKSSDW_YMM1_YMMV_M32bcst256_EVEX,
	VPACKSSDW_ZMM1_ZMMV_ZMM2_EVEX,
	VPACKSSDW_ZMM1_ZMMV_M512_EVEX,
	VPACKSSDW_ZMM1_ZMMV_M32bcst512_EVEX,
	VPACKSSWB_XMM1_XMMV_XMM2_VEX,
	VPACKSSWB_XMM1_XMMV_XMM2_EVEX,
	VPACKSSWB_XMM1_XMMV_M128_VEX,
	VPACKSSWB_XMM1_XMMV_M128_EVEX,
	VPACKSSWB_YMM1_YMMV_YMM2_VEX,
	VPACKSSWB_YMM1_YMMV_YMM2_EVEX,
	VPACKSSWB_YMM1_YMMV_M256_VEX,
	VPACKSSWB_YMM1_YMMV_M256_EVEX,
	VPACKSSWB_ZMM1_ZMMV_ZMM2_EVEX,
	VPACKSSWB_ZMM1_ZMMV_M512_EVEX,
	VPACKUSDW_XMM1_XMMV_XMM2_VEX,
	VPACKUSDW_XMM1_XMMV_XMM2_EVEX,
	VPACKUSDW_XMM1_XMMV_M128_VEX,
	VPACKUSDW_XMM1_XMMV_M128_EVEX,
	VPACKUSDW_XMM1_XMMV_M32bcst128_EVEX,
	VPACKUSDW_YMM1_YMMV_YMM2_VEX,
	VPACKUSDW_YMM1_YMMV_YMM2_EVEX,
	VPACKUSDW_YMM1_YMMV_M256_VEX,
	VPACKUSDW_YMM1_YMMV_M256_EVEX,
	VPACKUSDW_YMM1_YMMV_M32bcst256_EVEX,
	VPACKUSDW_ZMM1_ZMMV_ZMM2_EVEX,
	VPACKUSDW_ZMM1_ZMMV_M512_EVEX,
	VPACKUSDW_ZMM1_ZMMV_M32bcst512_EVEX,
	VPACKUSWB_XMM1_XMMV_XMM2_VEX,
	VPACKUSWB_XMM1_XMMV_XMM2_EVEX,
	VPACKUSWB_XMM1_XMMV_M128_VEX,
	VPACKUSWB_XMM1_XMMV_M128_EVEX,
	VPACKUSWB_YMM1_YMMV_YMM2_VEX,
	VPACKUSWB_YMM1_YMMV_YMM2_EVEX,
	VPACKUSWB_YMM1_YMMV_M256_VEX,
	VPACKUSWB_YMM1_YMMV_M256_EVEX,
	VPACKUSWB_ZMM1_ZMMV_ZMM2_EVEX,
	VPACKUSWB_ZMM1_ZMMV_M512_EVEX,
	VPADDB_XMM1_XMMV_XMM2_VEX,
	VPADDB_XMM1_XMMV_XMM2_EVEX,
	VPADDB_XMM1_XMMV_M128_VEX,
	VPADDB_XMM1_XMMV_M128_EVEX,
	VPADDB_YMM1_YMMV_YMM2_VEX,
	VPADDB_YMM1_YMMV_YMM2_EVEX,
	VPADDB_YMM1_YMMV_M256_VEX,
	VPADDB_YMM1_YMMV_M256_EVEX,
	VPADDB_ZMM1_ZMMV_ZMM2_EVEX,
	VPADDB_ZMM1_ZMMV_M512_EVEX,
	VPADDD_XMM1_XMMV_XMM2_VEX,
	VPADDD_XMM1_XMMV_XMM2_EVEX,
	VPADDD_XMM1_XMMV_M128_VEX,
	VPADDD_XMM1_XMMV_M128_EVEX,
	VPADDD_XMM1_XMMV_M32bcst128_EVEX,
	VPADDD_YMM1_YMMV_YMM2_VEX,
	VPADDD_YMM1_YMMV_YMM2_EVEX,
	VPADDD_YMM1_YMMV_M256_VEX,
	VPADDD_YMM1_YMMV_M256_EVEX,
	VPADDD_YMM1_YMMV_M32bcst256_EVEX,
	VPADDD_ZMM1_ZMMV_ZMM2_EVEX,
	VPADDD_ZMM1_ZMMV_M512_EVEX,
	VPADDD_ZMM1_ZMMV_M32bcst512_EVEX,
	VPADDQ_XMM1_XMMV_XMM2_VEX,
	VPADDQ_XMM1_XMMV_XMM2_EVEX,
	VPADDQ_XMM1_XMMV_M128_VEX,
	VPADDQ_XMM1_XMMV_M128_EVEX,
	VPADDQ_XMM1_XMMV_M64bcst128_EVEX,
	VPADDQ_YMM1_YMMV_YMM2_VEX,
	VPADDQ_YMM1_YMMV_YMM2_EVEX,
	VPADDQ_YMM1_YMMV_M256_VEX,
	VPADDQ_YMM1_YMMV_M256_EVEX,
	VPADDQ_YMM1_YMMV_M64bcst256_EVEX,
	VPADDQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPADDQ_ZMM1_ZMMV_M512_EVEX,
	VPADDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPADDSB_XMM1_XMMV_XMM2_VEX,
	VPADDSB_XMM1_XMMV_XMM2_EVEX,
	VPADDSB_XMM1_XMMV_M128_VEX,
	VPADDSB_XMM1_XMMV_M128_EVEX,
	VPADDSB_YMM1_YMMV_YMM2_VEX,
	VPADDSB_YMM1_YMMV_YMM2_EVEX,
	VPADDSB_YMM1_YMMV_M256_VEX,
	VPADDSB_YMM1_YMMV_M256_EVEX,
	VPADDSB_ZMM1_ZMMV_ZMM2_EVEX,
	VPADDSB_ZMM1_ZMMV_M512_EVEX,
	VPADDSW_XMM1_XMMV_XMM2_VEX,
	VPADDSW_XMM1_XMMV_XMM2_EVEX,
	VPADDSW_XMM1_XMMV_M128_VEX,
	VPADDSW_XMM1_XMMV_M128_EVEX,
	VPADDSW_YMM1_YMMV_YMM2_VEX,
	VPADDSW_YMM1_YMMV_YMM2_EVEX,
	VPADDSW_YMM1_YMMV_M256_VEX,
	VPADDSW_YMM1_YMMV_M256_EVEX,
	VPADDSW_ZMM1_ZMMV_ZMM2_EVEX,
	VPADDSW_ZMM1_ZMMV_M512_EVEX,
	VPADDUSB_XMM1_XMMV_XMM2_VEX,
	VPADDUSB_XMM1_XMMV_XMM2_EVEX,
	VPADDUSB_XMM1_XMMV_M128_VEX,
	VPADDUSB_XMM1_XMMV_M128_EVEX,
	VPADDUSB_YMM1_YMMV_YMM2_VEX,
	VPADDUSB_YMM1_YMMV_YMM2_EVEX,
	VPADDUSB_YMM1_YMMV_M256_VEX,
	VPADDUSB_YMM1_YMMV_M256_EVEX,
	VPADDUSB_ZMM1_ZMMV_ZMM2_EVEX,
	VPADDUSB_ZMM1_ZMMV_M512_EVEX,
	VPADDUSW_XMM1_XMMV_XMM2_VEX,
	VPADDUSW_XMM1_XMMV_XMM2_EVEX,
	VPADDUSW_XMM1_XMMV_M128_VEX,
	VPADDUSW_XMM1_XMMV_M128_EVEX,
	VPADDUSW_YMM1_YMMV_YMM2_VEX,
	VPADDUSW_YMM1_YMMV_YMM2_EVEX,
	VPADDUSW_YMM1_YMMV_M256_VEX,
	VPADDUSW_YMM1_YMMV_M256_EVEX,
	VPADDUSW_ZMM1_ZMMV_ZMM2_EVEX,
	VPADDUSW_ZMM1_ZMMV_M512_EVEX,
	VPADDW_XMM1_XMMV_XMM2_VEX,
	VPADDW_XMM1_XMMV_XMM2_EVEX,
	VPADDW_XMM1_XMMV_M128_VEX,
	VPADDW_XMM1_XMMV_M128_EVEX,
	VPADDW_YMM1_YMMV_YMM2_VEX,
	VPADDW_YMM1_YMMV_YMM2_EVEX,
	VPADDW_YMM1_YMMV_M256_VEX,
	VPADDW_YMM1_YMMV_M256_EVEX,
	VPADDW_ZMM1_ZMMV_ZMM2_EVEX,
	VPADDW_ZMM1_ZMMV_M512_EVEX,
	VPALIGNR_XMM1_XMMV_XMM2_Imm8_VEX,
	VPALIGNR_XMM1_XMMV_XMM2_Imm8_EVEX,
	VPALIGNR_XMM1_XMMV_M128_Imm8_VEX,
	VPALIGNR_XMM1_XMMV_M128_Imm8_EVEX,
	VPALIGNR_YMM1_YMMV_YMM2_Imm8_VEX,
	VPALIGNR_YMM1_YMMV_YMM2_Imm8_EVEX,
	VPALIGNR_YMM1_YMMV_M256_Imm8_VEX,
	VPALIGNR_YMM1_YMMV_M256_Imm8_EVEX,
	VPALIGNR_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	VPALIGNR_ZMM1_ZMMV_M512_Imm8_EVEX,
	VPAND_XMM1_XMMV_XMM2_VEX,
	VPAND_XMM1_XMMV_M128_VEX,
	VPAND_YMM1_YMMV_YMM2_VEX,
	VPAND_YMM1_YMMV_M256_VEX,
	VPANDD_XMM1_XMMV_XMM2_EVEX,
	VPANDD_XMM1_XMMV_M128_EVEX,
	VPANDD_XMM1_XMMV_M32bcst128_EVEX,
	VPANDD_YMM1_YMMV_YMM2_EVEX,
	VPANDD_YMM1_YMMV_M256_EVEX,
	VPANDD_YMM1_YMMV_M32bcst256_EVEX,
	VPANDD_ZMM1_ZMMV_ZMM2_EVEX,
	VPANDD_ZMM1_ZMMV_M512_EVEX,
	VPANDD_ZMM1_ZMMV_M32bcst512_EVEX,
	VPANDN_XMM1_XMMV_XMM2_VEX,
	VPANDN_XMM1_XMMV_M128_VEX,
	VPANDN_YMM1_YMMV_YMM2_VEX,
	VPANDN_YMM1_YMMV_M256_VEX,
	VPANDND_XMM1_XMMV_XMM2_EVEX,
	VPANDND_XMM1_XMMV_M128_EVEX,
	VPANDND_XMM1_XMMV_M32bcst128_EVEX,
	VPANDND_YMM1_YMMV_YMM2_EVEX,
	VPANDND_YMM1_YMMV_M256_EVEX,
	VPANDND_YMM1_YMMV_M32bcst256_EVEX,
	VPANDND_ZMM1_ZMMV_ZMM2_EVEX,
	VPANDND_ZMM1_ZMMV_M512_EVEX,
	VPANDND_ZMM1_ZMMV_M32bcst512_EVEX,
	VPANDNQ_XMM1_XMMV_XMM2_EVEX,
	VPANDNQ_XMM1_XMMV_M128_EVEX,
	VPANDNQ_XMM1_XMMV_M64bcst128_EVEX,
	VPANDNQ_YMM1_YMMV_YMM2_EVEX,
	VPANDNQ_YMM1_YMMV_M256_EVEX,
	VPANDNQ_YMM1_YMMV_M64bcst256_EVEX,
	VPANDNQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPANDNQ_ZMM1_ZMMV_M512_EVEX,
	VPANDNQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPANDQ_XMM1_XMMV_XMM2_EVEX,
	VPANDQ_XMM1_XMMV_M128_EVEX,
	VPANDQ_XMM1_XMMV_M64bcst128_EVEX,
	VPANDQ_YMM1_YMMV_YMM2_EVEX,
	VPANDQ_YMM1_YMMV_M256_EVEX,
	VPANDQ_YMM1_YMMV_M64bcst256_EVEX,
	VPANDQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPANDQ_ZMM1_ZMMV_M512_EVEX,
	VPANDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPAVGB_XMM1_XMMV_XMM2_VEX,
	VPAVGB_XMM1_XMMV_XMM2_EVEX,
	VPAVGB_XMM1_XMMV_M128_VEX,
	VPAVGB_XMM1_XMMV_M128_EVEX,
	VPAVGB_YMM1_YMMV_YMM2_VEX,
	VPAVGB_YMM1_YMMV_YMM2_EVEX,
	VPAVGB_YMM1_YMMV_M256_VEX,
	VPAVGB_YMM1_YMMV_M256_EVEX,
	VPAVGB_ZMM1_ZMMV_ZMM2_EVEX,
	VPAVGB_ZMM1_ZMMV_M512_EVEX,
	VPAVGW_XMM1_XMMV_XMM2_VEX,
	VPAVGW_XMM1_XMMV_XMM2_EVEX,
	VPAVGW_XMM1_XMMV_M128_VEX,
	VPAVGW_XMM1_XMMV_M128_EVEX,
	VPAVGW_YMM1_YMMV_YMM2_VEX,
	VPAVGW_YMM1_YMMV_YMM2_EVEX,
	VPAVGW_YMM1_YMMV_M256_VEX,
	VPAVGW_YMM1_YMMV_M256_EVEX,
	VPAVGW_ZMM1_ZMMV_ZMM2_EVEX,
	VPAVGW_ZMM1_ZMMV_M512_EVEX,
	VPBLENDVB_XMM1_XMMV_XMM2_XMMIH_VEX,
	VPBLENDVB_XMM1_XMMV_M128_XMMIH_VEX,
	VPBLENDVB_YMM1_YMMV_YMM2_YMMIH_VEX,
	VPBLENDVB_YMM1_YMMV_M256_YMMIH_VEX,
	VPBLENDW_XMM1_XMMV_XMM2_Imm8_VEX,
	VPBLENDW_XMM1_XMMV_M128_Imm8_VEX,
	VPBLENDW_YMM1_YMMV_YMM2_Imm8_VEX,
	VPBLENDW_YMM1_YMMV_M256_Imm8_VEX,
	VPCLMULQDQ_XMM1_XMMV_XMM2_Imm8_VEX,
	VPCLMULQDQ_XMM1_XMMV_XMM2_Imm8_EVEX,
	VPCLMULQDQ_XMM1_XMMV_M128_Imm8_VEX,
	VPCLMULQDQ_XMM1_XMMV_M128_Imm8_EVEX,
	VPCLMULQDQ_YMM1_YMMV_YMM2_Imm8_VEX,
	VPCLMULQDQ_YMM1_YMMV_YMM2_Imm8_EVEX,
	VPCLMULQDQ_YMM1_YMMV_M256_Imm8_VEX,
	VPCLMULQDQ_YMM1_YMMV_M256_Imm8_EVEX,
	VPCLMULQDQ_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	VPCLMULQDQ_ZMM1_ZMMV_M512_Imm8_EVEX,
	VPCMPEQB_K1_XMMV_XMM2_EVEX,
	VPCMPEQB_K1_XMMV_M128_EVEX,
	VPCMPEQB_K1_YMMV_YMM2_EVEX,
	VPCMPEQB_K1_YMMV_M256_EVEX,
	VPCMPEQB_K1_ZMMV_ZMM2_EVEX,
	VPCMPEQB_K1_ZMMV_M512_EVEX,
	VPCMPEQB_XMM1_XMMV_XMM2_VEX,
	VPCMPEQB_XMM1_XMMV_M128_VEX,
	VPCMPEQB_YMM1_YMMV_YMM2_VEX,
	VPCMPEQB_YMM1_YMMV_M256_VEX,
	VPCMPEQD_K1_XMMV_XMM2_EVEX,
	VPCMPEQD_K1_XMMV_M128_EVEX,
	VPCMPEQD_K1_XMMV_M32bcst128_EVEX,
	VPCMPEQD_K1_YMMV_YMM2_EVEX,
	VPCMPEQD_K1_YMMV_M256_EVEX,
	VPCMPEQD_K1_YMMV_M32bcst256_EVEX,
	VPCMPEQD_K1_ZMMV_ZMM2_EVEX,
	VPCMPEQD_K1_ZMMV_M512_EVEX,
	VPCMPEQD_K1_ZMMV_M32bcst512_EVEX,
	VPCMPEQD_XMM1_XMMV_XMM2_VEX,
	VPCMPEQD_XMM1_XMMV_M128_VEX,
	VPCMPEQD_YMM1_YMMV_YMM2_VEX,
	VPCMPEQD_YMM1_YMMV_M256_VEX,
	VPCMPEQQ_K1_XMMV_XMM2_EVEX,
	VPCMPEQQ_K1_XMMV_M128_EVEX,
	VPCMPEQQ_K1_XMMV_M64bcst128_EVEX,
	VPCMPEQQ_K1_YMMV_YMM2_EVEX,
	VPCMPEQQ_K1_YMMV_M256_EVEX,
	VPCMPEQQ_K1_YMMV_M64bcst256_EVEX,
	VPCMPEQQ_K1_ZMMV_ZMM2_EVEX,
	VPCMPEQQ_K1_ZMMV_M512_EVEX,
	VPCMPEQQ_K1_ZMMV_M64bcst512_EVEX,
	VPCMPEQQ_XMM1_XMMV_XMM2_VEX,
	VPCMPEQQ_XMM1_XMMV_M128_VEX,
	VPCMPEQQ_YMM1_YMMV_YMM2_VEX,
	VPCMPEQQ_YMM1_YMMV_M256_VEX,
	VPCMPEQW_K1_XMMV_XMM2_EVEX,
	VPCMPEQW_K1_XMMV_M128_EVEX,
	VPCMPEQW_K1_YMMV_YMM2_EVEX,
	VPCMPEQW_K1_YMMV_M256_EVEX,
	VPCMPEQW_K1_ZMMV_ZMM2_EVEX,
	VPCMPEQW_K1_ZMMV_M512_EVEX,
	VPCMPEQW_XMM1_XMMV_XMM2_VEX,
	VPCMPEQW_XMM1_XMMV_M128_VEX,
	VPCMPEQW_YMM1_YMMV_YMM2_VEX,
	VPCMPEQW_YMM1_YMMV_M256_VEX,
	VPCMPESTRI_XMM1_XMM2_Imm8_VEX,
	VPCMPESTRI_XMM1_M128_Imm8_VEX,
	VPCMPESTRM_XMM1_XMM2_Imm8_VEX,
	VPCMPESTRM_XMM1_M128_Imm8_VEX,
	VPCMPGTB_K1_XMMV_XMM2_EVEX,
	VPCMPGTB_K1_XMMV_M128_EVEX,
	VPCMPGTB_K1_YMMV_YMM2_EVEX,
	VPCMPGTB_K1_YMMV_M256_EVEX,
	VPCMPGTB_K1_ZMMV_ZMM2_EVEX,
	VPCMPGTB_K1_ZMMV_M512_EVEX,
	VPCMPGTB_XMM1_XMMV_XMM2_VEX,
	VPCMPGTB_XMM1_XMMV_M128_VEX,
	VPCMPGTB_YMM1_YMMV_YMM2_VEX,
	VPCMPGTB_YMM1_YMMV_M256_VEX,
	VPCMPGTD_K1_XMMV_XMM2_EVEX,
	VPCMPGTD_K1_XMMV_M128_EVEX,
	VPCMPGTD_K1_XMMV_M32bcst128_EVEX,
	VPCMPGTD_K1_YMMV_YMM2_EVEX,
	VPCMPGTD_K1_YMMV_M256_EVEX,
	VPCMPGTD_K1_YMMV_M32bcst256_EVEX,
	VPCMPGTD_K1_ZMMV_ZMM2_EVEX,
	VPCMPGTD_K1_ZMMV_M512_EVEX,
	VPCMPGTD_K1_ZMMV_M32bcst512_EVEX,
	VPCMPGTD_XMM1_XMMV_XMM2_VEX,
	VPCMPGTD_XMM1_XMMV_M128_VEX,
	VPCMPGTD_YMM1_YMMV_YMM2_VEX,
	VPCMPGTD_YMM1_YMMV_M256_VEX,
	VPCMPGTQ_K1_XMMV_XMM2_EVEX,
	VPCMPGTQ_K1_XMMV_M128_EVEX,
	VPCMPGTQ_K1_XMMV_M64bcst128_EVEX,
	VPCMPGTQ_K1_YMMV_YMM2_EVEX,
	VPCMPGTQ_K1_YMMV_M256_EVEX,
	VPCMPGTQ_K1_YMMV_M64bcst256_EVEX,
	VPCMPGTQ_K1_ZMMV_ZMM2_EVEX,
	VPCMPGTQ_K1_ZMMV_M512_EVEX,
	VPCMPGTQ_K1_ZMMV_M64bcst512_EVEX,
	VPCMPGTQ_XMM1_XMMV_XMM2_VEX,
	VPCMPGTQ_XMM1_XMMV_M128_VEX,
	VPCMPGTQ_YMM1_YMMV_YMM2_VEX,
	VPCMPGTQ_YMM1_YMMV_M256_VEX,
	VPCMPGTW_K1_XMMV_XMM2_EVEX,
	VPCMPGTW_K1_XMMV_M128_EVEX,
	VPCMPGTW_K1_YMMV_YMM2_EVEX,
	VPCMPGTW_K1_YMMV_M256_EVEX,
	VPCMPGTW_K1_ZMMV_ZMM2_EVEX,
	VPCMPGTW_K1_ZMMV_M512_EVEX,
	VPCMPGTW_XMM1_XMMV_XMM2_VEX,
	VPCMPGTW_XMM1_XMMV_M128_VEX,
	VPCMPGTW_YMM1_YMMV_YMM2_VEX,
	VPCMPGTW_YMM1_YMMV_M256_VEX,
	VPCMPISTRI_XMM1_XMM2_Imm8_VEX,
	VPCMPISTRI_XMM1_M128_Imm8_VEX,
	VPCMPISTRM_XMM1_XMM2_Imm8_VEX,
	VPCMPISTRM_XMM1_M128_Imm8_VEX,
	VPEXTRB_Rmr32_XMM1_Imm8_VEX,
	VPEXTRB_Rmr32_XMM1_Imm8_EVEX,
	VPEXTRB_M8_XMM1_Imm8_VEX,
	VPEXTRB_M8_XMM1_Imm8_EVEX,
	VPEXTRD_Rmr32_XMM1_Imm8_VEX,
	VPEXTRD_Rmr32_XMM1_Imm8_EVEX,
	VPEXTRD_M32_XMM1_Imm8_VEX,
	VPEXTRD_M32_XMM1_Imm8_EVEX,
	VPEXTRQ_Rmr64_XMM1_Imm8_VEX,
	VPEXTRQ_Rmr64_XMM1_Imm8_EVEX,
	VPEXTRQ_M64_XMM1_Imm8_VEX,
	VPEXTRQ_M64_XMM1_Imm8_EVEX,
	VPEXTRW_R32_XMM2_Imm8_VEX,
	VPEXTRW_R32_XMM2_Imm8_EVEX,
	VPEXTRW_Rmr32_XMM1_Imm8_VEX,
	VPEXTRW_Rmr32_XMM1_Imm8_EVEX,
	VPEXTRW_M16_XMM1_Imm8_VEX,
	VPEXTRW_M16_XMM1_Imm8_EVEX,
	VPHADDD_XMM1_XMMV_XMM2_VEX,
	VPHADDD_XMM1_XMMV_M128_VEX,
	VPHADDD_YMM1_YMMV_YMM2_VEX,
	VPHADDD_YMM1_YMMV_M256_VEX,
	VPHADDSW_XMM1_XMMV_XMM2_VEX,
	VPHADDSW_XMM1_XMMV_M128_VEX,
	VPHADDSW_YMM1_YMMV_YMM2_VEX,
	VPHADDSW_YMM1_YMMV_M256_VEX,
	VPHADDW_XMM1_XMMV_XMM2_VEX,
	VPHADDW_XMM1_XMMV_M128_VEX,
	VPHADDW_YMM1_YMMV_YMM2_VEX,
	VPHADDW_YMM1_YMMV_M256_VEX,
	VPHMINPOSUW_XMM1_XMM2_VEX,
	VPHMINPOSUW_XMM1_M128_VEX,
	VPHSUBD_XMM1_XMMV_XMM2_VEX,
	VPHSUBD_XMM1_XMMV_M128_VEX,
	VPHSUBD_YMM1_YMMV_YMM2_VEX,
	VPHSUBD_YMM1_YMMV_M256_VEX,
	VPHSUBSW_XMM1_XMMV_XMM2_VEX,
	VPHSUBSW_XMM1_XMMV_M128_VEX,
	VPHSUBSW_YMM1_YMMV_YMM2_VEX,
	VPHSUBSW_YMM1_YMMV_M256_VEX,
	VPHSUBW_XMM1_XMMV_XMM2_VEX,
	VPHSUBW_XMM1_XMMV_M128_VEX,
	VPHSUBW_YMM1_YMMV_YMM2_VEX,
	VPHSUBW_YMM1_YMMV_M256_VEX,
	VPINSRB_XMM1_XMMV_Rmr32_Imm8_VEX,
	VPINSRB_XMM1_XMMV_Rmr32_Imm8_EVEX,
	VPINSRB_XMM1_XMMV_M8_Imm8_VEX,
	VPINSRB_XMM1_XMMV_M8_Imm8_EVEX,
	VPINSRD_XMM1_XMMV_Rmr32_Imm8_VEX,
	VPINSRD_XMM1_XMMV_Rmr32_Imm8_EVEX,
	VPINSRD_XMM1_XMMV_M32_Imm8_VEX,
	VPINSRD_XMM1_XMMV_M32_Imm8_EVEX,
	VPINSRQ_XMM1_XMMV_Rmr64_Imm8_VEX,
	VPINSRQ_XMM1_XMMV_Rmr64_Imm8_EVEX,
	VPINSRQ_XMM1_XMMV_M64_Imm8_VEX,
	VPINSRQ_XMM1_XMMV_M64_Imm8_EVEX,
	VPINSRW_XMM1_XMMV_Rmr32_Imm8_VEX,
	VPINSRW_XMM1_XMMV_Rmr32_Imm8_EVEX,
	VPINSRW_XMM1_XMMV_M16_Imm8_VEX,
	VPINSRW_XMM1_XMMV_M16_Imm8_EVEX,
	VPMADDUBSW_XMM1_XMMV_XMM2_VEX,
	VPMADDUBSW_XMM1_XMMV_XMM2_EVEX,
	VPMADDUBSW_XMM1_XMMV_M128_VEX,
	VPMADDUBSW_XMM1_XMMV_M128_EVEX,
	VPMADDUBSW_YMM1_YMMV_YMM2_VEX,
	VPMADDUBSW_YMM1_YMMV_YMM2_EVEX,
	VPMADDUBSW_YMM1_YMMV_M256_VEX,
	VPMADDUBSW_YMM1_YMMV_M256_EVEX,
	VPMADDUBSW_ZMM1_ZMMV_ZMM2_EVEX,
	VPMADDUBSW_ZMM1_ZMMV_M512_EVEX,
	VPMADDWD_XMM1_XMMV_XMM2_VEX,
	VPMADDWD_XMM1_XMMV_XMM2_EVEX,
	VPMADDWD_XMM1_XMMV_M128_VEX,
	VPMADDWD_XMM1_XMMV_M128_EVEX,
	VPMADDWD_YMM1_YMMV_YMM2_VEX,
	VPMADDWD_YMM1_YMMV_YMM2_EVEX,
	VPMADDWD_YMM1_YMMV_M256_VEX,
	VPMADDWD_YMM1_YMMV_M256_EVEX,
	VPMADDWD_ZMM1_ZMMV_ZMM2_EVEX,
	VPMADDWD_ZMM1_ZMMV_M512_EVEX,
	VPMAXSB_XMM1_XMMV_XMM2_VEX,
	VPMAXSB_XMM1_XMMV_XMM2_EVEX,
	VPMAXSB_XMM1_XMMV_M128_VEX,
	VPMAXSB_XMM1_XMMV_M128_EVEX,
	VPMAXSB_YMM1_YMMV_YMM2_VEX,
	VPMAXSB_YMM1_YMMV_YMM2_EVEX,
	VPMAXSB_YMM1_YMMV_M256_VEX,
	VPMAXSB_YMM1_YMMV_M256_EVEX,
	VPMAXSB_ZMM1_ZMMV_ZMM2_EVEX,
	VPMAXSB_ZMM1_ZMMV_M512_EVEX,
	VPMAXSD_XMM1_XMMV_XMM2_VEX,
	VPMAXSD_XMM1_XMMV_XMM2_EVEX,
	VPMAXSD_XMM1_XMMV_M128_VEX,
	VPMAXSD_XMM1_XMMV_M128_EVEX,
	VPMAXSD_XMM1_XMMV_M32bcst128_EVEX,
	VPMAXSD_YMM1_YMMV_YMM2_VEX,
	VPMAXSD_YMM1_YMMV_YMM2_EVEX,
	VPMAXSD_YMM1_YMMV_M256_VEX,
	VPMAXSD_YMM1_YMMV_M256_EVEX,
	VPMAXSD_YMM1_YMMV_M32bcst256_EVEX,
	VPMAXSD_ZMM1_ZMMV_ZMM2_EVEX,
	VPMAXSD_ZMM1_ZMMV_M512_EVEX,
	VPMAXSD_ZMM1_ZMMV_M32bcst512_EVEX,
	VPMAXSQ_XMM1_XMMV_XMM2_EVEX,
	VPMAXSQ_XMM1_XMMV_M128_EVEX,
	VPMAXSQ_XMM1_XMMV_M64bcst128_EVEX,
	VPMAXSQ_YMM1_YMMV_YMM2_EVEX,
	VPMAXSQ_YMM1_YMMV_M256_EVEX,
	VPMAXSQ_YMM1_YMMV_M64bcst256_EVEX,
	VPMAXSQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPMAXSQ_ZMM1_ZMMV_M512_EVEX,
	VPMAXSQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPMAXSW_XMM1_XMMV_XMM2_VEX,
	VPMAXSW_XMM1_XMMV_XMM2_EVEX,
	VPMAXSW_XMM1_XMMV_M128_VEX,
	VPMAXSW_XMM1_XMMV_M128_EVEX,
	VPMAXSW_YMM1_YMMV_YMM2_VEX,
	VPMAXSW_YMM1_YMMV_YMM2_EVEX,
	VPMAXSW_YMM1_YMMV_M256_VEX,
	VPMAXSW_YMM1_YMMV_M256_EVEX,
	VPMAXSW_ZMM1_ZMMV_ZMM2_EVEX,
	VPMAXSW_ZMM1_ZMMV_M512_EVEX,
	VPMAXUB_XMM1_XMMV_XMM2_VEX,
	VPMAXUB_XMM1_XMMV_XMM2_EVEX,
	VPMAXUB_XMM1_XMMV_M128_VEX,
	VPMAXUB_XMM1_XMMV_M128_EVEX,
	VPMAXUB_YMM1_YMMV_YMM2_VEX,
	VPMAXUB_YMM1_YMMV_YMM2_EVEX,
	VPMAXUB_YMM1_YMMV_M256_VEX,
	VPMAXUB_YMM1_YMMV_M256_EVEX,
	VPMAXUB_ZMM1_ZMMV_ZMM2_EVEX,
	VPMAXUB_ZMM1_ZMMV_M512_EVEX,
	VPMAXUD_XMM1_XMMV_XMM2_VEX,
	VPMAXUD_XMM1_XMMV_XMM2_EVEX,
	VPMAXUD_XMM1_XMMV_M128_VEX,
	VPMAXUD_XMM1_XMMV_M128_EVEX,
	VPMAXUD_XMM1_XMMV_M32bcst128_EVEX,
	VPMAXUD_YMM1_YMMV_YMM2_VEX,
	VPMAXUD_YMM1_YMMV_YMM2_EVEX,
	VPMAXUD_YMM1_YMMV_M256_VEX,
	VPMAXUD_YMM1_YMMV_M256_EVEX,
	VPMAXUD_YMM1_YMMV_M32bcst256_EVEX,
	VPMAXUD_ZMM1_ZMMV_ZMM2_EVEX,
	VPMAXUD_ZMM1_ZMMV_M512_EVEX,
	VPMAXUD_ZMM1_ZMMV_M32bcst512_EVEX,
	VPMAXUQ_XMM1_XMMV_XMM2_EVEX,
	VPMAXUQ_XMM1_XMMV_M128_EVEX,
	VPMAXUQ_XMM1_XMMV_M64bcst128_EVEX,
	VPMAXUQ_YMM1_YMMV_YMM2_EVEX,
	VPMAXUQ_YMM1_YMMV_M256_EVEX,
	VPMAXUQ_YMM1_YMMV_M64bcst256_EVEX,
	VPMAXUQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPMAXUQ_ZMM1_ZMMV_M512_EVEX,
	VPMAXUQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPMAXUW_XMM1_XMMV_XMM2_VEX,
	VPMAXUW_XMM1_XMMV_XMM2_EVEX,
	VPMAXUW_XMM1_XMMV_M128_VEX,
	VPMAXUW_XMM1_XMMV_M128_EVEX,
	VPMAXUW_YMM1_YMMV_YMM2_VEX,
	VPMAXUW_YMM1_YMMV_YMM2_EVEX,
	VPMAXUW_YMM1_YMMV_M256_VEX,
	VPMAXUW_YMM1_YMMV_M256_EVEX,
	VPMAXUW_ZMM1_ZMMV_ZMM2_EVEX,
	VPMAXUW_ZMM1_ZMMV_M512_EVEX,
	VPMINSB_XMM1_XMMV_XMM2_VEX,
	VPMINSB_XMM1_XMMV_XMM2_EVEX,
	VPMINSB_XMM1_XMMV_M128_VEX,
	VPMINSB_XMM1_XMMV_M128_EVEX,
	VPMINSB_YMM1_YMMV_YMM2_VEX,
	VPMINSB_YMM1_YMMV_YMM2_EVEX,
	VPMINSB_YMM1_YMMV_M256_VEX,
	VPMINSB_YMM1_YMMV_M256_EVEX,
	VPMINSB_ZMM1_ZMMV_ZMM2_EVEX,
	VPMINSB_ZMM1_ZMMV_M512_EVEX,
	VPMINSD_XMM1_XMMV_XMM2_VEX,
	VPMINSD_XMM1_XMMV_XMM2_EVEX,
	VPMINSD_XMM1_XMMV_M128_VEX,
	VPMINSD_XMM1_XMMV_M128_EVEX,
	VPMINSD_XMM1_XMMV_M32bcst128_EVEX,
	VPMINSD_YMM1_YMMV_YMM2_VEX,
	VPMINSD_YMM1_YMMV_YMM2_EVEX,
	VPMINSD_YMM1_YMMV_M256_VEX,
	VPMINSD_YMM1_YMMV_M256_EVEX,
	VPMINSD_YMM1_YMMV_M32bcst256_EVEX,
	VPMINSD_ZMM1_ZMMV_ZMM2_EVEX,
	VPMINSD_ZMM1_ZMMV_M512_EVEX,
	VPMINSD_ZMM1_ZMMV_M32bcst512_EVEX,
	VPMINSQ_XMM1_XMMV_XMM2_EVEX,
	VPMINSQ_XMM1_XMMV_M128_EVEX,
	VPMINSQ_XMM1_XMMV_M64bcst128_EVEX,
	VPMINSQ_YMM1_YMMV_YMM2_EVEX,
	VPMINSQ_YMM1_YMMV_M256_EVEX,
	VPMINSQ_YMM1_YMMV_M64bcst256_EVEX,
	VPMINSQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPMINSQ_ZMM1_ZMMV_M512_EVEX,
	VPMINSQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPMINSW_XMM1_XMMV_XMM2_VEX,
	VPMINSW_XMM1_XMMV_XMM2_EVEX,
	VPMINSW_XMM1_XMMV_M128_VEX,
	VPMINSW_XMM1_XMMV_M128_EVEX,
	VPMINSW_YMM1_YMMV_YMM2_VEX,
	VPMINSW_YMM1_YMMV_YMM2_EVEX,
	VPMINSW_YMM1_YMMV_M256_VEX,
	VPMINSW_YMM1_YMMV_M256_EVEX,
	VPMINSW_ZMM1_ZMMV_ZMM2_EVEX,
	VPMINSW_ZMM1_ZMMV_M512_EVEX,
	VPMINUB_XMM1_XMMV_XMM2_VEX,
	VPMINUB_XMM1_XMMV_XMM2_EVEX,
	VPMINUB_XMM1_XMMV_M128_VEX,
	VPMINUB_XMM1_XMMV_M128_EVEX,
	VPMINUB_YMM1_YMMV_YMM2_VEX,
	VPMINUB_YMM1_YMMV_YMM2_EVEX,
	VPMINUB_YMM1_YMMV_M256_VEX,
	VPMINUB_YMM1_YMMV_M256_EVEX,
	VPMINUB_ZMM1_ZMMV_ZMM2_EVEX,
	VPMINUB_ZMM1_ZMMV_M512_EVEX,
	VPMINUD_XMM1_XMMV_XMM2_VEX,
	VPMINUD_XMM1_XMMV_XMM2_EVEX,
	VPMINUD_XMM1_XMMV_M128_VEX,
	VPMINUD_XMM1_XMMV_M128_EVEX,
	VPMINUD_XMM1_XMMV_M32bcst128_EVEX,
	VPMINUD_YMM1_YMMV_YMM2_VEX,
	VPMINUD_YMM1_YMMV_YMM2_EVEX,
	VPMINUD_YMM1_YMMV_M256_VEX,
	VPMINUD_YMM1_YMMV_M256_EVEX,
	VPMINUD_YMM1_YMMV_M32bcst256_EVEX,
	VPMINUD_ZMM1_ZMMV_ZMM2_EVEX,
	VPMINUD_ZMM1_ZMMV_M512_EVEX,
	VPMINUD_ZMM1_ZMMV_M32bcst512_EVEX,
	VPMINUQ_XMM1_XMMV_XMM2_EVEX,
	VPMINUQ_XMM1_XMMV_M128_EVEX,
	VPMINUQ_XMM1_XMMV_M64bcst128_EVEX,
	VPMINUQ_YMM1_YMMV_YMM2_EVEX,
	VPMINUQ_YMM1_YMMV_M256_EVEX,
	VPMINUQ_YMM1_YMMV_M64bcst256_EVEX,
	VPMINUQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPMINUQ_ZMM1_ZMMV_M512_EVEX,
	VPMINUQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPMINUW_XMM1_XMMV_XMM2_VEX,
	VPMINUW_XMM1_XMMV_XMM2_EVEX,
	VPMINUW_XMM1_XMMV_M128_VEX,
	VPMINUW_XMM1_XMMV_M128_EVEX,
	VPMINUW_YMM1_YMMV_YMM2_VEX,
	VPMINUW_YMM1_YMMV_YMM2_EVEX,
	VPMINUW_YMM1_YMMV_M256_VEX,
	VPMINUW_YMM1_YMMV_M256_EVEX,
	VPMINUW_ZMM1_ZMMV_ZMM2_EVEX,
	VPMINUW_ZMM1_ZMMV_M512_EVEX,
	VPMOVMSKB_R32_XMM2_VEX,
	VPMOVMSKB_R32_YMM2_VEX,
	VPMOVSXBD_XMM1_XMM2_VEX,
	VPMOVSXBD_XMM1_XMM2_EVEX,
	VPMOVSXBD_XMM1_M32_VEX,
	VPMOVSXBD_XMM1_M32_EVEX,
	VPMOVSXBD_YMM1_XMM2_VEX,
	VPMOVSXBD_YMM1_XMM2_EVEX,
	VPMOVSXBD_YMM1_M64_VEX,
	VPMOVSXBD_YMM1_M64_EVEX,
	VPMOVSXBD_ZMM1_XMM2_EVEX,
	VPMOVSXBD_ZMM1_M128_EVEX,
	VPMOVSXBQ_XMM1_XMM2_VEX,
	VPMOVSXBQ_XMM1_XMM2_EVEX,
	VPMOVSXBQ_XMM1_M16_VEX,
	VPMOVSXBQ_XMM1_M16_EVEX,
	VPMOVSXBQ_YMM1_XMM2_VEX,
	VPMOVSXBQ_YMM1_XMM2_EVEX,
	VPMOVSXBQ_YMM1_M32_VEX,
	VPMOVSXBQ_YMM1_M32_EVEX,
	VPMOVSXBQ_ZMM1_XMM2_EVEX,
	VPMOVSXBQ_ZMM1_M64_EVEX,
	VPMOVSXBW_XMM1_XMM2_VEX,
	VPMOVSXBW_XMM1_XMM2_EVEX,
	VPMOVSXBW_XMM1_M64_VEX,
	VPMOVSXBW_XMM1_M64_EVEX,
	VPMOVSXBW_YMM1_XMM2_VEX,
	VPMOVSXBW_YMM1_XMM2_EVEX,
	VPMOVSXBW_YMM1_M128_VEX,
	VPMOVSXBW_YMM1_M128_EVEX,
	VPMOVSXBW_ZMM1_YMM2_EVEX,
	VPMOVSXBW_ZMM1_M256_EVEX,
	VPMOVSXDQ_XMM1_XMM2_VEX,
	VPMOVSXDQ_XMM1_XMM2_EVEX,
	VPMOVSXDQ_XMM1_M64_VEX,
	VPMOVSXDQ_XMM1_M64_EVEX,
	VPMOVSXDQ_YMM1_XMM2_VEX,
	VPMOVSXDQ_YMM1_XMM2_EVEX,
	VPMOVSXDQ_YMM1_M128_VEX,
	VPMOVSXDQ_YMM1_M128_EVEX,
	VPMOVSXDQ_ZMM1_YMM2_EVEX,
	VPMOVSXDQ_ZMM1_M256_EVEX,
	VPMOVSXWD_XMM1_XMM2_VEX,
	VPMOVSXWD_XMM1_XMM2_EVEX,
	VPMOVSXWD_XMM1_M64_VEX,
	VPMOVSXWD_XMM1_M64_EVEX,
	VPMOVSXWD_YMM1_XMM2_VEX,
	VPMOVSXWD_YMM1_XMM2_EVEX,
	VPMOVSXWD_YMM1_M128_VEX,
	VPMOVSXWD_YMM1_M128_EVEX,
	VPMOVSXWD_ZMM1_YMM2_EVEX,
	VPMOVSXWD_ZMM1_M256_EVEX,
	VPMOVSXWQ_XMM1_XMM2_VEX,
	VPMOVSXWQ_XMM1_XMM2_EVEX,
	VPMOVSXWQ_XMM1_M32_VEX,
	VPMOVSXWQ_XMM1_M32_EVEX,
	VPMOVSXWQ_YMM1_XMM2_VEX,
	VPMOVSXWQ_YMM1_XMM2_EVEX,
	VPMOVSXWQ_YMM1_M64_VEX,
	VPMOVSXWQ_YMM1_M64_EVEX,
	VPMOVSXWQ_ZMM1_XMM2_EVEX,
	VPMOVSXWQ_ZMM1_M128_EVEX,
	VPMOVZXBD_XMM1_XMM2_VEX,
	VPMOVZXBD_XMM1_XMM2_EVEX,
	VPMOVZXBD_XMM1_M32_VEX,
	VPMOVZXBD_XMM1_M32_EVEX,
	VPMOVZXBD_YMM1_XMM2_VEX,
	VPMOVZXBD_YMM1_XMM2_EVEX,
	VPMOVZXBD_YMM1_M64_VEX,
	VPMOVZXBD_YMM1_M64_EVEX,
	VPMOVZXBD_ZMM1_XMM2_EVEX,
	VPMOVZXBD_ZMM1_M128_EVEX,
	VPMOVZXBQ_XMM1_XMM2_VEX,
	VPMOVZXBQ_XMM1_XMM2_EVEX,
	VPMOVZXBQ_XMM1_M16_VEX,
	VPMOVZXBQ_XMM1_M16_EVEX,
	VPMOVZXBQ_YMM1_XMM2_VEX,
	VPMOVZXBQ_YMM1_XMM2_EVEX,
	VPMOVZXBQ_YMM1_M32_VEX,
	VPMOVZXBQ_YMM1_M32_EVEX,
	VPMOVZXBQ_ZMM1_XMM2_EVEX,
	VPMOVZXBQ_ZMM1_M64_EVEX,
	VPMOVZXBW_XMM1_XMM2_VEX,
	VPMOVZXBW_XMM1_XMM2_EVEX,
	VPMOVZXBW_XMM1_M64_VEX,
	VPMOVZXBW_XMM1_M64_EVEX,
	VPMOVZXBW_YMM1_XMM2_VEX,
	VPMOVZXBW_YMM1_XMM2_EVEX,
	VPMOVZXBW_YMM1_M128_VEX,
	VPMOVZXBW_YMM1_M128_EVEX,
	VPMOVZXBW_ZMM1_YMM2_EVEX,
	VPMOVZXBW_ZMM1_M256_EVEX,
	VPMOVZXDQ_XMM1_XMM2_VEX,
	VPMOVZXDQ_XMM1_XMM2_EVEX,
	VPMOVZXDQ_XMM1_M64_VEX,
	VPMOVZXDQ_XMM1_M64_EVEX,
	VPMOVZXDQ_YMM1_XMM2_VEX,
	VPMOVZXDQ_YMM1_XMM2_EVEX,
	VPMOVZXDQ_YMM1_M128_VEX,
	VPMOVZXDQ_YMM1_M128_EVEX,
	VPMOVZXDQ_ZMM1_YMM2_EVEX,
	VPMOVZXDQ_ZMM1_M256_EVEX,
	VPMOVZXWD_XMM1_XMM2_VEX,
	VPMOVZXWD_XMM1_XMM2_EVEX,
	VPMOVZXWD_XMM1_M64_VEX,
	VPMOVZXWD_XMM1_M64_EVEX,
	VPMOVZXWD_YMM1_XMM2_VEX,
	VPMOVZXWD_YMM1_XMM2_EVEX,
	VPMOVZXWD_YMM1_M128_VEX,
	VPMOVZXWD_YMM1_M128_EVEX,
	VPMOVZXWD_ZMM1_YMM2_EVEX,
	VPMOVZXWD_ZMM1_M256_EVEX,
	VPMOVZXWQ_XMM1_XMM2_VEX,
	VPMOVZXWQ_XMM1_XMM2_EVEX,
	VPMOVZXWQ_XMM1_M32_VEX,
	VPMOVZXWQ_XMM1_M32_EVEX,
	VPMOVZXWQ_YMM1_XMM2_VEX,
	VPMOVZXWQ_YMM1_XMM2_EVEX,
	VPMOVZXWQ_YMM1_M64_VEX,
	VPMOVZXWQ_YMM1_M64_EVEX,
	VPMOVZXWQ_ZMM1_XMM2_EVEX,
	VPMOVZXWQ_ZMM1_M128_EVEX,
	VPMULDQ_XMM1_XMMV_XMM2_VEX,
	VPMULDQ_XMM1_XMMV_XMM2_EVEX,
	VPMULDQ_XMM1_XMMV_M128_VEX,
	VPMULDQ_XMM1_XMMV_M128_EVEX,
	VPMULDQ_XMM1_XMMV_M64bcst128_EVEX,
	VPMULDQ_YMM1_YMMV_YMM2_VEX,
	VPMULDQ_YMM1_YMMV_YMM2_EVEX,
	VPMULDQ_YMM1_YMMV_M256_VEX,
	VPMULDQ_YMM1_YMMV_M256_EVEX,
	VPMULDQ_YMM1_YMMV_M64bcst256_EVEX,
	VPMULDQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPMULDQ_ZMM1_ZMMV_M512_EVEX,
	VPMULDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPMULHRSW_XMM1_XMMV_XMM2_VEX,
	VPMULHRSW_XMM1_XMMV_XMM2_EVEX,
	VPMULHRSW_XMM1_XMMV_M128_VEX,
	VPMULHRSW_XMM1_XMMV_M128_EVEX,
	VPMULHRSW_YMM1_YMMV_YMM2_VEX,
	VPMULHRSW_YMM1_YMMV_YMM2_EVEX,
	VPMULHRSW_YMM1_YMMV_M256_VEX,
	VPMULHRSW_YMM1_YMMV_M256_EVEX,
	VPMULHRSW_ZMM1_ZMMV_ZMM2_EVEX,
	VPMULHRSW_ZMM1_ZMMV_M512_EVEX,
	VPMULHUW_XMM1_XMMV_XMM2_VEX,
	VPMULHUW_XMM1_XMMV_XMM2_EVEX,
	VPMULHUW_XMM1_XMMV_M128_VEX,
	VPMULHUW_XMM1_XMMV_M128_EVEX,
	VPMULHUW_YMM1_YMMV_YMM2_VEX,
	VPMULHUW_YMM1_YMMV_YMM2_EVEX,
	VPMULHUW_YMM1_YMMV_M256_VEX,
	VPMULHUW_YMM1_YMMV_M256_EVEX,
	VPMULHUW_ZMM1_ZMMV_ZMM2_EVEX,
	VPMULHUW_ZMM1_ZMMV_M512_EVEX,
	VPMULHW_XMM1_XMMV_XMM2_VEX,
	VPMULHW_XMM1_XMMV_XMM2_EVEX,
	VPMULHW_XMM1_XMMV_M128_VEX,
	VPMULHW_XMM1_XMMV_M128_EVEX,
	VPMULHW_YMM1_YMMV_YMM2_VEX,
	VPMULHW_YMM1_YMMV_YMM2_EVEX,
	VPMULHW_YMM1_YMMV_M256_VEX,
	VPMULHW_YMM1_YMMV_M256_EVEX,
	VPMULHW_ZMM1_ZMMV_ZMM2_EVEX,
	VPMULHW_ZMM1_ZMMV_M512_EVEX,
	VPMULLD_XMM1_XMMV_XMM2_VEX,
	VPMULLD_XMM1_XMMV_XMM2_EVEX,
	VPMULLD_XMM1_XMMV_M128_VEX,
	VPMULLD_XMM1_XMMV_M128_EVEX,
	VPMULLD_XMM1_XMMV_M32bcst128_EVEX,
	VPMULLD_YMM1_YMMV_YMM2_VEX,
	VPMULLD_YMM1_YMMV_YMM2_EVEX,
	VPMULLD_YMM1_YMMV_M256_VEX,
	VPMULLD_YMM1_YMMV_M256_EVEX,
	VPMULLD_YMM1_YMMV_M32bcst256_EVEX,
	VPMULLD_ZMM1_ZMMV_ZMM2_EVEX,
	VPMULLD_ZMM1_ZMMV_M512_EVEX,
	VPMULLD_ZMM1_ZMMV_M32bcst512_EVEX,
	VPMULLQ_XMM1_XMMV_XMM2_EVEX,
	VPMULLQ_XMM1_XMMV_M128_EVEX,
	VPMULLQ_XMM1_XMMV_M64bcst128_EVEX,
	VPMULLQ_YMM1_YMMV_YMM2_EVEX,
	VPMULLQ_YMM1_YMMV_M256_EVEX,
	VPMULLQ_YMM1_YMMV_M64bcst256_EVEX,
	VPMULLQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPMULLQ_ZMM1_ZMMV_M512_EVEX,
	VPMULLQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPMULLW_XMM1_XMMV_XMM2_VEX,
	VPMULLW_XMM1_XMMV_XMM2_EVEX,
	VPMULLW_XMM1_XMMV_M128_VEX,
	VPMULLW_XMM1_XMMV_M128_EVEX,
	VPMULLW_YMM1_YMMV_YMM2_VEX,
	VPMULLW_YMM1_YMMV_YMM2_EVEX,
	VPMULLW_YMM1_YMMV_M256_VEX,
	VPMULLW_YMM1_YMMV_M256_EVEX,
	VPMULLW_ZMM1_ZMMV_ZMM2_EVEX,
	VPMULLW_ZMM1_ZMMV_M512_EVEX,
	VPMULUDQ_XMM1_XMMV_XMM2_VEX,
	VPMULUDQ_XMM1_XMMV_XMM2_EVEX,
	VPMULUDQ_XMM1_XMMV_M128_VEX,
	VPMULUDQ_XMM1_XMMV_M128_EVEX,
	VPMULUDQ_XMM1_XMMV_M64bcst128_EVEX,
	VPMULUDQ_YMM1_YMMV_YMM2_VEX,
	VPMULUDQ_YMM1_YMMV_YMM2_EVEX,
	VPMULUDQ_YMM1_YMMV_M256_VEX,
	VPMULUDQ_YMM1_YMMV_M256_EVEX,
	VPMULUDQ_YMM1_YMMV_M64bcst256_EVEX,
	VPMULUDQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPMULUDQ_ZMM1_ZMMV_M512_EVEX,
	VPMULUDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPOR_XMM1_XMMV_XMM2_VEX,
	VPOR_XMM1_XMMV_M128_VEX,
	VPOR_YMM1_YMMV_YMM2_VEX,
	VPOR_YMM1_YMMV_M256_VEX,
	VPORD_XMM1_XMMV_XMM2_EVEX,
	VPORD_XMM1_XMMV_M128_EVEX,
	VPORD_XMM1_XMMV_M32bcst128_EVEX,
	VPORD_YMM1_YMMV_YMM2_EVEX,
	VPORD_YMM1_YMMV_M256_EVEX,
	VPORD_YMM1_YMMV_M32bcst256_EVEX,
	VPORD_ZMM1_ZMMV_ZMM2_EVEX,
	VPORD_ZMM1_ZMMV_M512_EVEX,
	VPORD_ZMM1_ZMMV_M32bcst512_EVEX,
	VPORQ_XMM1_XMMV_XMM2_EVEX,
	VPORQ_XMM1_XMMV_M128_EVEX,
	VPORQ_XMM1_XMMV_M64bcst128_EVEX,
	VPORQ_YMM1_YMMV_YMM2_EVEX,
	VPORQ_YMM1_YMMV_M256_EVEX,
	VPORQ_YMM1_YMMV_M64bcst256_EVEX,
	VPORQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPORQ_ZMM1_ZMMV_M512_EVEX,
	VPORQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPSADBW_XMM1_XMMV_XMM2_VEX,
	VPSADBW_XMM1_XMMV_XMM2_EVEX,
	VPSADBW_XMM1_XMMV_M128_VEX,
	VPSADBW_XMM1_XMMV_M128_EVEX,
	VPSADBW_YMM1_YMMV_YMM2_VEX,
	VPSADBW_YMM1_YMMV_YMM2_EVEX,
	VPSADBW_YMM1_YMMV_M256_VEX,
	VPSADBW_YMM1_YMMV_M256_EVEX,
	VPSADBW_ZMM1_ZMMV_ZMM2_EVEX,
	VPSADBW_ZMM1_ZMMV_M512_EVEX,
	VPSHUFB_XMM1_XMMV_XMM2_VEX,
	VPSHUFB_XMM1_XMMV_XMM2_EVEX,
	VPSHUFB_XMM1_XMMV_M128_VEX,
	VPSHUFB_XMM1_XMMV_M128_EVEX,
	VPSHUFB_YMM1_YMMV_YMM2_VEX,
	VPSHUFB_YMM1_YMMV_YMM2_EVEX,
	VPSHUFB_YMM1_YMMV_M256_VEX,
	VPSHUFB_YMM1_YMMV_M256_EVEX,
	VPSHUFB_ZMM1_ZMMV_ZMM2_EVEX,
	VPSHUFB_ZMM1_ZMMV_M512_EVEX,
	VPSHUFD_XMM1_XMM2_Imm8_VEX,
	VPSHUFD_XMM1_XMM2_Imm8_EVEX,
	VPSHUFD_XMM1_M128_Imm8_VEX,
	VPSHUFD_XMM1_M128_Imm8_EVEX,
	VPSHUFD_XMM1_M32bcst128_Imm8_EVEX,
	VPSHUFD_YMM1_YMM2_Imm8_VEX,
	VPSHUFD_YMM1_YMM2_Imm8_EVEX,
	VPSHUFD_YMM1_M256_Imm8_VEX,
	VPSHUFD_YMM1_M256_Imm8_EVEX,
	VPSHUFD_YMM1_M32bcst256_Imm8_EVEX,
	VPSHUFD_ZMM1_ZMM2_Imm8_EVEX,
	VPSHUFD_ZMM1_M512_Imm8_EVEX,
	VPSHUFD_ZMM1_M32bcst512_Imm8_EVEX,
	VPSHUFHW_XMM1_XMM2_Imm8_VEX,
	VPSHUFHW_XMM1_XMM2_Imm8_EVEX,
	VPSHUFHW_XMM1_M128_Imm8_VEX,
	VPSHUFHW_XMM1_M128_Imm8_EVEX,
	VPSHUFHW_YMM1_YMM2_Imm8_VEX,
	VPSHUFHW_YMM1_YMM2_Imm8_EVEX,
	VPSHUFHW_YMM1_M256_Imm8_VEX,
	VPSHUFHW_YMM1_M256_Imm8_EVEX,
	VPSHUFHW_ZMM1_ZMM2_Imm8_EVEX,
	VPSHUFHW_ZMM1_M512_Imm8_EVEX,
	VPSHUFLW_XMM1_XMM2_Imm8_VEX,
	VPSHUFLW_XMM1_XMM2_Imm8_EVEX,
	VPSHUFLW_XMM1_M128_Imm8_VEX,
	VPSHUFLW_XMM1_M128_Imm8_EVEX,
	VPSHUFLW_YMM1_YMM2_Imm8_VEX,
	VPSHUFLW_YMM1_YMM2_Imm8_EVEX,
	VPSHUFLW_YMM1_M256_Imm8_VEX,
	VPSHUFLW_YMM1_M256_Imm8_EVEX,
	VPSHUFLW_ZMM1_ZMM2_Imm8_EVEX,
	VPSHUFLW_ZMM1_M512_Imm8_EVEX,
	VPSIGNB_XMM1_XMMV_XMM2_VEX,
	VPSIGNB_XMM1_XMMV_M128_VEX,
	VPSIGNB_YMM1_YMMV_YMM2_VEX,
	VPSIGNB_YMM1_YMMV_M256_VEX,
	VPSIGND_XMM1_XMMV_XMM2_VEX,
	VPSIGND_XMM1_XMMV_M128_VEX,
	VPSIGND_YMM1_YMMV_YMM2_VEX,
	VPSIGND_YMM1_YMMV_M256_VEX,
	VPSIGNW_XMM1_XMMV_XMM2_VEX,
	VPSIGNW_XMM1_XMMV_M128_VEX,
	VPSIGNW_YMM1_YMMV_YMM2_VEX,
	VPSIGNW_YMM1_YMMV_M256_VEX,
	VPSLLD_XMM1_XMMV_XMM2_VEX,
	VPSLLD_XMM1_XMMV_XMM2_EVEX,
	VPSLLD_XMM1_XMMV_M128_VEX,
	VPSLLD_XMM1_XMMV_M128_EVEX,
	VPSLLD_YMM1_YMMV_XMM2_VEX,
	VPSLLD_YMM1_YMMV_XMM2_EVEX,
	VPSLLD_YMM1_YMMV_M128_VEX,
	VPSLLD_YMM1_YMMV_M128_EVEX,
	VPSLLD_ZMM1_ZMMV_XMM2_EVEX,
	VPSLLD_ZMM1_ZMMV_M128_EVEX,
	VPSLLD_XMMV_XMM2_Imm8_VEX,
	VPSLLD_XMMV_XMM2_Imm8_EVEX,
	VPSLLD_XMMV_M128_Imm8_EVEX,
	VPSLLD_XMMV_M32bcst128_Imm8_EVEX,
	VPSLLD_YMMV_YMM2_Imm8_VEX,
	VPSLLD_YMMV_YMM2_Imm8_EVEX,
	VPSLLD_YMMV_M256_Imm8_EVEX,
	VPSLLD_YMMV_M32bcst256_Imm8_EVEX,
	VPSLLD_ZMMV_ZMM2_Imm8_EVEX,
	VPSLLD_ZMMV_M512_Imm8_EVEX,
	VPSLLD_ZMMV_M32bcst512_Imm8_EVEX,
	VPSLLDQ_XMMV_XMM2_Imm8_VEX,
	VPSLLDQ_XMMV_XMM2_Imm8_EVEX,
	VPSLLDQ_XMMV_M128_Imm8_EVEX,
	VPSLLDQ_YMMV_YMM2_Imm8_VEX,
	VPSLLDQ_YMMV_YMM2_Imm8_EVEX,
	VPSLLDQ_YMMV_M256_Imm8_EVEX,
	VPSLLDQ_ZMMV_ZMM2_Imm8_EVEX,
	VPSLLDQ_ZMMV_M512_Imm8_EVEX,
	VPSLLQ_XMM1_XMMV_XMM2_VEX,
	VPSLLQ_XMM1_XMMV_XMM2_EVEX,
	VPSLLQ_XMM1_XMMV_M128_VEX,
	VPSLLQ_XMM1_XMMV_M128_EVEX,
	VPSLLQ_YMM1_YMMV_XMM2_VEX,
	VPSLLQ_YMM1_YMMV_XMM2_EVEX,
	VPSLLQ_YMM1_YMMV_M128_VEX,
	VPSLLQ_YMM1_YMMV_M128_EVEX,
	VPSLLQ_ZMM1_ZMMV_XMM2_EVEX,
	VPSLLQ_ZMM1_ZMMV_M128_EVEX,
	VPSLLQ_XMMV_XMM2_Imm8_VEX,
	VPSLLQ_XMMV_XMM2_Imm8_EVEX,
	VPSLLQ_XMMV_M128_Imm8_EVEX,
	VPSLLQ_XMMV_M64bcst128_Imm8_EVEX,
	VPSLLQ_YMMV_YMM2_Imm8_VEX,
	VPSLLQ_YMMV_YMM2_Imm8_EVEX,
	VPSLLQ_YMMV_M256_Imm8_EVEX,
	VPSLLQ_YMMV_M64bcst256_Imm8_EVEX,
	VPSLLQ_ZMMV_ZMM2_Imm8_EVEX,
	VPSLLQ_ZMMV_M512_Imm8_EVEX,
	VPSLLQ_ZMMV_M64bcst512_Imm8_EVEX,
	VPSLLW_XMM1_XMMV_XMM2_VEX,
	VPSLLW_XMM1_XMMV_XMM2_EVEX,
	VPSLLW_XMM1_XMMV_M128_VEX,
	VPSLLW_XMM1_XMMV_M128_EVEX,
	VPSLLW_YMM1_YMMV_XMM2_VEX,
	VPSLLW_YMM1_YMMV_XMM2_EVEX,
	VPSLLW_YMM1_YMMV_M128_VEX,
	VPSLLW_YMM1_YMMV_M128_EVEX,
	VPSLLW_ZMM1_ZMMV_XMM2_EVEX,
	VPSLLW_ZMM1_ZMMV_M128_EVEX,
	VPSLLW_XMMV_XMM2_Imm8_VEX,
	VPSLLW_XMMV_XMM2_Imm8_EVEX,
	VPSLLW_XMMV_M128_Imm8_EVEX,
	VPSLLW_YMMV_YMM2_Imm8_VEX,
	VPSLLW_YMMV_YMM2_Imm8_EVEX,
	VPSLLW_YMMV_M256_Imm8_EVEX,
	VPSLLW_ZMMV_ZMM2_Imm8_EVEX,
	VPSLLW_ZMMV_M512_Imm8_EVEX,
	VPSRAD_XMM1_XMMV_XMM2_VEX,
	VPSRAD_XMM1_XMMV_XMM2_EVEX,
	VPSRAD_XMM1_XMMV_M128_VEX,
	VPSRAD_XMM1_XMMV_M128_EVEX,
	VPSRAD_YMM1_YMMV_XMM2_VEX,
	VPSRAD_YMM1_YMMV_XMM2_EVEX,
	VPSRAD_YMM1_YMMV_M128_VEX,
	VPSRAD_YMM1_YMMV_M128_EVEX,
	VPSRAD_ZMM1_ZMMV_XMM2_EVEX,
	VPSRAD_ZMM1_ZMMV_M128_EVEX,
	VPSRAD_XMMV_XMM2_Imm8_VEX,
	VPSRAD_XMMV_XMM2_Imm8_EVEX,
	VPSRAD_XMMV_M128_Imm8_EVEX,
	VPSRAD_XMMV_M32bcst128_Imm8_EVEX,
	VPSRAD_YMMV_YMM2_Imm8_VEX,
	VPSRAD_YMMV_YMM2_Imm8_EVEX,
	VPSRAD_YMMV_M256_Imm8_EVEX,
	VPSRAD_YMMV_M32bcst256_Imm8_EVEX,
	VPSRAD_ZMMV_ZMM2_Imm8_EVEX,
	VPSRAD_ZMMV_M512_Imm8_EVEX,
	VPSRAD_ZMMV_M32bcst512_Imm8_EVEX,
	VPSRAQ_XMM1_XMMV_XMM2_EVEX,
	VPSRAQ_XMM1_XMMV_M128_EVEX,
	VPSRAQ_YMM1_YMMV_XMM2_EVEX,
	VPSRAQ_YMM1_YMMV_M128_EVEX,
	VPSRAQ_ZMM1_ZMMV_XMM2_EVEX,
	VPSRAQ_ZMM1_ZMMV_M128_EVEX,
	VPSRAQ_XMMV_XMM2_Imm8_EVEX,
	VPSRAQ_XMMV_M128_Imm8_EVEX,
	VPSRAQ_XMMV_M64bcst128_Imm8_EVEX,
	VPSRAQ_YMMV_YMM2_Imm8_EVEX,
	VPSRAQ_YMMV_M256_Imm8_EVEX,
	VPSRAQ_YMMV_M64bcst256_Imm8_EVEX,
	VPSRAQ_ZMMV_ZMM2_Imm8_EVEX,
	VPSRAQ_ZMMV_M512_Imm8_EVEX,
	VPSRAQ_ZMMV_M64bcst512_Imm8_EVEX,
	VPSRAW_XMM1_XMMV_XMM2_VEX,
	VPSRAW_XMM1_XMMV_XMM2_EVEX,
	VPSRAW_XMM1_XMMV_M128_VEX,
	VPSRAW_XMM1_XMMV_M128_EVEX,
	VPSRAW_YMM1_YMMV_XMM2_VEX,
	VPSRAW_YMM1_YMMV_XMM2_EVEX,
	VPSRAW_YMM1_YMMV_M128_VEX,
	VPSRAW_YMM1_YMMV_M128_EVEX,
	VPSRAW_ZMM1_ZMMV_XMM2_EVEX,
	VPSRAW_ZMM1_ZMMV_M128_EVEX,
	VPSRAW_XMMV_XMM2_Imm8_VEX,
	VPSRAW_XMMV_XMM2_Imm8_EVEX,
	VPSRAW_XMMV_M128_Imm8_EVEX,
	VPSRAW_YMMV_YMM2_Imm8_VEX,
	VPSRAW_YMMV_YMM2_Imm8_EVEX,
	VPSRAW_YMMV_M256_Imm8_EVEX,
	VPSRAW_ZMMV_ZMM2_Imm8_EVEX,
	VPSRAW_ZMMV_M512_Imm8_EVEX,
	VPSRLD_XMM1_XMMV_XMM2_VEX,
	VPSRLD_XMM1_XMMV_XMM2_EVEX,
	VPSRLD_XMM1_XMMV_M128_VEX,
	VPSRLD_XMM1_XMMV_M128_EVEX,
	VPSRLD_YMM1_YMMV_XMM2_VEX,
	VPSRLD_YMM1_YMMV_XMM2_EVEX,
	VPSRLD_YMM1_YMMV_M128_VEX,
	VPSRLD_YMM1_YMMV_M128_EVEX,
	VPSRLD_ZMM1_ZMMV_XMM2_EVEX,
	VPSRLD_ZMM1_ZMMV_M128_EVEX,
	VPSRLD_XMMV_XMM2_Imm8_VEX,
	VPSRLD_XMMV_XMM2_Imm8_EVEX,
	VPSRLD_XMMV_M128_Imm8_EVEX,
	VPSRLD_XMMV_M32bcst128_Imm8_EVEX,
	VPSRLD_YMMV_YMM2_Imm8_VEX,
	VPSRLD_YMMV_YMM2_Imm8_EVEX,
	VPSRLD_YMMV_M256_Imm8_EVEX,
	VPSRLD_YMMV_M32bcst256_Imm8_EVEX,
	VPSRLD_ZMMV_ZMM2_Imm8_EVEX,
	VPSRLD_ZMMV_M512_Imm8_EVEX,
	VPSRLD_ZMMV_M32bcst512_Imm8_EVEX,
	VPSRLDQ_XMMV_XMM2_Imm8_VEX,
	VPSRLDQ_XMMV_XMM2_Imm8_EVEX,
	VPSRLDQ_XMMV_M128_Imm8_EVEX,
	VPSRLDQ_YMMV_YMM2_Imm8_VEX,
	VPSRLDQ_YMMV_YMM2_Imm8_EVEX,
	VPSRLDQ_YMMV_M256_Imm8_EVEX,
	VPSRLDQ_ZMMV_ZMM2_Imm8_EVEX,
	VPSRLDQ_ZMMV_M512_Imm8_EVEX,
	VPSRLQ_XMM1_XMMV_XMM2_VEX,
	VPSRLQ_XMM1_XMMV_XMM2_EVEX,
	VPSRLQ_XMM1_XMMV_M128_VEX,
	VPSRLQ_XMM1_XMMV_M128_EVEX,
	VPSRLQ_YMM1_YMMV_XMM2_VEX,
	VPSRLQ_YMM1_YMMV_XMM2_EVEX,
	VPSRLQ_YMM1_YMMV_M128_VEX,
	VPSRLQ_YMM1_YMMV_M128_EVEX,
	VPSRLQ_ZMM1_ZMMV_XMM2_EVEX,
	VPSRLQ_ZMM1_ZMMV_M128_EVEX,
	VPSRLQ_XMMV_XMM2_Imm8_VEX,
	VPSRLQ_XMMV_XMM2_Imm8_EVEX,
	VPSRLQ_XMMV_M128_Imm8_EVEX,
	VPSRLQ_XMMV_M64bcst128_Imm8_EVEX,
	VPSRLQ_YMMV_YMM2_Imm8_VEX,
	VPSRLQ_YMMV_YMM2_Imm8_EVEX,
	VPSRLQ_YMMV_M256_Imm8_EVEX,
	VPSRLQ_YMMV_M64bcst256_Imm8_EVEX,
	VPSRLQ_ZMMV_ZMM2_Imm8_EVEX,
	VPSRLQ_ZMMV_M512_Imm8_EVEX,
	VPSRLQ_ZMMV_M64bcst512_Imm8_EVEX,
	VPSRLW_XMM1_XMMV_XMM2_VEX,
	VPSRLW_XMM1_XMMV_XMM2_EVEX,
	VPSRLW_XMM1_XMMV_M128_VEX,
	VPSRLW_XMM1_XMMV_M128_EVEX,
	VPSRLW_YMM1_YMMV_XMM2_VEX,
	VPSRLW_YMM1_YMMV_XMM2_EVEX,
	VPSRLW_YMM1_YMMV_M128_VEX,
	VPSRLW_YMM1_YMMV_M128_EVEX,
	VPSRLW_ZMM1_ZMMV_XMM2_EVEX,
	VPSRLW_ZMM1_ZMMV_M128_EVEX,
	VPSRLW_XMMV_XMM2_Imm8_VEX,
	VPSRLW_XMMV_XMM2_Imm8_EVEX,
	VPSRLW_XMMV_M128_Imm8_EVEX,
	VPSRLW_YMMV_YMM2_Imm8_VEX,
	VPSRLW_YMMV_YMM2_Imm8_EVEX,
	VPSRLW_YMMV_M256_Imm8_EVEX,
	VPSRLW_ZMMV_ZMM2_Imm8_EVEX,
	VPSRLW_ZMMV_M512_Imm8_EVEX,
	VPSUBB_XMM1_XMMV_XMM2_VEX,
	VPSUBB_XMM1_XMMV_XMM2_EVEX,
	VPSUBB_XMM1_XMMV_M128_VEX,
	VPSUBB_XMM1_XMMV_M128_EVEX,
	VPSUBB_YMM1_YMMV_YMM2_VEX,
	VPSUBB_YMM1_YMMV_YMM2_EVEX,
	VPSUBB_YMM1_YMMV_M256_VEX,
	VPSUBB_YMM1_YMMV_M256_EVEX,
	VPSUBB_ZMM1_ZMMV_ZMM2_EVEX,
	VPSUBB_ZMM1_ZMMV_M512_EVEX,
	VPSUBD_XMM1_XMMV_XMM2_VEX,
	VPSUBD_XMM1_XMMV_XMM2_EVEX,
	VPSUBD_XMM1_XMMV_M128_VEX,
	VPSUBD_XMM1_XMMV_M128_EVEX,
	VPSUBD_XMM1_XMMV_M32bcst128_EVEX,
	VPSUBD_YMM1_YMMV_YMM2_VEX,
	VPSUBD_YMM1_YMMV_YMM2_EVEX,
	VPSUBD_YMM1_YMMV_M256_VEX,
	VPSUBD_YMM1_YMMV_M256_EVEX,
	VPSUBD_YMM1_YMMV_M32bcst256_EVEX,
	VPSUBD_ZMM1_ZMMV_ZMM2_EVEX,
	VPSUBD_ZMM1_ZMMV_M512_EVEX,
	VPSUBD_ZMM1_ZMMV_M32bcst512_EVEX,
	VPSUBQ_XMM1_XMMV_XMM2_VEX,
	VPSUBQ_XMM1_XMMV_XMM2_EVEX,
	VPSUBQ_XMM1_XMMV_M128_VEX,
	VPSUBQ_XMM1_XMMV_M128_EVEX,
	VPSUBQ_XMM1_XMMV_M64bcst128_EVEX,
	VPSUBQ_YMM1_YMMV_YMM2_VEX,
	VPSUBQ_YMM1_YMMV_YMM2_EVEX,
	VPSUBQ_YMM1_YMMV_M256_VEX,
	VPSUBQ_YMM1_YMMV_M256_EVEX,
	VPSUBQ_YMM1_YMMV_M64bcst256_EVEX,
	VPSUBQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPSUBQ_ZMM1_ZMMV_M512_EVEX,
	VPSUBQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPSUBSB_XMM1_XMMV_XMM2_VEX,
	VPSUBSB_XMM1_XMMV_XMM2_EVEX,
	VPSUBSB_XMM1_XMMV_M128_VEX,
	VPSUBSB_XMM1_XMMV_M128_EVEX,
	VPSUBSB_YMM1_YMMV_YMM2_VEX,
	VPSUBSB_YMM1_YMMV_YMM2_EVEX,
	VPSUBSB_YMM1_YMMV_M256_VEX,
	VPSUBSB_YMM1_YMMV_M256_EVEX,
	VPSUBSB_ZMM1_ZMMV_ZMM2_EVEX,
	VPSUBSB_ZMM1_ZMMV_M512_EVEX,
	VPSUBSW_XMM1_XMMV_XMM2_VEX,
	VPSUBSW_XMM1_XMMV_XMM2_EVEX,
	VPSUBSW_XMM1_XMMV_M128_VEX,
	VPSUBSW_XMM1_XMMV_M128_EVEX,
	VPSUBSW_YMM1_YMMV_YMM2_VEX,
	VPSUBSW_YMM1_YMMV_YMM2_EVEX,
	VPSUBSW_YMM1_YMMV_M256_VEX,
	VPSUBSW_YMM1_YMMV_M256_EVEX,
	VPSUBSW_ZMM1_ZMMV_ZMM2_EVEX,
	VPSUBSW_ZMM1_ZMMV_M512_EVEX,
	VPSUBUSB_XMM1_XMMV_XMM2_VEX,
	VPSUBUSB_XMM1_XMMV_XMM2_EVEX,
	VPSUBUSB_XMM1_XMMV_M128_VEX,
	VPSUBUSB_XMM1_XMMV_M128_EVEX,
	VPSUBUSB_YMM1_YMMV_YMM2_VEX,
	VPSUBUSB_YMM1_YMMV_YMM2_EVEX,
	VPSUBUSB_YMM1_YMMV_M256_VEX,
	VPSUBUSB_YMM1_YMMV_M256_EVEX,
	VPSUBUSB_ZMM1_ZMMV_ZMM2_EVEX,
	VPSUBUSB_ZMM1_ZMMV_M512_EVEX,
	VPSUBUSW_XMM1_XMMV_XMM2_VEX,
	VPSUBUSW_XMM1_XMMV_XMM2_EVEX,
	VPSUBUSW_XMM1_XMMV_M128_VEX,
	VPSUBUSW_XMM1_XMMV_M128_EVEX,
	VPSUBUSW_YMM1_YMMV_YMM2_VEX,
	VPSUBUSW_YMM1_YMMV_YMM2_EVEX,
	VPSUBUSW_YMM1_YMMV_M256_VEX,
	VPSUBUSW_YMM1_YMMV_M256_EVEX,
	VPSUBUSW_ZMM1_ZMMV_ZMM2_EVEX,
	VPSUBUSW_ZMM1_ZMMV_M512_EVEX,
	VPSUBW_XMM1_XMMV_XMM2_VEX,
	VPSUBW_XMM1_XMMV_XMM2_EVEX,
	VPSUBW_XMM1_XMMV_M128_VEX,
	VPSUBW_XMM1_XMMV_M128_EVEX,
	VPSUBW_YMM1_YMMV_YMM2_VEX,
	VPSUBW_YMM1_YMMV_YMM2_EVEX,
	VPSUBW_YMM1_YMMV_M256_VEX,
	VPSUBW_YMM1_YMMV_M256_EVEX,
	VPSUBW_ZMM1_ZMMV_ZMM2_EVEX,
	VPSUBW_ZMM1_ZMMV_M512_EVEX,
	VPTEST_XMM1_XMM2_VEX,
	VPTEST_XMM1_M128_VEX,
	VPTEST_YMM1_YMM2_VEX,
	VPTEST_YMM1_M256_VEX,
	VPUNPCKHBW_XMM1_XMMV_XMM2_VEX,
	VPUNPCKHBW_XMM1_XMMV_XMM2_EVEX,
	VPUNPCKHBW_XMM1_XMMV_M128_VEX,
	VPUNPCKHBW_XMM1_XMMV_M128_EVEX,
	VPUNPCKHBW_YMM1_YMMV_YMM2_VEX,
	VPUNPCKHBW_YMM1_YMMV_YMM2_EVEX,
	VPUNPCKHBW_YMM1_YMMV_M256_VEX,
	VPUNPCKHBW_YMM1_YMMV_M256_EVEX,
	VPUNPCKHBW_ZMM1_ZMMV_ZMM2_EVEX,
	VPUNPCKHBW_ZMM1_ZMMV_M512_EVEX,
	VPUNPCKHDQ_XMM1_XMMV_XMM2_VEX,
	VPUNPCKHDQ_XMM1_XMMV_XMM2_EVEX,
	VPUNPCKHDQ_XMM1_XMMV_M128_VEX,
	VPUNPCKHDQ_XMM1_XMMV_M128_EVEX,
	VPUNPCKHDQ_XMM1_XMMV_M32bcst128_EVEX,
	VPUNPCKHDQ_YMM1_YMMV_YMM2_VEX,
	VPUNPCKHDQ_YMM1_YMMV_YMM2_EVEX,
	VPUNPCKHDQ_YMM1_YMMV_M256_VEX,
	VPUNPCKHDQ_YMM1_YMMV_M256_EVEX,
	VPUNPCKHDQ_YMM1_YMMV_M32bcst256_EVEX,
	VPUNPCKHDQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPUNPCKHDQ_ZMM1_ZMMV_M512_EVEX,
	VPUNPCKHDQ_ZMM1_ZMMV_M32bcst512_EVEX,
	VPUNPCKHQDQ_XMM1_XMMV_XMM2_VEX,
	VPUNPCKHQDQ_XMM1_XMMV_XMM2_EVEX,
	VPUNPCKHQDQ_XMM1_XMMV_M128_VEX,
	VPUNPCKHQDQ_XMM1_XMMV_M128_EVEX,
	VPUNPCKHQDQ_XMM1_XMMV_M64bcst128_EVEX,
	VPUNPCKHQDQ_YMM1_YMMV_YMM2_VEX,
	VPUNPCKHQDQ_YMM1_YMMV_YMM2_EVEX,
	VPUNPCKHQDQ_YMM1_YMMV_M256_VEX,
	VPUNPCKHQDQ_YMM1_YMMV_M256_EVEX,
	VPUNPCKHQDQ_YMM1_YMMV_M64bcst256_EVEX,
	VPUNPCKHQDQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPUNPCKHQDQ_ZMM1_ZMMV_M512_EVEX,
	VPUNPCKHQDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPUNPCKHWD_XMM1_XMMV_XMM2_VEX,
	VPUNPCKHWD_XMM1_XMMV_XMM2_EVEX,
	VPUNPCKHWD_XMM1_XMMV_M128_VEX,
	VPUNPCKHWD_XMM1_XMMV_M128_EVEX,
	VPUNPCKHWD_YMM1_YMMV_YMM2_VEX,
	VPUNPCKHWD_YMM1_YMMV_YMM2_EVEX,
	VPUNPCKHWD_YMM1_YMMV_M256_VEX,
	VPUNPCKHWD_YMM1_YMMV_M256_EVEX,
	VPUNPCKHWD_ZMM1_ZMMV_ZMM2_EVEX,
	VPUNPCKHWD_ZMM1_ZMMV_M512_EVEX,
	VPUNPCKLBW_XMM1_XMMV_XMM2_VEX,
	VPUNPCKLBW_XMM1_XMMV_XMM2_EVEX,
	VPUNPCKLBW_XMM1_XMMV_M128_VEX,
	VPUNPCKLBW_XMM1_XMMV_M128_EVEX,
	VPUNPCKLBW_YMM1_YMMV_YMM2_VEX,
	VPUNPCKLBW_YMM1_YMMV_YMM2_EVEX,
	VPUNPCKLBW_YMM1_YMMV_M256_VEX,
	VPUNPCKLBW_YMM1_YMMV_M256_EVEX,
	VPUNPCKLBW_ZMM1_ZMMV_ZMM2_EVEX,
	VPUNPCKLBW_ZMM1_ZMMV_M512_EVEX,
	VPUNPCKLDQ_XMM1_XMMV_XMM2_VEX,
	VPUNPCKLDQ_XMM1_XMMV_XMM2_EVEX,
	VPUNPCKLDQ_XMM1_XMMV_M128_VEX,
	VPUNPCKLDQ_XMM1_XMMV_M128_EVEX,
	VPUNPCKLDQ_XMM1_XMMV_M32bcst128_EVEX,
	VPUNPCKLDQ_YMM1_YMMV_YMM2_VEX,
	VPUNPCKLDQ_YMM1_YMMV_YMM2_EVEX,
	VPUNPCKLDQ_YMM1_YMMV_M256_VEX,
	VPUNPCKLDQ_YMM1_YMMV_M256_EVEX,
	VPUNPCKLDQ_YMM1_YMMV_M32bcst256_EVEX,
	VPUNPCKLDQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPUNPCKLDQ_ZMM1_ZMMV_M512_EVEX,
	VPUNPCKLDQ_ZMM1_ZMMV_M32bcst512_EVEX,
	VPUNPCKLQDQ_XMM1_XMMV_XMM2_VEX,
	VPUNPCKLQDQ_XMM1_XMMV_XMM2_EVEX,
	VPUNPCKLQDQ_XMM1_XMMV_M128_VEX,
	VPUNPCKLQDQ_XMM1_XMMV_M128_EVEX,
	VPUNPCKLQDQ_XMM1_XMMV_M64bcst128_EVEX,
	VPUNPCKLQDQ_YMM1_YMMV_YMM2_VEX,
	VPUNPCKLQDQ_YMM1_YMMV_YMM2_EVEX,
	VPUNPCKLQDQ_YMM1_YMMV_M256_VEX,
	VPUNPCKLQDQ_YMM1_YMMV_M256_EVEX,
	VPUNPCKLQDQ_YMM1_YMMV_M64bcst256_EVEX,
	VPUNPCKLQDQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPUNPCKLQDQ_ZMM1_ZMMV_M512_EVEX,
	VPUNPCKLQDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VPUNPCKLWD_XMM1_XMMV_XMM2_VEX,
	VPUNPCKLWD_XMM1_XMMV_XMM2_EVEX,
	VPUNPCKLWD_XMM1_XMMV_M128_VEX,
	VPUNPCKLWD_XMM1_XMMV_M128_EVEX,
	VPUNPCKLWD_YMM1_YMMV_YMM2_VEX,
	VPUNPCKLWD_YMM1_YMMV_YMM2_EVEX,
	VPUNPCKLWD_YMM1_YMMV_M256_VEX,
	VPUNPCKLWD_YMM1_YMMV_M256_EVEX,
	VPUNPCKLWD_ZMM1_ZMMV_ZMM2_EVEX,
	VPUNPCKLWD_ZMM1_ZMMV_M512_EVEX,
	VPXOR_XMM1_XMMV_XMM2_VEX,
	VPXOR_XMM1_XMMV_M128_VEX,
	VPXOR_YMM1_YMMV_YMM2_VEX,
	VPXOR_YMM1_YMMV_M256_VEX,
	VPXORD_XMM1_XMMV_XMM2_EVEX,
	VPXORD_XMM1_XMMV_M128_EVEX,
	VPXORD_XMM1_XMMV_M32bcst128_EVEX,
	VPXORD_YMM1_YMMV_YMM2_EVEX,
	VPXORD_YMM1_YMMV_M256_EVEX,
	VPXORD_YMM1_YMMV_M32bcst256_EVEX,
	VPXORD_ZMM1_ZMMV_ZMM2_EVEX,
	VPXORD_ZMM1_ZMMV_M512_EVEX,
	VPXORD_ZMM1_ZMMV_M32bcst512_EVEX,
	VPXORQ_XMM1_XMMV_XMM2_EVEX,
	VPXORQ_XMM1_XMMV_M128_EVEX,
	VPXORQ_XMM1_XMMV_M64bcst128_EVEX,
	VPXORQ_YMM1_YMMV_YMM2_EVEX,
	VPXORQ_YMM1_YMMV_M256_EVEX,
	VPXORQ_YMM1_YMMV_M64bcst256_EVEX,
	VPXORQ_ZMM1_ZMMV_ZMM2_EVEX,
	VPXORQ_ZMM1_ZMMV_M512_EVEX,
	VPXORQ_ZMM1_ZMMV_M64bcst512_EVEX,
	VRCPPS_XMM1_XMM2_VEX,
	VRCPPS_XMM1_M128_VEX,
	VRCPPS_YMM1_YMM2_VEX,
	VRCPPS_YMM1_M256_VEX,
	VRCPSS_XMM1_XMMV_XMM2_VEX,
	VRCPSS_XMM1_XMMV_M32_VEX,
	VROUNDPD_XMM1_XMM2_Imm8_VEX,
	VROUNDPD_XMM1_M128_Imm8_VEX,
	VROUNDPD_YMM1_YMM2_Imm8_VEX,
	VROUNDPD_YMM1_M256_Imm8_VEX,
	VROUNDPS_XMM1_XMM2_Imm8_VEX,
	VROUNDPS_XMM1_M128_Imm8_VEX,
	VROUNDPS_YMM1_YMM2_Imm8_VEX,
	VROUNDPS_YMM1_M256_Imm8_VEX,
	VROUNDSD_XMM1_XMMV_XMM2_Imm8_VEX,
	VROUNDSD_XMM1_XMMV_M64_Imm8_VEX,
	VROUNDSS_XMM1_XMMV_XMM2_Imm8_VEX,
	VROUNDSS_XMM1_XMMV_M32_Imm8_VEX,
	VRSQRTPS_XMM1_XMM2_VEX,
	VRSQRTPS_XMM1_M128_VEX,
	VRSQRTPS_YMM1_YMM2_VEX,
	VRSQRTPS_YMM1_M256_VEX,
	VRSQRTSS_XMM1_XMMV_XMM2_VEX,
	VRSQRTSS_XMM1_XMMV_M32_VEX,
	VSHUFPD_XMM1_XMMV_XMM2_Imm8_VEX,
	VSHUFPD_XMM1_XMMV_XMM2_Imm8_EVEX,
	VSHUFPD_XMM1_XMMV_M128_Imm8_VEX,
	VSHUFPD_XMM1_XMMV_M128_Imm8_EVEX,
	VSHUFPD_XMM1_XMMV_M64bcst128_Imm8_EVEX,
	VSHUFPD_YMM1_YMMV_YMM2_Imm8_VEX,
	VSHUFPD_YMM1_YMMV_YMM2_Imm8_EVEX,
	VSHUFPD_YMM1_YMMV_M256_Imm8_VEX,
	VSHUFPD_YMM1_YMMV_M256_Imm8_EVEX,
	VSHUFPD_YMM1_YMMV_M64bcst256_Imm8_EVEX,
	VSHUFPD_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	VSHUFPD_ZMM1_ZMMV_M512_Imm8_EVEX,
	VSHUFPD_ZMM1_ZMMV_M64bcst512_Imm8_EVEX,
	VSHUFPS_XMM1_XMMV_XMM2_Imm8_VEX,
	VSHUFPS_XMM1_XMMV_XMM2_Imm8_EVEX,
	VSHUFPS_XMM1_XMMV_M128_Imm8_VEX,
	VSHUFPS_XMM1_XMMV_M128_Imm8_EVEX,
	VSHUFPS_XMM1_XMMV_M32bcst128_Imm8_EVEX,
	VSHUFPS_YMM1_YMMV_YMM2_Imm8_VEX,
	VSHUFPS_YMM1_YMMV_YMM2_Imm8_EVEX,
	VSHUFPS_YMM1_YMMV_M256_Imm8_VEX,
	VSHUFPS_YMM1_YMMV_M256_Imm8_EVEX,
	VSHUFPS_YMM1_YMMV_M32bcst256_Imm8_EVEX,
	VSHUFPS_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	VSHUFPS_ZMM1_ZMMV_M512_Imm8_EVEX,
	VSHUFPS_ZMM1_ZMMV_M32bcst512_Imm8_EVEX,
	VSQRTPD_XMM1_XMM2_VEX,
	VSQRTPD_XMM1_XMM2_EVEX,
	VSQRTPD_XMM1_M128_VEX,
	VSQRTPD_XMM1_M128_EVEX,
	VSQRTPD_XMM1_M64bcst128_EVEX,
	VSQRTPD_YMM1_YMM2_VEX,
	VSQRTPD_YMM1_YMM2_EVEX,
	VSQRTPD_YMM1_M256_VEX,
	VSQRTPD_YMM1_M256_EVEX,
	VSQRTPD_YMM1_M64bcst256_EVEX,
	VSQRTPD_ZMM1_ZMM2_EVEX,
	VSQRTPD_ZMM1_M512_EVEX,
	VSQRTPD_ZMM1_M64bcst512_EVEX,
	VSQRTPS_XMM1_XMM2_VEX,
	VSQRTPS_XMM1_XMM2_EVEX,
	VSQRTPS_XMM1_M128_VEX,
	VSQRTPS_XMM1_M128_EVEX,
	VSQRTPS_XMM1_M32bcst128_EVEX,
	VSQRTPS_YMM1_YMM2_VEX,
	VSQRTPS_YMM1_YMM2_EVEX,
	VSQRTPS_YMM1_M256_VEX,
	VSQRTPS_YMM1_M256_EVEX,
	VSQRTPS_YMM1_M32bcst256_EVEX,
	VSQRTPS_ZMM1_ZMM2_EVEX,
	VSQRTPS_ZMM1_M512_EVEX,
	VSQRTPS_ZMM1_M32bcst512_EVEX,
	VSQRTSD_XMM1_XMMV_XMM2_VEX,
	VSQRTSD_XMM1_XMMV_XMM2_EVEX,
	VSQRTSD_XMM1_XMMV_M64_VEX,
	VSQRTSD_XMM1_XMMV_M64_EVEX,
	VSQRTSS_XMM1_XMMV_XMM2_VEX,
	VSQRTSS_XMM1_XMMV_XMM2_EVEX,
	VSQRTSS_XMM1_XMMV_M32_VEX,
	VSQRTSS_XMM1_XMMV_M32_EVEX,
	VSTMXCSR_M32_VEX,
	VSUBPD_XMM1_XMMV_XMM2_VEX,
	VSUBPD_XMM1_XMMV_XMM2_EVEX,
	VSUBPD_XMM1_XMMV_M128_VEX,
	VSUBPD_XMM1_XMMV_M128_EVEX,
	VSUBPD_XMM1_XMMV_M64bcst128_EVEX,
	VSUBPD_YMM1_YMMV_YMM2_VEX,
	VSUBPD_YMM1_YMMV_YMM2_EVEX,
	VSUBPD_YMM1_YMMV_M256_VEX,
	VSUBPD_YMM1_YMMV_M256_EVEX,
	VSUBPD_YMM1_YMMV_M64bcst256_EVEX,
	VSUBPD_ZMM1_ZMMV_ZMM2_EVEX,
	VSUBPD_ZMM1_ZMMV_M512_EVEX,
	VSUBPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VSUBPS_XMM1_XMMV_XMM2_VEX,
	VSUBPS_XMM1_XMMV_XMM2_EVEX,
	VSUBPS_XMM1_XMMV_M128_VEX,
	VSUBPS_XMM1_XMMV_M128_EVEX,
	VSUBPS_XMM1_XMMV_M32bcst128_EVEX,
	VSUBPS_YMM1_YMMV_YMM2_VEX,
	VSUBPS_YMM1_YMMV_YMM2_EVEX,
	VSUBPS_YMM1_YMMV_M256_VEX,
	VSUBPS_YMM1_YMMV_M256_EVEX,
	VSUBPS_YMM1_YMMV_M32bcst256_EVEX,
	VSUBPS_ZMM1_ZMMV_ZMM2_EVEX,
	VSUBPS_ZMM1_ZMMV_M512_EVEX,
	VSUBPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VSUBSD_XMM1_XMMV_XMM2_VEX,
	VSUBSD_XMM1_XMMV_XMM2_EVEX,
	VSUBSD_XMM1_XMMV_M64_VEX,
	VSUBSD_XMM1_XMMV_M64_EVEX,
	VSUBSS_XMM1_XMMV_XMM2_VEX,
	VSUBSS_XMM1_XMMV_XMM2_EVEX,
	VSUBSS_XMM1_XMMV_M32_VEX,
	VSUBSS_XMM1_XMMV_M32_EVEX,
	VUCOMISD_XMM1_XMM2_VEX,
	VUCOMISD_XMM1_XMM2_EVEX,
	VUCOMISD_XMM1_M64_VEX,
	VUCOMISD_XMM1_M64_EVEX,
	VUCOMISS_XMM1_XMM2_VEX,
	VUCOMISS_XMM1_XMM2_EVEX,
	VUCOMISS_XMM1_M32_VEX,
	VUCOMISS_XMM1_M32_EVEX,
	VUNPCKHPD_XMM1_XMMV_XMM2_VEX,
	VUNPCKHPD_XMM1_XMMV_XMM2_EVEX,
	VUNPCKHPD_XMM1_XMMV_M128_VEX,
	VUNPCKHPD_XMM1_XMMV_M128_EVEX,
	VUNPCKHPD_XMM1_XMMV_M64bcst128_EVEX,
	VUNPCKHPD_YMM1_YMMV_YMM2_VEX,
	VUNPCKHPD_YMM1_YMMV_YMM2_EVEX,
	VUNPCKHPD_YMM1_YMMV_M256_VEX,
	VUNPCKHPD_YMM1_YMMV_M256_EVEX,
	VUNPCKHPD_YMM1_YMMV_M64bcst256_EVEX,
	VUNPCKHPD_ZMM1_ZMMV_ZMM2_EVEX,
	VUNPCKHPD_ZMM1_ZMMV_M512_EVEX,
	VUNPCKHPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VUNPCKHPS_XMM1_XMMV_XMM2_VEX,
	VUNPCKHPS_XMM1_XMMV_XMM2_EVEX,
	VUNPCKHPS_XMM1_XMMV_M128_VEX,
	VUNPCKHPS_XMM1_XMMV_M128_EVEX,
	VUNPCKHPS_XMM1_XMMV_M32bcst128_EVEX,
	VUNPCKHPS_YMM1_YMMV_YMM2_VEX,
	VUNPCKHPS_YMM1_YMMV_YMM2_EVEX,
	VUNPCKHPS_YMM1_YMMV_M256_VEX,
	VUNPCKHPS_YMM1_YMMV_M256_EVEX,
	VUNPCKHPS_YMM1_YMMV_M32bcst256_EVEX,
	VUNPCKHPS_ZMM1_ZMMV_ZMM2_EVEX,
	VUNPCKHPS_ZMM1_ZMMV_M512_EVEX,
	VUNPCKHPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VUNPCKLPD_XMM1_XMMV_XMM2_VEX,
	VUNPCKLPD_XMM1_XMMV_XMM2_EVEX,
	VUNPCKLPD_XMM1_XMMV_M128_VEX,
	VUNPCKLPD_XMM1_XMMV_M128_EVEX,
	VUNPCKLPD_XMM1_XMMV_M64bcst128_EVEX,
	VUNPCKLPD_YMM1_YMMV_YMM2_VEX,
	VUNPCKLPD_YMM1_YMMV_YMM2_EVEX,
	VUNPCKLPD_YMM1_YMMV_M256_VEX,
	VUNPCKLPD_YMM1_YMMV_M256_EVEX,
	VUNPCKLPD_YMM1_YMMV_M64bcst256_EVEX,
	VUNPCKLPD_ZMM1_ZMMV_ZMM2_EVEX,
	VUNPCKLPD_ZMM1_ZMMV_M512_EVEX,
	VUNPCKLPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VUNPCKLPS_XMM1_XMMV_XMM2_VEX,
	VUNPCKLPS_XMM1_XMMV_XMM2_EVEX,
	VUNPCKLPS_XMM1_XMMV_M128_VEX,
	VUNPCKLPS_XMM1_XMMV_M128_EVEX,
	VUNPCKLPS_XMM1_XMMV_M32bcst128_EVEX,
	VUNPCKLPS_YMM1_YMMV_YMM2_VEX,
	VUNPCKLPS_YMM1_YMMV_YMM2_EVEX,
	VUNPCKLPS_YMM1_YMMV_M256_VEX,
	VUNPCKLPS_YMM1_YMMV_M256_EVEX,
	VUNPCKLPS_YMM1_YMMV_M32bcst256_EVEX,
	VUNPCKLPS_ZMM1_ZMMV_ZMM2_EVEX,
	VUNPCKLPS_ZMM1_ZMMV_M512_EVEX,
	VUNPCKLPS_ZMM1_ZMMV_M32bcst512_EVEX,
	VXORPD_XMM1_XMMV_XMM2_VEX,
	VXORPD_XMM1_XMMV_XMM2_EVEX,
	VXORPD_XMM1_XMMV_M128_VEX,
	VXORPD_XMM1_XMMV_M128_EVEX,
	VXORPD_XMM1_XMMV_M64bcst128_EVEX,
	VXORPD_YMM1_YMMV_YMM2_VEX,
	VXORPD_YMM1_YMMV_YMM2_EVEX,
	VXORPD_YMM1_YMMV_M256_VEX,
	VXORPD_YMM1_YMMV_M256_EVEX,
	VXORPD_YMM1_YMMV_M64bcst256_EVEX,
	VXORPD_ZMM1_ZMMV_ZMM2_EVEX,
	VXORPD_ZMM1_ZMMV_M512_EVEX,
	VXORPD_ZMM1_ZMMV_M64bcst512_EVEX,
	VXORPS_XMM1_XMMV_XMM2_VEX,
	VXORPS_XMM1_XMMV_XMM2_EVEX,
	VXORPS_XMM1_XMMV_M128_VEX,
	VXORPS_XMM1_XMMV_M128_EVEX,
	VXORPS_XMM1_XMMV_M32bcst128_EVEX,
	VXORPS_YMM1_YMMV_YMM2_VEX,
	VXORPS_YMM1_YMMV_YMM2_EVEX,
	VXORPS_YMM1_YMMV_M256_VEX,
	VXORPS_YMM1_YMMV_M256_EVEX,
	VXORPS_YMM1_YMMV_M32bcst256_EVEX,
	VXORPS_ZMM1_ZMMV_ZMM2_EVEX,
	VXORPS_ZMM1_ZMMV_M512_EVEX,
	VXORPS_ZMM1_ZMMV_M32bcst512_EVEX,
	WAIT,
	WBINVD,
	WBNOINVD,
	WRFSBASE_Rmr32,
	WRFSBASE_Rmr64_REX,
	WRGSBASE_Rmr32,
	WRGSBASE_Rmr64_REX,
	WRMSR,
	WRPKRU,
	WRSSD_M32_R32,
	WRSSQ_M64_R64_REX,
	WRUSSD_M32_R32,
	WRUSSQ_M64_R64_REX,
	XABORT_Imm8,
	XADD_Rmr8_R8,
	XADD_Rmr16_R16,
	XADD_Rmr32_R32,
	XADD_Rmr64_R64_REX,
	XADD_M8_R8,
	XADD_M16_R16,
	XADD_M32_R32,
	XADD_M64_R64_REX,
	XBEGIN_Rel16,
	XBEGIN_Rel32,
	XCHG_AX_R16op,
	XCHG_EAX_R32op,
	XCHG_RAX_R64op_REX,
	XCHG_R8_Rmr8,
	XCHG_R8_M8,
	XCHG_R16_Rmr16,
	XCHG_R16_M16,
	XCHG_R32_Rmr32,
	XCHG_R32_M32,
	XCHG_R64_Rmr64_REX,
	XCHG_R64_M64_REX,
	XCHG_Rmr8_R8,
	XCHG_Rmr16_R16,
	XCHG_Rmr32_R32,
	XCHG_Rmr64_R64_REX,
	XCHG_R16op_AX,
	XCHG_R32op_EAX,
	XCHG_R64op_RAX_REX,
	XCHG_M8_R8,
	XCHG_M16_R16,
	XCHG_M32_R32,
	XCHG_M64_R64_REX,
	XEND,
	XGETBV,
	XLATB,
	XLATB_REX,
	XOR_AL_Imm8,
	XOR_AX_Imm16,
	XOR_EAX_Imm32,
	XOR_RAX_Imm32_REX,
	XOR_R8_Rmr8,
	XOR_R8_M8,
	XOR_R16_Rmr16,
	XOR_R16_M16,
	XOR_R32_Rmr32,
	XOR_R32_M32,
	XOR_R64_Rmr64_REX,
	XOR_R64_M64_REX,
	XOR_Rmr8_Imm8,
	XOR_Rmr8_R8,
	XOR_Rmr16_Imm8,
	XOR_Rmr16_Imm16,
	XOR_Rmr16_R16,
	XOR_Rmr32_Imm8,
	XOR_Rmr32_Imm32,
	XOR_Rmr32_R32,
	XOR_Rmr64_Imm8_REX,
	XOR_Rmr64_Imm32_REX,
	XOR_Rmr64_R64_REX,
	XOR_M8_Imm8,
	XOR_M8_R8,
	XOR_M16_Imm8,
	XOR_M16_Imm16,
	XOR_M16_R16,
	XOR_M32_Imm8,
	XOR_M32_Imm32,
	XOR_M32_R32,
	XOR_M64_Imm8_REX,
	XOR_M64_Imm32_REX,
	XOR_M64_R64_REX,
	XORPD_XMM1_XMM2,
	XORPD_XMM1_M128,
	XORPS_XMM1_XMM2,
	XORPS_XMM1_M128,
	XRESLDTRK,
	XRSTOR_M,
	XRSTOR64_M_REX,
	XRSTORS_M,
	XRSTORS64_M_REX,
	XSAVE_M,
	XSAVE64_M_REX,
	XSAVEC_M,
	XSAVEC64_M_REX,
	XSAVEOPT_M,
	XSAVEOPT64_M_REX,
	XSAVES_M,
	XSAVES64_M_REX,
	XSETBV,
	XSUSLDTRK,
	XTEST,
}

var InstructionsByUID = map[string]*Instruction{
	"AAA":                                  AAA,
	"AAD":                                  AAD,
	"AAD_Imm8u":                            AAD_Imm8u,
	"AAM":                                  AAM,
	"AAM_Imm8u":                            AAM_Imm8u,
	"AAS":                                  AAS,
	"ADC_AL_Imm8":                          ADC_AL_Imm8,
	"ADC_AX_Imm16":                         ADC_AX_Imm16,
	"ADC_EAX_Imm32":                        ADC_EAX_Imm32,
	"ADC_RAX_Imm32_REX":                    ADC_RAX_Imm32_REX,
	"ADC_R8_Rmr8":                          ADC_R8_Rmr8,
	"ADC_R8_M8":                            ADC_R8_M8,
	"ADC_R16_Rmr16":                        ADC_R16_Rmr16,
	"ADC_R16_M16":                          ADC_R16_M16,
	"ADC_R32_Rmr32":                        ADC_R32_Rmr32,
	"ADC_R32_M32":                          ADC_R32_M32,
	"ADC_R64_Rmr64_REX":                    ADC_R64_Rmr64_REX,
	"ADC_R64_M64_REX":                      ADC_R64_M64_REX,
	"ADC_Rmr8_Imm8":                        ADC_Rmr8_Imm8,
	"ADC_Rmr8_R8":                          ADC_Rmr8_R8,
	"ADC_Rmr16_Imm8":                       ADC_Rmr16_Imm8,
	"ADC_Rmr16_Imm16":                      ADC_Rmr16_Imm16,
	"ADC_Rmr16_R16":                        ADC_Rmr16_R16,
	"ADC_Rmr32_Imm8":                       ADC_Rmr32_Imm8,
	"ADC_Rmr32_Imm32":                      ADC_Rmr32_Imm32,
	"ADC_Rmr32_R32":                        ADC_Rmr32_R32,
	"ADC_Rmr64_Imm8_REX":                   ADC_Rmr64_Imm8_REX,
	"ADC_Rmr64_Imm32_REX":                  ADC_Rmr64_Imm32_REX,
	"ADC_Rmr64_R64_REX":                    ADC_Rmr64_R64_REX,
	"ADC_M8_Imm8":                          ADC_M8_Imm8,
	"ADC_M8_R8":                            ADC_M8_R8,
	"ADC_M16_Imm8":                         ADC_M16_Imm8,
	"ADC_M16_Imm16":                        ADC_M16_Imm16,
	"ADC_M16_R16":                          ADC_M16_R16,
	"ADC_M32_Imm8":                         ADC_M32_Imm8,
	"ADC_M32_Imm32":                        ADC_M32_Imm32,
	"ADC_M32_R32":                          ADC_M32_R32,
	"ADC_M64_Imm8_REX":                     ADC_M64_Imm8_REX,
	"ADC_M64_Imm32_REX":                    ADC_M64_Imm32_REX,
	"ADC_M64_R64_REX":                      ADC_M64_R64_REX,
	"ADCX_R32_Rmr32":                       ADCX_R32_Rmr32,
	"ADCX_R32_M32":                         ADCX_R32_M32,
	"ADCX_R64_Rmr64_REX":                   ADCX_R64_Rmr64_REX,
	"ADCX_R64_M64_REX":                     ADCX_R64_M64_REX,
	"ADD_AL_Imm8":                          ADD_AL_Imm8,
	"ADD_AX_Imm16":                         ADD_AX_Imm16,
	"ADD_EAX_Imm32":                        ADD_EAX_Imm32,
	"ADD_RAX_Imm32_REX":                    ADD_RAX_Imm32_REX,
	"ADD_R8_Rmr8":                          ADD_R8_Rmr8,
	"ADD_R8_M8":                            ADD_R8_M8,
	"ADD_R16_Rmr16":                        ADD_R16_Rmr16,
	"ADD_R16_M16":                          ADD_R16_M16,
	"ADD_R32_Rmr32":                        ADD_R32_Rmr32,
	"ADD_R32_M32":                          ADD_R32_M32,
	"ADD_R64_Rmr64_REX":                    ADD_R64_Rmr64_REX,
	"ADD_R64_M64_REX":                      ADD_R64_M64_REX,
	"ADD_Rmr8_Imm8":                        ADD_Rmr8_Imm8,
	"ADD_Rmr8_R8":                          ADD_Rmr8_R8,
	"ADD_Rmr16_Imm8":                       ADD_Rmr16_Imm8,
	"ADD_Rmr16_Imm16":                      ADD_Rmr16_Imm16,
	"ADD_Rmr16_R16":                        ADD_Rmr16_R16,
	"ADD_Rmr32_Imm8":                       ADD_Rmr32_Imm8,
	"ADD_Rmr32_Imm32":                      ADD_Rmr32_Imm32,
	"ADD_Rmr32_R32":                        ADD_Rmr32_R32,
	"ADD_Rmr64_Imm8_REX":                   ADD_Rmr64_Imm8_REX,
	"ADD_Rmr64_Imm32_REX":                  ADD_Rmr64_Imm32_REX,
	"ADD_Rmr64_R64_REX":                    ADD_Rmr64_R64_REX,
	"ADD_M8_Imm8":                          ADD_M8_Imm8,
	"ADD_M8_R8":                            ADD_M8_R8,
	"ADD_M16_Imm8":                         ADD_M16_Imm8,
	"ADD_M16_Imm16":                        ADD_M16_Imm16,
	"ADD_M16_R16":                          ADD_M16_R16,
	"ADD_M32_Imm8":                         ADD_M32_Imm8,
	"ADD_M32_Imm32":                        ADD_M32_Imm32,
	"ADD_M32_R32":                          ADD_M32_R32,
	"ADD_M64_Imm8_REX":                     ADD_M64_Imm8_REX,
	"ADD_M64_Imm32_REX":                    ADD_M64_Imm32_REX,
	"ADD_M64_R64_REX":                      ADD_M64_R64_REX,
	"ADDPD_XMM1_XMM2":                      ADDPD_XMM1_XMM2,
	"ADDPD_XMM1_M128":                      ADDPD_XMM1_M128,
	"ADDPS_XMM1_XMM2":                      ADDPS_XMM1_XMM2,
	"ADDPS_XMM1_M128":                      ADDPS_XMM1_M128,
	"ADDSD_XMM1_XMM2":                      ADDSD_XMM1_XMM2,
	"ADDSD_XMM1_M64":                       ADDSD_XMM1_M64,
	"ADDSS_XMM1_XMM2":                      ADDSS_XMM1_XMM2,
	"ADDSS_XMM1_M32":                       ADDSS_XMM1_M32,
	"ADDSUBPD_XMM1_XMM2":                   ADDSUBPD_XMM1_XMM2,
	"ADDSUBPD_XMM1_M128":                   ADDSUBPD_XMM1_M128,
	"ADDSUBPS_XMM1_XMM2":                   ADDSUBPS_XMM1_XMM2,
	"ADDSUBPS_XMM1_M128":                   ADDSUBPS_XMM1_M128,
	"ADOX_R32_Rmr32":                       ADOX_R32_Rmr32,
	"ADOX_R32_M32":                         ADOX_R32_M32,
	"ADOX_R64_Rmr64_REX":                   ADOX_R64_Rmr64_REX,
	"ADOX_R64_M64_REX":                     ADOX_R64_M64_REX,
	"AESDEC_XMM1_XMM2":                     AESDEC_XMM1_XMM2,
	"AESDEC_XMM1_M128":                     AESDEC_XMM1_M128,
	"AESDEC128KL_XMM1_M384":                AESDEC128KL_XMM1_M384,
	"AESDEC256KL_XMM1_M512":                AESDEC256KL_XMM1_M512,
	"AESDECLAST_XMM1_XMM2":                 AESDECLAST_XMM1_XMM2,
	"AESDECLAST_XMM1_M128":                 AESDECLAST_XMM1_M128,
	"AESDECWIDE128KL_M384":                 AESDECWIDE128KL_M384,
	"AESDECWIDE256KL_M512":                 AESDECWIDE256KL_M512,
	"AESENC_XMM1_XMM2":                     AESENC_XMM1_XMM2,
	"AESENC_XMM1_M128":                     AESENC_XMM1_M128,
	"AESENC128KL_XMM1_M384":                AESENC128KL_XMM1_M384,
	"AESENC256KL_XMM1_M512":                AESENC256KL_XMM1_M512,
	"AESENCLAST_XMM1_XMM2":                 AESENCLAST_XMM1_XMM2,
	"AESENCLAST_XMM1_M128":                 AESENCLAST_XMM1_M128,
	"AESENCWIDE128KL_M384":                 AESENCWIDE128KL_M384,
	"AESENCWIDE256KL_M512":                 AESENCWIDE256KL_M512,
	"AESIMC_XMM1_XMM2":                     AESIMC_XMM1_XMM2,
	"AESIMC_XMM1_M128":                     AESIMC_XMM1_M128,
	"AESKEYGENASSIST_XMM1_XMM2_Imm8":       AESKEYGENASSIST_XMM1_XMM2_Imm8,
	"AESKEYGENASSIST_XMM1_M128_Imm8":       AESKEYGENASSIST_XMM1_M128_Imm8,
	"AND_AL_Imm8":                          AND_AL_Imm8,
	"AND_AX_Imm16":                         AND_AX_Imm16,
	"AND_EAX_Imm32":                        AND_EAX_Imm32,
	"AND_RAX_Imm32_REX":                    AND_RAX_Imm32_REX,
	"AND_R8_Rmr8":                          AND_R8_Rmr8,
	"AND_R8_M8":                            AND_R8_M8,
	"AND_R16_Rmr16":                        AND_R16_Rmr16,
	"AND_R16_M16":                          AND_R16_M16,
	"AND_R32_Rmr32":                        AND_R32_Rmr32,
	"AND_R32_M32":                          AND_R32_M32,
	"AND_R64_Rmr64_REX":                    AND_R64_Rmr64_REX,
	"AND_R64_M64_REX":                      AND_R64_M64_REX,
	"AND_Rmr8_Imm8":                        AND_Rmr8_Imm8,
	"AND_Rmr8_R8":                          AND_Rmr8_R8,
	"AND_Rmr16_Imm8":                       AND_Rmr16_Imm8,
	"AND_Rmr16_Imm16":                      AND_Rmr16_Imm16,
	"AND_Rmr16_R16":                        AND_Rmr16_R16,
	"AND_Rmr32_Imm8":                       AND_Rmr32_Imm8,
	"AND_Rmr32_Imm32":                      AND_Rmr32_Imm32,
	"AND_Rmr32_R32":                        AND_Rmr32_R32,
	"AND_Rmr64_Imm8_REX":                   AND_Rmr64_Imm8_REX,
	"AND_Rmr64_Imm32_REX":                  AND_Rmr64_Imm32_REX,
	"AND_Rmr64_R64_REX":                    AND_Rmr64_R64_REX,
	"AND_M8_Imm8":                          AND_M8_Imm8,
	"AND_M8_R8":                            AND_M8_R8,
	"AND_M16_Imm8":                         AND_M16_Imm8,
	"AND_M16_Imm16":                        AND_M16_Imm16,
	"AND_M16_R16":                          AND_M16_R16,
	"AND_M32_Imm8":                         AND_M32_Imm8,
	"AND_M32_Imm32":                        AND_M32_Imm32,
	"AND_M32_R32":                          AND_M32_R32,
	"AND_M64_Imm8_REX":                     AND_M64_Imm8_REX,
	"AND_M64_Imm32_REX":                    AND_M64_Imm32_REX,
	"AND_M64_R64_REX":                      AND_M64_R64_REX,
	"ANDN_R32_R32V_Rmr32_VEX":              ANDN_R32_R32V_Rmr32_VEX,
	"ANDN_R32_R32V_M32_VEX":                ANDN_R32_R32V_M32_VEX,
	"ANDN_R64_R64V_Rmr64_VEX":              ANDN_R64_R64V_Rmr64_VEX,
	"ANDN_R64_R64V_M64_VEX":                ANDN_R64_R64V_M64_VEX,
	"ANDNPD_XMM1_XMM2":                     ANDNPD_XMM1_XMM2,
	"ANDNPD_XMM1_M128":                     ANDNPD_XMM1_M128,
	"ANDNPS_XMM1_XMM2":                     ANDNPS_XMM1_XMM2,
	"ANDNPS_XMM1_M128":                     ANDNPS_XMM1_M128,
	"ANDPD_XMM1_XMM2":                      ANDPD_XMM1_XMM2,
	"ANDPD_XMM1_M128":                      ANDPD_XMM1_M128,
	"ANDPS_XMM1_XMM2":                      ANDPS_XMM1_XMM2,
	"ANDPS_XMM1_M128":                      ANDPS_XMM1_M128,
	"ARPL_Rmr16_R16":                       ARPL_Rmr16_R16,
	"ARPL_M16_R16":                         ARPL_M16_R16,
	"BEXTR_R32_Rmr32_R32V_VEX":             BEXTR_R32_Rmr32_R32V_VEX,
	"BEXTR_R32_M32_R32V_VEX":               BEXTR_R32_M32_R32V_VEX,
	"BEXTR_R64_Rmr64_R64V_VEX":             BEXTR_R64_Rmr64_R64V_VEX,
	"BEXTR_R64_M64_R64V_VEX":               BEXTR_R64_M64_R64V_VEX,
	"BLENDPD_XMM1_XMM2_Imm8":               BLENDPD_XMM1_XMM2_Imm8,
	"BLENDPD_XMM1_M128_Imm8":               BLENDPD_XMM1_M128_Imm8,
	"BLENDPS_XMM1_XMM2_Imm8":               BLENDPS_XMM1_XMM2_Imm8,
	"BLENDPS_XMM1_M128_Imm8":               BLENDPS_XMM1_M128_Imm8,
	"BLENDVPD_XMM1_XMM2":                   BLENDVPD_XMM1_XMM2,
	"BLENDVPD_XMM1_M128":                   BLENDVPD_XMM1_M128,
	"BLENDVPD_XMM1_XMM2_XMM0":              BLENDVPD_XMM1_XMM2_XMM0,
	"BLENDVPD_XMM1_M128_XMM0":              BLENDVPD_XMM1_M128_XMM0,
	"BLENDVPS_XMM1_XMM2":                   BLENDVPS_XMM1_XMM2,
	"BLENDVPS_XMM1_M128":                   BLENDVPS_XMM1_M128,
	"BLENDVPS_XMM1_XMM2_XMM0":              BLENDVPS_XMM1_XMM2_XMM0,
	"BLENDVPS_XMM1_M128_XMM0":              BLENDVPS_XMM1_M128_XMM0,
	"BLSI_R32V_Rmr32_VEX":                  BLSI_R32V_Rmr32_VEX,
	"BLSI_R32V_M32_VEX":                    BLSI_R32V_M32_VEX,
	"BLSI_R64V_Rmr64_VEX":                  BLSI_R64V_Rmr64_VEX,
	"BLSI_R64V_M64_VEX":                    BLSI_R64V_M64_VEX,
	"BLSMSK_R32V_Rmr32_VEX":                BLSMSK_R32V_Rmr32_VEX,
	"BLSMSK_R32V_M32_VEX":                  BLSMSK_R32V_M32_VEX,
	"BLSMSK_R64V_Rmr64_VEX":                BLSMSK_R64V_Rmr64_VEX,
	"BLSMSK_R64V_M64_VEX":                  BLSMSK_R64V_M64_VEX,
	"BLSR_R32V_Rmr32_VEX":                  BLSR_R32V_Rmr32_VEX,
	"BLSR_R32V_M32_VEX":                    BLSR_R32V_M32_VEX,
	"BLSR_R64V_Rmr64_VEX":                  BLSR_R64V_Rmr64_VEX,
	"BLSR_R64V_M64_VEX":                    BLSR_R64V_M64_VEX,
	"BOUND_R16_M16x16":                     BOUND_R16_M16x16,
	"BOUND_R32_M32x32":                     BOUND_R32_M32x32,
	"BSF_R16_Rmr16":                        BSF_R16_Rmr16,
	"BSF_R16_M16":                          BSF_R16_M16,
	"BSF_R32_Rmr32":                        BSF_R32_Rmr32,
	"BSF_R32_M32":                          BSF_R32_M32,
	"BSF_R64_Rmr64_REX":                    BSF_R64_Rmr64_REX,
	"BSF_R64_M64_REX":                      BSF_R64_M64_REX,
	"BSR_R16_Rmr16":                        BSR_R16_Rmr16,
	"BSR_R16_M16":                          BSR_R16_M16,
	"BSR_R32_Rmr32":                        BSR_R32_Rmr32,
	"BSR_R32_M32":                          BSR_R32_M32,
	"BSR_R64_Rmr64_REX":                    BSR_R64_Rmr64_REX,
	"BSR_R64_M64_REX":                      BSR_R64_M64_REX,
	"BSWAP_R32op":                          BSWAP_R32op,
	"BSWAP_R64op_REX":                      BSWAP_R64op_REX,
	"BT_Rmr16_Imm8":                        BT_Rmr16_Imm8,
	"BT_Rmr16_R16":                         BT_Rmr16_R16,
	"BT_Rmr32_Imm8":                        BT_Rmr32_Imm8,
	"BT_Rmr32_R32":                         BT_Rmr32_R32,
	"BT_Rmr64_Imm8_REX":                    BT_Rmr64_Imm8_REX,
	"BT_Rmr64_R64_REX":                     BT_Rmr64_R64_REX,
	"BT_M16_Imm8":                          BT_M16_Imm8,
	"BT_M16_R16":                           BT_M16_R16,
	"BT_M32_Imm8":                          BT_M32_Imm8,
	"BT_M32_R32":                           BT_M32_R32,
	"BT_M64_Imm8_REX":                      BT_M64_Imm8_REX,
	"BT_M64_R64_REX":                       BT_M64_R64_REX,
	"BTC_Rmr16_Imm8":                       BTC_Rmr16_Imm8,
	"BTC_Rmr16_R16":                        BTC_Rmr16_R16,
	"BTC_Rmr32_Imm8":                       BTC_Rmr32_Imm8,
	"BTC_Rmr32_R32":                        BTC_Rmr32_R32,
	"BTC_Rmr64_Imm8_REX":                   BTC_Rmr64_Imm8_REX,
	"BTC_Rmr64_R64_REX":                    BTC_Rmr64_R64_REX,
	"BTC_M16_Imm8":                         BTC_M16_Imm8,
	"BTC_M16_R16":                          BTC_M16_R16,
	"BTC_M32_Imm8":                         BTC_M32_Imm8,
	"BTC_M32_R32":                          BTC_M32_R32,
	"BTC_M64_Imm8_REX":                     BTC_M64_Imm8_REX,
	"BTC_M64_R64_REX":                      BTC_M64_R64_REX,
	"BTR_Rmr16_Imm8":                       BTR_Rmr16_Imm8,
	"BTR_Rmr16_R16":                        BTR_Rmr16_R16,
	"BTR_Rmr32_Imm8":                       BTR_Rmr32_Imm8,
	"BTR_Rmr32_R32":                        BTR_Rmr32_R32,
	"BTR_Rmr64_Imm8_REX":                   BTR_Rmr64_Imm8_REX,
	"BTR_Rmr64_R64_REX":                    BTR_Rmr64_R64_REX,
	"BTR_M16_Imm8":                         BTR_M16_Imm8,
	"BTR_M16_R16":                          BTR_M16_R16,
	"BTR_M32_Imm8":                         BTR_M32_Imm8,
	"BTR_M32_R32":                          BTR_M32_R32,
	"BTR_M64_Imm8_REX":                     BTR_M64_Imm8_REX,
	"BTR_M64_R64_REX":                      BTR_M64_R64_REX,
	"BTS_Rmr16_Imm8":                       BTS_Rmr16_Imm8,
	"BTS_Rmr16_R16":                        BTS_Rmr16_R16,
	"BTS_Rmr32_Imm8":                       BTS_Rmr32_Imm8,
	"BTS_Rmr32_R32":                        BTS_Rmr32_R32,
	"BTS_Rmr64_Imm8_REX":                   BTS_Rmr64_Imm8_REX,
	"BTS_Rmr64_R64_REX":                    BTS_Rmr64_R64_REX,
	"BTS_M16_Imm8":                         BTS_M16_Imm8,
	"BTS_M16_R16":                          BTS_M16_R16,
	"BTS_M32_Imm8":                         BTS_M32_Imm8,
	"BTS_M32_R32":                          BTS_M32_R32,
	"BTS_M64_Imm8_REX":                     BTS_M64_Imm8_REX,
	"BTS_M64_R64_REX":                      BTS_M64_R64_REX,
	"BZHI_R32_Rmr32_R32V_VEX":              BZHI_R32_Rmr32_R32V_VEX,
	"BZHI_R32_M32_R32V_VEX":                BZHI_R32_M32_R32V_VEX,
	"BZHI_R64_Rmr64_R64V_VEX":              BZHI_R64_Rmr64_R64V_VEX,
	"BZHI_R64_M64_R64V_VEX":                BZHI_R64_M64_R64V_VEX,
	"CALL_Rel16":                           CALL_Rel16,
	"CALL_Rel32":                           CALL_Rel32,
	"CALL_Rmr16":                           CALL_Rmr16,
	"CALL_Rmr32":                           CALL_Rmr32,
	"CALL_Rmr64":                           CALL_Rmr64,
	"CALL_M16":                             CALL_M16,
	"CALL_M32":                             CALL_M32,
	"CALL_M64":                             CALL_M64,
	"CALL_FAR_Ptr16v16":                    CALL_FAR_Ptr16v16,
	"CALL_FAR_Ptr16v32":                    CALL_FAR_Ptr16v32,
	"CALL_FAR_M16v16":                      CALL_FAR_M16v16,
	"CALL_FAR_M16v32":                      CALL_FAR_M16v32,
	"CALL_FAR_M16v64":                      CALL_FAR_M16v64,
	"CBW":                                  CBW,
	"CDQ":                                  CDQ,
	"CDQE_REX":                             CDQE_REX,
	"CLAC":                                 CLAC,
	"CLC":                                  CLC,
	"CLD":                                  CLD,
	"CLDEMOTE_M8":                          CLDEMOTE_M8,
	"CLFLUSH_M8":                           CLFLUSH_M8,
	"CLFLUSHOPT_M8":                        CLFLUSHOPT_M8,
	"CLGI":                                 CLGI,
	"CLI":                                  CLI,
	"CLRSSBSY_M64":                         CLRSSBSY_M64,
	"CLTS":                                 CLTS,
	"CLUI":                                 CLUI,
	"CLWB_M8":                              CLWB_M8,
	"CMC":                                  CMC,
	"CMOVA_R16_Rmr16":                      CMOVA_R16_Rmr16,
	"CMOVA_R16_M16":                        CMOVA_R16_M16,
	"CMOVA_R32_Rmr32":                      CMOVA_R32_Rmr32,
	"CMOVA_R32_M32":                        CMOVA_R32_M32,
	"CMOVA_R64_Rmr64_REX":                  CMOVA_R64_Rmr64_REX,
	"CMOVA_R64_M64_REX":                    CMOVA_R64_M64_REX,
	"CMOVAE_R16_Rmr16":                     CMOVAE_R16_Rmr16,
	"CMOVAE_R16_M16":                       CMOVAE_R16_M16,
	"CMOVAE_R32_Rmr32":                     CMOVAE_R32_Rmr32,
	"CMOVAE_R32_M32":                       CMOVAE_R32_M32,
	"CMOVAE_R64_Rmr64_REX":                 CMOVAE_R64_Rmr64_REX,
	"CMOVAE_R64_M64_REX":                   CMOVAE_R64_M64_REX,
	"CMOVB_R16_Rmr16":                      CMOVB_R16_Rmr16,
	"CMOVB_R16_M16":                        CMOVB_R16_M16,
	"CMOVB_R32_Rmr32":                      CMOVB_R32_Rmr32,
	"CMOVB_R32_M32":                        CMOVB_R32_M32,
	"CMOVB_R64_Rmr64_REX":                  CMOVB_R64_Rmr64_REX,
	"CMOVB_R64_M64_REX":                    CMOVB_R64_M64_REX,
	"CMOVBE_R16_Rmr16":                     CMOVBE_R16_Rmr16,
	"CMOVBE_R16_M16":                       CMOVBE_R16_M16,
	"CMOVBE_R32_Rmr32":                     CMOVBE_R32_Rmr32,
	"CMOVBE_R32_M32":                       CMOVBE_R32_M32,
	"CMOVBE_R64_Rmr64_REX":                 CMOVBE_R64_Rmr64_REX,
	"CMOVBE_R64_M64_REX":                   CMOVBE_R64_M64_REX,
	"CMOVC_R16_Rmr16":                      CMOVC_R16_Rmr16,
	"CMOVC_R16_M16":                        CMOVC_R16_M16,
	"CMOVC_R32_Rmr32":                      CMOVC_R32_Rmr32,
	"CMOVC_R32_M32":                        CMOVC_R32_M32,
	"CMOVC_R64_Rmr64_REX":                  CMOVC_R64_Rmr64_REX,
	"CMOVC_R64_M64_REX":                    CMOVC_R64_M64_REX,
	"CMOVE_R16_Rmr16":                      CMOVE_R16_Rmr16,
	"CMOVE_R16_M16":                        CMOVE_R16_M16,
	"CMOVE_R32_Rmr32":                      CMOVE_R32_Rmr32,
	"CMOVE_R32_M32":                        CMOVE_R32_M32,
	"CMOVE_R64_Rmr64_REX":                  CMOVE_R64_Rmr64_REX,
	"CMOVE_R64_M64_REX":                    CMOVE_R64_M64_REX,
	"CMOVG_R16_Rmr16":                      CMOVG_R16_Rmr16,
	"CMOVG_R16_M16":                        CMOVG_R16_M16,
	"CMOVG_R32_Rmr32":                      CMOVG_R32_Rmr32,
	"CMOVG_R32_M32":                        CMOVG_R32_M32,
	"CMOVG_R64_Rmr64_REX":                  CMOVG_R64_Rmr64_REX,
	"CMOVG_R64_M64_REX":                    CMOVG_R64_M64_REX,
	"CMOVGE_R16_Rmr16":                     CMOVGE_R16_Rmr16,
	"CMOVGE_R16_M16":                       CMOVGE_R16_M16,
	"CMOVGE_R32_Rmr32":                     CMOVGE_R32_Rmr32,
	"CMOVGE_R32_M32":                       CMOVGE_R32_M32,
	"CMOVGE_R64_Rmr64_REX":                 CMOVGE_R64_Rmr64_REX,
	"CMOVGE_R64_M64_REX":                   CMOVGE_R64_M64_REX,
	"CMOVL_R16_Rmr16":                      CMOVL_R16_Rmr16,
	"CMOVL_R16_M16":                        CMOVL_R16_M16,
	"CMOVL_R32_Rmr32":                      CMOVL_R32_Rmr32,
	"CMOVL_R32_M32":                        CMOVL_R32_M32,
	"CMOVL_R64_Rmr64_REX":                  CMOVL_R64_Rmr64_REX,
	"CMOVL_R64_M64_REX":                    CMOVL_R64_M64_REX,
	"CMOVLE_R16_Rmr16":                     CMOVLE_R16_Rmr16,
	"CMOVLE_R16_M16":                       CMOVLE_R16_M16,
	"CMOVLE_R32_Rmr32":                     CMOVLE_R32_Rmr32,
	"CMOVLE_R32_M32":                       CMOVLE_R32_M32,
	"CMOVLE_R64_Rmr64_REX":                 CMOVLE_R64_Rmr64_REX,
	"CMOVLE_R64_M64_REX":                   CMOVLE_R64_M64_REX,
	"CMOVNA_R16_Rmr16":                     CMOVNA_R16_Rmr16,
	"CMOVNA_R16_M16":                       CMOVNA_R16_M16,
	"CMOVNA_R32_Rmr32":                     CMOVNA_R32_Rmr32,
	"CMOVNA_R32_M32":                       CMOVNA_R32_M32,
	"CMOVNA_R64_Rmr64_REX":                 CMOVNA_R64_Rmr64_REX,
	"CMOVNA_R64_M64_REX":                   CMOVNA_R64_M64_REX,
	"CMOVNAE_R16_Rmr16":                    CMOVNAE_R16_Rmr16,
	"CMOVNAE_R16_M16":                      CMOVNAE_R16_M16,
	"CMOVNAE_R32_Rmr32":                    CMOVNAE_R32_Rmr32,
	"CMOVNAE_R32_M32":                      CMOVNAE_R32_M32,
	"CMOVNAE_R64_Rmr64_REX":                CMOVNAE_R64_Rmr64_REX,
	"CMOVNAE_R64_M64_REX":                  CMOVNAE_R64_M64_REX,
	"CMOVNB_R16_Rmr16":                     CMOVNB_R16_Rmr16,
	"CMOVNB_R16_M16":                       CMOVNB_R16_M16,
	"CMOVNB_R32_Rmr32":                     CMOVNB_R32_Rmr32,
	"CMOVNB_R32_M32":                       CMOVNB_R32_M32,
	"CMOVNB_R64_Rmr64_REX":                 CMOVNB_R64_Rmr64_REX,
	"CMOVNB_R64_M64_REX":                   CMOVNB_R64_M64_REX,
	"CMOVNBE_R16_Rmr16":                    CMOVNBE_R16_Rmr16,
	"CMOVNBE_R16_M16":                      CMOVNBE_R16_M16,
	"CMOVNBE_R32_Rmr32":                    CMOVNBE_R32_Rmr32,
	"CMOVNBE_R32_M32":                      CMOVNBE_R32_M32,
	"CMOVNBE_R64_Rmr64_REX":                CMOVNBE_R64_Rmr64_REX,
	"CMOVNBE_R64_M64_REX":                  CMOVNBE_R64_M64_REX,
	"CMOVNC_R16_Rmr16":                     CMOVNC_R16_Rmr16,
	"CMOVNC_R16_M16":                       CMOVNC_R16_M16,
	"CMOVNC_R32_Rmr32":                     CMOVNC_R32_Rmr32,
	"CMOVNC_R32_M32":                       CMOVNC_R32_M32,
	"CMOVNC_R64_Rmr64_REX":                 CMOVNC_R64_Rmr64_REX,
	"CMOVNC_R64_M64_REX":                   CMOVNC_R64_M64_REX,
	"CMOVNE_R16_Rmr16":                     CMOVNE_R16_Rmr16,
	"CMOVNE_R16_M16":                       CMOVNE_R16_M16,
	"CMOVNE_R32_Rmr32":                     CMOVNE_R32_Rmr32,
	"CMOVNE_R32_M32":                       CMOVNE_R32_M32,
	"CMOVNE_R64_Rmr64_REX":                 CMOVNE_R64_Rmr64_REX,
	"CMOVNE_R64_M64_REX":                   CMOVNE_R64_M64_REX,
	"CMOVNG_R16_Rmr16":                     CMOVNG_R16_Rmr16,
	"CMOVNG_R16_M16":                       CMOVNG_R16_M16,
	"CMOVNG_R32_Rmr32":                     CMOVNG_R32_Rmr32,
	"CMOVNG_R32_M32":                       CMOVNG_R32_M32,
	"CMOVNG_R64_Rmr64_REX":                 CMOVNG_R64_Rmr64_REX,
	"CMOVNG_R64_M64_REX":                   CMOVNG_R64_M64_REX,
	"CMOVNGE_R16_Rmr16":                    CMOVNGE_R16_Rmr16,
	"CMOVNGE_R16_M16":                      CMOVNGE_R16_M16,
	"CMOVNGE_R32_Rmr32":                    CMOVNGE_R32_Rmr32,
	"CMOVNGE_R32_M32":                      CMOVNGE_R32_M32,
	"CMOVNGE_R64_Rmr64_REX":                CMOVNGE_R64_Rmr64_REX,
	"CMOVNGE_R64_M64_REX":                  CMOVNGE_R64_M64_REX,
	"CMOVNL_R16_Rmr16":                     CMOVNL_R16_Rmr16,
	"CMOVNL_R16_M16":                       CMOVNL_R16_M16,
	"CMOVNL_R32_Rmr32":                     CMOVNL_R32_Rmr32,
	"CMOVNL_R32_M32":                       CMOVNL_R32_M32,
	"CMOVNL_R64_Rmr64_REX":                 CMOVNL_R64_Rmr64_REX,
	"CMOVNL_R64_M64_REX":                   CMOVNL_R64_M64_REX,
	"CMOVNLE_R16_Rmr16":                    CMOVNLE_R16_Rmr16,
	"CMOVNLE_R16_M16":                      CMOVNLE_R16_M16,
	"CMOVNLE_R32_Rmr32":                    CMOVNLE_R32_Rmr32,
	"CMOVNLE_R32_M32":                      CMOVNLE_R32_M32,
	"CMOVNLE_R64_Rmr64_REX":                CMOVNLE_R64_Rmr64_REX,
	"CMOVNLE_R64_M64_REX":                  CMOVNLE_R64_M64_REX,
	"CMOVNO_R16_Rmr16":                     CMOVNO_R16_Rmr16,
	"CMOVNO_R16_M16":                       CMOVNO_R16_M16,
	"CMOVNO_R32_Rmr32":                     CMOVNO_R32_Rmr32,
	"CMOVNO_R32_M32":                       CMOVNO_R32_M32,
	"CMOVNO_R64_Rmr64_REX":                 CMOVNO_R64_Rmr64_REX,
	"CMOVNO_R64_M64_REX":                   CMOVNO_R64_M64_REX,
	"CMOVNP_R16_Rmr16":                     CMOVNP_R16_Rmr16,
	"CMOVNP_R16_M16":                       CMOVNP_R16_M16,
	"CMOVNP_R32_Rmr32":                     CMOVNP_R32_Rmr32,
	"CMOVNP_R32_M32":                       CMOVNP_R32_M32,
	"CMOVNP_R64_Rmr64_REX":                 CMOVNP_R64_Rmr64_REX,
	"CMOVNP_R64_M64_REX":                   CMOVNP_R64_M64_REX,
	"CMOVNS_R16_Rmr16":                     CMOVNS_R16_Rmr16,
	"CMOVNS_R16_M16":                       CMOVNS_R16_M16,
	"CMOVNS_R32_Rmr32":                     CMOVNS_R32_Rmr32,
	"CMOVNS_R32_M32":                       CMOVNS_R32_M32,
	"CMOVNS_R64_Rmr64_REX":                 CMOVNS_R64_Rmr64_REX,
	"CMOVNS_R64_M64_REX":                   CMOVNS_R64_M64_REX,
	"CMOVNZ_R16_Rmr16":                     CMOVNZ_R16_Rmr16,
	"CMOVNZ_R16_M16":                       CMOVNZ_R16_M16,
	"CMOVNZ_R32_Rmr32":                     CMOVNZ_R32_Rmr32,
	"CMOVNZ_R32_M32":                       CMOVNZ_R32_M32,
	"CMOVNZ_R64_Rmr64_REX":                 CMOVNZ_R64_Rmr64_REX,
	"CMOVNZ_R64_M64_REX":                   CMOVNZ_R64_M64_REX,
	"CMOVO_R16_Rmr16":                      CMOVO_R16_Rmr16,
	"CMOVO_R16_M16":                        CMOVO_R16_M16,
	"CMOVO_R32_Rmr32":                      CMOVO_R32_Rmr32,
	"CMOVO_R32_M32":                        CMOVO_R32_M32,
	"CMOVO_R64_Rmr64_REX":                  CMOVO_R64_Rmr64_REX,
	"CMOVO_R64_M64_REX":                    CMOVO_R64_M64_REX,
	"CMOVP_R16_Rmr16":                      CMOVP_R16_Rmr16,
	"CMOVP_R16_M16":                        CMOVP_R16_M16,
	"CMOVP_R32_Rmr32":                      CMOVP_R32_Rmr32,
	"CMOVP_R32_M32":                        CMOVP_R32_M32,
	"CMOVP_R64_Rmr64_REX":                  CMOVP_R64_Rmr64_REX,
	"CMOVP_R64_M64_REX":                    CMOVP_R64_M64_REX,
	"CMOVPE_R16_Rmr16":                     CMOVPE_R16_Rmr16,
	"CMOVPE_R16_M16":                       CMOVPE_R16_M16,
	"CMOVPE_R32_Rmr32":                     CMOVPE_R32_Rmr32,
	"CMOVPE_R32_M32":                       CMOVPE_R32_M32,
	"CMOVPE_R64_Rmr64_REX":                 CMOVPE_R64_Rmr64_REX,
	"CMOVPE_R64_M64_REX":                   CMOVPE_R64_M64_REX,
	"CMOVPO_R16_Rmr16":                     CMOVPO_R16_Rmr16,
	"CMOVPO_R16_M16":                       CMOVPO_R16_M16,
	"CMOVPO_R32_Rmr32":                     CMOVPO_R32_Rmr32,
	"CMOVPO_R32_M32":                       CMOVPO_R32_M32,
	"CMOVPO_R64_Rmr64_REX":                 CMOVPO_R64_Rmr64_REX,
	"CMOVPO_R64_M64_REX":                   CMOVPO_R64_M64_REX,
	"CMOVS_R16_Rmr16":                      CMOVS_R16_Rmr16,
	"CMOVS_R16_M16":                        CMOVS_R16_M16,
	"CMOVS_R32_Rmr32":                      CMOVS_R32_Rmr32,
	"CMOVS_R32_M32":                        CMOVS_R32_M32,
	"CMOVS_R64_Rmr64_REX":                  CMOVS_R64_Rmr64_REX,
	"CMOVS_R64_M64_REX":                    CMOVS_R64_M64_REX,
	"CMOVZ_R16_Rmr16":                      CMOVZ_R16_Rmr16,
	"CMOVZ_R16_M16":                        CMOVZ_R16_M16,
	"CMOVZ_R32_Rmr32":                      CMOVZ_R32_Rmr32,
	"CMOVZ_R32_M32":                        CMOVZ_R32_M32,
	"CMOVZ_R64_Rmr64_REX":                  CMOVZ_R64_Rmr64_REX,
	"CMOVZ_R64_M64_REX":                    CMOVZ_R64_M64_REX,
	"CMP_AL_Imm8":                          CMP_AL_Imm8,
	"CMP_AX_Imm16":                         CMP_AX_Imm16,
	"CMP_EAX_Imm32":                        CMP_EAX_Imm32,
	"CMP_RAX_Imm32_REX":                    CMP_RAX_Imm32_REX,
	"CMP_R8_Rmr8":                          CMP_R8_Rmr8,
	"CMP_R8_M8":                            CMP_R8_M8,
	"CMP_R16_Rmr16":                        CMP_R16_Rmr16,
	"CMP_R16_M16":                          CMP_R16_M16,
	"CMP_R32_Rmr32":                        CMP_R32_Rmr32,
	"CMP_R32_M32":                          CMP_R32_M32,
	"CMP_R64_Rmr64_REX":                    CMP_R64_Rmr64_REX,
	"CMP_R64_M64_REX":                      CMP_R64_M64_REX,
	"CMP_Rmr8_Imm8":                        CMP_Rmr8_Imm8,
	"CMP_Rmr8_R8":                          CMP_Rmr8_R8,
	"CMP_Rmr16_Imm8":                       CMP_Rmr16_Imm8,
	"CMP_Rmr16_Imm16":                      CMP_Rmr16_Imm16,
	"CMP_Rmr16_R16":                        CMP_Rmr16_R16,
	"CMP_Rmr32_Imm8":                       CMP_Rmr32_Imm8,
	"CMP_Rmr32_Imm32":                      CMP_Rmr32_Imm32,
	"CMP_Rmr32_R32":                        CMP_Rmr32_R32,
	"CMP_Rmr64_Imm8_REX":                   CMP_Rmr64_Imm8_REX,
	"CMP_Rmr64_Imm32_REX":                  CMP_Rmr64_Imm32_REX,
	"CMP_Rmr64_R64_REX":                    CMP_Rmr64_R64_REX,
	"CMP_M8_Imm8":                          CMP_M8_Imm8,
	"CMP_M8_R8":                            CMP_M8_R8,
	"CMP_M16_Imm8":                         CMP_M16_Imm8,
	"CMP_M16_Imm16":                        CMP_M16_Imm16,
	"CMP_M16_R16":                          CMP_M16_R16,
	"CMP_M32_Imm8":                         CMP_M32_Imm8,
	"CMP_M32_Imm32":                        CMP_M32_Imm32,
	"CMP_M32_R32":                          CMP_M32_R32,
	"CMP_M64_Imm8_REX":                     CMP_M64_Imm8_REX,
	"CMP_M64_Imm32_REX":                    CMP_M64_Imm32_REX,
	"CMP_M64_R64_REX":                      CMP_M64_R64_REX,
	"CMPEQPD_XMM1_XMM2":                    CMPEQPD_XMM1_XMM2,
	"CMPEQPD_XMM1_M128":                    CMPEQPD_XMM1_M128,
	"CMPEQPS_XMM1_XMM2":                    CMPEQPS_XMM1_XMM2,
	"CMPEQPS_XMM1_M128":                    CMPEQPS_XMM1_M128,
	"CMPEQSD_XMM1_XMM2":                    CMPEQSD_XMM1_XMM2,
	"CMPEQSD_XMM1_M64":                     CMPEQSD_XMM1_M64,
	"CMPEQSS_XMM1_XMM2":                    CMPEQSS_XMM1_XMM2,
	"CMPEQSS_XMM1_M32":                     CMPEQSS_XMM1_M32,
	"CMPLEPD_XMM1_XMM2":                    CMPLEPD_XMM1_XMM2,
	"CMPLEPD_XMM1_M128":                    CMPLEPD_XMM1_M128,
	"CMPLEPS_XMM1_XMM2":                    CMPLEPS_XMM1_XMM2,
	"CMPLEPS_XMM1_M128":                    CMPLEPS_XMM1_M128,
	"CMPLESD_XMM1_XMM2":                    CMPLESD_XMM1_XMM2,
	"CMPLESD_XMM1_M64":                     CMPLESD_XMM1_M64,
	"CMPLESS_XMM1_XMM2":                    CMPLESS_XMM1_XMM2,
	"CMPLESS_XMM1_M32":                     CMPLESS_XMM1_M32,
	"CMPLTPD_XMM1_XMM2":                    CMPLTPD_XMM1_XMM2,
	"CMPLTPD_XMM1_M128":                    CMPLTPD_XMM1_M128,
	"CMPLTPS_XMM1_XMM2":                    CMPLTPS_XMM1_XMM2,
	"CMPLTPS_XMM1_M128":                    CMPLTPS_XMM1_M128,
	"CMPLTSD_XMM1_XMM2":                    CMPLTSD_XMM1_XMM2,
	"CMPLTSD_XMM1_M64":                     CMPLTSD_XMM1_M64,
	"CMPLTSS_XMM1_XMM2":                    CMPLTSS_XMM1_XMM2,
	"CMPLTSS_XMM1_M32":                     CMPLTSS_XMM1_M32,
	"CMPNEQPD_XMM1_XMM2":                   CMPNEQPD_XMM1_XMM2,
	"CMPNEQPD_XMM1_M128":                   CMPNEQPD_XMM1_M128,
	"CMPNEQPS_XMM1_XMM2":                   CMPNEQPS_XMM1_XMM2,
	"CMPNEQPS_XMM1_M128":                   CMPNEQPS_XMM1_M128,
	"CMPNEQSD_XMM1_XMM2":                   CMPNEQSD_XMM1_XMM2,
	"CMPNEQSD_XMM1_M64":                    CMPNEQSD_XMM1_M64,
	"CMPNEQSS_XMM1_XMM2":                   CMPNEQSS_XMM1_XMM2,
	"CMPNEQSS_XMM1_M32":                    CMPNEQSS_XMM1_M32,
	"CMPNLEPD_XMM1_XMM2":                   CMPNLEPD_XMM1_XMM2,
	"CMPNLEPD_XMM1_M128":                   CMPNLEPD_XMM1_M128,
	"CMPNLEPS_XMM1_XMM2":                   CMPNLEPS_XMM1_XMM2,
	"CMPNLEPS_XMM1_M128":                   CMPNLEPS_XMM1_M128,
	"CMPNLESD_XMM1_XMM2":                   CMPNLESD_XMM1_XMM2,
	"CMPNLESD_XMM1_M64":                    CMPNLESD_XMM1_M64,
	"CMPNLESS_XMM1_XMM2":                   CMPNLESS_XMM1_XMM2,
	"CMPNLESS_XMM1_M32":                    CMPNLESS_XMM1_M32,
	"CMPNLTPD_XMM1_XMM2":                   CMPNLTPD_XMM1_XMM2,
	"CMPNLTPD_XMM1_M128":                   CMPNLTPD_XMM1_M128,
	"CMPNLTPS_XMM1_XMM2":                   CMPNLTPS_XMM1_XMM2,
	"CMPNLTPS_XMM1_M128":                   CMPNLTPS_XMM1_M128,
	"CMPNLTSD_XMM1_XMM2":                   CMPNLTSD_XMM1_XMM2,
	"CMPNLTSD_XMM1_M64":                    CMPNLTSD_XMM1_M64,
	"CMPNLTSS_XMM1_XMM2":                   CMPNLTSS_XMM1_XMM2,
	"CMPNLTSS_XMM1_M32":                    CMPNLTSS_XMM1_M32,
	"CMPORDPD_XMM1_XMM2":                   CMPORDPD_XMM1_XMM2,
	"CMPORDPD_XMM1_M128":                   CMPORDPD_XMM1_M128,
	"CMPORDPS_XMM1_XMM2":                   CMPORDPS_XMM1_XMM2,
	"CMPORDPS_XMM1_M128":                   CMPORDPS_XMM1_M128,
	"CMPORDSD_XMM1_XMM2":                   CMPORDSD_XMM1_XMM2,
	"CMPORDSD_XMM1_M64":                    CMPORDSD_XMM1_M64,
	"CMPORDSS_XMM1_XMM2":                   CMPORDSS_XMM1_XMM2,
	"CMPORDSS_XMM1_M32":                    CMPORDSS_XMM1_M32,
	"CMPPD_XMM1_XMM2_Imm5u":                CMPPD_XMM1_XMM2_Imm5u,
	"CMPPD_XMM1_M128_Imm5u":                CMPPD_XMM1_M128_Imm5u,
	"CMPPS_XMM1_XMM2_Imm5u":                CMPPS_XMM1_XMM2_Imm5u,
	"CMPPS_XMM1_M128_Imm5u":                CMPPS_XMM1_M128_Imm5u,
	"CMPS_StrSrc8_StrDst8":                 CMPS_StrSrc8_StrDst8,
	"CMPS_StrSrc16_StrDst16":               CMPS_StrSrc16_StrDst16,
	"CMPS_StrSrc32_StrDst32":               CMPS_StrSrc32_StrDst32,
	"CMPS_StrSrc64_StrDst64_REX":           CMPS_StrSrc64_StrDst64_REX,
	"CMPSB":                                CMPSB,
	"CMPSB_StrSrc8_StrDst8":                CMPSB_StrSrc8_StrDst8,
	"CMPSD":                                CMPSD,
	"CMPSD_StrSrc32_StrDst32":              CMPSD_StrSrc32_StrDst32,
	"CMPSD_XMM1_XMM2_Imm5u":                CMPSD_XMM1_XMM2_Imm5u,
	"CMPSD_XMM1_M64_Imm5u":                 CMPSD_XMM1_M64_Imm5u,
	"CMPSQ_REX":                            CMPSQ_REX,
	"CMPSQ_StrSrc64_StrDst64_REX":          CMPSQ_StrSrc64_StrDst64_REX,
	"CMPSS_XMM1_XMM2_Imm5u":                CMPSS_XMM1_XMM2_Imm5u,
	"CMPSS_XMM1_M32_Imm5u":                 CMPSS_XMM1_M32_Imm5u,
	"CMPSW":                                CMPSW,
	"CMPSW_StrSrc16_StrDst16":              CMPSW_StrSrc16_StrDst16,
	"CMPUNORDPD_XMM1_XMM2":                 CMPUNORDPD_XMM1_XMM2,
	"CMPUNORDPD_XMM1_M128":                 CMPUNORDPD_XMM1_M128,
	"CMPUNORDPS_XMM1_XMM2":                 CMPUNORDPS_XMM1_XMM2,
	"CMPUNORDPS_XMM1_M128":                 CMPUNORDPS_XMM1_M128,
	"CMPUNORDSD_XMM1_XMM2":                 CMPUNORDSD_XMM1_XMM2,
	"CMPUNORDSD_XMM1_M64":                  CMPUNORDSD_XMM1_M64,
	"CMPUNORDSS_XMM1_XMM2":                 CMPUNORDSS_XMM1_XMM2,
	"CMPUNORDSS_XMM1_M32":                  CMPUNORDSS_XMM1_M32,
	"CMPXCHG_Rmr8_R8":                      CMPXCHG_Rmr8_R8,
	"CMPXCHG_Rmr16_R16":                    CMPXCHG_Rmr16_R16,
	"CMPXCHG_Rmr32_R32":                    CMPXCHG_Rmr32_R32,
	"CMPXCHG_Rmr64_R64_REX":                CMPXCHG_Rmr64_R64_REX,
	"CMPXCHG_M8_R8":                        CMPXCHG_M8_R8,
	"CMPXCHG_M16_R16":                      CMPXCHG_M16_R16,
	"CMPXCHG_M32_R32":                      CMPXCHG_M32_R32,
	"CMPXCHG_M64_R64_REX":                  CMPXCHG_M64_R64_REX,
	"CMPXCHG16B_M128_REX":                  CMPXCHG16B_M128_REX,
	"CMPXCHG8B_M64":                        CMPXCHG8B_M64,
	"COMISD_XMM1_XMM2":                     COMISD_XMM1_XMM2,
	"COMISD_XMM1_M64":                      COMISD_XMM1_M64,
	"COMISS_XMM1_XMM2":                     COMISS_XMM1_XMM2,
	"COMISS_XMM1_M32":                      COMISS_XMM1_M32,
	"CPUID":                                CPUID,
	"CQO_REX":                              CQO_REX,
	"CRC32_R32_Rmr8":                       CRC32_R32_Rmr8,
	"CRC32_R32_Rmr16":                      CRC32_R32_Rmr16,
	"CRC32_R32_Rmr32":                      CRC32_R32_Rmr32,
	"CRC32_R32_M8":                         CRC32_R32_M8,
	"CRC32_R32_M16":                        CRC32_R32_M16,
	"CRC32_R32_M32":                        CRC32_R32_M32,
	"CRC32_R64_Rmr8_REX":                   CRC32_R64_Rmr8_REX,
	"CRC32_R64_Rmr64_REX":                  CRC32_R64_Rmr64_REX,
	"CRC32_R64_M8_REX":                     CRC32_R64_M8_REX,
	"CRC32_R64_M64_REX":                    CRC32_R64_M64_REX,
	"CVTDQ2PD_XMM1_XMM2":                   CVTDQ2PD_XMM1_XMM2,
	"CVTDQ2PD_XMM1_M64":                    CVTDQ2PD_XMM1_M64,
	"CVTDQ2PS_XMM1_XMM2":                   CVTDQ2PS_XMM1_XMM2,
	"CVTDQ2PS_XMM1_M128":                   CVTDQ2PS_XMM1_M128,
	"CVTPD2DQ_XMM1_XMM2":                   CVTPD2DQ_XMM1_XMM2,
	"CVTPD2DQ_XMM1_M128":                   CVTPD2DQ_XMM1_M128,
	"CVTPD2PI_MM1_XMM2":                    CVTPD2PI_MM1_XMM2,
	"CVTPD2PI_MM1_M128":                    CVTPD2PI_MM1_M128,
	"CVTPD2PS_XMM1_XMM2":                   CVTPD2PS_XMM1_XMM2,
	"CVTPD2PS_XMM1_M128":                   CVTPD2PS_XMM1_M128,
	"CVTPI2PD_XMM1_MM2":                    CVTPI2PD_XMM1_MM2,
	"CVTPI2PD_XMM1_M64":                    CVTPI2PD_XMM1_M64,
	"CVTPI2PS_XMM1_MM2":                    CVTPI2PS_XMM1_MM2,
	"CVTPI2PS_XMM1_M64":                    CVTPI2PS_XMM1_M64,
	"CVTPS2DQ_XMM1_XMM2":                   CVTPS2DQ_XMM1_XMM2,
	"CVTPS2DQ_XMM1_M128":                   CVTPS2DQ_XMM1_M128,
	"CVTPS2PD_XMM1_XMM2":                   CVTPS2PD_XMM1_XMM2,
	"CVTPS2PD_XMM1_M64":                    CVTPS2PD_XMM1_M64,
	"CVTPS2PI_MM1_XMM2":                    CVTPS2PI_MM1_XMM2,
	"CVTPS2PI_MM1_M64":                     CVTPS2PI_MM1_M64,
	"CVTSD2SI_R32_XMM2":                    CVTSD2SI_R32_XMM2,
	"CVTSD2SI_R32_M64":                     CVTSD2SI_R32_M64,
	"CVTSD2SI_R64_XMM2_REX":                CVTSD2SI_R64_XMM2_REX,
	"CVTSD2SI_R64_M64_REX":                 CVTSD2SI_R64_M64_REX,
	"CVTSD2SS_XMM1_XMM2":                   CVTSD2SS_XMM1_XMM2,
	"CVTSD2SS_XMM1_M64":                    CVTSD2SS_XMM1_M64,
	"CVTSI2SD_XMM1_Rmr32":                  CVTSI2SD_XMM1_Rmr32,
	"CVTSI2SD_XMM1_Rmr64_REX":              CVTSI2SD_XMM1_Rmr64_REX,
	"CVTSI2SD_XMM1_M32":                    CVTSI2SD_XMM1_M32,
	"CVTSI2SD_XMM1_M64_REX":                CVTSI2SD_XMM1_M64_REX,
	"CVTSI2SS_XMM1_Rmr32":                  CVTSI2SS_XMM1_Rmr32,
	"CVTSI2SS_XMM1_Rmr64_REX":              CVTSI2SS_XMM1_Rmr64_REX,
	"CVTSI2SS_XMM1_M32":                    CVTSI2SS_XMM1_M32,
	"CVTSI2SS_XMM1_M64_REX":                CVTSI2SS_XMM1_M64_REX,
	"CVTSS2SD_XMM1_XMM2":                   CVTSS2SD_XMM1_XMM2,
	"CVTSS2SD_XMM1_M32":                    CVTSS2SD_XMM1_M32,
	"CVTSS2SI_R32_XMM2":                    CVTSS2SI_R32_XMM2,
	"CVTSS2SI_R32_M32":                     CVTSS2SI_R32_M32,
	"CVTSS2SI_R64_XMM2_REX":                CVTSS2SI_R64_XMM2_REX,
	"CVTSS2SI_R64_M32_REX":                 CVTSS2SI_R64_M32_REX,
	"CVTTPD2DQ_XMM1_XMM2":                  CVTTPD2DQ_XMM1_XMM2,
	"CVTTPD2DQ_XMM1_M128":                  CVTTPD2DQ_XMM1_M128,
	"CVTTPD2PI_MM1_XMM2":                   CVTTPD2PI_MM1_XMM2,
	"CVTTPD2PI_MM1_M128":                   CVTTPD2PI_MM1_M128,
	"CVTTPS2DQ_XMM1_XMM2":                  CVTTPS2DQ_XMM1_XMM2,
	"CVTTPS2DQ_XMM1_M128":                  CVTTPS2DQ_XMM1_M128,
	"CVTTPS2PI_MM1_XMM2":                   CVTTPS2PI_MM1_XMM2,
	"CVTTPS2PI_MM1_M64":                    CVTTPS2PI_MM1_M64,
	"CVTTSD2SI_R32_XMM2":                   CVTTSD2SI_R32_XMM2,
	"CVTTSD2SI_R32_M64":                    CVTTSD2SI_R32_M64,
	"CVTTSD2SI_R64_XMM2_REX":               CVTTSD2SI_R64_XMM2_REX,
	"CVTTSD2SI_R64_M64_REX":                CVTTSD2SI_R64_M64_REX,
	"CVTTSS2SI_R32_XMM2":                   CVTTSS2SI_R32_XMM2,
	"CVTTSS2SI_R32_M32":                    CVTTSS2SI_R32_M32,
	"CVTTSS2SI_R64_XMM2_REX":               CVTTSS2SI_R64_XMM2_REX,
	"CVTTSS2SI_R64_M32_REX":                CVTTSS2SI_R64_M32_REX,
	"CWD":                                  CWD,
	"CWDE":                                 CWDE,
	"DAA":                                  DAA,
	"DAS":                                  DAS,
	"DEC_Rmr8":                             DEC_Rmr8,
	"DEC_Rmr16":                            DEC_Rmr16,
	"DEC_Rmr32":                            DEC_Rmr32,
	"DEC_Rmr64_REX":                        DEC_Rmr64_REX,
	"DEC_R16op":                            DEC_R16op,
	"DEC_R32op":                            DEC_R32op,
	"DEC_M8":                               DEC_M8,
	"DEC_M16":                              DEC_M16,
	"DEC_M32":                              DEC_M32,
	"DEC_M64_REX":                          DEC_M64_REX,
	"DIV_Rmr8":                             DIV_Rmr8,
	"DIV_Rmr16":                            DIV_Rmr16,
	"DIV_Rmr32":                            DIV_Rmr32,
	"DIV_Rmr64_REX":                        DIV_Rmr64_REX,
	"DIV_M8":                               DIV_M8,
	"DIV_M16":                              DIV_M16,
	"DIV_M32":                              DIV_M32,
	"DIV_M64_REX":                          DIV_M64_REX,
	"DIVPD_XMM1_XMM2":                      DIVPD_XMM1_XMM2,
	"DIVPD_XMM1_M128":                      DIVPD_XMM1_M128,
	"DIVPS_XMM1_XMM2":                      DIVPS_XMM1_XMM2,
	"DIVPS_XMM1_M128":                      DIVPS_XMM1_M128,
	"DIVSD_XMM1_XMM2":                      DIVSD_XMM1_XMM2,
	"DIVSD_XMM1_M64":                       DIVSD_XMM1_M64,
	"DIVSS_XMM1_XMM2":                      DIVSS_XMM1_XMM2,
	"DIVSS_XMM1_M32":                       DIVSS_XMM1_M32,
	"DPPD_XMM1_XMM2_Imm8":                  DPPD_XMM1_XMM2_Imm8,
	"DPPD_XMM1_M128_Imm8":                  DPPD_XMM1_M128_Imm8,
	"DPPS_XMM1_XMM2_Imm8":                  DPPS_XMM1_XMM2_Imm8,
	"DPPS_XMM1_M128_Imm8":                  DPPS_XMM1_M128_Imm8,
	"EMMS":                                 EMMS,
	"ENCODEKEY128_R32_Rmr32":               ENCODEKEY128_R32_Rmr32,
	"ENCODEKEY256_R32_Rmr32":               ENCODEKEY256_R32_Rmr32,
	"ENDBR32":                              ENDBR32,
	"ENDBR64":                              ENDBR64,
	"ENQCMD_R32_M512":                      ENQCMD_R32_M512,
	"ENQCMD_R64_M512":                      ENQCMD_R64_M512,
	"ENQCMDS_R32_M512":                     ENQCMDS_R32_M512,
	"ENQCMDS_R64_M512":                     ENQCMDS_R64_M512,
	"ENTER_Imm16u_Imm5u":                   ENTER_Imm16u_Imm5u,
	"EXTRACTPS_Rmr32_XMM1_Imm8":            EXTRACTPS_Rmr32_XMM1_Imm8,
	"EXTRACTPS_M32_XMM1_Imm8":              EXTRACTPS_M32_XMM1_Imm8,
	"EXTRQ_XMM1_XMM2":                      EXTRQ_XMM1_XMM2,
	"EXTRQ_XMM2_Imm8_Imm8":                 EXTRQ_XMM2_Imm8_Imm8,
	"F2XM1":                                F2XM1,
	"FABS":                                 FABS,
	"FADD_M32fp":                           FADD_M32fp,
	"FADD_M64fp":                           FADD_M64fp,
	"FADD_ST_STi":                          FADD_ST_STi,
	"FADD_STi_ST":                          FADD_STi_ST,
	"FADDP":                                FADDP,
	"FADDP_STi_ST":                         FADDP_STi_ST,
	"FBLD_M80bcd":                          FBLD_M80bcd,
	"FBSTP_M80bcd":                         FBSTP_M80bcd,
	"FCHS":                                 FCHS,
	"FCLEX":                                FCLEX,
	"FCMOVB_ST_STi":                        FCMOVB_ST_STi,
	"FCMOVBE_ST_STi":                       FCMOVBE_ST_STi,
	"FCMOVE_ST_STi":                        FCMOVE_ST_STi,
	"FCMOVNB_ST_STi":                       FCMOVNB_ST_STi,
	"FCMOVNBE_ST_STi":                      FCMOVNBE_ST_STi,
	"FCMOVNE_ST_STi":                       FCMOVNE_ST_STi,
	"FCMOVNU_ST_STi":                       FCMOVNU_ST_STi,
	"FCMOVU_ST_STi":                        FCMOVU_ST_STi,
	"FCOM":                                 FCOM,
	"FCOM_STi":                             FCOM_STi,
	"FCOM_M32fp":                           FCOM_M32fp,
	"FCOM_M64fp":                           FCOM_M64fp,
	"FCOMI_ST_STi":                         FCOMI_ST_STi,
	"FCOMIP_ST_STi":                        FCOMIP_ST_STi,
	"FCOMP":                                FCOMP,
	"FCOMP_STi":                            FCOMP_STi,
	"FCOMP_M32fp":                          FCOMP_M32fp,
	"FCOMP_M64fp":                          FCOMP_M64fp,
	"FCOMPP":                               FCOMPP,
	"FCOS":                                 FCOS,
	"FDECSTP":                              FDECSTP,
	"FDIV_M32fp":                           FDIV_M32fp,
	"FDIV_M64fp":                           FDIV_M64fp,
	"FDIV_ST_STi":                          FDIV_ST_STi,
	"FDIV_STi_ST":                          FDIV_STi_ST,
	"FDIVP":                                FDIVP,
	"FDIVP_STi_ST":                         FDIVP_STi_ST,
	"FDIVR_M32fp":                          FDIVR_M32fp,
	"FDIVR_M64fp":                          FDIVR_M64fp,
	"FDIVR_ST_STi":                         FDIVR_ST_STi,
	"FDIVR_STi_ST":                         FDIVR_STi_ST,
	"FDIVRP":                               FDIVRP,
	"FDIVRP_STi_ST":                        FDIVRP_STi_ST,
	"FEMMS":                                FEMMS,
	"FFREE_STi":                            FFREE_STi,
	"FFREEP_STi":                           FFREEP_STi,
	"FIADD_M16int":                         FIADD_M16int,
	"FIADD_M32int":                         FIADD_M32int,
	"FICOM_M16int":                         FICOM_M16int,
	"FICOM_M32int":                         FICOM_M32int,
	"FICOMP_M16int":                        FICOMP_M16int,
	"FICOMP_M32int":                        FICOMP_M32int,
	"FIDIV_M16int":                         FIDIV_M16int,
	"FIDIV_M32int":                         FIDIV_M32int,
	"FIDIVR_M16int":                        FIDIVR_M16int,
	"FIDIVR_M32int":                        FIDIVR_M32int,
	"FILD_M16int":                          FILD_M16int,
	"FILD_M32int":                          FILD_M32int,
	"FILD_M64int":                          FILD_M64int,
	"FIMUL_M16int":                         FIMUL_M16int,
	"FIMUL_M32int":                         FIMUL_M32int,
	"FINCSTP":                              FINCSTP,
	"FINIT":                                FINIT,
	"FIST_M16int":                          FIST_M16int,
	"FIST_M32int":                          FIST_M32int,
	"FISTP_M16int":                         FISTP_M16int,
	"FISTP_M32int":                         FISTP_M32int,
	"FISTP_M64int":                         FISTP_M64int,
	"FISTTP_M16int":                        FISTTP_M16int,
	"FISTTP_M32int":                        FISTTP_M32int,
	"FISTTP_M64int":                        FISTTP_M64int,
	"FISUB_M16int":                         FISUB_M16int,
	"FISUB_M32int":                         FISUB_M32int,
	"FISUBR_M16int":                        FISUBR_M16int,
	"FISUBR_M32int":                        FISUBR_M32int,
	"FLD_STi":                              FLD_STi,
	"FLD_M32fp":                            FLD_M32fp,
	"FLD_M64fp":                            FLD_M64fp,
	"FLD_M80fp":                            FLD_M80fp,
	"FLD1":                                 FLD1,
	"FLDCW_M2byte":                         FLDCW_M2byte,
	"FLDENV_M14l28byte":                    FLDENV_M14l28byte,
	"FLDL2E":                               FLDL2E,
	"FLDL2T":                               FLDL2T,
	"FLDLG2":                               FLDLG2,
	"FLDLN2":                               FLDLN2,
	"FLDPI":                                FLDPI,
	"FLDZ":                                 FLDZ,
	"FMUL_M32fp":                           FMUL_M32fp,
	"FMUL_M64fp":                           FMUL_M64fp,
	"FMUL_ST_STi":                          FMUL_ST_STi,
	"FMUL_STi_ST":                          FMUL_STi_ST,
	"FMULP":                                FMULP,
	"FMULP_STi_ST":                         FMULP_STi_ST,
	"FNCLEX":                               FNCLEX,
	"FNINIT":                               FNINIT,
	"FNOP":                                 FNOP,
	"FNSAVE_M94l108byte":                   FNSAVE_M94l108byte,
	"FNSTCW_M2byte":                        FNSTCW_M2byte,
	"FNSTENV_M14l28byte":                   FNSTENV_M14l28byte,
	"FNSTSW_AX":                            FNSTSW_AX,
	"FNSTSW_M2byte":                        FNSTSW_M2byte,
	"FPATAN":                               FPATAN,
	"FPREM":                                FPREM,
	"FPREM1":                               FPREM1,
	"FPTAN":                                FPTAN,
	"FRNDINT":                              FRNDINT,
	"FRSTOR_M94l108byte":                   FRSTOR_M94l108byte,
	"FSAVE_M94l108byte":                    FSAVE_M94l108byte,
	"FSCALE":                               FSCALE,
	"FSIN":                                 FSIN,
	"FSINCOS":                              FSINCOS,
	"FSQRT":                                FSQRT,
	"FST_STi":                              FST_STi,
	"FST_M32fp":                            FST_M32fp,
	"FST_M64fp":                            FST_M64fp,
	"FSTCW_M2byte":                         FSTCW_M2byte,
	"FSTENV_M14l28byte":                    FSTENV_M14l28byte,
	"FSTP_STi":                             FSTP_STi,
	"FSTP_M32fp":                           FSTP_M32fp,
	"FSTP_M64fp":                           FSTP_M64fp,
	"FSTP_M80fp":                           FSTP_M80fp,
	"FSTSW_AX":                             FSTSW_AX,
	"FSTSW_M2byte":                         FSTSW_M2byte,
	"FSUB_M32fp":                           FSUB_M32fp,
	"FSUB_M64fp":                           FSUB_M64fp,
	"FSUB_ST_STi":                          FSUB_ST_STi,
	"FSUB_STi_ST":                          FSUB_STi_ST,
	"FSUBP":                                FSUBP,
	"FSUBP_STi_ST":                         FSUBP_STi_ST,
	"FSUBR_M32fp":                          FSUBR_M32fp,
	"FSUBR_M64fp":                          FSUBR_M64fp,
	"FSUBR_ST_STi":                         FSUBR_ST_STi,
	"FSUBR_STi_ST":                         FSUBR_STi_ST,
	"FSUBRP":                               FSUBRP,
	"FSUBRP_STi_ST":                        FSUBRP_STi_ST,
	"FTST":                                 FTST,
	"FUCOM":                                FUCOM,
	"FUCOM_STi":                            FUCOM_STi,
	"FUCOMI_ST_STi":                        FUCOMI_ST_STi,
	"FUCOMIP_ST_STi":                       FUCOMIP_ST_STi,
	"FUCOMP":                               FUCOMP,
	"FUCOMP_STi":                           FUCOMP_STi,
	"FUCOMPP":                              FUCOMPP,
	"FWAIT":                                FWAIT,
	"FXAM":                                 FXAM,
	"FXCH":                                 FXCH,
	"FXCH_STi":                             FXCH_STi,
	"FXRSTOR_M512byte":                     FXRSTOR_M512byte,
	"FXRSTOR64_M512byte_REX":               FXRSTOR64_M512byte_REX,
	"FXSAVE_M512byte":                      FXSAVE_M512byte,
	"FXSAVE64_M512byte_REX":                FXSAVE64_M512byte_REX,
	"FXTRACT":                              FXTRACT,
	"FYL2X":                                FYL2X,
	"FYL2XP1":                              FYL2XP1,
	"GETSEC":                               GETSEC,
	"GF2P8AFFINEINVQB_XMM1_XMM2_Imm8":      GF2P8AFFINEINVQB_XMM1_XMM2_Imm8,
	"GF2P8AFFINEINVQB_XMM1_M128_Imm8":      GF2P8AFFINEINVQB_XMM1_M128_Imm8,
	"GF2P8AFFINEQB_XMM1_XMM2_Imm8":         GF2P8AFFINEQB_XMM1_XMM2_Imm8,
	"GF2P8AFFINEQB_XMM1_M128_Imm8":         GF2P8AFFINEQB_XMM1_M128_Imm8,
	"GF2P8MULB_XMM1_XMM2":                  GF2P8MULB_XMM1_XMM2,
	"GF2P8MULB_XMM1_M128":                  GF2P8MULB_XMM1_M128,
	"HADDPD_XMM1_XMM2":                     HADDPD_XMM1_XMM2,
	"HADDPD_XMM1_M128":                     HADDPD_XMM1_M128,
	"HADDPS_XMM1_XMM2":                     HADDPS_XMM1_XMM2,
	"HADDPS_XMM1_M128":                     HADDPS_XMM1_M128,
	"HLT":                                  HLT,
	"HRESET_Imm8":                          HRESET_Imm8,
	"HSUBPD_XMM1_XMM2":                     HSUBPD_XMM1_XMM2,
	"HSUBPD_XMM1_M128":                     HSUBPD_XMM1_M128,
	"HSUBPS_XMM1_XMM2":                     HSUBPS_XMM1_XMM2,
	"HSUBPS_XMM1_M128":                     HSUBPS_XMM1_M128,
	"IDIV_Rmr8":                            IDIV_Rmr8,
	"IDIV_Rmr16":                           IDIV_Rmr16,
	"IDIV_Rmr32":                           IDIV_Rmr32,
	"IDIV_Rmr64_REX":                       IDIV_Rmr64_REX,
	"IDIV_M8":                              IDIV_M8,
	"IDIV_M16":                             IDIV_M16,
	"IDIV_M32":                             IDIV_M32,
	"IDIV_M64_REX":                         IDIV_M64_REX,
	"IMUL_Rmr8":                            IMUL_Rmr8,
	"IMUL_Rmr16":                           IMUL_Rmr16,
	"IMUL_Rmr32":                           IMUL_Rmr32,
	"IMUL_Rmr64_REX":                       IMUL_Rmr64_REX,
	"IMUL_M8":                              IMUL_M8,
	"IMUL_M16":                             IMUL_M16,
	"IMUL_M32":                             IMUL_M32,
	"IMUL_M64_REX":                         IMUL_M64_REX,
	"IMUL_R16_Rmr16":                       IMUL_R16_Rmr16,
	"IMUL_R16_M16":                         IMUL_R16_M16,
	"IMUL_R32_Rmr32":                       IMUL_R32_Rmr32,
	"IMUL_R32_M32":                         IMUL_R32_M32,
	"IMUL_R64_Rmr64_REX":                   IMUL_R64_Rmr64_REX,
	"IMUL_R64_M64_REX":                     IMUL_R64_M64_REX,
	"IMUL_R16_Rmr16_Imm8":                  IMUL_R16_Rmr16_Imm8,
	"IMUL_R16_Rmr16_Imm16":                 IMUL_R16_Rmr16_Imm16,
	"IMUL_R16_M16_Imm8":                    IMUL_R16_M16_Imm8,
	"IMUL_R16_M16_Imm16":                   IMUL_R16_M16_Imm16,
	"IMUL_R32_Rmr32_Imm8":                  IMUL_R32_Rmr32_Imm8,
	"IMUL_R32_Rmr32_Imm32":                 IMUL_R32_Rmr32_Imm32,
	"IMUL_R32_M32_Imm8":                    IMUL_R32_M32_Imm8,
	"IMUL_R32_M32_Imm32":                   IMUL_R32_M32_Imm32,
	"IMUL_R64_Rmr64_Imm8_REX":              IMUL_R64_Rmr64_Imm8_REX,
	"IMUL_R64_Rmr64_Imm32_REX":             IMUL_R64_Rmr64_Imm32_REX,
	"IMUL_R64_M64_Imm8_REX":                IMUL_R64_M64_Imm8_REX,
	"IMUL_R64_M64_Imm32_REX":               IMUL_R64_M64_Imm32_REX,
	"IN_AL_DX":                             IN_AL_DX,
	"IN_AL_Imm8u":                          IN_AL_Imm8u,
	"IN_AX_DX":                             IN_AX_DX,
	"IN_AX_Imm8u":                          IN_AX_Imm8u,
	"IN_EAX_DX":                            IN_EAX_DX,
	"IN_EAX_Imm8u":                         IN_EAX_Imm8u,
	"INC_Rmr8":                             INC_Rmr8,
	"INC_Rmr16":                            INC_Rmr16,
	"INC_Rmr32":                            INC_Rmr32,
	"INC_Rmr64_REX":                        INC_Rmr64_REX,
	"INC_R16op":                            INC_R16op,
	"INC_R32op":                            INC_R32op,
	"INC_M8":                               INC_M8,
	"INC_M16":                              INC_M16,
	"INC_M32":                              INC_M32,
	"INC_M64_REX":                          INC_M64_REX,
	"INCSSPD_Rmr32":                        INCSSPD_Rmr32,
	"INCSSPQ_Rmr64_REX":                    INCSSPQ_Rmr64_REX,
	"INS_StrDst8_DX":                       INS_StrDst8_DX,
	"INS_StrDst16_DX":                      INS_StrDst16_DX,
	"INS_StrDst32_DX":                      INS_StrDst32_DX,
	"INSB":                                 INSB,
	"INSB_StrDst8_DX":                      INSB_StrDst8_DX,
	"INSD":                                 INSD,
	"INSD_StrDst32_DX":                     INSD_StrDst32_DX,
	"INSERTPS_XMM1_XMM2_Imm8":              INSERTPS_XMM1_XMM2_Imm8,
	"INSERTPS_XMM1_M32_Imm8":               INSERTPS_XMM1_M32_Imm8,
	"INSW":                                 INSW,
	"INSW_StrDst16_DX":                     INSW_StrDst16_DX,
	"INT_Imm8u":                            INT_Imm8u,
	"INT3":                                 INT3,
	"INTO":                                 INTO,
	"INVD":                                 INVD,
	"INVLPG_M":                             INVLPG_M,
	"INVPCID_R32_M128":                     INVPCID_R32_M128,
	"INVPCID_R64_M128":                     INVPCID_R64_M128,
	"IRET":                                 IRET,
	"IRETD":                                IRETD,
	"IRETQ_REX":                            IRETQ_REX,
	"JA_Rel8":                              JA_Rel8,
	"JA_Rel16":                             JA_Rel16,
	"JA_Rel32":                             JA_Rel32,
	"JAE_Rel8":                             JAE_Rel8,
	"JAE_Rel16":                            JAE_Rel16,
	"JAE_Rel32":                            JAE_Rel32,
	"JB_Rel8":                              JB_Rel8,
	"JB_Rel16":                             JB_Rel16,
	"JB_Rel32":                             JB_Rel32,
	"JBE_Rel8":                             JBE_Rel8,
	"JBE_Rel16":                            JBE_Rel16,
	"JBE_Rel32":                            JBE_Rel32,
	"JC_Rel8":                              JC_Rel8,
	"JC_Rel16":                             JC_Rel16,
	"JC_Rel32":                             JC_Rel32,
	"JCXZ_Rel8":                            JCXZ_Rel8,
	"JE_Rel8":                              JE_Rel8,
	"JE_Rel16":                             JE_Rel16,
	"JE_Rel32":                             JE_Rel32,
	"JECXZ_Rel8":                           JECXZ_Rel8,
	"JG_Rel8":                              JG_Rel8,
	"JG_Rel16":                             JG_Rel16,
	"JG_Rel32":                             JG_Rel32,
	"JGE_Rel8":                             JGE_Rel8,
	"JGE_Rel16":                            JGE_Rel16,
	"JGE_Rel32":                            JGE_Rel32,
	"JL_Rel8":                              JL_Rel8,
	"JL_Rel16":                             JL_Rel16,
	"JL_Rel32":                             JL_Rel32,
	"JLE_Rel8":                             JLE_Rel8,
	"JLE_Rel16":                            JLE_Rel16,
	"JLE_Rel32":                            JLE_Rel32,
	"JMP_Rel8":                             JMP_Rel8,
	"JMP_Rel16":                            JMP_Rel16,
	"JMP_Rel32":                            JMP_Rel32,
	"JMP_Rmr16":                            JMP_Rmr16,
	"JMP_Rmr32":                            JMP_Rmr32,
	"JMP_Rmr64":                            JMP_Rmr64,
	"JMP_M16":                              JMP_M16,
	"JMP_M32":                              JMP_M32,
	"JMP_M64":                              JMP_M64,
	"JMP_FAR_Ptr16v16":                     JMP_FAR_Ptr16v16,
	"JMP_FAR_Ptr16v32":                     JMP_FAR_Ptr16v32,
	"JMP_FAR_M16v16":                       JMP_FAR_M16v16,
	"JMP_FAR_M16v32":                       JMP_FAR_M16v32,
	"JMP_FAR_M16v64_REX":                   JMP_FAR_M16v64_REX,
	"JNA_Rel8":                             JNA_Rel8,
	"JNA_Rel16":                            JNA_Rel16,
	"JNA_Rel32":                            JNA_Rel32,
	"JNAE_Rel8":                            JNAE_Rel8,
	"JNAE_Rel16":                           JNAE_Rel16,
	"JNAE_Rel32":                           JNAE_Rel32,
	"JNB_Rel8":                             JNB_Rel8,
	"JNB_Rel16":                            JNB_Rel16,
	"JNB_Rel32":                            JNB_Rel32,
	"JNBE_Rel8":                            JNBE_Rel8,
	"JNBE_Rel16":                           JNBE_Rel16,
	"JNBE_Rel32":                           JNBE_Rel32,
	"JNC_Rel8":                             JNC_Rel8,
	"JNC_Rel16":                            JNC_Rel16,
	"JNC_Rel32":                            JNC_Rel32,
	"JNE_Rel8":                             JNE_Rel8,
	"JNE_Rel16":                            JNE_Rel16,
	"JNE_Rel32":                            JNE_Rel32,
	"JNG_Rel8":                             JNG_Rel8,
	"JNG_Rel16":                            JNG_Rel16,
	"JNG_Rel32":                            JNG_Rel32,
	"JNGE_Rel8":                            JNGE_Rel8,
	"JNGE_Rel16":                           JNGE_Rel16,
	"JNGE_Rel32":                           JNGE_Rel32,
	"JNL_Rel8":                             JNL_Rel8,
	"JNL_Rel16":                            JNL_Rel16,
	"JNL_Rel32":                            JNL_Rel32,
	"JNLE_Rel8":                            JNLE_Rel8,
	"JNLE_Rel16":                           JNLE_Rel16,
	"JNLE_Rel32":                           JNLE_Rel32,
	"JNO_Rel8":                             JNO_Rel8,
	"JNO_Rel16":                            JNO_Rel16,
	"JNO_Rel32":                            JNO_Rel32,
	"JNP_Rel8":                             JNP_Rel8,
	"JNP_Rel16":                            JNP_Rel16,
	"JNP_Rel32":                            JNP_Rel32,
	"JNS_Rel8":                             JNS_Rel8,
	"JNS_Rel16":                            JNS_Rel16,
	"JNS_Rel32":                            JNS_Rel32,
	"JNZ_Rel8":                             JNZ_Rel8,
	"JNZ_Rel16":                            JNZ_Rel16,
	"JNZ_Rel32":                            JNZ_Rel32,
	"JO_Rel8":                              JO_Rel8,
	"JO_Rel16":                             JO_Rel16,
	"JO_Rel32":                             JO_Rel32,
	"JP_Rel8":                              JP_Rel8,
	"JP_Rel16":                             JP_Rel16,
	"JP_Rel32":                             JP_Rel32,
	"JPE_Rel8":                             JPE_Rel8,
	"JPE_Rel16":                            JPE_Rel16,
	"JPE_Rel32":                            JPE_Rel32,
	"JPO_Rel8":                             JPO_Rel8,
	"JPO_Rel16":                            JPO_Rel16,
	"JPO_Rel32":                            JPO_Rel32,
	"JRCXZ_Rel8":                           JRCXZ_Rel8,
	"JS_Rel8":                              JS_Rel8,
	"JS_Rel16":                             JS_Rel16,
	"JS_Rel32":                             JS_Rel32,
	"JZ_Rel8":                              JZ_Rel8,
	"JZ_Rel16":                             JZ_Rel16,
	"JZ_Rel32":                             JZ_Rel32,
	"KADDB_K1_KV_K2_VEX":                   KADDB_K1_KV_K2_VEX,
	"KADDD_K1_KV_K2_VEX":                   KADDD_K1_KV_K2_VEX,
	"KADDQ_K1_KV_K2_VEX":                   KADDQ_K1_KV_K2_VEX,
	"KADDW_K1_KV_K2_VEX":                   KADDW_K1_KV_K2_VEX,
	"KANDB_K1_KV_K2_VEX":                   KANDB_K1_KV_K2_VEX,
	"KANDD_K1_KV_K2_VEX":                   KANDD_K1_KV_K2_VEX,
	"KANDNB_K1_KV_K2_VEX":                  KANDNB_K1_KV_K2_VEX,
	"KANDND_K1_KV_K2_VEX":                  KANDND_K1_KV_K2_VEX,
	"KANDNQ_K1_KV_K2_VEX":                  KANDNQ_K1_KV_K2_VEX,
	"KANDNW_K1_KV_K2_VEX":                  KANDNW_K1_KV_K2_VEX,
	"KANDQ_K1_KV_K2_VEX":                   KANDQ_K1_KV_K2_VEX,
	"KANDW_K1_KV_K2_VEX":                   KANDW_K1_KV_K2_VEX,
	"KMOVB_R32_K2_VEX":                     KMOVB_R32_K2_VEX,
	"KMOVB_K1_Rmr32_VEX":                   KMOVB_K1_Rmr32_VEX,
	"KMOVB_K1_K2_VEX":                      KMOVB_K1_K2_VEX,
	"KMOVB_K1_M8_VEX":                      KMOVB_K1_M8_VEX,
	"KMOVB_M8_K1_VEX":                      KMOVB_M8_K1_VEX,
	"KMOVD_R32_K2_VEX":                     KMOVD_R32_K2_VEX,
	"KMOVD_K1_Rmr32_VEX":                   KMOVD_K1_Rmr32_VEX,
	"KMOVD_K1_K2_VEX":                      KMOVD_K1_K2_VEX,
	"KMOVD_K1_M32_VEX":                     KMOVD_K1_M32_VEX,
	"KMOVD_M32_K1_VEX":                     KMOVD_M32_K1_VEX,
	"KMOVQ_R64_K2_VEX":                     KMOVQ_R64_K2_VEX,
	"KMOVQ_K1_Rmr64_VEX":                   KMOVQ_K1_Rmr64_VEX,
	"KMOVQ_K1_K2_VEX":                      KMOVQ_K1_K2_VEX,
	"KMOVQ_K1_M64_VEX":                     KMOVQ_K1_M64_VEX,
	"KMOVQ_M64_K1_VEX":                     KMOVQ_M64_K1_VEX,
	"KMOVW_R32_K2_VEX":                     KMOVW_R32_K2_VEX,
	"KMOVW_K1_Rmr32_VEX":                   KMOVW_K1_Rmr32_VEX,
	"KMOVW_K1_K2_VEX":                      KMOVW_K1_K2_VEX,
	"KMOVW_K1_M16_VEX":                     KMOVW_K1_M16_VEX,
	"KMOVW_M16_K1_VEX":                     KMOVW_M16_K1_VEX,
	"KNOTB_K1_K2_VEX":                      KNOTB_K1_K2_VEX,
	"KNOTD_K1_K2_VEX":                      KNOTD_K1_K2_VEX,
	"KNOTQ_K1_K2_VEX":                      KNOTQ_K1_K2_VEX,
	"KNOTW_K1_K2_VEX":                      KNOTW_K1_K2_VEX,
	"KORB_K1_KV_K2_VEX":                    KORB_K1_KV_K2_VEX,
	"KORD_K1_KV_K2_VEX":                    KORD_K1_KV_K2_VEX,
	"KORQ_K1_KV_K2_VEX":                    KORQ_K1_KV_K2_VEX,
	"KORTESTB_K1_K2_VEX":                   KORTESTB_K1_K2_VEX,
	"KORTESTD_K1_K2_VEX":                   KORTESTD_K1_K2_VEX,
	"KORTESTQ_K1_K2_VEX":                   KORTESTQ_K1_K2_VEX,
	"KORTESTW_K1_K2_VEX":                   KORTESTW_K1_K2_VEX,
	"KORW_K1_KV_K2_VEX":                    KORW_K1_KV_K2_VEX,
	"KSHIFTLB_K1_K2_Imm8_VEX":              KSHIFTLB_K1_K2_Imm8_VEX,
	"KSHIFTLD_K1_K2_Imm8_VEX":              KSHIFTLD_K1_K2_Imm8_VEX,
	"KSHIFTLQ_K1_K2_Imm8_VEX":              KSHIFTLQ_K1_K2_Imm8_VEX,
	"KSHIFTLW_K1_K2_Imm8_VEX":              KSHIFTLW_K1_K2_Imm8_VEX,
	"KSHIFTRB_K1_K2_Imm8_VEX":              KSHIFTRB_K1_K2_Imm8_VEX,
	"KSHIFTRD_K1_K2_Imm8_VEX":              KSHIFTRD_K1_K2_Imm8_VEX,
	"KSHIFTRQ_K1_K2_Imm8_VEX":              KSHIFTRQ_K1_K2_Imm8_VEX,
	"KSHIFTRW_K1_K2_Imm8_VEX":              KSHIFTRW_K1_K2_Imm8_VEX,
	"KTESTB_K1_K2_VEX":                     KTESTB_K1_K2_VEX,
	"KTESTD_K1_K2_VEX":                     KTESTD_K1_K2_VEX,
	"KTESTQ_K1_K2_VEX":                     KTESTQ_K1_K2_VEX,
	"KTESTW_K1_K2_VEX":                     KTESTW_K1_K2_VEX,
	"KUNPCKBW_K1_KV_K2_VEX":                KUNPCKBW_K1_KV_K2_VEX,
	"KUNPCKDQ_K1_KV_K2_VEX":                KUNPCKDQ_K1_KV_K2_VEX,
	"KUNPCKWD_K1_KV_K2_VEX":                KUNPCKWD_K1_KV_K2_VEX,
	"KXNORB_K1_KV_K2_VEX":                  KXNORB_K1_KV_K2_VEX,
	"KXNORD_K1_KV_K2_VEX":                  KXNORD_K1_KV_K2_VEX,
	"KXNORQ_K1_KV_K2_VEX":                  KXNORQ_K1_KV_K2_VEX,
	"KXNORW_K1_KV_K2_VEX":                  KXNORW_K1_KV_K2_VEX,
	"KXORB_K1_KV_K2_VEX":                   KXORB_K1_KV_K2_VEX,
	"KXORD_K1_KV_K2_VEX":                   KXORD_K1_KV_K2_VEX,
	"KXORQ_K1_KV_K2_VEX":                   KXORQ_K1_KV_K2_VEX,
	"KXORW_K1_KV_K2_VEX":                   KXORW_K1_KV_K2_VEX,
	"LAHF":                                 LAHF,
	"LAR_R16_Rmr16":                        LAR_R16_Rmr16,
	"LAR_R16_M16":                          LAR_R16_M16,
	"LAR_R32_Rmr32":                        LAR_R32_Rmr32,
	"LAR_R32_M16":                          LAR_R32_M16,
	"LAR_R64_Rmr16_REX":                    LAR_R64_Rmr16_REX,
	"LAR_R64_M16_REX":                      LAR_R64_M16_REX,
	"LDDQU_XMM1_M128":                      LDDQU_XMM1_M128,
	"LDMXCSR_M32":                          LDMXCSR_M32,
	"LDS_R16_M16v16":                       LDS_R16_M16v16,
	"LDS_R32_M16v32":                       LDS_R32_M16v32,
	"LEA_R16_M":                            LEA_R16_M,
	"LEA_R32_M":                            LEA_R32_M,
	"LEA_R64_M_REX":                        LEA_R64_M_REX,
	"LEAVE":                                LEAVE,
	"LES_R16_M16v16":                       LES_R16_M16v16,
	"LES_R32_M16v32":                       LES_R32_M16v32,
	"LFENCE":                               LFENCE,
	"LFS_R16_M16v16":                       LFS_R16_M16v16,
	"LFS_R32_M16v32":                       LFS_R32_M16v32,
	"LFS_R64_M16v64_REX":                   LFS_R64_M16v64_REX,
	"LGDT_M16x32":                          LGDT_M16x32,
	"LGDT_M16x64":                          LGDT_M16x64,
	"LGS_R16_M16v16":                       LGS_R16_M16v16,
	"LGS_R32_M16v32":                       LGS_R32_M16v32,
	"LGS_R64_M16v64_REX":                   LGS_R64_M16v64_REX,
	"LIDT_M16x32":                          LIDT_M16x32,
	"LIDT_M16x64":                          LIDT_M16x64,
	"LLDT_Rmr16":                           LLDT_Rmr16,
	"LLDT_M16":                             LLDT_M16,
	"LMSW_Rmr16":                           LMSW_Rmr16,
	"LMSW_M16":                             LMSW_M16,
	"LOADIWKEY_XMM1_XMM2":                  LOADIWKEY_XMM1_XMM2,
	"LODS_StrSrc8":                         LODS_StrSrc8,
	"LODS_StrSrc16":                        LODS_StrSrc16,
	"LODS_StrSrc32":                        LODS_StrSrc32,
	"LODS_StrSrc64_REX":                    LODS_StrSrc64_REX,
	"LODS_AL_StrSrc8":                      LODS_AL_StrSrc8,
	"LODS_AX_StrSrc16":                     LODS_AX_StrSrc16,
	"LODS_EAX_StrSrc32":                    LODS_EAX_StrSrc32,
	"LODS_RAX_StrSrc64_REX":                LODS_RAX_StrSrc64_REX,
	"LODSB":                                LODSB,
	"LODSB_StrSrc8":                        LODSB_StrSrc8,
	"LODSB_AL_StrSrc8":                     LODSB_AL_StrSrc8,
	"LODSD":                                LODSD,
	"LODSD_StrSrc32":                       LODSD_StrSrc32,
	"LODSD_EAX_StrSrc32":                   LODSD_EAX_StrSrc32,
	"LODSQ_REX":                            LODSQ_REX,
	"LODSQ_StrSrc64_REX":                   LODSQ_StrSrc64_REX,
	"LODSQ_RAX_StrSrc64_REX":               LODSQ_RAX_StrSrc64_REX,
	"LODSW":                                LODSW,
	"LODSW_StrSrc16":                       LODSW_StrSrc16,
	"LODSW_AX_StrSrc16":                    LODSW_AX_StrSrc16,
	"LOOP_Rel8":                            LOOP_Rel8,
	"LOOPE_Rel8":                           LOOPE_Rel8,
	"LOOPNE_Rel8":                          LOOPNE_Rel8,
	"LSL_R16_Rmr16":                        LSL_R16_Rmr16,
	"LSL_R16_M16":                          LSL_R16_M16,
	"LSL_R32_Rmr32":                        LSL_R32_Rmr32,
	"LSL_R32_M16":                          LSL_R32_M16,
	"LSL_R64_Rmr32_REX":                    LSL_R64_Rmr32_REX,
	"LSL_R64_M16_REX":                      LSL_R64_M16_REX,
	"LSS_R16_M16v16":                       LSS_R16_M16v16,
	"LSS_R32_M16v32":                       LSS_R32_M16v32,
	"LSS_R64_M16v64_REX":                   LSS_R64_M16v64_REX,
	"LTR_Rmr16":                            LTR_Rmr16,
	"LTR_M16":                              LTR_M16,
	"LZCNT_R16_Rmr16":                      LZCNT_R16_Rmr16,
	"LZCNT_R16_M16":                        LZCNT_R16_M16,
	"LZCNT_R32_Rmr32":                      LZCNT_R32_Rmr32,
	"LZCNT_R32_M32":                        LZCNT_R32_M32,
	"LZCNT_R64_Rmr64_REX":                  LZCNT_R64_Rmr64_REX,
	"LZCNT_R64_M64_REX":                    LZCNT_R64_M64_REX,
	"MASKMOVDQU_XMM1_XMM2":                 MASKMOVDQU_XMM1_XMM2,
	"MASKMOVQ_MM1_MM2":                     MASKMOVQ_MM1_MM2,
	"MAXPD_XMM1_XMM2":                      MAXPD_XMM1_XMM2,
	"MAXPD_XMM1_M128":                      MAXPD_XMM1_M128,
	"MAXPS_XMM1_XMM2":                      MAXPS_XMM1_XMM2,
	"MAXPS_XMM1_M128":                      MAXPS_XMM1_M128,
	"MAXSD_XMM1_XMM2":                      MAXSD_XMM1_XMM2,
	"MAXSD_XMM1_M64":                       MAXSD_XMM1_M64,
	"MAXSS_XMM1_XMM2":                      MAXSS_XMM1_XMM2,
	"MAXSS_XMM1_M32":                       MAXSS_XMM1_M32,
	"MFENCE":                               MFENCE,
	"MINPD_XMM1_XMM2":                      MINPD_XMM1_XMM2,
	"MINPD_XMM1_M128":                      MINPD_XMM1_M128,
	"MINPS_XMM1_XMM2":                      MINPS_XMM1_XMM2,
	"MINPS_XMM1_M128":                      MINPS_XMM1_M128,
	"MINSD_XMM1_XMM2":                      MINSD_XMM1_XMM2,
	"MINSD_XMM1_M64":                       MINSD_XMM1_M64,
	"MINSS_XMM1_XMM2":                      MINSS_XMM1_XMM2,
	"MINSS_XMM1_M32":                       MINSS_XMM1_M32,
	"MONITOR":                              MONITOR,
	"MOV_AL_Moffs8":                        MOV_AL_Moffs8,
	"MOV_AL_Moffs8_REX":                    MOV_AL_Moffs8_REX,
	"MOV_AX_Moffs16":                       MOV_AX_Moffs16,
	"MOV_EAX_Moffs32":                      MOV_EAX_Moffs32,
	"MOV_RAX_Moffs64_REX":                  MOV_RAX_Moffs64_REX,
	"MOV_CR8_Rmr64_REX":                    MOV_CR8_Rmr64_REX,
	"MOV_R8_Rmr8":                          MOV_R8_Rmr8,
	"MOV_R8_M8":                            MOV_R8_M8,
	"MOV_R16_Rmr16":                        MOV_R16_Rmr16,
	"MOV_R16_M16":                          MOV_R16_M16,
	"MOV_R32_Rmr32":                        MOV_R32_Rmr32,
	"MOV_R32_M32":                          MOV_R32_M32,
	"MOV_R64_Rmr64_REX":                    MOV_R64_Rmr64_REX,
	"MOV_R64_M64_REX":                      MOV_R64_M64_REX,
	"MOV_Sreg_Rmr16":                       MOV_Sreg_Rmr16,
	"MOV_Sreg_Rmr32":                       MOV_Sreg_Rmr32,
	"MOV_Sreg_M16":                         MOV_Sreg_M16,
	"MOV_CR0toCR7_Rmr32":                   MOV_CR0toCR7_Rmr32,
	"MOV_CR0toCR7_Rmr64":                   MOV_CR0toCR7_Rmr64,
	"MOV_DR0toDR7_Rmr32":                   MOV_DR0toDR7_Rmr32,
	"MOV_DR0toDR7_Rmr64":                   MOV_DR0toDR7_Rmr64,
	"MOV_Rmr8_Imm8u":                       MOV_Rmr8_Imm8u,
	"MOV_Rmr8_R8":                          MOV_Rmr8_R8,
	"MOV_Rmr16_Imm16":                      MOV_Rmr16_Imm16,
	"MOV_Rmr16_R16":                        MOV_Rmr16_R16,
	"MOV_Rmr16_Sreg":                       MOV_Rmr16_Sreg,
	"MOV_Rmr32_Imm32":                      MOV_Rmr32_Imm32,
	"MOV_Rmr32_R32":                        MOV_Rmr32_R32,
	"MOV_Rmr32_Sreg":                       MOV_Rmr32_Sreg,
	"MOV_Rmr32_CR0toCR7":                   MOV_Rmr32_CR0toCR7,
	"MOV_Rmr32_DR0toDR7":                   MOV_Rmr32_DR0toDR7,
	"MOV_Rmr64_CR8_REX":                    MOV_Rmr64_CR8_REX,
	"MOV_Rmr64_Imm32_REX":                  MOV_Rmr64_Imm32_REX,
	"MOV_Rmr64_R64_REX":                    MOV_Rmr64_R64_REX,
	"MOV_Rmr64_CR0toCR7":                   MOV_Rmr64_CR0toCR7,
	"MOV_Rmr64_DR0toDR7":                   MOV_Rmr64_DR0toDR7,
	"MOV_R8op_Imm8u":                       MOV_R8op_Imm8u,
	"MOV_R16op_Imm16":                      MOV_R16op_Imm16,
	"MOV_R32op_Imm32":                      MOV_R32op_Imm32,
	"MOV_R64op_Imm64_REX":                  MOV_R64op_Imm64_REX,
	"MOV_M8_Imm8u":                         MOV_M8_Imm8u,
	"MOV_M8_R8":                            MOV_M8_R8,
	"MOV_M16_Imm16":                        MOV_M16_Imm16,
	"MOV_M16_R16":                          MOV_M16_R16,
	"MOV_M16_Sreg":                         MOV_M16_Sreg,
	"MOV_M32_Imm32":                        MOV_M32_Imm32,
	"MOV_M32_R32":                          MOV_M32_R32,
	"MOV_M64_Imm32_REX":                    MOV_M64_Imm32_REX,
	"MOV_M64_R64_REX":                      MOV_M64_R64_REX,
	"MOV_Moffs8_AL":                        MOV_Moffs8_AL,
	"MOV_Moffs8_AL_REX":                    MOV_Moffs8_AL_REX,
	"MOV_Moffs16_AX":                       MOV_Moffs16_AX,
	"MOV_Moffs32_EAX":                      MOV_Moffs32_EAX,
	"MOV_Moffs64_RAX_REX":                  MOV_Moffs64_RAX_REX,
	"MOVAPD_XMM1_XMM2":                     MOVAPD_XMM1_XMM2,
	"MOVAPD_XMM1_M128":                     MOVAPD_XMM1_M128,
	"MOVAPD_XMM2_XMM1":                     MOVAPD_XMM2_XMM1,
	"MOVAPD_M128_XMM1":                     MOVAPD_M128_XMM1,
	"MOVAPS_XMM1_XMM2":                     MOVAPS_XMM1_XMM2,
	"MOVAPS_XMM1_M128":                     MOVAPS_XMM1_M128,
	"MOVAPS_XMM2_XMM1":                     MOVAPS_XMM2_XMM1,
	"MOVAPS_M128_XMM1":                     MOVAPS_M128_XMM1,
	"MOVBE_R16_M16":                        MOVBE_R16_M16,
	"MOVBE_R32_M32":                        MOVBE_R32_M32,
	"MOVBE_R64_M64_REX":                    MOVBE_R64_M64_REX,
	"MOVBE_M16_R16":                        MOVBE_M16_R16,
	"MOVBE_M32_R32":                        MOVBE_M32_R32,
	"MOVBE_M64_R64_REX":                    MOVBE_M64_R64_REX,
	"MOVD_MM1_Rmr32":                       MOVD_MM1_Rmr32,
	"MOVD_MM1_M32":                         MOVD_MM1_M32,
	"MOVD_XMM1_Rmr32":                      MOVD_XMM1_Rmr32,
	"MOVD_XMM1_M32":                        MOVD_XMM1_M32,
	"MOVD_Rmr32_MM1":                       MOVD_Rmr32_MM1,
	"MOVD_Rmr32_XMM1":                      MOVD_Rmr32_XMM1,
	"MOVD_M32_MM1":                         MOVD_M32_MM1,
	"MOVD_M32_XMM1":                        MOVD_M32_XMM1,
	"MOVDDUP_XMM1_XMM2":                    MOVDDUP_XMM1_XMM2,
	"MOVDDUP_XMM1_M64":                     MOVDDUP_XMM1_M64,
	"MOVDIR64B_R16_M512":                   MOVDIR64B_R16_M512,
	"MOVDIR64B_R32_M512":                   MOVDIR64B_R32_M512,
	"MOVDIR64B_R64_M512":                   MOVDIR64B_R64_M512,
	"MOVDIRI_M32_R32":                      MOVDIRI_M32_R32,
	"MOVDIRI_M64_R64_REX":                  MOVDIRI_M64_R64_REX,
	"MOVDQ2Q_MM1_XMM2":                     MOVDQ2Q_MM1_XMM2,
	"MOVDQA_XMM1_XMM2":                     MOVDQA_XMM1_XMM2,
	"MOVDQA_XMM1_M128":                     MOVDQA_XMM1_M128,
	"MOVDQA_XMM2_XMM1":                     MOVDQA_XMM2_XMM1,
	"MOVDQA_M128_XMM1":                     MOVDQA_M128_XMM1,
	"MOVDQU_XMM1_XMM2":                     MOVDQU_XMM1_XMM2,
	"MOVDQU_XMM1_M128":                     MOVDQU_XMM1_M128,
	"MOVDQU_XMM2_XMM1":                     MOVDQU_XMM2_XMM1,
	"MOVDQU_M128_XMM1":                     MOVDQU_M128_XMM1,
	"MOVHLPS_XMM1_XMM2":                    MOVHLPS_XMM1_XMM2,
	"MOVHPD_XMM1_M64":                      MOVHPD_XMM1_M64,
	"MOVHPD_M64_XMM1":                      MOVHPD_M64_XMM1,
	"MOVHPS_XMM1_M64":                      MOVHPS_XMM1_M64,
	"MOVHPS_M64_XMM1":                      MOVHPS_M64_XMM1,
	"MOVLHPS_XMM1_XMM2":                    MOVLHPS_XMM1_XMM2,
	"MOVLPD_XMM1_M64":                      MOVLPD_XMM1_M64,
	"MOVLPD_M64_XMM1":                      MOVLPD_M64_XMM1,
	"MOVLPS_XMM1_M64":                      MOVLPS_XMM1_M64,
	"MOVLPS_M64_XMM1":                      MOVLPS_M64_XMM1,
	"MOVMSKPD_R32_XMM2":                    MOVMSKPD_R32_XMM2,
	"MOVMSKPS_R32_XMM2":                    MOVMSKPS_R32_XMM2,
	"MOVNTDQ_M128_XMM1":                    MOVNTDQ_M128_XMM1,
	"MOVNTDQA_XMM1_M128":                   MOVNTDQA_XMM1_M128,
	"MOVNTI_M32_R32":                       MOVNTI_M32_R32,
	"MOVNTI_M64_R64_REX":                   MOVNTI_M64_R64_REX,
	"MOVNTPD_M128_XMM1":                    MOVNTPD_M128_XMM1,
	"MOVNTPS_M128_XMM1":                    MOVNTPS_M128_XMM1,
	"MOVNTQ_M64_MM1":                       MOVNTQ_M64_MM1,
	"MOVNTSD_M64_XMM1":                     MOVNTSD_M64_XMM1,
	"MOVNTSS_M32_XMM1":                     MOVNTSS_M32_XMM1,
	"MOVQ_MM1_MM2":                         MOVQ_MM1_MM2,
	"MOVQ_MM1_M64":                         MOVQ_MM1_M64,
	"MOVQ_XMM1_Rmr64_REX":                  MOVQ_XMM1_Rmr64_REX,
	"MOVQ_XMM1_XMM2":                       MOVQ_XMM1_XMM2,
	"MOVQ_XMM1_M64":                        MOVQ_XMM1_M64,
	"MOVQ_Rmr64_XMM1_REX":                  MOVQ_Rmr64_XMM1_REX,
	"MOVQ_MM2_MM1":                         MOVQ_MM2_MM1,
	"MOVQ_XMM2_XMM1":                       MOVQ_XMM2_XMM1,
	"MOVQ_M64_MM1":                         MOVQ_M64_MM1,
	"MOVQ_M64_XMM1":                        MOVQ_M64_XMM1,
	"MOVQ2DQ_XMM1_MM2":                     MOVQ2DQ_XMM1_MM2,
	"MOVS_StrDst8_StrSrc8":                 MOVS_StrDst8_StrSrc8,
	"MOVS_StrDst16_StrSrc16":               MOVS_StrDst16_StrSrc16,
	"MOVS_StrDst32_StrSrc32":               MOVS_StrDst32_StrSrc32,
	"MOVS_StrDst64_StrSrc64_REX":           MOVS_StrDst64_StrSrc64_REX,
	"MOVSB":                                MOVSB,
	"MOVSB_StrDst8_StrSrc8":                MOVSB_StrDst8_StrSrc8,
	"MOVSD":                                MOVSD,
	"MOVSD_StrDst32_StrSrc32":              MOVSD_StrDst32_StrSrc32,
	"MOVSD_XMM1_XMM2":                      MOVSD_XMM1_XMM2,
	"MOVSD_XMM1_M64":                       MOVSD_XMM1_M64,
	"MOVSD_XMM2_XMM1":                      MOVSD_XMM2_XMM1,
	"MOVSD_M64_XMM1":                       MOVSD_M64_XMM1,
	"MOVSHDUP_XMM1_XMM2":                   MOVSHDUP_XMM1_XMM2,
	"MOVSHDUP_XMM1_M128":                   MOVSHDUP_XMM1_M128,
	"MOVSLDUP_XMM1_XMM2":                   MOVSLDUP_XMM1_XMM2,
	"MOVSLDUP_XMM1_M128":                   MOVSLDUP_XMM1_M128,
	"MOVSQ_REX":                            MOVSQ_REX,
	"MOVSQ_StrDst64_StrSrc64_REX":          MOVSQ_StrDst64_StrSrc64_REX,
	"MOVSS_XMM1_XMM2":                      MOVSS_XMM1_XMM2,
	"MOVSS_XMM1_M32":                       MOVSS_XMM1_M32,
	"MOVSS_XMM2_XMM1":                      MOVSS_XMM2_XMM1,
	"MOVSS_M32_XMM1":                       MOVSS_M32_XMM1,
	"MOVSW":                                MOVSW,
	"MOVSW_StrDst16_StrSrc16":              MOVSW_StrDst16_StrSrc16,
	"MOVSX_R16_Rmr8":                       MOVSX_R16_Rmr8,
	"MOVSX_R16_M8":                         MOVSX_R16_M8,
	"MOVSX_R32_Rmr8":                       MOVSX_R32_Rmr8,
	"MOVSX_R32_Rmr16":                      MOVSX_R32_Rmr16,
	"MOVSX_R32_M8":                         MOVSX_R32_M8,
	"MOVSX_R32_M16":                        MOVSX_R32_M16,
	"MOVSX_R64_Rmr8_REX":                   MOVSX_R64_Rmr8_REX,
	"MOVSX_R64_Rmr16_REX":                  MOVSX_R64_Rmr16_REX,
	"MOVSX_R64_M8_REX":                     MOVSX_R64_M8_REX,
	"MOVSX_R64_M16_REX":                    MOVSX_R64_M16_REX,
	"MOVSXD_R16_Rmr16":                     MOVSXD_R16_Rmr16,
	"MOVSXD_R16_M16":                       MOVSXD_R16_M16,
	"MOVSXD_R64_Rmr32_REX":                 MOVSXD_R64_Rmr32_REX,
	"MOVSXD_R64_M32_REX":                   MOVSXD_R64_M32_REX,
	"MOVUPD_XMM1_XMM2":                     MOVUPD_XMM1_XMM2,
	"MOVUPD_XMM1_M128":                     MOVUPD_XMM1_M128,
	"MOVUPD_XMM2_XMM1":                     MOVUPD_XMM2_XMM1,
	"MOVUPD_M128_XMM1":                     MOVUPD_M128_XMM1,
	"MOVUPS_XMM1_XMM2":                     MOVUPS_XMM1_XMM2,
	"MOVUPS_XMM1_M128":                     MOVUPS_XMM1_M128,
	"MOVUPS_XMM2_XMM1":                     MOVUPS_XMM2_XMM1,
	"MOVUPS_M128_XMM1":                     MOVUPS_M128_XMM1,
	"MOVZX_R16_Rmr8":                       MOVZX_R16_Rmr8,
	"MOVZX_R16_M8":                         MOVZX_R16_M8,
	"MOVZX_R32_Rmr8":                       MOVZX_R32_Rmr8,
	"MOVZX_R32_Rmr16":                      MOVZX_R32_Rmr16,
	"MOVZX_R32_M8":                         MOVZX_R32_M8,
	"MOVZX_R32_M16":                        MOVZX_R32_M16,
	"MOVZX_R64_Rmr8_REX":                   MOVZX_R64_Rmr8_REX,
	"MOVZX_R64_Rmr16_REX":                  MOVZX_R64_Rmr16_REX,
	"MOVZX_R64_M8_REX":                     MOVZX_R64_M8_REX,
	"MOVZX_R64_M16_REX":                    MOVZX_R64_M16_REX,
	"MPSADBW_XMM1_XMM2_Imm8":               MPSADBW_XMM1_XMM2_Imm8,
	"MPSADBW_XMM1_M128_Imm8":               MPSADBW_XMM1_M128_Imm8,
	"MUL_Rmr8":                             MUL_Rmr8,
	"MUL_Rmr16":                            MUL_Rmr16,
	"MUL_Rmr32":                            MUL_Rmr32,
	"MUL_Rmr64_REX":                        MUL_Rmr64_REX,
	"MUL_M8":                               MUL_M8,
	"MUL_M16":                              MUL_M16,
	"MUL_M32":                              MUL_M32,
	"MUL_M64_REX":                          MUL_M64_REX,
	"MULPD_XMM1_XMM2":                      MULPD_XMM1_XMM2,
	"MULPD_XMM1_M128":                      MULPD_XMM1_M128,
	"MULPS_XMM1_XMM2":                      MULPS_XMM1_XMM2,
	"MULPS_XMM1_M128":                      MULPS_XMM1_M128,
	"MULSD_XMM1_XMM2":                      MULSD_XMM1_XMM2,
	"MULSD_XMM1_M64":                       MULSD_XMM1_M64,
	"MULSS_XMM1_XMM2":                      MULSS_XMM1_XMM2,
	"MULSS_XMM1_M32":                       MULSS_XMM1_M32,
	"MULX_R32_R32V_Rmr32_VEX":              MULX_R32_R32V_Rmr32_VEX,
	"MULX_R32_R32V_M32_VEX":                MULX_R32_R32V_M32_VEX,
	"MULX_R64_R64V_Rmr64_VEX":              MULX_R64_R64V_Rmr64_VEX,
	"MULX_R64_R64V_M64_VEX":                MULX_R64_R64V_M64_VEX,
	"MWAIT":                                MWAIT,
	"NEG_Rmr8":                             NEG_Rmr8,
	"NEG_Rmr16":                            NEG_Rmr16,
	"NEG_Rmr32":                            NEG_Rmr32,
	"NEG_Rmr64_REX":                        NEG_Rmr64_REX,
	"NEG_M8":                               NEG_M8,
	"NEG_M16":                              NEG_M16,
	"NEG_M32":                              NEG_M32,
	"NEG_M64_REX":                          NEG_M64_REX,
	"NOP":                                  NOP,
	"NOP_Rmr16":                            NOP_Rmr16,
	"NOP_Rmr32":                            NOP_Rmr32,
	"NOP_M16":                              NOP_M16,
	"NOP_M32":                              NOP_M32,
	"NOT_Rmr8":                             NOT_Rmr8,
	"NOT_Rmr16":                            NOT_Rmr16,
	"NOT_Rmr32":                            NOT_Rmr32,
	"NOT_Rmr64_REX":                        NOT_Rmr64_REX,
	"NOT_M8":                               NOT_M8,
	"NOT_M16":                              NOT_M16,
	"NOT_M32":                              NOT_M32,
	"NOT_M64_REX":                          NOT_M64_REX,
	"OR_AL_Imm8":                           OR_AL_Imm8,
	"OR_AX_Imm16":                          OR_AX_Imm16,
	"OR_EAX_Imm32":                         OR_EAX_Imm32,
	"OR_RAX_Imm32_REX":                     OR_RAX_Imm32_REX,
	"OR_R8_Rmr8":                           OR_R8_Rmr8,
	"OR_R8_M8":                             OR_R8_M8,
	"OR_R16_Rmr16":                         OR_R16_Rmr16,
	"OR_R16_M16":                           OR_R16_M16,
	"OR_R32_Rmr32":                         OR_R32_Rmr32,
	"OR_R32_M32":                           OR_R32_M32,
	"OR_R64_Rmr64_REX":                     OR_R64_Rmr64_REX,
	"OR_R64_M64_REX":                       OR_R64_M64_REX,
	"OR_Rmr8_Imm8":                         OR_Rmr8_Imm8,
	"OR_Rmr8_R8":                           OR_Rmr8_R8,
	"OR_Rmr16_Imm8":                        OR_Rmr16_Imm8,
	"OR_Rmr16_Imm16":                       OR_Rmr16_Imm16,
	"OR_Rmr16_R16":                         OR_Rmr16_R16,
	"OR_Rmr32_Imm8":                        OR_Rmr32_Imm8,
	"OR_Rmr32_Imm32":                       OR_Rmr32_Imm32,
	"OR_Rmr32_R32":                         OR_Rmr32_R32,
	"OR_Rmr64_Imm8_REX":                    OR_Rmr64_Imm8_REX,
	"OR_Rmr64_Imm32_REX":                   OR_Rmr64_Imm32_REX,
	"OR_Rmr64_R64_REX":                     OR_Rmr64_R64_REX,
	"OR_M8_Imm8":                           OR_M8_Imm8,
	"OR_M8_R8":                             OR_M8_R8,
	"OR_M16_Imm8":                          OR_M16_Imm8,
	"OR_M16_Imm16":                         OR_M16_Imm16,
	"OR_M16_R16":                           OR_M16_R16,
	"OR_M32_Imm8":                          OR_M32_Imm8,
	"OR_M32_Imm32":                         OR_M32_Imm32,
	"OR_M32_R32":                           OR_M32_R32,
	"OR_M64_Imm8_REX":                      OR_M64_Imm8_REX,
	"OR_M64_Imm32_REX":                     OR_M64_Imm32_REX,
	"OR_M64_R64_REX":                       OR_M64_R64_REX,
	"ORPD_XMM1_XMM2":                       ORPD_XMM1_XMM2,
	"ORPD_XMM1_M128":                       ORPD_XMM1_M128,
	"ORPS_XMM1_XMM2":                       ORPS_XMM1_XMM2,
	"ORPS_XMM1_M128":                       ORPS_XMM1_M128,
	"OUT_DX_AL":                            OUT_DX_AL,
	"OUT_DX_AX":                            OUT_DX_AX,
	"OUT_DX_EAX":                           OUT_DX_EAX,
	"OUT_Imm8u_AL":                         OUT_Imm8u_AL,
	"OUT_Imm8u_AX":                         OUT_Imm8u_AX,
	"OUT_Imm8u_EAX":                        OUT_Imm8u_EAX,
	"OUTS_DX_StrSrc8":                      OUTS_DX_StrSrc8,
	"OUTS_DX_StrSrc16":                     OUTS_DX_StrSrc16,
	"OUTS_DX_StrSrc32":                     OUTS_DX_StrSrc32,
	"OUTSB":                                OUTSB,
	"OUTSB_DX_StrSrc8":                     OUTSB_DX_StrSrc8,
	"OUTSD":                                OUTSD,
	"OUTSD_DX_StrSrc32":                    OUTSD_DX_StrSrc32,
	"OUTSW":                                OUTSW,
	"OUTSW_DX_StrSrc16":                    OUTSW_DX_StrSrc16,
	"PABSB_MM1_MM2":                        PABSB_MM1_MM2,
	"PABSB_MM1_M64":                        PABSB_MM1_M64,
	"PABSB_XMM1_XMM2":                      PABSB_XMM1_XMM2,
	"PABSB_XMM1_M128":                      PABSB_XMM1_M128,
	"PABSD_MM1_MM2":                        PABSD_MM1_MM2,
	"PABSD_MM1_M64":                        PABSD_MM1_M64,
	"PABSD_XMM1_XMM2":                      PABSD_XMM1_XMM2,
	"PABSD_XMM1_M128":                      PABSD_XMM1_M128,
	"PABSW_MM1_MM2":                        PABSW_MM1_MM2,
	"PABSW_MM1_M64":                        PABSW_MM1_M64,
	"PABSW_XMM1_XMM2":                      PABSW_XMM1_XMM2,
	"PABSW_XMM1_M128":                      PABSW_XMM1_M128,
	"PACKSSDW_MM1_MM2":                     PACKSSDW_MM1_MM2,
	"PACKSSDW_MM1_M64":                     PACKSSDW_MM1_M64,
	"PACKSSDW_XMM1_XMM2":                   PACKSSDW_XMM1_XMM2,
	"PACKSSDW_XMM1_M128":                   PACKSSDW_XMM1_M128,
	"PACKSSWB_MM1_MM2":                     PACKSSWB_MM1_MM2,
	"PACKSSWB_MM1_M64":                     PACKSSWB_MM1_M64,
	"PACKSSWB_XMM1_XMM2":                   PACKSSWB_XMM1_XMM2,
	"PACKSSWB_XMM1_M128":                   PACKSSWB_XMM1_M128,
	"PACKUSDW_XMM1_XMM2":                   PACKUSDW_XMM1_XMM2,
	"PACKUSDW_XMM1_M128":                   PACKUSDW_XMM1_M128,
	"PACKUSWB_MM1_MM2":                     PACKUSWB_MM1_MM2,
	"PACKUSWB_MM1_M64":                     PACKUSWB_MM1_M64,
	"PACKUSWB_XMM1_XMM2":                   PACKUSWB_XMM1_XMM2,
	"PACKUSWB_XMM1_M128":                   PACKUSWB_XMM1_M128,
	"PADDB_MM1_MM2":                        PADDB_MM1_MM2,
	"PADDB_MM1_M64":                        PADDB_MM1_M64,
	"PADDB_XMM1_XMM2":                      PADDB_XMM1_XMM2,
	"PADDB_XMM1_M128":                      PADDB_XMM1_M128,
	"PADDD_MM1_MM2":                        PADDD_MM1_MM2,
	"PADDD_MM1_M64":                        PADDD_MM1_M64,
	"PADDD_XMM1_XMM2":                      PADDD_XMM1_XMM2,
	"PADDD_XMM1_M128":                      PADDD_XMM1_M128,
	"PADDQ_MM1_MM2":                        PADDQ_MM1_MM2,
	"PADDQ_MM1_M64":                        PADDQ_MM1_M64,
	"PADDQ_XMM1_XMM2":                      PADDQ_XMM1_XMM2,
	"PADDQ_XMM1_M128":                      PADDQ_XMM1_M128,
	"PADDSB_MM1_MM2":                       PADDSB_MM1_MM2,
	"PADDSB_MM1_M64":                       PADDSB_MM1_M64,
	"PADDSB_XMM1_XMM2":                     PADDSB_XMM1_XMM2,
	"PADDSB_XMM1_M128":                     PADDSB_XMM1_M128,
	"PADDSW_MM1_MM2":                       PADDSW_MM1_MM2,
	"PADDSW_MM1_M64":                       PADDSW_MM1_M64,
	"PADDSW_XMM1_XMM2":                     PADDSW_XMM1_XMM2,
	"PADDSW_XMM1_M128":                     PADDSW_XMM1_M128,
	"PADDUSB_MM1_MM2":                      PADDUSB_MM1_MM2,
	"PADDUSB_MM1_M64":                      PADDUSB_MM1_M64,
	"PADDUSB_XMM1_XMM2":                    PADDUSB_XMM1_XMM2,
	"PADDUSB_XMM1_M128":                    PADDUSB_XMM1_M128,
	"PADDUSW_MM1_MM2":                      PADDUSW_MM1_MM2,
	"PADDUSW_MM1_M64":                      PADDUSW_MM1_M64,
	"PADDUSW_XMM1_XMM2":                    PADDUSW_XMM1_XMM2,
	"PADDUSW_XMM1_M128":                    PADDUSW_XMM1_M128,
	"PADDW_MM1_MM2":                        PADDW_MM1_MM2,
	"PADDW_MM1_M64":                        PADDW_MM1_M64,
	"PADDW_XMM1_XMM2":                      PADDW_XMM1_XMM2,
	"PADDW_XMM1_M128":                      PADDW_XMM1_M128,
	"PALIGNR_MM1_MM2_Imm8":                 PALIGNR_MM1_MM2_Imm8,
	"PALIGNR_MM1_M64_Imm8":                 PALIGNR_MM1_M64_Imm8,
	"PALIGNR_XMM1_XMM2_Imm8":               PALIGNR_XMM1_XMM2_Imm8,
	"PALIGNR_XMM1_M128_Imm8":               PALIGNR_XMM1_M128_Imm8,
	"PAND_MM1_MM2":                         PAND_MM1_MM2,
	"PAND_MM1_M64":                         PAND_MM1_M64,
	"PAND_XMM1_XMM2":                       PAND_XMM1_XMM2,
	"PAND_XMM1_M128":                       PAND_XMM1_M128,
	"PANDN_MM1_MM2":                        PANDN_MM1_MM2,
	"PANDN_MM1_M64":                        PANDN_MM1_M64,
	"PANDN_XMM1_XMM2":                      PANDN_XMM1_XMM2,
	"PANDN_XMM1_M128":                      PANDN_XMM1_M128,
	"PAUSE":                                PAUSE,
	"PAVGB_MM1_MM2":                        PAVGB_MM1_MM2,
	"PAVGB_MM1_M64":                        PAVGB_MM1_M64,
	"PAVGB_XMM1_XMM2":                      PAVGB_XMM1_XMM2,
	"PAVGB_XMM1_M128":                      PAVGB_XMM1_M128,
	"PAVGW_MM1_MM2":                        PAVGW_MM1_MM2,
	"PAVGW_MM1_M64":                        PAVGW_MM1_M64,
	"PAVGW_XMM1_XMM2":                      PAVGW_XMM1_XMM2,
	"PAVGW_XMM1_M128":                      PAVGW_XMM1_M128,
	"PBLENDVB_XMM1_XMM2":                   PBLENDVB_XMM1_XMM2,
	"PBLENDVB_XMM1_M128":                   PBLENDVB_XMM1_M128,
	"PBLENDVB_XMM1_XMM2_XMM0":              PBLENDVB_XMM1_XMM2_XMM0,
	"PBLENDVB_XMM1_M128_XMM0":              PBLENDVB_XMM1_M128_XMM0,
	"PBLENDW_XMM1_XMM2_Imm8":               PBLENDW_XMM1_XMM2_Imm8,
	"PBLENDW_XMM1_M128_Imm8":               PBLENDW_XMM1_M128_Imm8,
	"PCLMULQDQ_XMM1_XMM2_Imm8":             PCLMULQDQ_XMM1_XMM2_Imm8,
	"PCLMULQDQ_XMM1_M128_Imm8":             PCLMULQDQ_XMM1_M128_Imm8,
	"PCMPEQB_MM1_MM2":                      PCMPEQB_MM1_MM2,
	"PCMPEQB_MM1_M64":                      PCMPEQB_MM1_M64,
	"PCMPEQB_XMM1_XMM2":                    PCMPEQB_XMM1_XMM2,
	"PCMPEQB_XMM1_M128":                    PCMPEQB_XMM1_M128,
	"PCMPEQD_MM1_MM2":                      PCMPEQD_MM1_MM2,
	"PCMPEQD_MM1_M64":                      PCMPEQD_MM1_M64,
	"PCMPEQD_XMM1_XMM2":                    PCMPEQD_XMM1_XMM2,
	"PCMPEQD_XMM1_M128":                    PCMPEQD_XMM1_M128,
	"PCMPEQQ_XMM1_XMM2":                    PCMPEQQ_XMM1_XMM2,
	"PCMPEQQ_XMM1_M128":                    PCMPEQQ_XMM1_M128,
	"PCMPEQW_MM1_MM2":                      PCMPEQW_MM1_MM2,
	"PCMPEQW_MM1_M64":                      PCMPEQW_MM1_M64,
	"PCMPEQW_XMM1_XMM2":                    PCMPEQW_XMM1_XMM2,
	"PCMPEQW_XMM1_M128":                    PCMPEQW_XMM1_M128,
	"PCMPESTRI_XMM1_XMM2_Imm8":             PCMPESTRI_XMM1_XMM2_Imm8,
	"PCMPESTRI_XMM1_M128_Imm8":             PCMPESTRI_XMM1_M128_Imm8,
	"PCMPESTRM_XMM1_XMM2_Imm8":             PCMPESTRM_XMM1_XMM2_Imm8,
	"PCMPESTRM_XMM1_M128_Imm8":             PCMPESTRM_XMM1_M128_Imm8,
	"PCMPGTB_MM1_MM2":                      PCMPGTB_MM1_MM2,
	"PCMPGTB_MM1_M64":                      PCMPGTB_MM1_M64,
	"PCMPGTB_XMM1_XMM2":                    PCMPGTB_XMM1_XMM2,
	"PCMPGTB_XMM1_M128":                    PCMPGTB_XMM1_M128,
	"PCMPGTD_MM1_MM2":                      PCMPGTD_MM1_MM2,
	"PCMPGTD_MM1_M64":                      PCMPGTD_MM1_M64,
	"PCMPGTD_XMM1_XMM2":                    PCMPGTD_XMM1_XMM2,
	"PCMPGTD_XMM1_M128":                    PCMPGTD_XMM1_M128,
	"PCMPGTQ_XMM1_XMM2":                    PCMPGTQ_XMM1_XMM2,
	"PCMPGTQ_XMM1_M128":                    PCMPGTQ_XMM1_M128,
	"PCMPGTW_MM1_MM2":                      PCMPGTW_MM1_MM2,
	"PCMPGTW_MM1_M64":                      PCMPGTW_MM1_M64,
	"PCMPGTW_XMM1_XMM2":                    PCMPGTW_XMM1_XMM2,
	"PCMPGTW_XMM1_M128":                    PCMPGTW_XMM1_M128,
	"PCMPISTRI_XMM1_XMM2_Imm8":             PCMPISTRI_XMM1_XMM2_Imm8,
	"PCMPISTRI_XMM1_M128_Imm8":             PCMPISTRI_XMM1_M128_Imm8,
	"PCMPISTRM_XMM1_XMM2_Imm8":             PCMPISTRM_XMM1_XMM2_Imm8,
	"PCMPISTRM_XMM1_M128_Imm8":             PCMPISTRM_XMM1_M128_Imm8,
	"PCONFIG":                              PCONFIG,
	"PDEP_R32_R32V_Rmr32_VEX":              PDEP_R32_R32V_Rmr32_VEX,
	"PDEP_R32_R32V_M32_VEX":                PDEP_R32_R32V_M32_VEX,
	"PDEP_R64_R64V_Rmr64_VEX":              PDEP_R64_R64V_Rmr64_VEX,
	"PDEP_R64_R64V_M64_VEX":                PDEP_R64_R64V_M64_VEX,
	"PEXT_R32_R32V_Rmr32_VEX":              PEXT_R32_R32V_Rmr32_VEX,
	"PEXT_R32_R32V_M32_VEX":                PEXT_R32_R32V_M32_VEX,
	"PEXT_R64_R64V_Rmr64_VEX":              PEXT_R64_R64V_Rmr64_VEX,
	"PEXT_R64_R64V_M64_VEX":                PEXT_R64_R64V_M64_VEX,
	"PEXTRB_Rmr32_XMM1_Imm8":               PEXTRB_Rmr32_XMM1_Imm8,
	"PEXTRB_M8_XMM1_Imm8":                  PEXTRB_M8_XMM1_Imm8,
	"PEXTRD_Rmr32_XMM1_Imm8":               PEXTRD_Rmr32_XMM1_Imm8,
	"PEXTRD_M32_XMM1_Imm8":                 PEXTRD_M32_XMM1_Imm8,
	"PEXTRQ_Rmr64_XMM1_Imm8_REX":           PEXTRQ_Rmr64_XMM1_Imm8_REX,
	"PEXTRQ_M64_XMM1_Imm8_REX":             PEXTRQ_M64_XMM1_Imm8_REX,
	"PEXTRW_R32_MM2_Imm8":                  PEXTRW_R32_MM2_Imm8,
	"PEXTRW_R32_XMM2_Imm8":                 PEXTRW_R32_XMM2_Imm8,
	"PEXTRW_Rmr32_XMM1_Imm8":               PEXTRW_Rmr32_XMM1_Imm8,
	"PEXTRW_M16_XMM1_Imm8":                 PEXTRW_M16_XMM1_Imm8,
	"PHADDD_MM1_MM2":                       PHADDD_MM1_MM2,
	"PHADDD_MM1_M64":                       PHADDD_MM1_M64,
	"PHADDD_XMM1_XMM2":                     PHADDD_XMM1_XMM2,
	"PHADDD_XMM1_M128":                     PHADDD_XMM1_M128,
	"PHADDSW_MM1_MM2":                      PHADDSW_MM1_MM2,
	"PHADDSW_MM1_M64":                      PHADDSW_MM1_M64,
	"PHADDSW_XMM1_XMM2":                    PHADDSW_XMM1_XMM2,
	"PHADDSW_XMM1_M128":                    PHADDSW_XMM1_M128,
	"PHADDW_MM1_MM2":                       PHADDW_MM1_MM2,
	"PHADDW_MM1_M64":                       PHADDW_MM1_M64,
	"PHADDW_XMM1_XMM2":                     PHADDW_XMM1_XMM2,
	"PHADDW_XMM1_M128":                     PHADDW_XMM1_M128,
	"PHMINPOSUW_XMM1_XMM2":                 PHMINPOSUW_XMM1_XMM2,
	"PHMINPOSUW_XMM1_M128":                 PHMINPOSUW_XMM1_M128,
	"PHSUBD_MM1_MM2":                       PHSUBD_MM1_MM2,
	"PHSUBD_MM1_M64":                       PHSUBD_MM1_M64,
	"PHSUBD_XMM1_XMM2":                     PHSUBD_XMM1_XMM2,
	"PHSUBD_XMM1_M128":                     PHSUBD_XMM1_M128,
	"PHSUBSW_MM1_MM2":                      PHSUBSW_MM1_MM2,
	"PHSUBSW_MM1_M64":                      PHSUBSW_MM1_M64,
	"PHSUBSW_XMM1_XMM2":                    PHSUBSW_XMM1_XMM2,
	"PHSUBSW_XMM1_M128":                    PHSUBSW_XMM1_M128,
	"PHSUBW_MM1_MM2":                       PHSUBW_MM1_MM2,
	"PHSUBW_MM1_M64":                       PHSUBW_MM1_M64,
	"PHSUBW_XMM1_XMM2":                     PHSUBW_XMM1_XMM2,
	"PHSUBW_XMM1_M128":                     PHSUBW_XMM1_M128,
	"PINSRB_XMM1_Rmr32_Imm8":               PINSRB_XMM1_Rmr32_Imm8,
	"PINSRB_XMM1_M8_Imm8":                  PINSRB_XMM1_M8_Imm8,
	"PINSRD_XMM1_Rmr32_Imm8":               PINSRD_XMM1_Rmr32_Imm8,
	"PINSRD_XMM1_M32_Imm8":                 PINSRD_XMM1_M32_Imm8,
	"PINSRQ_XMM1_Rmr64_Imm8_REX":           PINSRQ_XMM1_Rmr64_Imm8_REX,
	"PINSRQ_XMM1_M64_Imm8_REX":             PINSRQ_XMM1_M64_Imm8_REX,
	"PINSRW_MM1_Rmr32_Imm8":                PINSRW_MM1_Rmr32_Imm8,
	"PINSRW_MM1_M16_Imm8":                  PINSRW_MM1_M16_Imm8,
	"PINSRW_XMM1_Rmr32_Imm8":               PINSRW_XMM1_Rmr32_Imm8,
	"PINSRW_XMM1_M16_Imm8":                 PINSRW_XMM1_M16_Imm8,
	"PMADDUBSW_MM1_MM2":                    PMADDUBSW_MM1_MM2,
	"PMADDUBSW_MM1_M64":                    PMADDUBSW_MM1_M64,
	"PMADDUBSW_XMM1_XMM2":                  PMADDUBSW_XMM1_XMM2,
	"PMADDUBSW_XMM1_M128":                  PMADDUBSW_XMM1_M128,
	"PMADDWD_MM1_MM2":                      PMADDWD_MM1_MM2,
	"PMADDWD_MM1_M64":                      PMADDWD_MM1_M64,
	"PMADDWD_XMM1_XMM2":                    PMADDWD_XMM1_XMM2,
	"PMADDWD_XMM1_M128":                    PMADDWD_XMM1_M128,
	"PMAXSB_XMM1_XMM2":                     PMAXSB_XMM1_XMM2,
	"PMAXSB_XMM1_M128":                     PMAXSB_XMM1_M128,
	"PMAXSD_XMM1_XMM2":                     PMAXSD_XMM1_XMM2,
	"PMAXSD_XMM1_M128":                     PMAXSD_XMM1_M128,
	"PMAXSW_MM1_MM2":                       PMAXSW_MM1_MM2,
	"PMAXSW_MM1_M64":                       PMAXSW_MM1_M64,
	"PMAXSW_XMM1_XMM2":                     PMAXSW_XMM1_XMM2,
	"PMAXSW_XMM1_M128":                     PMAXSW_XMM1_M128,
	"PMAXUB_MM1_MM2":                       PMAXUB_MM1_MM2,
	"PMAXUB_MM1_M64":                       PMAXUB_MM1_M64,
	"PMAXUB_XMM1_XMM2":                     PMAXUB_XMM1_XMM2,
	"PMAXUB_XMM1_M128":                     PMAXUB_XMM1_M128,
	"PMAXUD_XMM1_XMM2":                     PMAXUD_XMM1_XMM2,
	"PMAXUD_XMM1_M128":                     PMAXUD_XMM1_M128,
	"PMAXUW_XMM1_XMM2":                     PMAXUW_XMM1_XMM2,
	"PMAXUW_XMM1_M128":                     PMAXUW_XMM1_M128,
	"PMINSB_XMM1_XMM2":                     PMINSB_XMM1_XMM2,
	"PMINSB_XMM1_M128":                     PMINSB_XMM1_M128,
	"PMINSD_XMM1_XMM2":                     PMINSD_XMM1_XMM2,
	"PMINSD_XMM1_M128":                     PMINSD_XMM1_M128,
	"PMINSW_MM1_MM2":                       PMINSW_MM1_MM2,
	"PMINSW_MM1_M64":                       PMINSW_MM1_M64,
	"PMINSW_XMM1_XMM2":                     PMINSW_XMM1_XMM2,
	"PMINSW_XMM1_M128":                     PMINSW_XMM1_M128,
	"PMINUB_MM1_MM2":                       PMINUB_MM1_MM2,
	"PMINUB_MM1_M64":                       PMINUB_MM1_M64,
	"PMINUB_XMM1_XMM2":                     PMINUB_XMM1_XMM2,
	"PMINUB_XMM1_M128":                     PMINUB_XMM1_M128,
	"PMINUD_XMM1_XMM2":                     PMINUD_XMM1_XMM2,
	"PMINUD_XMM1_M128":                     PMINUD_XMM1_M128,
	"PMINUW_XMM1_XMM2":                     PMINUW_XMM1_XMM2,
	"PMINUW_XMM1_M128":                     PMINUW_XMM1_M128,
	"PMOVMSKB_R32_MM2":                     PMOVMSKB_R32_MM2,
	"PMOVMSKB_R32_XMM2":                    PMOVMSKB_R32_XMM2,
	"PMOVSXBD_XMM1_XMM2":                   PMOVSXBD_XMM1_XMM2,
	"PMOVSXBD_XMM1_M32":                    PMOVSXBD_XMM1_M32,
	"PMOVSXBQ_XMM1_XMM2":                   PMOVSXBQ_XMM1_XMM2,
	"PMOVSXBQ_XMM1_M16":                    PMOVSXBQ_XMM1_M16,
	"PMOVSXBW_XMM1_XMM2":                   PMOVSXBW_XMM1_XMM2,
	"PMOVSXBW_XMM1_M64":                    PMOVSXBW_XMM1_M64,
	"PMOVSXDQ_XMM1_XMM2":                   PMOVSXDQ_XMM1_XMM2,
	"PMOVSXDQ_XMM1_M64":                    PMOVSXDQ_XMM1_M64,
	"PMOVSXWD_XMM1_XMM2":                   PMOVSXWD_XMM1_XMM2,
	"PMOVSXWD_XMM1_M64":                    PMOVSXWD_XMM1_M64,
	"PMOVSXWQ_XMM1_XMM2":                   PMOVSXWQ_XMM1_XMM2,
	"PMOVSXWQ_XMM1_M32":                    PMOVSXWQ_XMM1_M32,
	"PMOVZXBD_XMM1_XMM2":                   PMOVZXBD_XMM1_XMM2,
	"PMOVZXBD_XMM1_M32":                    PMOVZXBD_XMM1_M32,
	"PMOVZXBQ_XMM1_XMM2":                   PMOVZXBQ_XMM1_XMM2,
	"PMOVZXBQ_XMM1_M16":                    PMOVZXBQ_XMM1_M16,
	"PMOVZXBW_XMM1_XMM2":                   PMOVZXBW_XMM1_XMM2,
	"PMOVZXBW_XMM1_M64":                    PMOVZXBW_XMM1_M64,
	"PMOVZXDQ_XMM1_XMM2":                   PMOVZXDQ_XMM1_XMM2,
	"PMOVZXDQ_XMM1_M64":                    PMOVZXDQ_XMM1_M64,
	"PMOVZXWD_XMM1_XMM2":                   PMOVZXWD_XMM1_XMM2,
	"PMOVZXWD_XMM1_M64":                    PMOVZXWD_XMM1_M64,
	"PMOVZXWQ_XMM1_XMM2":                   PMOVZXWQ_XMM1_XMM2,
	"PMOVZXWQ_XMM1_M32":                    PMOVZXWQ_XMM1_M32,
	"PMULDQ_XMM1_XMM2":                     PMULDQ_XMM1_XMM2,
	"PMULDQ_XMM1_M128":                     PMULDQ_XMM1_M128,
	"PMULHRSW_MM1_MM2":                     PMULHRSW_MM1_MM2,
	"PMULHRSW_MM1_M64":                     PMULHRSW_MM1_M64,
	"PMULHRSW_XMM1_XMM2":                   PMULHRSW_XMM1_XMM2,
	"PMULHRSW_XMM1_M128":                   PMULHRSW_XMM1_M128,
	"PMULHUW_MM1_MM2":                      PMULHUW_MM1_MM2,
	"PMULHUW_MM1_M64":                      PMULHUW_MM1_M64,
	"PMULHUW_XMM1_XMM2":                    PMULHUW_XMM1_XMM2,
	"PMULHUW_XMM1_M128":                    PMULHUW_XMM1_M128,
	"PMULHW_MM1_MM2":                       PMULHW_MM1_MM2,
	"PMULHW_MM1_M64":                       PMULHW_MM1_M64,
	"PMULHW_XMM1_XMM2":                     PMULHW_XMM1_XMM2,
	"PMULHW_XMM1_M128":                     PMULHW_XMM1_M128,
	"PMULLD_XMM1_XMM2":                     PMULLD_XMM1_XMM2,
	"PMULLD_XMM1_M128":                     PMULLD_XMM1_M128,
	"PMULLW_MM1_MM2":                       PMULLW_MM1_MM2,
	"PMULLW_MM1_M64":                       PMULLW_MM1_M64,
	"PMULLW_XMM1_XMM2":                     PMULLW_XMM1_XMM2,
	"PMULLW_XMM1_M128":                     PMULLW_XMM1_M128,
	"PMULUDQ_MM1_MM2":                      PMULUDQ_MM1_MM2,
	"PMULUDQ_MM1_M64":                      PMULUDQ_MM1_M64,
	"PMULUDQ_XMM1_XMM2":                    PMULUDQ_XMM1_XMM2,
	"PMULUDQ_XMM1_M128":                    PMULUDQ_XMM1_M128,
	"POP_ES":                               POP_ES,
	"POP_SS":                               POP_SS,
	"POP_DS":                               POP_DS,
	"POP_FS":                               POP_FS,
	"POP_GS":                               POP_GS,
	"POP_Rmr16":                            POP_Rmr16,
	"POP_Rmr32":                            POP_Rmr32,
	"POP_Rmr64":                            POP_Rmr64,
	"POP_R16op":                            POP_R16op,
	"POP_R32op":                            POP_R32op,
	"POP_R64op":                            POP_R64op,
	"POP_M16":                              POP_M16,
	"POP_M32":                              POP_M32,
	"POP_M64":                              POP_M64,
	"POPA":                                 POPA,
	"POPAD":                                POPAD,
	"POPCNT_R16_Rmr16":                     POPCNT_R16_Rmr16,
	"POPCNT_R16_M16":                       POPCNT_R16_M16,
	"POPCNT_R32_Rmr32":                     POPCNT_R32_Rmr32,
	"POPCNT_R32_M32":                       POPCNT_R32_M32,
	"POPCNT_R64_Rmr64_REX":                 POPCNT_R64_Rmr64_REX,
	"POPCNT_R64_M64_REX":                   POPCNT_R64_M64_REX,
	"POPD_ES":                              POPD_ES,
	"POPD_SS":                              POPD_SS,
	"POPD_DS":                              POPD_DS,
	"POPD_FS":                              POPD_FS,
	"POPD_GS":                              POPD_GS,
	"POPF":                                 POPF,
	"POPFD":                                POPFD,
	"POPFQ":                                POPFQ,
	"POPQ_FS_REX":                          POPQ_FS_REX,
	"POPQ_GS_REX":                          POPQ_GS_REX,
	"POPW_ES":                              POPW_ES,
	"POPW_SS":                              POPW_SS,
	"POPW_DS":                              POPW_DS,
	"POPW_FS":                              POPW_FS,
	"POPW_GS":                              POPW_GS,
	"POR_MM1_MM2":                          POR_MM1_MM2,
	"POR_MM1_M64":                          POR_MM1_M64,
	"POR_XMM1_XMM2":                        POR_XMM1_XMM2,
	"POR_XMM1_M128":                        POR_XMM1_M128,
	"PREFETCHNTA_M8":                       PREFETCHNTA_M8,
	"PREFETCHT0_M8":                        PREFETCHT0_M8,
	"PREFETCHT1_M8":                        PREFETCHT1_M8,
	"PREFETCHT2_M8":                        PREFETCHT2_M8,
	"PREFETCHW_M8":                         PREFETCHW_M8,
	"PSADBW_MM1_MM2":                       PSADBW_MM1_MM2,
	"PSADBW_MM1_M64":                       PSADBW_MM1_M64,
	"PSADBW_XMM1_XMM2":                     PSADBW_XMM1_XMM2,
	"PSADBW_XMM1_M128":                     PSADBW_XMM1_M128,
	"PSHUFB_MM1_MM2":                       PSHUFB_MM1_MM2,
	"PSHUFB_MM1_M64":                       PSHUFB_MM1_M64,
	"PSHUFB_XMM1_XMM2":                     PSHUFB_XMM1_XMM2,
	"PSHUFB_XMM1_M128":                     PSHUFB_XMM1_M128,
	"PSHUFD_XMM1_XMM2_Imm8":                PSHUFD_XMM1_XMM2_Imm8,
	"PSHUFD_XMM1_M128_Imm8":                PSHUFD_XMM1_M128_Imm8,
	"PSHUFHW_XMM1_XMM2_Imm8":               PSHUFHW_XMM1_XMM2_Imm8,
	"PSHUFHW_XMM1_M128_Imm8":               PSHUFHW_XMM1_M128_Imm8,
	"PSHUFLW_XMM1_XMM2_Imm8":               PSHUFLW_XMM1_XMM2_Imm8,
	"PSHUFLW_XMM1_M128_Imm8":               PSHUFLW_XMM1_M128_Imm8,
	"PSHUFW_MM1_MM2_Imm8":                  PSHUFW_MM1_MM2_Imm8,
	"PSHUFW_MM1_M64_Imm8":                  PSHUFW_MM1_M64_Imm8,
	"PSIGNB_MM1_MM2":                       PSIGNB_MM1_MM2,
	"PSIGNB_MM1_M64":                       PSIGNB_MM1_M64,
	"PSIGNB_XMM1_XMM2":                     PSIGNB_XMM1_XMM2,
	"PSIGNB_XMM1_M128":                     PSIGNB_XMM1_M128,
	"PSIGND_MM1_MM2":                       PSIGND_MM1_MM2,
	"PSIGND_MM1_M64":                       PSIGND_MM1_M64,
	"PSIGND_XMM1_XMM2":                     PSIGND_XMM1_XMM2,
	"PSIGND_XMM1_M128":                     PSIGND_XMM1_M128,
	"PSIGNW_MM1_MM2":                       PSIGNW_MM1_MM2,
	"PSIGNW_MM1_M64":                       PSIGNW_MM1_M64,
	"PSIGNW_XMM1_XMM2":                     PSIGNW_XMM1_XMM2,
	"PSIGNW_XMM1_M128":                     PSIGNW_XMM1_M128,
	"PSLLD_MM1_MM2":                        PSLLD_MM1_MM2,
	"PSLLD_MM1_M64":                        PSLLD_MM1_M64,
	"PSLLD_XMM1_XMM2":                      PSLLD_XMM1_XMM2,
	"PSLLD_XMM1_M128":                      PSLLD_XMM1_M128,
	"PSLLD_MM2_Imm8":                       PSLLD_MM2_Imm8,
	"PSLLD_XMM2_Imm8":                      PSLLD_XMM2_Imm8,
	"PSLLDQ_XMM2_Imm8":                     PSLLDQ_XMM2_Imm8,
	"PSLLQ_MM1_MM2":                        PSLLQ_MM1_MM2,
	"PSLLQ_MM1_M64":                        PSLLQ_MM1_M64,
	"PSLLQ_XMM1_XMM2":                      PSLLQ_XMM1_XMM2,
	"PSLLQ_XMM1_M128":                      PSLLQ_XMM1_M128,
	"PSLLQ_MM2_Imm8":                       PSLLQ_MM2_Imm8,
	"PSLLQ_XMM2_Imm8":                      PSLLQ_XMM2_Imm8,
	"PSLLW_MM1_MM2":                        PSLLW_MM1_MM2,
	"PSLLW_MM1_M64":                        PSLLW_MM1_M64,
	"PSLLW_XMM1_XMM2":                      PSLLW_XMM1_XMM2,
	"PSLLW_XMM1_M128":                      PSLLW_XMM1_M128,
	"PSLLW_MM2_Imm8":                       PSLLW_MM2_Imm8,
	"PSLLW_XMM2_Imm8":                      PSLLW_XMM2_Imm8,
	"PSRAD_MM1_MM2":                        PSRAD_MM1_MM2,
	"PSRAD_MM1_M64":                        PSRAD_MM1_M64,
	"PSRAD_XMM1_XMM2":                      PSRAD_XMM1_XMM2,
	"PSRAD_XMM1_M128":                      PSRAD_XMM1_M128,
	"PSRAD_MM2_Imm8":                       PSRAD_MM2_Imm8,
	"PSRAD_XMM2_Imm8":                      PSRAD_XMM2_Imm8,
	"PSRAW_MM1_MM2":                        PSRAW_MM1_MM2,
	"PSRAW_MM1_M64":                        PSRAW_MM1_M64,
	"PSRAW_XMM1_XMM2":                      PSRAW_XMM1_XMM2,
	"PSRAW_XMM1_M128":                      PSRAW_XMM1_M128,
	"PSRAW_MM2_Imm8":                       PSRAW_MM2_Imm8,
	"PSRAW_XMM2_Imm8":                      PSRAW_XMM2_Imm8,
	"PSRLD_MM1_MM2":                        PSRLD_MM1_MM2,
	"PSRLD_MM1_M64":                        PSRLD_MM1_M64,
	"PSRLD_XMM1_XMM2":                      PSRLD_XMM1_XMM2,
	"PSRLD_XMM1_M128":                      PSRLD_XMM1_M128,
	"PSRLD_MM2_Imm8":                       PSRLD_MM2_Imm8,
	"PSRLD_XMM2_Imm8":                      PSRLD_XMM2_Imm8,
	"PSRLDQ_XMM2_Imm8":                     PSRLDQ_XMM2_Imm8,
	"PSRLQ_MM1_MM2":                        PSRLQ_MM1_MM2,
	"PSRLQ_MM1_M64":                        PSRLQ_MM1_M64,
	"PSRLQ_XMM1_XMM2":                      PSRLQ_XMM1_XMM2,
	"PSRLQ_XMM1_M128":                      PSRLQ_XMM1_M128,
	"PSRLQ_MM2_Imm8":                       PSRLQ_MM2_Imm8,
	"PSRLQ_XMM2_Imm8":                      PSRLQ_XMM2_Imm8,
	"PSRLW_MM1_MM2":                        PSRLW_MM1_MM2,
	"PSRLW_MM1_M64":                        PSRLW_MM1_M64,
	"PSRLW_XMM1_XMM2":                      PSRLW_XMM1_XMM2,
	"PSRLW_XMM1_M128":                      PSRLW_XMM1_M128,
	"PSRLW_MM2_Imm8":                       PSRLW_MM2_Imm8,
	"PSRLW_XMM2_Imm8":                      PSRLW_XMM2_Imm8,
	"PSUBB_MM1_MM2":                        PSUBB_MM1_MM2,
	"PSUBB_MM1_M64":                        PSUBB_MM1_M64,
	"PSUBB_XMM1_XMM2":                      PSUBB_XMM1_XMM2,
	"PSUBB_XMM1_M128":                      PSUBB_XMM1_M128,
	"PSUBD_MM1_MM2":                        PSUBD_MM1_MM2,
	"PSUBD_MM1_M64":                        PSUBD_MM1_M64,
	"PSUBD_XMM1_XMM2":                      PSUBD_XMM1_XMM2,
	"PSUBD_XMM1_M128":                      PSUBD_XMM1_M128,
	"PSUBQ_MM1_MM2":                        PSUBQ_MM1_MM2,
	"PSUBQ_MM1_M64":                        PSUBQ_MM1_M64,
	"PSUBQ_XMM1_XMM2":                      PSUBQ_XMM1_XMM2,
	"PSUBQ_XMM1_M128":                      PSUBQ_XMM1_M128,
	"PSUBSB_MM1_MM2":                       PSUBSB_MM1_MM2,
	"PSUBSB_MM1_M64":                       PSUBSB_MM1_M64,
	"PSUBSB_XMM1_XMM2":                     PSUBSB_XMM1_XMM2,
	"PSUBSB_XMM1_M128":                     PSUBSB_XMM1_M128,
	"PSUBSW_MM1_MM2":                       PSUBSW_MM1_MM2,
	"PSUBSW_MM1_M64":                       PSUBSW_MM1_M64,
	"PSUBSW_XMM1_XMM2":                     PSUBSW_XMM1_XMM2,
	"PSUBSW_XMM1_M128":                     PSUBSW_XMM1_M128,
	"PSUBUSB_MM1_MM2":                      PSUBUSB_MM1_MM2,
	"PSUBUSB_MM1_M64":                      PSUBUSB_MM1_M64,
	"PSUBUSB_XMM1_XMM2":                    PSUBUSB_XMM1_XMM2,
	"PSUBUSB_XMM1_M128":                    PSUBUSB_XMM1_M128,
	"PSUBUSW_MM1_MM2":                      PSUBUSW_MM1_MM2,
	"PSUBUSW_MM1_M64":                      PSUBUSW_MM1_M64,
	"PSUBUSW_XMM1_XMM2":                    PSUBUSW_XMM1_XMM2,
	"PSUBUSW_XMM1_M128":                    PSUBUSW_XMM1_M128,
	"PSUBW_MM1_MM2":                        PSUBW_MM1_MM2,
	"PSUBW_MM1_M64":                        PSUBW_MM1_M64,
	"PSUBW_XMM1_XMM2":                      PSUBW_XMM1_XMM2,
	"PSUBW_XMM1_M128":                      PSUBW_XMM1_M128,
	"PTEST_XMM1_XMM2":                      PTEST_XMM1_XMM2,
	"PTEST_XMM1_M128":                      PTEST_XMM1_M128,
	"PTWRITE_Rmr32":                        PTWRITE_Rmr32,
	"PTWRITE_Rmr64_REX":                    PTWRITE_Rmr64_REX,
	"PTWRITE_M32":                          PTWRITE_M32,
	"PTWRITE_M64_REX":                      PTWRITE_M64_REX,
	"PUNPCKHBW_MM1_MM2":                    PUNPCKHBW_MM1_MM2,
	"PUNPCKHBW_MM1_M64":                    PUNPCKHBW_MM1_M64,
	"PUNPCKHBW_XMM1_XMM2":                  PUNPCKHBW_XMM1_XMM2,
	"PUNPCKHBW_XMM1_M128":                  PUNPCKHBW_XMM1_M128,
	"PUNPCKHDQ_MM1_MM2":                    PUNPCKHDQ_MM1_MM2,
	"PUNPCKHDQ_MM1_M64":                    PUNPCKHDQ_MM1_M64,
	"PUNPCKHDQ_XMM1_XMM2":                  PUNPCKHDQ_XMM1_XMM2,
	"PUNPCKHDQ_XMM1_M128":                  PUNPCKHDQ_XMM1_M128,
	"PUNPCKHQDQ_XMM1_XMM2":                 PUNPCKHQDQ_XMM1_XMM2,
	"PUNPCKHQDQ_XMM1_M128":                 PUNPCKHQDQ_XMM1_M128,
	"PUNPCKHWD_MM1_MM2":                    PUNPCKHWD_MM1_MM2,
	"PUNPCKHWD_MM1_M64":                    PUNPCKHWD_MM1_M64,
	"PUNPCKHWD_XMM1_XMM2":                  PUNPCKHWD_XMM1_XMM2,
	"PUNPCKHWD_XMM1_M128":                  PUNPCKHWD_XMM1_M128,
	"PUNPCKLBW_MM1_MM2":                    PUNPCKLBW_MM1_MM2,
	"PUNPCKLBW_MM1_M32":                    PUNPCKLBW_MM1_M32,
	"PUNPCKLBW_XMM1_XMM2":                  PUNPCKLBW_XMM1_XMM2,
	"PUNPCKLBW_XMM1_M128":                  PUNPCKLBW_XMM1_M128,
	"PUNPCKLDQ_MM1_MM2":                    PUNPCKLDQ_MM1_MM2,
	"PUNPCKLDQ_MM1_M32":                    PUNPCKLDQ_MM1_M32,
	"PUNPCKLDQ_XMM1_XMM2":                  PUNPCKLDQ_XMM1_XMM2,
	"PUNPCKLDQ_XMM1_M128":                  PUNPCKLDQ_XMM1_M128,
	"PUNPCKLQDQ_XMM1_XMM2":                 PUNPCKLQDQ_XMM1_XMM2,
	"PUNPCKLQDQ_XMM1_M128":                 PUNPCKLQDQ_XMM1_M128,
	"PUNPCKLWD_MM1_MM2":                    PUNPCKLWD_MM1_MM2,
	"PUNPCKLWD_MM1_M32":                    PUNPCKLWD_MM1_M32,
	"PUNPCKLWD_XMM1_XMM2":                  PUNPCKLWD_XMM1_XMM2,
	"PUNPCKLWD_XMM1_M128":                  PUNPCKLWD_XMM1_M128,
	"PUSH_ES":                              PUSH_ES,
	"PUSH_CS":                              PUSH_CS,
	"PUSH_SS":                              PUSH_SS,
	"PUSH_DS":                              PUSH_DS,
	"PUSH_FS":                              PUSH_FS,
	"PUSH_GS":                              PUSH_GS,
	"PUSH_Imm8":                            PUSH_Imm8,
	"PUSH_Imm16":                           PUSH_Imm16,
	"PUSH_Imm32":                           PUSH_Imm32,
	"PUSH_Rmr16":                           PUSH_Rmr16,
	"PUSH_Rmr32":                           PUSH_Rmr32,
	"PUSH_Rmr64":                           PUSH_Rmr64,
	"PUSH_R16op":                           PUSH_R16op,
	"PUSH_R32op":                           PUSH_R32op,
	"PUSH_R64op":                           PUSH_R64op,
	"PUSH_M16":                             PUSH_M16,
	"PUSH_M32":                             PUSH_M32,
	"PUSH_M64":                             PUSH_M64,
	"PUSHA":                                PUSHA,
	"PUSHAD":                               PUSHAD,
	"PUSHD_ES":                             PUSHD_ES,
	"PUSHD_CS":                             PUSHD_CS,
	"PUSHD_SS":                             PUSHD_SS,
	"PUSHD_DS":                             PUSHD_DS,
	"PUSHD_FS":                             PUSHD_FS,
	"PUSHD_GS":                             PUSHD_GS,
	"PUSHD_Imm32":                          PUSHD_Imm32,
	"PUSHF":                                PUSHF,
	"PUSHFD":                               PUSHFD,
	"PUSHFQ":                               PUSHFQ,
	"PUSHQ_FS_REX":                         PUSHQ_FS_REX,
	"PUSHQ_GS_REX":                         PUSHQ_GS_REX,
	"PUSHW_ES":                             PUSHW_ES,
	"PUSHW_CS":                             PUSHW_CS,
	"PUSHW_SS":                             PUSHW_SS,
	"PUSHW_DS":                             PUSHW_DS,
	"PUSHW_FS":                             PUSHW_FS,
	"PUSHW_GS":                             PUSHW_GS,
	"PUSHW_Imm16":                          PUSHW_Imm16,
	"PXOR_MM1_MM2":                         PXOR_MM1_MM2,
	"PXOR_MM1_M64":                         PXOR_MM1_M64,
	"PXOR_XMM1_XMM2":                       PXOR_XMM1_XMM2,
	"PXOR_XMM1_M128":                       PXOR_XMM1_M128,
	"RCL_Rmr8_1":                           RCL_Rmr8_1,
	"RCL_Rmr8_CL":                          RCL_Rmr8_CL,
	"RCL_Rmr8_Imm8":                        RCL_Rmr8_Imm8,
	"RCL_Rmr16_1":                          RCL_Rmr16_1,
	"RCL_Rmr16_CL":                         RCL_Rmr16_CL,
	"RCL_Rmr16_Imm8":                       RCL_Rmr16_Imm8,
	"RCL_Rmr32_1":                          RCL_Rmr32_1,
	"RCL_Rmr32_CL":                         RCL_Rmr32_CL,
	"RCL_Rmr32_Imm8":                       RCL_Rmr32_Imm8,
	"RCL_Rmr64_1_REX":                      RCL_Rmr64_1_REX,
	"RCL_Rmr64_CL_REX":                     RCL_Rmr64_CL_REX,
	"RCL_Rmr64_Imm8_REX":                   RCL_Rmr64_Imm8_REX,
	"RCL_M8_1":                             RCL_M8_1,
	"RCL_M8_CL":                            RCL_M8_CL,
	"RCL_M8_Imm8":                          RCL_M8_Imm8,
	"RCL_M16_1":                            RCL_M16_1,
	"RCL_M16_CL":                           RCL_M16_CL,
	"RCL_M16_Imm8":                         RCL_M16_Imm8,
	"RCL_M32_1":                            RCL_M32_1,
	"RCL_M32_CL":                           RCL_M32_CL,
	"RCL_M32_Imm8":                         RCL_M32_Imm8,
	"RCL_M64_1_REX":                        RCL_M64_1_REX,
	"RCL_M64_CL_REX":                       RCL_M64_CL_REX,
	"RCL_M64_Imm8_REX":                     RCL_M64_Imm8_REX,
	"RCPPS_XMM1_XMM2":                      RCPPS_XMM1_XMM2,
	"RCPPS_XMM1_M128":                      RCPPS_XMM1_M128,
	"RCPSS_XMM1_XMM2":                      RCPSS_XMM1_XMM2,
	"RCPSS_XMM1_M32":                       RCPSS_XMM1_M32,
	"RCR_Rmr8_1":                           RCR_Rmr8_1,
	"RCR_Rmr8_CL":                          RCR_Rmr8_CL,
	"RCR_Rmr8_Imm8":                        RCR_Rmr8_Imm8,
	"RCR_Rmr16_1":                          RCR_Rmr16_1,
	"RCR_Rmr16_CL":                         RCR_Rmr16_CL,
	"RCR_Rmr16_Imm8":                       RCR_Rmr16_Imm8,
	"RCR_Rmr32_1":                          RCR_Rmr32_1,
	"RCR_Rmr32_CL":                         RCR_Rmr32_CL,
	"RCR_Rmr32_Imm8":                       RCR_Rmr32_Imm8,
	"RCR_Rmr64_1_REX":                      RCR_Rmr64_1_REX,
	"RCR_Rmr64_CL_REX":                     RCR_Rmr64_CL_REX,
	"RCR_Rmr64_Imm8_REX":                   RCR_Rmr64_Imm8_REX,
	"RCR_M8_1":                             RCR_M8_1,
	"RCR_M8_CL":                            RCR_M8_CL,
	"RCR_M8_Imm8":                          RCR_M8_Imm8,
	"RCR_M16_1":                            RCR_M16_1,
	"RCR_M16_CL":                           RCR_M16_CL,
	"RCR_M16_Imm8":                         RCR_M16_Imm8,
	"RCR_M32_1":                            RCR_M32_1,
	"RCR_M32_CL":                           RCR_M32_CL,
	"RCR_M32_Imm8":                         RCR_M32_Imm8,
	"RCR_M64_1_REX":                        RCR_M64_1_REX,
	"RCR_M64_CL_REX":                       RCR_M64_CL_REX,
	"RCR_M64_Imm8_REX":                     RCR_M64_Imm8_REX,
	"RDFSBASE_Rmr32":                       RDFSBASE_Rmr32,
	"RDFSBASE_Rmr64_REX":                   RDFSBASE_Rmr64_REX,
	"RDGSBASE_Rmr32":                       RDGSBASE_Rmr32,
	"RDGSBASE_Rmr64_REX":                   RDGSBASE_Rmr64_REX,
	"RDMSR":                                RDMSR,
	"RDPID_Rmr32":                          RDPID_Rmr32,
	"RDPID_Rmr64":                          RDPID_Rmr64,
	"RDPKRU":                               RDPKRU,
	"RDPMC":                                RDPMC,
	"RDRAND_Rmr16":                         RDRAND_Rmr16,
	"RDRAND_Rmr32":                         RDRAND_Rmr32,
	"RDRAND_Rmr64_REX":                     RDRAND_Rmr64_REX,
	"RDSEED_Rmr16":                         RDSEED_Rmr16,
	"RDSEED_Rmr32":                         RDSEED_Rmr32,
	"RDSEED_Rmr64_REX":                     RDSEED_Rmr64_REX,
	"RDSSPD_Rmr32":                         RDSSPD_Rmr32,
	"RDSSPQ_Rmr64_REX":                     RDSSPQ_Rmr64_REX,
	"RDTSC":                                RDTSC,
	"RDTSCP":                               RDTSCP,
	"RET":                                  RET,
	"RET_Imm16u":                           RET_Imm16u,
	"RET_FAR":                              RET_FAR,
	"RET_FAR_Imm16u":                       RET_FAR_Imm16u,
	"ROL_Rmr8_1":                           ROL_Rmr8_1,
	"ROL_Rmr8_CL":                          ROL_Rmr8_CL,
	"ROL_Rmr8_Imm8":                        ROL_Rmr8_Imm8,
	"ROL_Rmr16_1":                          ROL_Rmr16_1,
	"ROL_Rmr16_CL":                         ROL_Rmr16_CL,
	"ROL_Rmr16_Imm8":                       ROL_Rmr16_Imm8,
	"ROL_Rmr32_1":                          ROL_Rmr32_1,
	"ROL_Rmr32_CL":                         ROL_Rmr32_CL,
	"ROL_Rmr32_Imm8":                       ROL_Rmr32_Imm8,
	"ROL_Rmr64_1_REX":                      ROL_Rmr64_1_REX,
	"ROL_Rmr64_CL_REX":                     ROL_Rmr64_CL_REX,
	"ROL_Rmr64_Imm8_REX":                   ROL_Rmr64_Imm8_REX,
	"ROL_M8_1":                             ROL_M8_1,
	"ROL_M8_CL":                            ROL_M8_CL,
	"ROL_M8_Imm8":                          ROL_M8_Imm8,
	"ROL_M16_1":                            ROL_M16_1,
	"ROL_M16_CL":                           ROL_M16_CL,
	"ROL_M16_Imm8":                         ROL_M16_Imm8,
	"ROL_M32_1":                            ROL_M32_1,
	"ROL_M32_CL":                           ROL_M32_CL,
	"ROL_M32_Imm8":                         ROL_M32_Imm8,
	"ROL_M64_1_REX":                        ROL_M64_1_REX,
	"ROL_M64_CL_REX":                       ROL_M64_CL_REX,
	"ROL_M64_Imm8_REX":                     ROL_M64_Imm8_REX,
	"ROR_Rmr8_1":                           ROR_Rmr8_1,
	"ROR_Rmr8_CL":                          ROR_Rmr8_CL,
	"ROR_Rmr8_Imm8":                        ROR_Rmr8_Imm8,
	"ROR_Rmr16_1":                          ROR_Rmr16_1,
	"ROR_Rmr16_CL":                         ROR_Rmr16_CL,
	"ROR_Rmr16_Imm8":                       ROR_Rmr16_Imm8,
	"ROR_Rmr32_1":                          ROR_Rmr32_1,
	"ROR_Rmr32_CL":                         ROR_Rmr32_CL,
	"ROR_Rmr32_Imm8":                       ROR_Rmr32_Imm8,
	"ROR_Rmr64_1_REX":                      ROR_Rmr64_1_REX,
	"ROR_Rmr64_CL_REX":                     ROR_Rmr64_CL_REX,
	"ROR_Rmr64_Imm8_REX":                   ROR_Rmr64_Imm8_REX,
	"ROR_M8_1":                             ROR_M8_1,
	"ROR_M8_CL":                            ROR_M8_CL,
	"ROR_M8_Imm8":                          ROR_M8_Imm8,
	"ROR_M16_1":                            ROR_M16_1,
	"ROR_M16_CL":                           ROR_M16_CL,
	"ROR_M16_Imm8":                         ROR_M16_Imm8,
	"ROR_M32_1":                            ROR_M32_1,
	"ROR_M32_CL":                           ROR_M32_CL,
	"ROR_M32_Imm8":                         ROR_M32_Imm8,
	"ROR_M64_1_REX":                        ROR_M64_1_REX,
	"ROR_M64_CL_REX":                       ROR_M64_CL_REX,
	"ROR_M64_Imm8_REX":                     ROR_M64_Imm8_REX,
	"RORX_R32_Rmr32_Imm8_VEX":              RORX_R32_Rmr32_Imm8_VEX,
	"RORX_R32_M32_Imm8_VEX":                RORX_R32_M32_Imm8_VEX,
	"RORX_R64_Rmr64_Imm8_VEX":              RORX_R64_Rmr64_Imm8_VEX,
	"RORX_R64_M64_Imm8_VEX":                RORX_R64_M64_Imm8_VEX,
	"ROUNDPD_XMM1_XMM2_Imm8":               ROUNDPD_XMM1_XMM2_Imm8,
	"ROUNDPD_XMM1_M128_Imm8":               ROUNDPD_XMM1_M128_Imm8,
	"ROUNDPS_XMM1_XMM2_Imm8":               ROUNDPS_XMM1_XMM2_Imm8,
	"ROUNDPS_XMM1_M128_Imm8":               ROUNDPS_XMM1_M128_Imm8,
	"ROUNDSD_XMM1_XMM2_Imm8":               ROUNDSD_XMM1_XMM2_Imm8,
	"ROUNDSD_XMM1_M64_Imm8":                ROUNDSD_XMM1_M64_Imm8,
	"ROUNDSS_XMM1_XMM2_Imm8":               ROUNDSS_XMM1_XMM2_Imm8,
	"ROUNDSS_XMM1_M32_Imm8":                ROUNDSS_XMM1_M32_Imm8,
	"RSM":                                  RSM,
	"RSQRTPS_XMM1_XMM2":                    RSQRTPS_XMM1_XMM2,
	"RSQRTPS_XMM1_M128":                    RSQRTPS_XMM1_M128,
	"RSQRTSS_XMM1_XMM2":                    RSQRTSS_XMM1_XMM2,
	"RSQRTSS_XMM1_M32":                     RSQRTSS_XMM1_M32,
	"RSTORSSP_M64":                         RSTORSSP_M64,
	"SAHF":                                 SAHF,
	"SAL_Rmr8_1":                           SAL_Rmr8_1,
	"SAL_Rmr8_CL":                          SAL_Rmr8_CL,
	"SAL_Rmr8_Imm8":                        SAL_Rmr8_Imm8,
	"SAL_Rmr16_1":                          SAL_Rmr16_1,
	"SAL_Rmr16_CL":                         SAL_Rmr16_CL,
	"SAL_Rmr16_Imm8":                       SAL_Rmr16_Imm8,
	"SAL_Rmr32_1":                          SAL_Rmr32_1,
	"SAL_Rmr32_CL":                         SAL_Rmr32_CL,
	"SAL_Rmr32_Imm8":                       SAL_Rmr32_Imm8,
	"SAL_Rmr64_1_REX":                      SAL_Rmr64_1_REX,
	"SAL_Rmr64_CL_REX":                     SAL_Rmr64_CL_REX,
	"SAL_Rmr64_Imm8_REX":                   SAL_Rmr64_Imm8_REX,
	"SAL_M8_1":                             SAL_M8_1,
	"SAL_M8_CL":                            SAL_M8_CL,
	"SAL_M8_Imm8":                          SAL_M8_Imm8,
	"SAL_M16_1":                            SAL_M16_1,
	"SAL_M16_CL":                           SAL_M16_CL,
	"SAL_M16_Imm8":                         SAL_M16_Imm8,
	"SAL_M32_1":                            SAL_M32_1,
	"SAL_M32_CL":                           SAL_M32_CL,
	"SAL_M32_Imm8":                         SAL_M32_Imm8,
	"SAL_M64_1_REX":                        SAL_M64_1_REX,
	"SAL_M64_CL_REX":                       SAL_M64_CL_REX,
	"SAL_M64_Imm8_REX":                     SAL_M64_Imm8_REX,
	"SAR_Rmr8_1":                           SAR_Rmr8_1,
	"SAR_Rmr8_CL":                          SAR_Rmr8_CL,
	"SAR_Rmr8_Imm8":                        SAR_Rmr8_Imm8,
	"SAR_Rmr16_1":                          SAR_Rmr16_1,
	"SAR_Rmr16_CL":                         SAR_Rmr16_CL,
	"SAR_Rmr16_Imm8":                       SAR_Rmr16_Imm8,
	"SAR_Rmr32_1":                          SAR_Rmr32_1,
	"SAR_Rmr32_CL":                         SAR_Rmr32_CL,
	"SAR_Rmr32_Imm8":                       SAR_Rmr32_Imm8,
	"SAR_Rmr64_1_REX":                      SAR_Rmr64_1_REX,
	"SAR_Rmr64_CL_REX":                     SAR_Rmr64_CL_REX,
	"SAR_Rmr64_Imm8_REX":                   SAR_Rmr64_Imm8_REX,
	"SAR_M8_1":                             SAR_M8_1,
	"SAR_M8_CL":                            SAR_M8_CL,
	"SAR_M8_Imm8":                          SAR_M8_Imm8,
	"SAR_M16_1":                            SAR_M16_1,
	"SAR_M16_CL":                           SAR_M16_CL,
	"SAR_M16_Imm8":                         SAR_M16_Imm8,
	"SAR_M32_1":                            SAR_M32_1,
	"SAR_M32_CL":                           SAR_M32_CL,
	"SAR_M32_Imm8":                         SAR_M32_Imm8,
	"SAR_M64_1_REX":                        SAR_M64_1_REX,
	"SAR_M64_CL_REX":                       SAR_M64_CL_REX,
	"SAR_M64_Imm8_REX":                     SAR_M64_Imm8_REX,
	"SARX_R32_Rmr32_R32V_VEX":              SARX_R32_Rmr32_R32V_VEX,
	"SARX_R32_M32_R32V_VEX":                SARX_R32_M32_R32V_VEX,
	"SARX_R64_Rmr64_R64V_VEX":              SARX_R64_Rmr64_R64V_VEX,
	"SARX_R64_M64_R64V_VEX":                SARX_R64_M64_R64V_VEX,
	"SAVEPREVSSP":                          SAVEPREVSSP,
	"SBB_AL_Imm8":                          SBB_AL_Imm8,
	"SBB_AX_Imm16":                         SBB_AX_Imm16,
	"SBB_EAX_Imm32":                        SBB_EAX_Imm32,
	"SBB_RAX_Imm32_REX":                    SBB_RAX_Imm32_REX,
	"SBB_R8_Rmr8":                          SBB_R8_Rmr8,
	"SBB_R8_M8":                            SBB_R8_M8,
	"SBB_R16_Rmr16":                        SBB_R16_Rmr16,
	"SBB_R16_M16":                          SBB_R16_M16,
	"SBB_R32_Rmr32":                        SBB_R32_Rmr32,
	"SBB_R32_M32":                          SBB_R32_M32,
	"SBB_R64_Rmr64_REX":                    SBB_R64_Rmr64_REX,
	"SBB_R64_M64_REX":                      SBB_R64_M64_REX,
	"SBB_Rmr8_Imm8":                        SBB_Rmr8_Imm8,
	"SBB_Rmr8_R8":                          SBB_Rmr8_R8,
	"SBB_Rmr16_Imm8":                       SBB_Rmr16_Imm8,
	"SBB_Rmr16_Imm16":                      SBB_Rmr16_Imm16,
	"SBB_Rmr16_R16":                        SBB_Rmr16_R16,
	"SBB_Rmr32_Imm8":                       SBB_Rmr32_Imm8,
	"SBB_Rmr32_Imm32":                      SBB_Rmr32_Imm32,
	"SBB_Rmr32_R32":                        SBB_Rmr32_R32,
	"SBB_Rmr64_Imm8_REX":                   SBB_Rmr64_Imm8_REX,
	"SBB_Rmr64_Imm32_REX":                  SBB_Rmr64_Imm32_REX,
	"SBB_Rmr64_R64_REX":                    SBB_Rmr64_R64_REX,
	"SBB_M8_Imm8":                          SBB_M8_Imm8,
	"SBB_M8_R8":                            SBB_M8_R8,
	"SBB_M16_Imm8":                         SBB_M16_Imm8,
	"SBB_M16_Imm16":                        SBB_M16_Imm16,
	"SBB_M16_R16":                          SBB_M16_R16,
	"SBB_M32_Imm8":                         SBB_M32_Imm8,
	"SBB_M32_Imm32":                        SBB_M32_Imm32,
	"SBB_M32_R32":                          SBB_M32_R32,
	"SBB_M64_Imm8_REX":                     SBB_M64_Imm8_REX,
	"SBB_M64_Imm32_REX":                    SBB_M64_Imm32_REX,
	"SBB_M64_R64_REX":                      SBB_M64_R64_REX,
	"SCAS_StrDst8":                         SCAS_StrDst8,
	"SCAS_StrDst16":                        SCAS_StrDst16,
	"SCAS_StrDst32":                        SCAS_StrDst32,
	"SCAS_StrDst64_REX":                    SCAS_StrDst64_REX,
	"SCAS_AL_StrDst8":                      SCAS_AL_StrDst8,
	"SCAS_AX_StrDst16":                     SCAS_AX_StrDst16,
	"SCAS_EAX_StrDst32":                    SCAS_EAX_StrDst32,
	"SCAS_RAX_StrDst64_REX":                SCAS_RAX_StrDst64_REX,
	"SCASB":                                SCASB,
	"SCASB_StrDst8":                        SCASB_StrDst8,
	"SCASB_AL_StrDst8":                     SCASB_AL_StrDst8,
	"SCASD":                                SCASD,
	"SCASD_StrDst32":                       SCASD_StrDst32,
	"SCASD_EAX_StrDst32":                   SCASD_EAX_StrDst32,
	"SCASQ_REX":                            SCASQ_REX,
	"SCASQ_StrDst64_REX":                   SCASQ_StrDst64_REX,
	"SCASQ_RAX_StrDst64_REX":               SCASQ_RAX_StrDst64_REX,
	"SCASW":                                SCASW,
	"SCASW_StrDst16":                       SCASW_StrDst16,
	"SCASW_AX_StrDst16":                    SCASW_AX_StrDst16,
	"SENDUIPI_Rmr8":                        SENDUIPI_Rmr8,
	"SENDUIPI_Rmr16":                       SENDUIPI_Rmr16,
	"SENDUIPI_Rmr32":                       SENDUIPI_Rmr32,
	"SENDUIPI_Rmr64":                       SENDUIPI_Rmr64,
	"SERIALIZE":                            SERIALIZE,
	"SETA_Rmr8":                            SETA_Rmr8,
	"SETA_M8":                              SETA_M8,
	"SETAE_Rmr8":                           SETAE_Rmr8,
	"SETAE_M8":                             SETAE_M8,
	"SETB_Rmr8":                            SETB_Rmr8,
	"SETB_M8":                              SETB_M8,
	"SETBE_Rmr8":                           SETBE_Rmr8,
	"SETBE_M8":                             SETBE_M8,
	"SETC_Rmr8":                            SETC_Rmr8,
	"SETC_M8":                              SETC_M8,
	"SETE_Rmr8":                            SETE_Rmr8,
	"SETE_M8":                              SETE_M8,
	"SETG_Rmr8":                            SETG_Rmr8,
	"SETG_M8":                              SETG_M8,
	"SETGE_Rmr8":                           SETGE_Rmr8,
	"SETGE_M8":                             SETGE_M8,
	"SETL_Rmr8":                            SETL_Rmr8,
	"SETL_M8":                              SETL_M8,
	"SETLE_Rmr8":                           SETLE_Rmr8,
	"SETLE_M8":                             SETLE_M8,
	"SETNA_Rmr8":                           SETNA_Rmr8,
	"SETNA_M8":                             SETNA_M8,
	"SETNAE_Rmr8":                          SETNAE_Rmr8,
	"SETNAE_M8":                            SETNAE_M8,
	"SETNB_Rmr8":                           SETNB_Rmr8,
	"SETNB_M8":                             SETNB_M8,
	"SETNBE_Rmr8":                          SETNBE_Rmr8,
	"SETNBE_M8":                            SETNBE_M8,
	"SETNC_Rmr8":                           SETNC_Rmr8,
	"SETNC_M8":                             SETNC_M8,
	"SETNE_Rmr8":                           SETNE_Rmr8,
	"SETNE_M8":                             SETNE_M8,
	"SETNG_Rmr8":                           SETNG_Rmr8,
	"SETNG_M8":                             SETNG_M8,
	"SETNGE_Rmr8":                          SETNGE_Rmr8,
	"SETNGE_M8":                            SETNGE_M8,
	"SETNL_Rmr8":                           SETNL_Rmr8,
	"SETNL_M8":                             SETNL_M8,
	"SETNLE_Rmr8":                          SETNLE_Rmr8,
	"SETNLE_M8":                            SETNLE_M8,
	"SETNO_Rmr8":                           SETNO_Rmr8,
	"SETNO_M8":                             SETNO_M8,
	"SETNP_Rmr8":                           SETNP_Rmr8,
	"SETNP_M8":                             SETNP_M8,
	"SETNS_Rmr8":                           SETNS_Rmr8,
	"SETNS_M8":                             SETNS_M8,
	"SETNZ_Rmr8":                           SETNZ_Rmr8,
	"SETNZ_M8":                             SETNZ_M8,
	"SETO_Rmr8":                            SETO_Rmr8,
	"SETO_M8":                              SETO_M8,
	"SETP_Rmr8":                            SETP_Rmr8,
	"SETP_M8":                              SETP_M8,
	"SETPE_Rmr8":                           SETPE_Rmr8,
	"SETPE_M8":                             SETPE_M8,
	"SETPO_Rmr8":                           SETPO_Rmr8,
	"SETPO_M8":                             SETPO_M8,
	"SETS_Rmr8":                            SETS_Rmr8,
	"SETS_M8":                              SETS_M8,
	"SETSSBSY":                             SETSSBSY,
	"SETZ_Rmr8":                            SETZ_Rmr8,
	"SETZ_M8":                              SETZ_M8,
	"SFENCE":                               SFENCE,
	"SGDT_M":                               SGDT_M,
	"SHA1MSG1_XMM1_XMM2":                   SHA1MSG1_XMM1_XMM2,
	"SHA1MSG1_XMM1_M128":                   SHA1MSG1_XMM1_M128,
	"SHA1MSG2_XMM1_XMM2":                   SHA1MSG2_XMM1_XMM2,
	"SHA1MSG2_XMM1_M128":                   SHA1MSG2_XMM1_M128,
	"SHA1NEXTE_XMM1_XMM2":                  SHA1NEXTE_XMM1_XMM2,
	"SHA1NEXTE_XMM1_M128":                  SHA1NEXTE_XMM1_M128,
	"SHA1RNDS4_XMM1_XMM2_Imm8":             SHA1RNDS4_XMM1_XMM2_Imm8,
	"SHA1RNDS4_XMM1_M128_Imm8":             SHA1RNDS4_XMM1_M128_Imm8,
	"SHA256MSG1_XMM1_XMM2":                 SHA256MSG1_XMM1_XMM2,
	"SHA256MSG1_XMM1_M128":                 SHA256MSG1_XMM1_M128,
	"SHA256MSG2_XMM1_XMM2":                 SHA256MSG2_XMM1_XMM2,
	"SHA256MSG2_XMM1_M128":                 SHA256MSG2_XMM1_M128,
	"SHA256RNDS2_XMM1_XMM2":                SHA256RNDS2_XMM1_XMM2,
	"SHA256RNDS2_XMM1_M128":                SHA256RNDS2_XMM1_M128,
	"SHL_Rmr8_1":                           SHL_Rmr8_1,
	"SHL_Rmr8_CL":                          SHL_Rmr8_CL,
	"SHL_Rmr8_Imm8":                        SHL_Rmr8_Imm8,
	"SHL_Rmr16_1":                          SHL_Rmr16_1,
	"SHL_Rmr16_CL":                         SHL_Rmr16_CL,
	"SHL_Rmr16_Imm8":                       SHL_Rmr16_Imm8,
	"SHL_Rmr32_1":                          SHL_Rmr32_1,
	"SHL_Rmr32_CL":                         SHL_Rmr32_CL,
	"SHL_Rmr32_Imm8":                       SHL_Rmr32_Imm8,
	"SHL_Rmr64_1_REX":                      SHL_Rmr64_1_REX,
	"SHL_Rmr64_CL_REX":                     SHL_Rmr64_CL_REX,
	"SHL_Rmr64_Imm8_REX":                   SHL_Rmr64_Imm8_REX,
	"SHL_M8_1":                             SHL_M8_1,
	"SHL_M8_CL":                            SHL_M8_CL,
	"SHL_M8_Imm8":                          SHL_M8_Imm8,
	"SHL_M16_1":                            SHL_M16_1,
	"SHL_M16_CL":                           SHL_M16_CL,
	"SHL_M16_Imm8":                         SHL_M16_Imm8,
	"SHL_M32_1":                            SHL_M32_1,
	"SHL_M32_CL":                           SHL_M32_CL,
	"SHL_M32_Imm8":                         SHL_M32_Imm8,
	"SHL_M64_1_REX":                        SHL_M64_1_REX,
	"SHL_M64_CL_REX":                       SHL_M64_CL_REX,
	"SHL_M64_Imm8_REX":                     SHL_M64_Imm8_REX,
	"SHLD_Rmr16_R16_CL":                    SHLD_Rmr16_R16_CL,
	"SHLD_Rmr16_R16_Imm8":                  SHLD_Rmr16_R16_Imm8,
	"SHLD_Rmr32_R32_CL":                    SHLD_Rmr32_R32_CL,
	"SHLD_Rmr32_R32_Imm8":                  SHLD_Rmr32_R32_Imm8,
	"SHLD_Rmr64_R64_CL_REX":                SHLD_Rmr64_R64_CL_REX,
	"SHLD_Rmr64_R64_Imm8_REX":              SHLD_Rmr64_R64_Imm8_REX,
	"SHLD_M16_R16_CL":                      SHLD_M16_R16_CL,
	"SHLD_M16_R16_Imm8":                    SHLD_M16_R16_Imm8,
	"SHLD_M32_R32_CL":                      SHLD_M32_R32_CL,
	"SHLD_M32_R32_Imm8":                    SHLD_M32_R32_Imm8,
	"SHLD_M64_R64_CL_REX":                  SHLD_M64_R64_CL_REX,
	"SHLD_M64_R64_Imm8_REX":                SHLD_M64_R64_Imm8_REX,
	"SHLX_R32_Rmr32_R32V_VEX":              SHLX_R32_Rmr32_R32V_VEX,
	"SHLX_R32_M32_R32V_VEX":                SHLX_R32_M32_R32V_VEX,
	"SHLX_R64_Rmr64_R64V_VEX":              SHLX_R64_Rmr64_R64V_VEX,
	"SHLX_R64_M64_R64V_VEX":                SHLX_R64_M64_R64V_VEX,
	"SHR_Rmr8_1":                           SHR_Rmr8_1,
	"SHR_Rmr8_CL":                          SHR_Rmr8_CL,
	"SHR_Rmr8_Imm8":                        SHR_Rmr8_Imm8,
	"SHR_Rmr16_1":                          SHR_Rmr16_1,
	"SHR_Rmr16_CL":                         SHR_Rmr16_CL,
	"SHR_Rmr16_Imm8":                       SHR_Rmr16_Imm8,
	"SHR_Rmr32_1":                          SHR_Rmr32_1,
	"SHR_Rmr32_CL":                         SHR_Rmr32_CL,
	"SHR_Rmr32_Imm8":                       SHR_Rmr32_Imm8,
	"SHR_Rmr64_1_REX":                      SHR_Rmr64_1_REX,
	"SHR_Rmr64_CL_REX":                     SHR_Rmr64_CL_REX,
	"SHR_Rmr64_Imm8_REX":                   SHR_Rmr64_Imm8_REX,
	"SHR_M8_1":                             SHR_M8_1,
	"SHR_M8_CL":                            SHR_M8_CL,
	"SHR_M8_Imm8":                          SHR_M8_Imm8,
	"SHR_M16_1":                            SHR_M16_1,
	"SHR_M16_CL":                           SHR_M16_CL,
	"SHR_M16_Imm8":                         SHR_M16_Imm8,
	"SHR_M32_1":                            SHR_M32_1,
	"SHR_M32_CL":                           SHR_M32_CL,
	"SHR_M32_Imm8":                         SHR_M32_Imm8,
	"SHR_M64_1_REX":                        SHR_M64_1_REX,
	"SHR_M64_CL_REX":                       SHR_M64_CL_REX,
	"SHR_M64_Imm8_REX":                     SHR_M64_Imm8_REX,
	"SHRD_Rmr16_R16_CL":                    SHRD_Rmr16_R16_CL,
	"SHRD_Rmr16_R16_Imm8":                  SHRD_Rmr16_R16_Imm8,
	"SHRD_Rmr32_R32_CL":                    SHRD_Rmr32_R32_CL,
	"SHRD_Rmr32_R32_Imm8":                  SHRD_Rmr32_R32_Imm8,
	"SHRD_Rmr64_R64_CL_REX":                SHRD_Rmr64_R64_CL_REX,
	"SHRD_Rmr64_R64_Imm8_REX":              SHRD_Rmr64_R64_Imm8_REX,
	"SHRD_M16_R16_CL":                      SHRD_M16_R16_CL,
	"SHRD_M16_R16_Imm8":                    SHRD_M16_R16_Imm8,
	"SHRD_M32_R32_CL":                      SHRD_M32_R32_CL,
	"SHRD_M32_R32_Imm8":                    SHRD_M32_R32_Imm8,
	"SHRD_M64_R64_CL_REX":                  SHRD_M64_R64_CL_REX,
	"SHRD_M64_R64_Imm8_REX":                SHRD_M64_R64_Imm8_REX,
	"SHRX_R32_Rmr32_R32V_VEX":              SHRX_R32_Rmr32_R32V_VEX,
	"SHRX_R32_M32_R32V_VEX":                SHRX_R32_M32_R32V_VEX,
	"SHRX_R64_Rmr64_R64V_VEX":              SHRX_R64_Rmr64_R64V_VEX,
	"SHRX_R64_M64_R64V_VEX":                SHRX_R64_M64_R64V_VEX,
	"SHUFPD_XMM1_XMM2_Imm8":                SHUFPD_XMM1_XMM2_Imm8,
	"SHUFPD_XMM1_M128_Imm8":                SHUFPD_XMM1_M128_Imm8,
	"SHUFPS_XMM1_XMM2_Imm8":                SHUFPS_XMM1_XMM2_Imm8,
	"SHUFPS_XMM1_M128_Imm8":                SHUFPS_XMM1_M128_Imm8,
	"SIDT_M":                               SIDT_M,
	"SKINIT_EAX":                           SKINIT_EAX,
	"SLDT_Rmr16":                           SLDT_Rmr16,
	"SLDT_Rmr32":                           SLDT_Rmr32,
	"SLDT_M16":                             SLDT_M16,
	"SMSW_Rmr16":                           SMSW_Rmr16,
	"SMSW_Rmr32":                           SMSW_Rmr32,
	"SMSW_Rmr64_REX":                       SMSW_Rmr64_REX,
	"SMSW_M16":                             SMSW_M16,
	"SQRTPD_XMM1_XMM2":                     SQRTPD_XMM1_XMM2,
	"SQRTPD_XMM1_M128":                     SQRTPD_XMM1_M128,
	"SQRTPS_XMM1_XMM2":                     SQRTPS_XMM1_XMM2,
	"SQRTPS_XMM1_M128":                     SQRTPS_XMM1_M128,
	"SQRTSD_XMM1_XMM2":                     SQRTSD_XMM1_XMM2,
	"SQRTSD_XMM1_M64":                      SQRTSD_XMM1_M64,
	"SQRTSS_XMM1_XMM2":                     SQRTSS_XMM1_XMM2,
	"SQRTSS_XMM1_M32":                      SQRTSS_XMM1_M32,
	"STAC":                                 STAC,
	"STC":                                  STC,
	"STD":                                  STD,
	"STGI":                                 STGI,
	"STI":                                  STI,
	"STMXCSR_M32":                          STMXCSR_M32,
	"STOS_StrDst8":                         STOS_StrDst8,
	"STOS_StrDst16":                        STOS_StrDst16,
	"STOS_StrDst32":                        STOS_StrDst32,
	"STOS_StrDst64_REX":                    STOS_StrDst64_REX,
	"STOS_StrDst8_AL":                      STOS_StrDst8_AL,
	"STOS_StrDst16_AX":                     STOS_StrDst16_AX,
	"STOS_StrDst32_EAX":                    STOS_StrDst32_EAX,
	"STOS_StrDst64_RAX_REX":                STOS_StrDst64_RAX_REX,
	"STOSB":                                STOSB,
	"STOSB_StrDst8":                        STOSB_StrDst8,
	"STOSB_StrDst8_AL":                     STOSB_StrDst8_AL,
	"STOSD":                                STOSD,
	"STOSD_StrDst32":                       STOSD_StrDst32,
	"STOSD_StrDst32_EAX":                   STOSD_StrDst32_EAX,
	"STOSQ_REX":                            STOSQ_REX,
	"STOSQ_StrDst64_REX":                   STOSQ_StrDst64_REX,
	"STOSQ_StrDst64_RAX_REX":               STOSQ_StrDst64_RAX_REX,
	"STOSW":                                STOSW,
	"STOSW_StrDst16":                       STOSW_StrDst16,
	"STOSW_StrDst16_AX":                    STOSW_StrDst16_AX,
	"STR_Rmr16":                            STR_Rmr16,
	"STR_Rmr32":                            STR_Rmr32,
	"STR_Rmr64_REX":                        STR_Rmr64_REX,
	"STR_M16":                              STR_M16,
	"STUI":                                 STUI,
	"SUB_AL_Imm8":                          SUB_AL_Imm8,
	"SUB_AX_Imm16":                         SUB_AX_Imm16,
	"SUB_EAX_Imm32":                        SUB_EAX_Imm32,
	"SUB_RAX_Imm32_REX":                    SUB_RAX_Imm32_REX,
	"SUB_R8_Rmr8":                          SUB_R8_Rmr8,
	"SUB_R8_M8":                            SUB_R8_M8,
	"SUB_R16_Rmr16":                        SUB_R16_Rmr16,
	"SUB_R16_M16":                          SUB_R16_M16,
	"SUB_R32_Rmr32":                        SUB_R32_Rmr32,
	"SUB_R32_M32":                          SUB_R32_M32,
	"SUB_R64_Rmr64_REX":                    SUB_R64_Rmr64_REX,
	"SUB_R64_M64_REX":                      SUB_R64_M64_REX,
	"SUB_Rmr8_Imm8":                        SUB_Rmr8_Imm8,
	"SUB_Rmr8_R8":                          SUB_Rmr8_R8,
	"SUB_Rmr16_Imm8":                       SUB_Rmr16_Imm8,
	"SUB_Rmr16_Imm16":                      SUB_Rmr16_Imm16,
	"SUB_Rmr16_R16":                        SUB_Rmr16_R16,
	"SUB_Rmr32_Imm8":                       SUB_Rmr32_Imm8,
	"SUB_Rmr32_Imm32":                      SUB_Rmr32_Imm32,
	"SUB_Rmr32_R32":                        SUB_Rmr32_R32,
	"SUB_Rmr64_Imm8_REX":                   SUB_Rmr64_Imm8_REX,
	"SUB_Rmr64_Imm32_REX":                  SUB_Rmr64_Imm32_REX,
	"SUB_Rmr64_R64_REX":                    SUB_Rmr64_R64_REX,
	"SUB_M8_Imm8":                          SUB_M8_Imm8,
	"SUB_M8_R8":                            SUB_M8_R8,
	"SUB_M16_Imm8":                         SUB_M16_Imm8,
	"SUB_M16_Imm16":                        SUB_M16_Imm16,
	"SUB_M16_R16":                          SUB_M16_R16,
	"SUB_M32_Imm8":                         SUB_M32_Imm8,
	"SUB_M32_Imm32":                        SUB_M32_Imm32,
	"SUB_M32_R32":                          SUB_M32_R32,
	"SUB_M64_Imm8_REX":                     SUB_M64_Imm8_REX,
	"SUB_M64_Imm32_REX":                    SUB_M64_Imm32_REX,
	"SUB_M64_R64_REX":                      SUB_M64_R64_REX,
	"SUBPD_XMM1_XMM2":                      SUBPD_XMM1_XMM2,
	"SUBPD_XMM1_M128":                      SUBPD_XMM1_M128,
	"SUBPS_XMM1_XMM2":                      SUBPS_XMM1_XMM2,
	"SUBPS_XMM1_M128":                      SUBPS_XMM1_M128,
	"SUBSD_XMM1_XMM2":                      SUBSD_XMM1_XMM2,
	"SUBSD_XMM1_M64":                       SUBSD_XMM1_M64,
	"SUBSS_XMM1_XMM2":                      SUBSS_XMM1_XMM2,
	"SUBSS_XMM1_M32":                       SUBSS_XMM1_M32,
	"SWAPGS":                               SWAPGS,
	"SYSCALL":                              SYSCALL,
	"SYSENTER":                             SYSENTER,
	"SYSEXIT":                              SYSEXIT,
	"SYSEXIT_REX":                          SYSEXIT_REX,
	"SYSRET":                               SYSRET,
	"SYSRET_REX":                           SYSRET_REX,
	"TEST_AL_Imm8":                         TEST_AL_Imm8,
	"TEST_AX_Imm16":                        TEST_AX_Imm16,
	"TEST_EAX_Imm32":                       TEST_EAX_Imm32,
	"TEST_RAX_Imm32_REX":                   TEST_RAX_Imm32_REX,
	"TEST_Rmr8_Imm8":                       TEST_Rmr8_Imm8,
	"TEST_Rmr8_R8":                         TEST_Rmr8_R8,
	"TEST_Rmr16_Imm16":                     TEST_Rmr16_Imm16,
	"TEST_Rmr16_R16":                       TEST_Rmr16_R16,
	"TEST_Rmr32_Imm32":                     TEST_Rmr32_Imm32,
	"TEST_Rmr32_R32":                       TEST_Rmr32_R32,
	"TEST_Rmr64_Imm32_REX":                 TEST_Rmr64_Imm32_REX,
	"TEST_Rmr64_R64_REX":                   TEST_Rmr64_R64_REX,
	"TEST_M8_Imm8":                         TEST_M8_Imm8,
	"TEST_M8_R8":                           TEST_M8_R8,
	"TEST_M16_Imm16":                       TEST_M16_Imm16,
	"TEST_M16_R16":                         TEST_M16_R16,
	"TEST_M32_Imm32":                       TEST_M32_Imm32,
	"TEST_M32_R32":                         TEST_M32_R32,
	"TEST_M64_Imm32_REX":                   TEST_M64_Imm32_REX,
	"TEST_M64_R64_REX":                     TEST_M64_R64_REX,
	"TESTUI":                               TESTUI,
	"TPAUSE_Rmr32":                         TPAUSE_Rmr32,
	"TZCNT_R16_Rmr16":                      TZCNT_R16_Rmr16,
	"TZCNT_R16_M16":                        TZCNT_R16_M16,
	"TZCNT_R32_Rmr32":                      TZCNT_R32_Rmr32,
	"TZCNT_R32_M32":                        TZCNT_R32_M32,
	"TZCNT_R64_Rmr64_REX":                  TZCNT_R64_Rmr64_REX,
	"TZCNT_R64_M64_REX":                    TZCNT_R64_M64_REX,
	"UCOMISD_XMM1_XMM2":                    UCOMISD_XMM1_XMM2,
	"UCOMISD_XMM1_M64":                     UCOMISD_XMM1_M64,
	"UCOMISS_XMM1_XMM2":                    UCOMISS_XMM1_XMM2,
	"UCOMISS_XMM1_M32":                     UCOMISS_XMM1_M32,
	"UD0_R32_Rmr32":                        UD0_R32_Rmr32,
	"UD0_R32_M32":                          UD0_R32_M32,
	"UD1_R32_Rmr32":                        UD1_R32_Rmr32,
	"UD1_R32_M32":                          UD1_R32_M32,
	"UD2":                                  UD2,
	"UIRET":                                UIRET,
	"UMONITOR_Rmr16":                       UMONITOR_Rmr16,
	"UMONITOR_Rmr32":                       UMONITOR_Rmr32,
	"UMONITOR_Rmr64":                       UMONITOR_Rmr64,
	"UMWAIT_Rmr32":                         UMWAIT_Rmr32,
	"UNPCKHPD_XMM1_XMM2":                   UNPCKHPD_XMM1_XMM2,
	"UNPCKHPD_XMM1_M128":                   UNPCKHPD_XMM1_M128,
	"UNPCKHPS_XMM1_XMM2":                   UNPCKHPS_XMM1_XMM2,
	"UNPCKHPS_XMM1_M128":                   UNPCKHPS_XMM1_M128,
	"UNPCKLPD_XMM1_XMM2":                   UNPCKLPD_XMM1_XMM2,
	"UNPCKLPD_XMM1_M128":                   UNPCKLPD_XMM1_M128,
	"UNPCKLPS_XMM1_XMM2":                   UNPCKLPS_XMM1_XMM2,
	"UNPCKLPS_XMM1_M128":                   UNPCKLPS_XMM1_M128,
	"VADDPD_XMM1_XMMV_XMM2_VEX":            VADDPD_XMM1_XMMV_XMM2_VEX,
	"VADDPD_XMM1_XMMV_XMM2_EVEX":           VADDPD_XMM1_XMMV_XMM2_EVEX,
	"VADDPD_XMM1_XMMV_M128_VEX":            VADDPD_XMM1_XMMV_M128_VEX,
	"VADDPD_XMM1_XMMV_M128_EVEX":           VADDPD_XMM1_XMMV_M128_EVEX,
	"VADDPD_XMM1_XMMV_M64bcst128_EVEX":     VADDPD_XMM1_XMMV_M64bcst128_EVEX,
	"VADDPD_YMM1_YMMV_YMM2_VEX":            VADDPD_YMM1_YMMV_YMM2_VEX,
	"VADDPD_YMM1_YMMV_YMM2_EVEX":           VADDPD_YMM1_YMMV_YMM2_EVEX,
	"VADDPD_YMM1_YMMV_M256_VEX":            VADDPD_YMM1_YMMV_M256_VEX,
	"VADDPD_YMM1_YMMV_M256_EVEX":           VADDPD_YMM1_YMMV_M256_EVEX,
	"VADDPD_YMM1_YMMV_M64bcst256_EVEX":     VADDPD_YMM1_YMMV_M64bcst256_EVEX,
	"VADDPD_ZMM1_ZMMV_ZMM2_EVEX":           VADDPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VADDPD_ZMM1_ZMMV_M512_EVEX":           VADDPD_ZMM1_ZMMV_M512_EVEX,
	"VADDPD_ZMM1_ZMMV_M64bcst512_EVEX":     VADDPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VADDPS_XMM1_XMMV_XMM2_VEX":            VADDPS_XMM1_XMMV_XMM2_VEX,
	"VADDPS_XMM1_XMMV_XMM2_EVEX":           VADDPS_XMM1_XMMV_XMM2_EVEX,
	"VADDPS_XMM1_XMMV_M128_VEX":            VADDPS_XMM1_XMMV_M128_VEX,
	"VADDPS_XMM1_XMMV_M128_EVEX":           VADDPS_XMM1_XMMV_M128_EVEX,
	"VADDPS_XMM1_XMMV_M32bcst128_EVEX":     VADDPS_XMM1_XMMV_M32bcst128_EVEX,
	"VADDPS_YMM1_YMMV_YMM2_VEX":            VADDPS_YMM1_YMMV_YMM2_VEX,
	"VADDPS_YMM1_YMMV_YMM2_EVEX":           VADDPS_YMM1_YMMV_YMM2_EVEX,
	"VADDPS_YMM1_YMMV_M256_VEX":            VADDPS_YMM1_YMMV_M256_VEX,
	"VADDPS_YMM1_YMMV_M256_EVEX":           VADDPS_YMM1_YMMV_M256_EVEX,
	"VADDPS_YMM1_YMMV_M32bcst256_EVEX":     VADDPS_YMM1_YMMV_M32bcst256_EVEX,
	"VADDPS_ZMM1_ZMMV_ZMM2_EVEX":           VADDPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VADDPS_ZMM1_ZMMV_M512_EVEX":           VADDPS_ZMM1_ZMMV_M512_EVEX,
	"VADDPS_ZMM1_ZMMV_M32bcst512_EVEX":     VADDPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VADDSD_XMM1_XMMV_XMM2_VEX":            VADDSD_XMM1_XMMV_XMM2_VEX,
	"VADDSD_XMM1_XMMV_XMM2_EVEX":           VADDSD_XMM1_XMMV_XMM2_EVEX,
	"VADDSD_XMM1_XMMV_M64_VEX":             VADDSD_XMM1_XMMV_M64_VEX,
	"VADDSD_XMM1_XMMV_M64_EVEX":            VADDSD_XMM1_XMMV_M64_EVEX,
	"VADDSS_XMM1_XMMV_XMM2_VEX":            VADDSS_XMM1_XMMV_XMM2_VEX,
	"VADDSS_XMM1_XMMV_XMM2_EVEX":           VADDSS_XMM1_XMMV_XMM2_EVEX,
	"VADDSS_XMM1_XMMV_M32_VEX":             VADDSS_XMM1_XMMV_M32_VEX,
	"VADDSS_XMM1_XMMV_M32_EVEX":            VADDSS_XMM1_XMMV_M32_EVEX,
	"VADDSUBPD_XMM1_XMMV_XMM2_VEX":         VADDSUBPD_XMM1_XMMV_XMM2_VEX,
	"VADDSUBPD_XMM1_XMMV_M128_VEX":         VADDSUBPD_XMM1_XMMV_M128_VEX,
	"VADDSUBPD_YMM1_YMMV_YMM2_VEX":         VADDSUBPD_YMM1_YMMV_YMM2_VEX,
	"VADDSUBPD_YMM1_YMMV_M256_VEX":         VADDSUBPD_YMM1_YMMV_M256_VEX,
	"VADDSUBPS_XMM1_XMMV_XMM2_VEX":         VADDSUBPS_XMM1_XMMV_XMM2_VEX,
	"VADDSUBPS_XMM1_XMMV_M128_VEX":         VADDSUBPS_XMM1_XMMV_M128_VEX,
	"VADDSUBPS_YMM1_YMMV_YMM2_VEX":         VADDSUBPS_YMM1_YMMV_YMM2_VEX,
	"VADDSUBPS_YMM1_YMMV_M256_VEX":         VADDSUBPS_YMM1_YMMV_M256_VEX,
	"VAESDEC_XMM1_XMMV_XMM2_VEX":           VAESDEC_XMM1_XMMV_XMM2_VEX,
	"VAESDEC_XMM1_XMMV_XMM2_EVEX":          VAESDEC_XMM1_XMMV_XMM2_EVEX,
	"VAESDEC_XMM1_XMMV_M128_VEX":           VAESDEC_XMM1_XMMV_M128_VEX,
	"VAESDEC_XMM1_XMMV_M128_EVEX":          VAESDEC_XMM1_XMMV_M128_EVEX,
	"VAESDEC_YMM1_YMMV_YMM2_VEX":           VAESDEC_YMM1_YMMV_YMM2_VEX,
	"VAESDEC_YMM1_YMMV_YMM2_EVEX":          VAESDEC_YMM1_YMMV_YMM2_EVEX,
	"VAESDEC_YMM1_YMMV_M256_VEX":           VAESDEC_YMM1_YMMV_M256_VEX,
	"VAESDEC_YMM1_YMMV_M256_EVEX":          VAESDEC_YMM1_YMMV_M256_EVEX,
	"VAESDEC_ZMM1_ZMMV_ZMM2_EVEX":          VAESDEC_ZMM1_ZMMV_ZMM2_EVEX,
	"VAESDEC_ZMM1_ZMMV_M512_EVEX":          VAESDEC_ZMM1_ZMMV_M512_EVEX,
	"VAESDECLAST_XMM1_XMMV_XMM2_VEX":       VAESDECLAST_XMM1_XMMV_XMM2_VEX,
	"VAESDECLAST_XMM1_XMMV_XMM2_EVEX":      VAESDECLAST_XMM1_XMMV_XMM2_EVEX,
	"VAESDECLAST_XMM1_XMMV_M128_VEX":       VAESDECLAST_XMM1_XMMV_M128_VEX,
	"VAESDECLAST_XMM1_XMMV_M128_EVEX":      VAESDECLAST_XMM1_XMMV_M128_EVEX,
	"VAESDECLAST_YMM1_YMMV_YMM2_VEX":       VAESDECLAST_YMM1_YMMV_YMM2_VEX,
	"VAESDECLAST_YMM1_YMMV_YMM2_EVEX":      VAESDECLAST_YMM1_YMMV_YMM2_EVEX,
	"VAESDECLAST_YMM1_YMMV_M256_VEX":       VAESDECLAST_YMM1_YMMV_M256_VEX,
	"VAESDECLAST_YMM1_YMMV_M256_EVEX":      VAESDECLAST_YMM1_YMMV_M256_EVEX,
	"VAESDECLAST_ZMM1_ZMMV_ZMM2_EVEX":      VAESDECLAST_ZMM1_ZMMV_ZMM2_EVEX,
	"VAESDECLAST_ZMM1_ZMMV_M512_EVEX":      VAESDECLAST_ZMM1_ZMMV_M512_EVEX,
	"VAESENC_XMM1_XMMV_XMM2_VEX":           VAESENC_XMM1_XMMV_XMM2_VEX,
	"VAESENC_XMM1_XMMV_XMM2_EVEX":          VAESENC_XMM1_XMMV_XMM2_EVEX,
	"VAESENC_XMM1_XMMV_M128_VEX":           VAESENC_XMM1_XMMV_M128_VEX,
	"VAESENC_XMM1_XMMV_M128_EVEX":          VAESENC_XMM1_XMMV_M128_EVEX,
	"VAESENC_YMM1_YMMV_YMM2_VEX":           VAESENC_YMM1_YMMV_YMM2_VEX,
	"VAESENC_YMM1_YMMV_YMM2_EVEX":          VAESENC_YMM1_YMMV_YMM2_EVEX,
	"VAESENC_YMM1_YMMV_M256_VEX":           VAESENC_YMM1_YMMV_M256_VEX,
	"VAESENC_YMM1_YMMV_M256_EVEX":          VAESENC_YMM1_YMMV_M256_EVEX,
	"VAESENC_ZMM1_ZMMV_ZMM2_EVEX":          VAESENC_ZMM1_ZMMV_ZMM2_EVEX,
	"VAESENC_ZMM1_ZMMV_M512_EVEX":          VAESENC_ZMM1_ZMMV_M512_EVEX,
	"VAESENCLAST_XMM1_XMMV_XMM2_VEX":       VAESENCLAST_XMM1_XMMV_XMM2_VEX,
	"VAESENCLAST_XMM1_XMMV_XMM2_EVEX":      VAESENCLAST_XMM1_XMMV_XMM2_EVEX,
	"VAESENCLAST_XMM1_XMMV_M128_VEX":       VAESENCLAST_XMM1_XMMV_M128_VEX,
	"VAESENCLAST_XMM1_XMMV_M128_EVEX":      VAESENCLAST_XMM1_XMMV_M128_EVEX,
	"VAESENCLAST_YMM1_YMMV_YMM2_VEX":       VAESENCLAST_YMM1_YMMV_YMM2_VEX,
	"VAESENCLAST_YMM1_YMMV_YMM2_EVEX":      VAESENCLAST_YMM1_YMMV_YMM2_EVEX,
	"VAESENCLAST_YMM1_YMMV_M256_VEX":       VAESENCLAST_YMM1_YMMV_M256_VEX,
	"VAESENCLAST_YMM1_YMMV_M256_EVEX":      VAESENCLAST_YMM1_YMMV_M256_EVEX,
	"VAESENCLAST_ZMM1_ZMMV_ZMM2_EVEX":      VAESENCLAST_ZMM1_ZMMV_ZMM2_EVEX,
	"VAESENCLAST_ZMM1_ZMMV_M512_EVEX":      VAESENCLAST_ZMM1_ZMMV_M512_EVEX,
	"VAESIMC_XMM1_XMM2_VEX":                VAESIMC_XMM1_XMM2_VEX,
	"VAESIMC_XMM1_M128_VEX":                VAESIMC_XMM1_M128_VEX,
	"VAESKEYGENASSIST_XMM1_XMM2_Imm8_VEX":  VAESKEYGENASSIST_XMM1_XMM2_Imm8_VEX,
	"VAESKEYGENASSIST_XMM1_M128_Imm8_VEX":  VAESKEYGENASSIST_XMM1_M128_Imm8_VEX,
	"VANDNPD_XMM1_XMMV_XMM2_VEX":           VANDNPD_XMM1_XMMV_XMM2_VEX,
	"VANDNPD_XMM1_XMMV_XMM2_EVEX":          VANDNPD_XMM1_XMMV_XMM2_EVEX,
	"VANDNPD_XMM1_XMMV_M128_VEX":           VANDNPD_XMM1_XMMV_M128_VEX,
	"VANDNPD_XMM1_XMMV_M128_EVEX":          VANDNPD_XMM1_XMMV_M128_EVEX,
	"VANDNPD_XMM1_XMMV_M64bcst128_EVEX":    VANDNPD_XMM1_XMMV_M64bcst128_EVEX,
	"VANDNPD_YMM1_YMMV_YMM2_VEX":           VANDNPD_YMM1_YMMV_YMM2_VEX,
	"VANDNPD_YMM1_YMMV_YMM2_EVEX":          VANDNPD_YMM1_YMMV_YMM2_EVEX,
	"VANDNPD_YMM1_YMMV_M256_VEX":           VANDNPD_YMM1_YMMV_M256_VEX,
	"VANDNPD_YMM1_YMMV_M256_EVEX":          VANDNPD_YMM1_YMMV_M256_EVEX,
	"VANDNPD_YMM1_YMMV_M64bcst256_EVEX":    VANDNPD_YMM1_YMMV_M64bcst256_EVEX,
	"VANDNPD_ZMM1_ZMMV_ZMM2_EVEX":          VANDNPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VANDNPD_ZMM1_ZMMV_M512_EVEX":          VANDNPD_ZMM1_ZMMV_M512_EVEX,
	"VANDNPD_ZMM1_ZMMV_M64bcst512_EVEX":    VANDNPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VANDNPS_XMM1_XMMV_XMM2_VEX":           VANDNPS_XMM1_XMMV_XMM2_VEX,
	"VANDNPS_XMM1_XMMV_XMM2_EVEX":          VANDNPS_XMM1_XMMV_XMM2_EVEX,
	"VANDNPS_XMM1_XMMV_M128_VEX":           VANDNPS_XMM1_XMMV_M128_VEX,
	"VANDNPS_XMM1_XMMV_M128_EVEX":          VANDNPS_XMM1_XMMV_M128_EVEX,
	"VANDNPS_XMM1_XMMV_M32bcst128_EVEX":    VANDNPS_XMM1_XMMV_M32bcst128_EVEX,
	"VANDNPS_YMM1_YMMV_YMM2_VEX":           VANDNPS_YMM1_YMMV_YMM2_VEX,
	"VANDNPS_YMM1_YMMV_YMM2_EVEX":          VANDNPS_YMM1_YMMV_YMM2_EVEX,
	"VANDNPS_YMM1_YMMV_M256_VEX":           VANDNPS_YMM1_YMMV_M256_VEX,
	"VANDNPS_YMM1_YMMV_M256_EVEX":          VANDNPS_YMM1_YMMV_M256_EVEX,
	"VANDNPS_YMM1_YMMV_M32bcst256_EVEX":    VANDNPS_YMM1_YMMV_M32bcst256_EVEX,
	"VANDNPS_ZMM1_ZMMV_ZMM2_EVEX":          VANDNPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VANDNPS_ZMM1_ZMMV_M512_EVEX":          VANDNPS_ZMM1_ZMMV_M512_EVEX,
	"VANDNPS_ZMM1_ZMMV_M32bcst512_EVEX":    VANDNPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VANDPD_XMM1_XMMV_XMM2_VEX":            VANDPD_XMM1_XMMV_XMM2_VEX,
	"VANDPD_XMM1_XMMV_XMM2_EVEX":           VANDPD_XMM1_XMMV_XMM2_EVEX,
	"VANDPD_XMM1_XMMV_M128_VEX":            VANDPD_XMM1_XMMV_M128_VEX,
	"VANDPD_XMM1_XMMV_M128_EVEX":           VANDPD_XMM1_XMMV_M128_EVEX,
	"VANDPD_XMM1_XMMV_M64bcst128_EVEX":     VANDPD_XMM1_XMMV_M64bcst128_EVEX,
	"VANDPD_YMM1_YMMV_YMM2_VEX":            VANDPD_YMM1_YMMV_YMM2_VEX,
	"VANDPD_YMM1_YMMV_YMM2_EVEX":           VANDPD_YMM1_YMMV_YMM2_EVEX,
	"VANDPD_YMM1_YMMV_M256_VEX":            VANDPD_YMM1_YMMV_M256_VEX,
	"VANDPD_YMM1_YMMV_M256_EVEX":           VANDPD_YMM1_YMMV_M256_EVEX,
	"VANDPD_YMM1_YMMV_M64bcst256_EVEX":     VANDPD_YMM1_YMMV_M64bcst256_EVEX,
	"VANDPD_ZMM1_ZMMV_ZMM2_EVEX":           VANDPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VANDPD_ZMM1_ZMMV_M512_EVEX":           VANDPD_ZMM1_ZMMV_M512_EVEX,
	"VANDPD_ZMM1_ZMMV_M64bcst512_EVEX":     VANDPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VANDPS_XMM1_XMMV_XMM2_VEX":            VANDPS_XMM1_XMMV_XMM2_VEX,
	"VANDPS_XMM1_XMMV_XMM2_EVEX":           VANDPS_XMM1_XMMV_XMM2_EVEX,
	"VANDPS_XMM1_XMMV_M128_VEX":            VANDPS_XMM1_XMMV_M128_VEX,
	"VANDPS_XMM1_XMMV_M128_EVEX":           VANDPS_XMM1_XMMV_M128_EVEX,
	"VANDPS_XMM1_XMMV_M32bcst128_EVEX":     VANDPS_XMM1_XMMV_M32bcst128_EVEX,
	"VANDPS_YMM1_YMMV_YMM2_VEX":            VANDPS_YMM1_YMMV_YMM2_VEX,
	"VANDPS_YMM1_YMMV_YMM2_EVEX":           VANDPS_YMM1_YMMV_YMM2_EVEX,
	"VANDPS_YMM1_YMMV_M256_VEX":            VANDPS_YMM1_YMMV_M256_VEX,
	"VANDPS_YMM1_YMMV_M256_EVEX":           VANDPS_YMM1_YMMV_M256_EVEX,
	"VANDPS_YMM1_YMMV_M32bcst256_EVEX":     VANDPS_YMM1_YMMV_M32bcst256_EVEX,
	"VANDPS_ZMM1_ZMMV_ZMM2_EVEX":           VANDPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VANDPS_ZMM1_ZMMV_M512_EVEX":           VANDPS_ZMM1_ZMMV_M512_EVEX,
	"VANDPS_ZMM1_ZMMV_M32bcst512_EVEX":     VANDPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VBLENDPD_XMM1_XMMV_XMM2_Imm8_VEX":     VBLENDPD_XMM1_XMMV_XMM2_Imm8_VEX,
	"VBLENDPD_XMM1_XMMV_M128_Imm8_VEX":     VBLENDPD_XMM1_XMMV_M128_Imm8_VEX,
	"VBLENDPD_YMM1_YMMV_YMM2_Imm8_VEX":     VBLENDPD_YMM1_YMMV_YMM2_Imm8_VEX,
	"VBLENDPD_YMM1_YMMV_M256_Imm8_VEX":     VBLENDPD_YMM1_YMMV_M256_Imm8_VEX,
	"VBLENDPS_XMM1_XMMV_XMM2_Imm8_VEX":     VBLENDPS_XMM1_XMMV_XMM2_Imm8_VEX,
	"VBLENDPS_XMM1_XMMV_M128_Imm8_VEX":     VBLENDPS_XMM1_XMMV_M128_Imm8_VEX,
	"VBLENDPS_YMM1_YMMV_YMM2_Imm8_VEX":     VBLENDPS_YMM1_YMMV_YMM2_Imm8_VEX,
	"VBLENDPS_YMM1_YMMV_M256_Imm8_VEX":     VBLENDPS_YMM1_YMMV_M256_Imm8_VEX,
	"VBLENDVPD_XMM1_XMMV_XMM2_XMMIH_VEX":   VBLENDVPD_XMM1_XMMV_XMM2_XMMIH_VEX,
	"VBLENDVPD_XMM1_XMMV_M128_XMMIH_VEX":   VBLENDVPD_XMM1_XMMV_M128_XMMIH_VEX,
	"VBLENDVPD_YMM1_YMMV_YMM2_YMMIH_VEX":   VBLENDVPD_YMM1_YMMV_YMM2_YMMIH_VEX,
	"VBLENDVPD_YMM1_YMMV_M256_YMMIH_VEX":   VBLENDVPD_YMM1_YMMV_M256_YMMIH_VEX,
	"VBLENDVPS_XMM1_XMMV_XMM2_XMMIH_VEX":   VBLENDVPS_XMM1_XMMV_XMM2_XMMIH_VEX,
	"VBLENDVPS_XMM1_XMMV_M128_XMMIH_VEX":   VBLENDVPS_XMM1_XMMV_M128_XMMIH_VEX,
	"VBLENDVPS_YMM1_YMMV_YMM2_YMMIH_VEX":   VBLENDVPS_YMM1_YMMV_YMM2_YMMIH_VEX,
	"VBLENDVPS_YMM1_YMMV_M256_YMMIH_VEX":   VBLENDVPS_YMM1_YMMV_M256_YMMIH_VEX,
	"VCMPPD_K1_XMMV_XMM2_Imm5u_EVEX":       VCMPPD_K1_XMMV_XMM2_Imm5u_EVEX,
	"VCMPPD_K1_XMMV_M128_Imm5u_EVEX":       VCMPPD_K1_XMMV_M128_Imm5u_EVEX,
	"VCMPPD_K1_XMMV_M64bcst128_Imm5u_EVEX": VCMPPD_K1_XMMV_M64bcst128_Imm5u_EVEX,
	"VCMPPD_K1_YMMV_YMM2_Imm5u_EVEX":       VCMPPD_K1_YMMV_YMM2_Imm5u_EVEX,
	"VCMPPD_K1_YMMV_M256_Imm5u_EVEX":       VCMPPD_K1_YMMV_M256_Imm5u_EVEX,
	"VCMPPD_K1_YMMV_M64bcst256_Imm5u_EVEX": VCMPPD_K1_YMMV_M64bcst256_Imm5u_EVEX,
	"VCMPPD_K1_ZMMV_ZMM2_Imm5u_EVEX":       VCMPPD_K1_ZMMV_ZMM2_Imm5u_EVEX,
	"VCMPPD_K1_ZMMV_M512_Imm5u_EVEX":       VCMPPD_K1_ZMMV_M512_Imm5u_EVEX,
	"VCMPPD_K1_ZMMV_M64bcst512_Imm5u_EVEX": VCMPPD_K1_ZMMV_M64bcst512_Imm5u_EVEX,
	"VCMPPD_XMM1_XMMV_XMM2_Imm5u_VEX":      VCMPPD_XMM1_XMMV_XMM2_Imm5u_VEX,
	"VCMPPD_XMM1_XMMV_M128_Imm5u_VEX":      VCMPPD_XMM1_XMMV_M128_Imm5u_VEX,
	"VCMPPD_YMM1_YMMV_YMM2_Imm5u_VEX":      VCMPPD_YMM1_YMMV_YMM2_Imm5u_VEX,
	"VCMPPD_YMM1_YMMV_M256_Imm5u_VEX":      VCMPPD_YMM1_YMMV_M256_Imm5u_VEX,
	"VCMPPS_K1_XMMV_XMM2_Imm5u_EVEX":       VCMPPS_K1_XMMV_XMM2_Imm5u_EVEX,
	"VCMPPS_K1_XMMV_M128_Imm5u_EVEX":       VCMPPS_K1_XMMV_M128_Imm5u_EVEX,
	"VCMPPS_K1_XMMV_M32bcst128_Imm5u_EVEX": VCMPPS_K1_XMMV_M32bcst128_Imm5u_EVEX,
	"VCMPPS_K1_YMMV_YMM2_Imm5u_EVEX":       VCMPPS_K1_YMMV_YMM2_Imm5u_EVEX,
	"VCMPPS_K1_YMMV_M256_Imm5u_EVEX":       VCMPPS_K1_YMMV_M256_Imm5u_EVEX,
	"VCMPPS_K1_YMMV_M32bcst256_Imm5u_EVEX": VCMPPS_K1_YMMV_M32bcst256_Imm5u_EVEX,
	"VCMPPS_K1_ZMMV_ZMM2_Imm5u_EVEX":       VCMPPS_K1_ZMMV_ZMM2_Imm5u_EVEX,
	"VCMPPS_K1_ZMMV_M512_Imm5u_EVEX":       VCMPPS_K1_ZMMV_M512_Imm5u_EVEX,
	"VCMPPS_K1_ZMMV_M32bcst512_Imm5u_EVEX": VCMPPS_K1_ZMMV_M32bcst512_Imm5u_EVEX,
	"VCMPPS_XMM1_XMMV_XMM2_Imm5u_VEX":      VCMPPS_XMM1_XMMV_XMM2_Imm5u_VEX,
	"VCMPPS_XMM1_XMMV_M128_Imm5u_VEX":      VCMPPS_XMM1_XMMV_M128_Imm5u_VEX,
	"VCMPPS_YMM1_YMMV_YMM2_Imm5u_VEX":      VCMPPS_YMM1_YMMV_YMM2_Imm5u_VEX,
	"VCMPPS_YMM1_YMMV_M256_Imm5u_VEX":      VCMPPS_YMM1_YMMV_M256_Imm5u_VEX,
	"VCMPSD_K1_XMMV_XMM2_Imm5u_EVEX":       VCMPSD_K1_XMMV_XMM2_Imm5u_EVEX,
	"VCMPSD_K1_XMMV_M64_Imm5u_EVEX":        VCMPSD_K1_XMMV_M64_Imm5u_EVEX,
	"VCMPSD_XMM1_XMMV_XMM2_Imm5u_VEX":      VCMPSD_XMM1_XMMV_XMM2_Imm5u_VEX,
	"VCMPSD_XMM1_XMMV_M64_Imm5u_VEX":       VCMPSD_XMM1_XMMV_M64_Imm5u_VEX,
	"VCMPSS_K1_XMMV_XMM2_Imm5u_EVEX":       VCMPSS_K1_XMMV_XMM2_Imm5u_EVEX,
	"VCMPSS_K1_XMMV_M32_Imm5u_EVEX":        VCMPSS_K1_XMMV_M32_Imm5u_EVEX,
	"VCMPSS_XMM1_XMMV_XMM2_Imm5u_VEX":      VCMPSS_XMM1_XMMV_XMM2_Imm5u_VEX,
	"VCMPSS_XMM1_XMMV_M32_Imm5u_VEX":       VCMPSS_XMM1_XMMV_M32_Imm5u_VEX,
	"VCOMISD_XMM1_XMM2_VEX":                VCOMISD_XMM1_XMM2_VEX,
	"VCOMISD_XMM1_XMM2_EVEX":               VCOMISD_XMM1_XMM2_EVEX,
	"VCOMISD_XMM1_M64_VEX":                 VCOMISD_XMM1_M64_VEX,
	"VCOMISD_XMM1_M64_EVEX":                VCOMISD_XMM1_M64_EVEX,
	"VCOMISS_XMM1_XMM2_VEX":                VCOMISS_XMM1_XMM2_VEX,
	"VCOMISS_XMM1_XMM2_EVEX":               VCOMISS_XMM1_XMM2_EVEX,
	"VCOMISS_XMM1_M32_VEX":                 VCOMISS_XMM1_M32_VEX,
	"VCOMISS_XMM1_M32_EVEX":                VCOMISS_XMM1_M32_EVEX,
	"VCVTDQ2PD_XMM1_XMM2_VEX":              VCVTDQ2PD_XMM1_XMM2_VEX,
	"VCVTDQ2PD_XMM1_XMM2_EVEX":             VCVTDQ2PD_XMM1_XMM2_EVEX,
	"VCVTDQ2PD_XMM1_M64_VEX":               VCVTDQ2PD_XMM1_M64_VEX,
	"VCVTDQ2PD_XMM1_M64_EVEX":              VCVTDQ2PD_XMM1_M64_EVEX,
	"VCVTDQ2PD_XMM1_M32bcst128_EVEX":       VCVTDQ2PD_XMM1_M32bcst128_EVEX,
	"VCVTDQ2PD_YMM1_XMM2_VEX":              VCVTDQ2PD_YMM1_XMM2_VEX,
	"VCVTDQ2PD_YMM1_XMM2_EVEX":             VCVTDQ2PD_YMM1_XMM2_EVEX,
	"VCVTDQ2PD_YMM1_M128_VEX":              VCVTDQ2PD_YMM1_M128_VEX,
	"VCVTDQ2PD_YMM1_M128_EVEX":             VCVTDQ2PD_YMM1_M128_EVEX,
	"VCVTDQ2PD_YMM1_M32bcst256_EVEX":       VCVTDQ2PD_YMM1_M32bcst256_EVEX,
	"VCVTDQ2PD_ZMM1_YMM2_EVEX":             VCVTDQ2PD_ZMM1_YMM2_EVEX,
	"VCVTDQ2PD_ZMM1_M256_EVEX":             VCVTDQ2PD_ZMM1_M256_EVEX,
	"VCVTDQ2PD_ZMM1_M32bcst512_EVEX":       VCVTDQ2PD_ZMM1_M32bcst512_EVEX,
	"VCVTDQ2PS_XMM1_XMM2_VEX":              VCVTDQ2PS_XMM1_XMM2_VEX,
	"VCVTDQ2PS_XMM1_XMM2_EVEX":             VCVTDQ2PS_XMM1_XMM2_EVEX,
	"VCVTDQ2PS_XMM1_M128_VEX":              VCVTDQ2PS_XMM1_M128_VEX,
	"VCVTDQ2PS_XMM1_M128_EVEX":             VCVTDQ2PS_XMM1_M128_EVEX,
	"VCVTDQ2PS_XMM1_M32bcst128_EVEX":       VCVTDQ2PS_XMM1_M32bcst128_EVEX,
	"VCVTDQ2PS_YMM1_YMM2_VEX":              VCVTDQ2PS_YMM1_YMM2_VEX,
	"VCVTDQ2PS_YMM1_YMM2_EVEX":             VCVTDQ2PS_YMM1_YMM2_EVEX,
	"VCVTDQ2PS_YMM1_M256_VEX":              VCVTDQ2PS_YMM1_M256_VEX,
	"VCVTDQ2PS_YMM1_M256_EVEX":             VCVTDQ2PS_YMM1_M256_EVEX,
	"VCVTDQ2PS_YMM1_M32bcst256_EVEX":       VCVTDQ2PS_YMM1_M32bcst256_EVEX,
	"VCVTDQ2PS_ZMM1_ZMM2_EVEX":             VCVTDQ2PS_ZMM1_ZMM2_EVEX,
	"VCVTDQ2PS_ZMM1_M512_EVEX":             VCVTDQ2PS_ZMM1_M512_EVEX,
	"VCVTDQ2PS_ZMM1_M32bcst512_EVEX":       VCVTDQ2PS_ZMM1_M32bcst512_EVEX,
	"VCVTPD2DQ_XMM1_XMM2_VEX":              VCVTPD2DQ_XMM1_XMM2_VEX,
	"VCVTPD2DQ_XMM1_XMM2_EVEX":             VCVTPD2DQ_XMM1_XMM2_EVEX,
	"VCVTPD2DQ_XMM1_YMM2_VEX":              VCVTPD2DQ_XMM1_YMM2_VEX,
	"VCVTPD2DQ_XMM1_YMM2_EVEX":             VCVTPD2DQ_XMM1_YMM2_EVEX,
	"VCVTPD2DQ_XMM1_M128_VEX":              VCVTPD2DQ_XMM1_M128_VEX,
	"VCVTPD2DQ_XMM1_M128_EVEX":             VCVTPD2DQ_XMM1_M128_EVEX,
	"VCVTPD2DQ_XMM1_M256_VEX":              VCVTPD2DQ_XMM1_M256_VEX,
	"VCVTPD2DQ_XMM1_M256_EVEX":             VCVTPD2DQ_XMM1_M256_EVEX,
	"VCVTPD2DQ_XMM1_M64bcst128_EVEX":       VCVTPD2DQ_XMM1_M64bcst128_EVEX,
	"VCVTPD2DQ_XMM1_M64bcst256_EVEX":       VCVTPD2DQ_XMM1_M64bcst256_EVEX,
	"VCVTPD2DQ_YMM1_ZMM2_EVEX":             VCVTPD2DQ_YMM1_ZMM2_EVEX,
	"VCVTPD2DQ_YMM1_M512_EVEX":             VCVTPD2DQ_YMM1_M512_EVEX,
	"VCVTPD2DQ_YMM1_M64bcst512_EVEX":       VCVTPD2DQ_YMM1_M64bcst512_EVEX,
	"VCVTPD2PS_XMM1_XMM2_VEX":              VCVTPD2PS_XMM1_XMM2_VEX,
	"VCVTPD2PS_XMM1_XMM2_EVEX":             VCVTPD2PS_XMM1_XMM2_EVEX,
	"VCVTPD2PS_XMM1_YMM2_VEX":              VCVTPD2PS_XMM1_YMM2_VEX,
	"VCVTPD2PS_XMM1_YMM2_EVEX":             VCVTPD2PS_XMM1_YMM2_EVEX,
	"VCVTPD2PS_XMM1_M128_VEX":              VCVTPD2PS_XMM1_M128_VEX,
	"VCVTPD2PS_XMM1_M128_EVEX":             VCVTPD2PS_XMM1_M128_EVEX,
	"VCVTPD2PS_XMM1_M256_VEX":              VCVTPD2PS_XMM1_M256_VEX,
	"VCVTPD2PS_XMM1_M256_EVEX":             VCVTPD2PS_XMM1_M256_EVEX,
	"VCVTPD2PS_XMM1_M64bcst128_EVEX":       VCVTPD2PS_XMM1_M64bcst128_EVEX,
	"VCVTPD2PS_XMM1_M64bcst256_EVEX":       VCVTPD2PS_XMM1_M64bcst256_EVEX,
	"VCVTPD2PS_YMM1_ZMM2_EVEX":             VCVTPD2PS_YMM1_ZMM2_EVEX,
	"VCVTPD2PS_YMM1_M512_EVEX":             VCVTPD2PS_YMM1_M512_EVEX,
	"VCVTPD2PS_YMM1_M64bcst512_EVEX":       VCVTPD2PS_YMM1_M64bcst512_EVEX,
	"VCVTPS2DQ_XMM1_XMM2_VEX":              VCVTPS2DQ_XMM1_XMM2_VEX,
	"VCVTPS2DQ_XMM1_XMM2_EVEX":             VCVTPS2DQ_XMM1_XMM2_EVEX,
	"VCVTPS2DQ_XMM1_M128_VEX":              VCVTPS2DQ_XMM1_M128_VEX,
	"VCVTPS2DQ_XMM1_M128_EVEX":             VCVTPS2DQ_XMM1_M128_EVEX,
	"VCVTPS2DQ_XMM1_M32bcst128_EVEX":       VCVTPS2DQ_XMM1_M32bcst128_EVEX,
	"VCVTPS2DQ_YMM1_YMM2_VEX":              VCVTPS2DQ_YMM1_YMM2_VEX,
	"VCVTPS2DQ_YMM1_YMM2_EVEX":             VCVTPS2DQ_YMM1_YMM2_EVEX,
	"VCVTPS2DQ_YMM1_M256_VEX":              VCVTPS2DQ_YMM1_M256_VEX,
	"VCVTPS2DQ_YMM1_M256_EVEX":             VCVTPS2DQ_YMM1_M256_EVEX,
	"VCVTPS2DQ_YMM1_M32bcst256_EVEX":       VCVTPS2DQ_YMM1_M32bcst256_EVEX,
	"VCVTPS2DQ_ZMM1_ZMM2_EVEX":             VCVTPS2DQ_ZMM1_ZMM2_EVEX,
	"VCVTPS2DQ_ZMM1_M512_EVEX":             VCVTPS2DQ_ZMM1_M512_EVEX,
	"VCVTPS2DQ_ZMM1_M32bcst512_EVEX":       VCVTPS2DQ_ZMM1_M32bcst512_EVEX,
	"VCVTPS2PD_XMM1_XMM2_VEX":              VCVTPS2PD_XMM1_XMM2_VEX,
	"VCVTPS2PD_XMM1_XMM2_EVEX":             VCVTPS2PD_XMM1_XMM2_EVEX,
	"VCVTPS2PD_XMM1_M64_VEX":               VCVTPS2PD_XMM1_M64_VEX,
	"VCVTPS2PD_XMM1_M64_EVEX":              VCVTPS2PD_XMM1_M64_EVEX,
	"VCVTPS2PD_XMM1_M32bcst128_EVEX":       VCVTPS2PD_XMM1_M32bcst128_EVEX,
	"VCVTPS2PD_YMM1_XMM2_VEX":              VCVTPS2PD_YMM1_XMM2_VEX,
	"VCVTPS2PD_YMM1_XMM2_EVEX":             VCVTPS2PD_YMM1_XMM2_EVEX,
	"VCVTPS2PD_YMM1_M128_VEX":              VCVTPS2PD_YMM1_M128_VEX,
	"VCVTPS2PD_YMM1_M128_EVEX":             VCVTPS2PD_YMM1_M128_EVEX,
	"VCVTPS2PD_YMM1_M32bcst256_EVEX":       VCVTPS2PD_YMM1_M32bcst256_EVEX,
	"VCVTPS2PD_ZMM1_YMM2_EVEX":             VCVTPS2PD_ZMM1_YMM2_EVEX,
	"VCVTPS2PD_ZMM1_M256_EVEX":             VCVTPS2PD_ZMM1_M256_EVEX,
	"VCVTPS2PD_ZMM1_M32bcst512_EVEX":       VCVTPS2PD_ZMM1_M32bcst512_EVEX,
	"VCVTSD2SI_R32_XMM2_VEX":               VCVTSD2SI_R32_XMM2_VEX,
	"VCVTSD2SI_R32_XMM2_EVEX":              VCVTSD2SI_R32_XMM2_EVEX,
	"VCVTSD2SI_R32_M64_VEX":                VCVTSD2SI_R32_M64_VEX,
	"VCVTSD2SI_R32_M64_EVEX":               VCVTSD2SI_R32_M64_EVEX,
	"VCVTSD2SI_R64_XMM2_VEX":               VCVTSD2SI_R64_XMM2_VEX,
	"VCVTSD2SI_R64_XMM2_EVEX":              VCVTSD2SI_R64_XMM2_EVEX,
	"VCVTSD2SI_R64_M64_VEX":                VCVTSD2SI_R64_M64_VEX,
	"VCVTSD2SI_R64_M64_EVEX":               VCVTSD2SI_R64_M64_EVEX,
	"VCVTSD2SS_XMM1_XMMV_XMM2_VEX":         VCVTSD2SS_XMM1_XMMV_XMM2_VEX,
	"VCVTSD2SS_XMM1_XMMV_XMM2_EVEX":        VCVTSD2SS_XMM1_XMMV_XMM2_EVEX,
	"VCVTSD2SS_XMM1_XMMV_M64_VEX":          VCVTSD2SS_XMM1_XMMV_M64_VEX,
	"VCVTSD2SS_XMM1_XMMV_M64_EVEX":         VCVTSD2SS_XMM1_XMMV_M64_EVEX,
	"VCVTSI2SD_XMM1_XMMV_Rmr32_VEX":        VCVTSI2SD_XMM1_XMMV_Rmr32_VEX,
	"VCVTSI2SD_XMM1_XMMV_Rmr32_EVEX":       VCVTSI2SD_XMM1_XMMV_Rmr32_EVEX,
	"VCVTSI2SD_XMM1_XMMV_Rmr64_VEX":        VCVTSI2SD_XMM1_XMMV_Rmr64_VEX,
	"VCVTSI2SD_XMM1_XMMV_Rmr64_EVEX":       VCVTSI2SD_XMM1_XMMV_Rmr64_EVEX,
	"VCVTSI2SD_XMM1_XMMV_M32_VEX":          VCVTSI2SD_XMM1_XMMV_M32_VEX,
	"VCVTSI2SD_XMM1_XMMV_M32_EVEX":         VCVTSI2SD_XMM1_XMMV_M32_EVEX,
	"VCVTSI2SD_XMM1_XMMV_M64_VEX":          VCVTSI2SD_XMM1_XMMV_M64_VEX,
	"VCVTSI2SD_XMM1_XMMV_M64_EVEX":         VCVTSI2SD_XMM1_XMMV_M64_EVEX,
	"VCVTSI2SS_XMM1_XMMV_Rmr32_VEX":        VCVTSI2SS_XMM1_XMMV_Rmr32_VEX,
	"VCVTSI2SS_XMM1_XMMV_Rmr32_EVEX":       VCVTSI2SS_XMM1_XMMV_Rmr32_EVEX,
	"VCVTSI2SS_XMM1_XMMV_Rmr64_VEX":        VCVTSI2SS_XMM1_XMMV_Rmr64_VEX,
	"VCVTSI2SS_XMM1_XMMV_Rmr64_EVEX":       VCVTSI2SS_XMM1_XMMV_Rmr64_EVEX,
	"VCVTSI2SS_XMM1_XMMV_M32_VEX":          VCVTSI2SS_XMM1_XMMV_M32_VEX,
	"VCVTSI2SS_XMM1_XMMV_M32_EVEX":         VCVTSI2SS_XMM1_XMMV_M32_EVEX,
	"VCVTSI2SS_XMM1_XMMV_M64_VEX":          VCVTSI2SS_XMM1_XMMV_M64_VEX,
	"VCVTSI2SS_XMM1_XMMV_M64_EVEX":         VCVTSI2SS_XMM1_XMMV_M64_EVEX,
	"VCVTSS2SD_XMM1_XMMV_XMM2_VEX":         VCVTSS2SD_XMM1_XMMV_XMM2_VEX,
	"VCVTSS2SD_XMM1_XMMV_XMM2_EVEX":        VCVTSS2SD_XMM1_XMMV_XMM2_EVEX,
	"VCVTSS2SD_XMM1_XMMV_M32_VEX":          VCVTSS2SD_XMM1_XMMV_M32_VEX,
	"VCVTSS2SD_XMM1_XMMV_M32_EVEX":         VCVTSS2SD_XMM1_XMMV_M32_EVEX,
	"VCVTSS2SI_R32_XMM2_VEX":               VCVTSS2SI_R32_XMM2_VEX,
	"VCVTSS2SI_R32_XMM2_EVEX":              VCVTSS2SI_R32_XMM2_EVEX,
	"VCVTSS2SI_R32_M32_VEX":                VCVTSS2SI_R32_M32_VEX,
	"VCVTSS2SI_R32_M32_EVEX":               VCVTSS2SI_R32_M32_EVEX,
	"VCVTSS2SI_R64_XMM2_VEX":               VCVTSS2SI_R64_XMM2_VEX,
	"VCVTSS2SI_R64_XMM2_EVEX":              VCVTSS2SI_R64_XMM2_EVEX,
	"VCVTSS2SI_R64_M32_VEX":                VCVTSS2SI_R64_M32_VEX,
	"VCVTSS2SI_R64_M32_EVEX":               VCVTSS2SI_R64_M32_EVEX,
	"VCVTTPD2DQ_XMM1_XMM2_VEX":             VCVTTPD2DQ_XMM1_XMM2_VEX,
	"VCVTTPD2DQ_XMM1_XMM2_EVEX":            VCVTTPD2DQ_XMM1_XMM2_EVEX,
	"VCVTTPD2DQ_XMM1_YMM2_VEX":             VCVTTPD2DQ_XMM1_YMM2_VEX,
	"VCVTTPD2DQ_XMM1_YMM2_EVEX":            VCVTTPD2DQ_XMM1_YMM2_EVEX,
	"VCVTTPD2DQ_XMM1_M128_VEX":             VCVTTPD2DQ_XMM1_M128_VEX,
	"VCVTTPD2DQ_XMM1_M128_EVEX":            VCVTTPD2DQ_XMM1_M128_EVEX,
	"VCVTTPD2DQ_XMM1_M256_VEX":             VCVTTPD2DQ_XMM1_M256_VEX,
	"VCVTTPD2DQ_XMM1_M256_EVEX":            VCVTTPD2DQ_XMM1_M256_EVEX,
	"VCVTTPD2DQ_XMM1_M64bcst128_EVEX":      VCVTTPD2DQ_XMM1_M64bcst128_EVEX,
	"VCVTTPD2DQ_XMM1_M64bcst256_EVEX":      VCVTTPD2DQ_XMM1_M64bcst256_EVEX,
	"VCVTTPD2DQ_YMM1_ZMM2_EVEX":            VCVTTPD2DQ_YMM1_ZMM2_EVEX,
	"VCVTTPD2DQ_YMM1_M512_EVEX":            VCVTTPD2DQ_YMM1_M512_EVEX,
	"VCVTTPD2DQ_YMM1_M64bcst512_EVEX":      VCVTTPD2DQ_YMM1_M64bcst512_EVEX,
	"VCVTTPS2DQ_XMM1_XMM2_VEX":             VCVTTPS2DQ_XMM1_XMM2_VEX,
	"VCVTTPS2DQ_XMM1_XMM2_EVEX":            VCVTTPS2DQ_XMM1_XMM2_EVEX,
	"VCVTTPS2DQ_XMM1_M128_VEX":             VCVTTPS2DQ_XMM1_M128_VEX,
	"VCVTTPS2DQ_XMM1_M128_EVEX":            VCVTTPS2DQ_XMM1_M128_EVEX,
	"VCVTTPS2DQ_XMM1_M32bcst128_EVEX":      VCVTTPS2DQ_XMM1_M32bcst128_EVEX,
	"VCVTTPS2DQ_YMM1_YMM2_VEX":             VCVTTPS2DQ_YMM1_YMM2_VEX,
	"VCVTTPS2DQ_YMM1_YMM2_EVEX":            VCVTTPS2DQ_YMM1_YMM2_EVEX,
	"VCVTTPS2DQ_YMM1_M256_VEX":             VCVTTPS2DQ_YMM1_M256_VEX,
	"VCVTTPS2DQ_YMM1_M256_EVEX":            VCVTTPS2DQ_YMM1_M256_EVEX,
	"VCVTTPS2DQ_YMM1_M32bcst256_EVEX":      VCVTTPS2DQ_YMM1_M32bcst256_EVEX,
	"VCVTTPS2DQ_ZMM1_ZMM2_EVEX":            VCVTTPS2DQ_ZMM1_ZMM2_EVEX,
	"VCVTTPS2DQ_ZMM1_M512_EVEX":            VCVTTPS2DQ_ZMM1_M512_EVEX,
	"VCVTTPS2DQ_ZMM1_M32bcst512_EVEX":      VCVTTPS2DQ_ZMM1_M32bcst512_EVEX,
	"VCVTTSD2SI_R32_XMM2_VEX":              VCVTTSD2SI_R32_XMM2_VEX,
	"VCVTTSD2SI_R32_XMM2_EVEX":             VCVTTSD2SI_R32_XMM2_EVEX,
	"VCVTTSD2SI_R32_M64_VEX":               VCVTTSD2SI_R32_M64_VEX,
	"VCVTTSD2SI_R32_M64_EVEX":              VCVTTSD2SI_R32_M64_EVEX,
	"VCVTTSD2SI_R64_XMM2_VEX":              VCVTTSD2SI_R64_XMM2_VEX,
	"VCVTTSD2SI_R64_XMM2_EVEX":             VCVTTSD2SI_R64_XMM2_EVEX,
	"VCVTTSD2SI_R64_M64_VEX":               VCVTTSD2SI_R64_M64_VEX,
	"VCVTTSD2SI_R64_M64_EVEX":              VCVTTSD2SI_R64_M64_EVEX,
	"VCVTTSS2SI_R32_XMM2_VEX":              VCVTTSS2SI_R32_XMM2_VEX,
	"VCVTTSS2SI_R32_XMM2_EVEX":             VCVTTSS2SI_R32_XMM2_EVEX,
	"VCVTTSS2SI_R32_M32_VEX":               VCVTTSS2SI_R32_M32_VEX,
	"VCVTTSS2SI_R32_M32_EVEX":              VCVTTSS2SI_R32_M32_EVEX,
	"VCVTTSS2SI_R64_XMM2_VEX":              VCVTTSS2SI_R64_XMM2_VEX,
	"VCVTTSS2SI_R64_XMM2_EVEX":             VCVTTSS2SI_R64_XMM2_EVEX,
	"VCVTTSS2SI_R64_M32_VEX":               VCVTTSS2SI_R64_M32_VEX,
	"VCVTTSS2SI_R64_M32_EVEX":              VCVTTSS2SI_R64_M32_EVEX,
	"VDIVPD_XMM1_XMMV_XMM2_VEX":            VDIVPD_XMM1_XMMV_XMM2_VEX,
	"VDIVPD_XMM1_XMMV_XMM2_EVEX":           VDIVPD_XMM1_XMMV_XMM2_EVEX,
	"VDIVPD_XMM1_XMMV_M128_VEX":            VDIVPD_XMM1_XMMV_M128_VEX,
	"VDIVPD_XMM1_XMMV_M128_EVEX":           VDIVPD_XMM1_XMMV_M128_EVEX,
	"VDIVPD_XMM1_XMMV_M64bcst128_EVEX":     VDIVPD_XMM1_XMMV_M64bcst128_EVEX,
	"VDIVPD_YMM1_YMMV_YMM2_VEX":            VDIVPD_YMM1_YMMV_YMM2_VEX,
	"VDIVPD_YMM1_YMMV_YMM2_EVEX":           VDIVPD_YMM1_YMMV_YMM2_EVEX,
	"VDIVPD_YMM1_YMMV_M256_VEX":            VDIVPD_YMM1_YMMV_M256_VEX,
	"VDIVPD_YMM1_YMMV_M256_EVEX":           VDIVPD_YMM1_YMMV_M256_EVEX,
	"VDIVPD_YMM1_YMMV_M64bcst256_EVEX":     VDIVPD_YMM1_YMMV_M64bcst256_EVEX,
	"VDIVPD_ZMM1_ZMMV_ZMM2_EVEX":           VDIVPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VDIVPD_ZMM1_ZMMV_M512_EVEX":           VDIVPD_ZMM1_ZMMV_M512_EVEX,
	"VDIVPD_ZMM1_ZMMV_M64bcst512_EVEX":     VDIVPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VDIVPS_XMM1_XMMV_XMM2_VEX":            VDIVPS_XMM1_XMMV_XMM2_VEX,
	"VDIVPS_XMM1_XMMV_XMM2_EVEX":           VDIVPS_XMM1_XMMV_XMM2_EVEX,
	"VDIVPS_XMM1_XMMV_M128_VEX":            VDIVPS_XMM1_XMMV_M128_VEX,
	"VDIVPS_XMM1_XMMV_M128_EVEX":           VDIVPS_XMM1_XMMV_M128_EVEX,
	"VDIVPS_XMM1_XMMV_M32bcst128_EVEX":     VDIVPS_XMM1_XMMV_M32bcst128_EVEX,
	"VDIVPS_YMM1_YMMV_YMM2_VEX":            VDIVPS_YMM1_YMMV_YMM2_VEX,
	"VDIVPS_YMM1_YMMV_YMM2_EVEX":           VDIVPS_YMM1_YMMV_YMM2_EVEX,
	"VDIVPS_YMM1_YMMV_M256_VEX":            VDIVPS_YMM1_YMMV_M256_VEX,
	"VDIVPS_YMM1_YMMV_M256_EVEX":           VDIVPS_YMM1_YMMV_M256_EVEX,
	"VDIVPS_YMM1_YMMV_M32bcst256_EVEX":     VDIVPS_YMM1_YMMV_M32bcst256_EVEX,
	"VDIVPS_ZMM1_ZMMV_ZMM2_EVEX":           VDIVPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VDIVPS_ZMM1_ZMMV_M512_EVEX":           VDIVPS_ZMM1_ZMMV_M512_EVEX,
	"VDIVPS_ZMM1_ZMMV_M32bcst512_EVEX":     VDIVPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VDIVSD_XMM1_XMMV_XMM2_VEX":            VDIVSD_XMM1_XMMV_XMM2_VEX,
	"VDIVSD_XMM1_XMMV_XMM2_EVEX":           VDIVSD_XMM1_XMMV_XMM2_EVEX,
	"VDIVSD_XMM1_XMMV_M64_VEX":             VDIVSD_XMM1_XMMV_M64_VEX,
	"VDIVSD_XMM1_XMMV_M64_EVEX":            VDIVSD_XMM1_XMMV_M64_EVEX,
	"VDIVSS_XMM1_XMMV_XMM2_VEX":            VDIVSS_XMM1_XMMV_XMM2_VEX,
	"VDIVSS_XMM1_XMMV_XMM2_EVEX":           VDIVSS_XMM1_XMMV_XMM2_EVEX,
	"VDIVSS_XMM1_XMMV_M32_VEX":             VDIVSS_XMM1_XMMV_M32_VEX,
	"VDIVSS_XMM1_XMMV_M32_EVEX":            VDIVSS_XMM1_XMMV_M32_EVEX,
	"VDPPD_XMM1_XMMV_XMM2_Imm8_VEX":        VDPPD_XMM1_XMMV_XMM2_Imm8_VEX,
	"VDPPD_XMM1_XMMV_M128_Imm8_VEX":        VDPPD_XMM1_XMMV_M128_Imm8_VEX,
	"VDPPS_XMM1_XMMV_XMM2_Imm8_VEX":        VDPPS_XMM1_XMMV_XMM2_Imm8_VEX,
	"VDPPS_XMM1_XMMV_M128_Imm8_VEX":        VDPPS_XMM1_XMMV_M128_Imm8_VEX,
	"VDPPS_YMM1_YMMV_YMM2_Imm8_VEX":        VDPPS_YMM1_YMMV_YMM2_Imm8_VEX,
	"VDPPS_YMM1_YMMV_M256_Imm8_VEX":        VDPPS_YMM1_YMMV_M256_Imm8_VEX,
	"VEXTRACTPS_Rmr32_XMM1_Imm8_VEX":       VEXTRACTPS_Rmr32_XMM1_Imm8_VEX,
	"VEXTRACTPS_Rmr32_XMM1_Imm8_EVEX":      VEXTRACTPS_Rmr32_XMM1_Imm8_EVEX,
	"VEXTRACTPS_M32_XMM1_Imm8_VEX":         VEXTRACTPS_M32_XMM1_Imm8_VEX,
	"VEXTRACTPS_M32_XMM1_Imm8_EVEX":        VEXTRACTPS_M32_XMM1_Imm8_EVEX,
	"VGF2P8AFFINEINVQB_XMM1_XMMV_XMM2_Imm8_VEX":        VGF2P8AFFINEINVQB_XMM1_XMMV_XMM2_Imm8_VEX,
	"VGF2P8AFFINEINVQB_XMM1_XMMV_XMM2_Imm8_EVEX":       VGF2P8AFFINEINVQB_XMM1_XMMV_XMM2_Imm8_EVEX,
	"VGF2P8AFFINEINVQB_XMM1_XMMV_M128_Imm8_VEX":        VGF2P8AFFINEINVQB_XMM1_XMMV_M128_Imm8_VEX,
	"VGF2P8AFFINEINVQB_XMM1_XMMV_M128_Imm8_EVEX":       VGF2P8AFFINEINVQB_XMM1_XMMV_M128_Imm8_EVEX,
	"VGF2P8AFFINEINVQB_XMM1_XMMV_M64bcst128_Imm8_EVEX": VGF2P8AFFINEINVQB_XMM1_XMMV_M64bcst128_Imm8_EVEX,
	"VGF2P8AFFINEINVQB_YMM1_YMMV_YMM2_Imm8_VEX":        VGF2P8AFFINEINVQB_YMM1_YMMV_YMM2_Imm8_VEX,
	"VGF2P8AFFINEINVQB_YMM1_YMMV_YMM2_Imm8_EVEX":       VGF2P8AFFINEINVQB_YMM1_YMMV_YMM2_Imm8_EVEX,
	"VGF2P8AFFINEINVQB_YMM1_YMMV_M256_Imm8_VEX":        VGF2P8AFFINEINVQB_YMM1_YMMV_M256_Imm8_VEX,
	"VGF2P8AFFINEINVQB_YMM1_YMMV_M256_Imm8_EVEX":       VGF2P8AFFINEINVQB_YMM1_YMMV_M256_Imm8_EVEX,
	"VGF2P8AFFINEINVQB_YMM1_YMMV_M64bcst256_Imm8_EVEX": VGF2P8AFFINEINVQB_YMM1_YMMV_M64bcst256_Imm8_EVEX,
	"VGF2P8AFFINEINVQB_ZMM1_ZMMV_ZMM2_Imm8_EVEX":       VGF2P8AFFINEINVQB_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	"VGF2P8AFFINEINVQB_ZMM1_ZMMV_M512_Imm8_EVEX":       VGF2P8AFFINEINVQB_ZMM1_ZMMV_M512_Imm8_EVEX,
	"VGF2P8AFFINEINVQB_ZMM1_ZMMV_M64bcst512_Imm8_EVEX": VGF2P8AFFINEINVQB_ZMM1_ZMMV_M64bcst512_Imm8_EVEX,
	"VGF2P8AFFINEQB_XMM1_XMMV_XMM2_Imm8_VEX":           VGF2P8AFFINEQB_XMM1_XMMV_XMM2_Imm8_VEX,
	"VGF2P8AFFINEQB_XMM1_XMMV_XMM2_Imm8_EVEX":          VGF2P8AFFINEQB_XMM1_XMMV_XMM2_Imm8_EVEX,
	"VGF2P8AFFINEQB_XMM1_XMMV_M128_Imm8_VEX":           VGF2P8AFFINEQB_XMM1_XMMV_M128_Imm8_VEX,
	"VGF2P8AFFINEQB_XMM1_XMMV_M128_Imm8_EVEX":          VGF2P8AFFINEQB_XMM1_XMMV_M128_Imm8_EVEX,
	"VGF2P8AFFINEQB_XMM1_XMMV_M64bcst128_Imm8_EVEX":    VGF2P8AFFINEQB_XMM1_XMMV_M64bcst128_Imm8_EVEX,
	"VGF2P8AFFINEQB_YMM1_YMMV_YMM2_Imm8_VEX":           VGF2P8AFFINEQB_YMM1_YMMV_YMM2_Imm8_VEX,
	"VGF2P8AFFINEQB_YMM1_YMMV_YMM2_Imm8_EVEX":          VGF2P8AFFINEQB_YMM1_YMMV_YMM2_Imm8_EVEX,
	"VGF2P8AFFINEQB_YMM1_YMMV_M256_Imm8_VEX":           VGF2P8AFFINEQB_YMM1_YMMV_M256_Imm8_VEX,
	"VGF2P8AFFINEQB_YMM1_YMMV_M256_Imm8_EVEX":          VGF2P8AFFINEQB_YMM1_YMMV_M256_Imm8_EVEX,
	"VGF2P8AFFINEQB_YMM1_YMMV_M64bcst256_Imm8_EVEX":    VGF2P8AFFINEQB_YMM1_YMMV_M64bcst256_Imm8_EVEX,
	"VGF2P8AFFINEQB_ZMM1_ZMMV_ZMM2_Imm8_EVEX":          VGF2P8AFFINEQB_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	"VGF2P8AFFINEQB_ZMM1_ZMMV_M512_Imm8_EVEX":          VGF2P8AFFINEQB_ZMM1_ZMMV_M512_Imm8_EVEX,
	"VGF2P8AFFINEQB_ZMM1_ZMMV_M64bcst512_Imm8_EVEX":    VGF2P8AFFINEQB_ZMM1_ZMMV_M64bcst512_Imm8_EVEX,
	"VGF2P8MULB_XMM1_XMMV_XMM2_VEX":                    VGF2P8MULB_XMM1_XMMV_XMM2_VEX,
	"VGF2P8MULB_XMM1_XMMV_XMM2_EVEX":                   VGF2P8MULB_XMM1_XMMV_XMM2_EVEX,
	"VGF2P8MULB_XMM1_XMMV_M128_VEX":                    VGF2P8MULB_XMM1_XMMV_M128_VEX,
	"VGF2P8MULB_XMM1_XMMV_M128_EVEX":                   VGF2P8MULB_XMM1_XMMV_M128_EVEX,
	"VGF2P8MULB_YMM1_YMMV_YMM2_VEX":                    VGF2P8MULB_YMM1_YMMV_YMM2_VEX,
	"VGF2P8MULB_YMM1_YMMV_YMM2_EVEX":                   VGF2P8MULB_YMM1_YMMV_YMM2_EVEX,
	"VGF2P8MULB_YMM1_YMMV_M256_VEX":                    VGF2P8MULB_YMM1_YMMV_M256_VEX,
	"VGF2P8MULB_YMM1_YMMV_M256_EVEX":                   VGF2P8MULB_YMM1_YMMV_M256_EVEX,
	"VGF2P8MULB_ZMM1_ZMMV_ZMM2_EVEX":                   VGF2P8MULB_ZMM1_ZMMV_ZMM2_EVEX,
	"VGF2P8MULB_ZMM1_ZMMV_M512_EVEX":                   VGF2P8MULB_ZMM1_ZMMV_M512_EVEX,
	"VHADDPD_XMM1_XMMV_XMM2_VEX":                       VHADDPD_XMM1_XMMV_XMM2_VEX,
	"VHADDPD_XMM1_XMMV_M128_VEX":                       VHADDPD_XMM1_XMMV_M128_VEX,
	"VHADDPD_YMM1_YMMV_YMM2_VEX":                       VHADDPD_YMM1_YMMV_YMM2_VEX,
	"VHADDPD_YMM1_YMMV_M256_VEX":                       VHADDPD_YMM1_YMMV_M256_VEX,
	"VHADDPS_XMM1_XMMV_XMM2_VEX":                       VHADDPS_XMM1_XMMV_XMM2_VEX,
	"VHADDPS_XMM1_XMMV_M128_VEX":                       VHADDPS_XMM1_XMMV_M128_VEX,
	"VHADDPS_YMM1_YMMV_YMM2_VEX":                       VHADDPS_YMM1_YMMV_YMM2_VEX,
	"VHADDPS_YMM1_YMMV_M256_VEX":                       VHADDPS_YMM1_YMMV_M256_VEX,
	"VHSUBPD_XMM1_XMMV_XMM2_VEX":                       VHSUBPD_XMM1_XMMV_XMM2_VEX,
	"VHSUBPD_XMM1_XMMV_M128_VEX":                       VHSUBPD_XMM1_XMMV_M128_VEX,
	"VHSUBPD_YMM1_YMMV_YMM2_VEX":                       VHSUBPD_YMM1_YMMV_YMM2_VEX,
	"VHSUBPD_YMM1_YMMV_M256_VEX":                       VHSUBPD_YMM1_YMMV_M256_VEX,
	"VHSUBPS_XMM1_XMMV_XMM2_VEX":                       VHSUBPS_XMM1_XMMV_XMM2_VEX,
	"VHSUBPS_XMM1_XMMV_M128_VEX":                       VHSUBPS_XMM1_XMMV_M128_VEX,
	"VHSUBPS_YMM1_YMMV_YMM2_VEX":                       VHSUBPS_YMM1_YMMV_YMM2_VEX,
	"VHSUBPS_YMM1_YMMV_M256_VEX":                       VHSUBPS_YMM1_YMMV_M256_VEX,
	"VINSERTPS_XMM1_XMMV_XMM2_Imm8_VEX":                VINSERTPS_XMM1_XMMV_XMM2_Imm8_VEX,
	"VINSERTPS_XMM1_XMMV_XMM2_Imm8_EVEX":               VINSERTPS_XMM1_XMMV_XMM2_Imm8_EVEX,
	"VINSERTPS_XMM1_XMMV_M32_Imm8_VEX":                 VINSERTPS_XMM1_XMMV_M32_Imm8_VEX,
	"VINSERTPS_XMM1_XMMV_M32_Imm8_EVEX":                VINSERTPS_XMM1_XMMV_M32_Imm8_EVEX,
	"VLDDQU_XMM1_M128_VEX":                             VLDDQU_XMM1_M128_VEX,
	"VLDDQU_YMM1_M256_VEX":                             VLDDQU_YMM1_M256_VEX,
	"VLDMXCSR_M32_VEX":                                 VLDMXCSR_M32_VEX,
	"VMASKMOVDQU_XMM1_XMM2_VEX":                        VMASKMOVDQU_XMM1_XMM2_VEX,
	"VMAXPD_XMM1_XMMV_XMM2_VEX":                        VMAXPD_XMM1_XMMV_XMM2_VEX,
	"VMAXPD_XMM1_XMMV_XMM2_EVEX":                       VMAXPD_XMM1_XMMV_XMM2_EVEX,
	"VMAXPD_XMM1_XMMV_M128_VEX":                        VMAXPD_XMM1_XMMV_M128_VEX,
	"VMAXPD_XMM1_XMMV_M128_EVEX":                       VMAXPD_XMM1_XMMV_M128_EVEX,
	"VMAXPD_XMM1_XMMV_M64bcst128_EVEX":                 VMAXPD_XMM1_XMMV_M64bcst128_EVEX,
	"VMAXPD_YMM1_YMMV_YMM2_VEX":                        VMAXPD_YMM1_YMMV_YMM2_VEX,
	"VMAXPD_YMM1_YMMV_YMM2_EVEX":                       VMAXPD_YMM1_YMMV_YMM2_EVEX,
	"VMAXPD_YMM1_YMMV_M256_VEX":                        VMAXPD_YMM1_YMMV_M256_VEX,
	"VMAXPD_YMM1_YMMV_M256_EVEX":                       VMAXPD_YMM1_YMMV_M256_EVEX,
	"VMAXPD_YMM1_YMMV_M64bcst256_EVEX":                 VMAXPD_YMM1_YMMV_M64bcst256_EVEX,
	"VMAXPD_ZMM1_ZMMV_ZMM2_EVEX":                       VMAXPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VMAXPD_ZMM1_ZMMV_M512_EVEX":                       VMAXPD_ZMM1_ZMMV_M512_EVEX,
	"VMAXPD_ZMM1_ZMMV_M64bcst512_EVEX":                 VMAXPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VMAXPS_XMM1_XMMV_XMM2_VEX":                        VMAXPS_XMM1_XMMV_XMM2_VEX,
	"VMAXPS_XMM1_XMMV_XMM2_EVEX":                       VMAXPS_XMM1_XMMV_XMM2_EVEX,
	"VMAXPS_XMM1_XMMV_M128_VEX":                        VMAXPS_XMM1_XMMV_M128_VEX,
	"VMAXPS_XMM1_XMMV_M128_EVEX":                       VMAXPS_XMM1_XMMV_M128_EVEX,
	"VMAXPS_XMM1_XMMV_M32bcst128_EVEX":                 VMAXPS_XMM1_XMMV_M32bcst128_EVEX,
	"VMAXPS_YMM1_YMMV_YMM2_VEX":                        VMAXPS_YMM1_YMMV_YMM2_VEX,
	"VMAXPS_YMM1_YMMV_YMM2_EVEX":                       VMAXPS_YMM1_YMMV_YMM2_EVEX,
	"VMAXPS_YMM1_YMMV_M256_VEX":                        VMAXPS_YMM1_YMMV_M256_VEX,
	"VMAXPS_YMM1_YMMV_M256_EVEX":                       VMAXPS_YMM1_YMMV_M256_EVEX,
	"VMAXPS_YMM1_YMMV_M32bcst256_EVEX":                 VMAXPS_YMM1_YMMV_M32bcst256_EVEX,
	"VMAXPS_ZMM1_ZMMV_ZMM2_EVEX":                       VMAXPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VMAXPS_ZMM1_ZMMV_M512_EVEX":                       VMAXPS_ZMM1_ZMMV_M512_EVEX,
	"VMAXPS_ZMM1_ZMMV_M32bcst512_EVEX":                 VMAXPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VMAXSD_XMM1_XMMV_XMM2_VEX":                        VMAXSD_XMM1_XMMV_XMM2_VEX,
	"VMAXSD_XMM1_XMMV_XMM2_EVEX":                       VMAXSD_XMM1_XMMV_XMM2_EVEX,
	"VMAXSD_XMM1_XMMV_M64_VEX":                         VMAXSD_XMM1_XMMV_M64_VEX,
	"VMAXSD_XMM1_XMMV_M64_EVEX":                        VMAXSD_XMM1_XMMV_M64_EVEX,
	"VMAXSS_XMM1_XMMV_XMM2_VEX":                        VMAXSS_XMM1_XMMV_XMM2_VEX,
	"VMAXSS_XMM1_XMMV_XMM2_EVEX":                       VMAXSS_XMM1_XMMV_XMM2_EVEX,
	"VMAXSS_XMM1_XMMV_M32_VEX":                         VMAXSS_XMM1_XMMV_M32_VEX,
	"VMAXSS_XMM1_XMMV_M32_EVEX":                        VMAXSS_XMM1_XMMV_M32_EVEX,
	"VMCALL":                                           VMCALL,
	"VMCLEAR_M64":                                      VMCLEAR_M64,
	"VMINPD_XMM1_XMMV_XMM2_VEX":                        VMINPD_XMM1_XMMV_XMM2_VEX,
	"VMINPD_XMM1_XMMV_XMM2_EVEX":                       VMINPD_XMM1_XMMV_XMM2_EVEX,
	"VMINPD_XMM1_XMMV_M128_VEX":                        VMINPD_XMM1_XMMV_M128_VEX,
	"VMINPD_XMM1_XMMV_M128_EVEX":                       VMINPD_XMM1_XMMV_M128_EVEX,
	"VMINPD_XMM1_XMMV_M64bcst128_EVEX":                 VMINPD_XMM1_XMMV_M64bcst128_EVEX,
	"VMINPD_YMM1_YMMV_YMM2_VEX":                        VMINPD_YMM1_YMMV_YMM2_VEX,
	"VMINPD_YMM1_YMMV_YMM2_EVEX":                       VMINPD_YMM1_YMMV_YMM2_EVEX,
	"VMINPD_YMM1_YMMV_M256_VEX":                        VMINPD_YMM1_YMMV_M256_VEX,
	"VMINPD_YMM1_YMMV_M256_EVEX":                       VMINPD_YMM1_YMMV_M256_EVEX,
	"VMINPD_YMM1_YMMV_M64bcst256_EVEX":                 VMINPD_YMM1_YMMV_M64bcst256_EVEX,
	"VMINPD_ZMM1_ZMMV_ZMM2_EVEX":                       VMINPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VMINPD_ZMM1_ZMMV_M512_EVEX":                       VMINPD_ZMM1_ZMMV_M512_EVEX,
	"VMINPD_ZMM1_ZMMV_M64bcst512_EVEX":                 VMINPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VMINPS_XMM1_XMMV_XMM2_VEX":                        VMINPS_XMM1_XMMV_XMM2_VEX,
	"VMINPS_XMM1_XMMV_XMM2_EVEX":                       VMINPS_XMM1_XMMV_XMM2_EVEX,
	"VMINPS_XMM1_XMMV_M128_VEX":                        VMINPS_XMM1_XMMV_M128_VEX,
	"VMINPS_XMM1_XMMV_M128_EVEX":                       VMINPS_XMM1_XMMV_M128_EVEX,
	"VMINPS_XMM1_XMMV_M32bcst128_EVEX":                 VMINPS_XMM1_XMMV_M32bcst128_EVEX,
	"VMINPS_YMM1_YMMV_YMM2_VEX":                        VMINPS_YMM1_YMMV_YMM2_VEX,
	"VMINPS_YMM1_YMMV_YMM2_EVEX":                       VMINPS_YMM1_YMMV_YMM2_EVEX,
	"VMINPS_YMM1_YMMV_M256_VEX":                        VMINPS_YMM1_YMMV_M256_VEX,
	"VMINPS_YMM1_YMMV_M256_EVEX":                       VMINPS_YMM1_YMMV_M256_EVEX,
	"VMINPS_YMM1_YMMV_M32bcst256_EVEX":                 VMINPS_YMM1_YMMV_M32bcst256_EVEX,
	"VMINPS_ZMM1_ZMMV_ZMM2_EVEX":                       VMINPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VMINPS_ZMM1_ZMMV_M512_EVEX":                       VMINPS_ZMM1_ZMMV_M512_EVEX,
	"VMINPS_ZMM1_ZMMV_M32bcst512_EVEX":                 VMINPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VMINSD_XMM1_XMMV_XMM2_VEX":                        VMINSD_XMM1_XMMV_XMM2_VEX,
	"VMINSD_XMM1_XMMV_XMM2_EVEX":                       VMINSD_XMM1_XMMV_XMM2_EVEX,
	"VMINSD_XMM1_XMMV_M64_VEX":                         VMINSD_XMM1_XMMV_M64_VEX,
	"VMINSD_XMM1_XMMV_M64_EVEX":                        VMINSD_XMM1_XMMV_M64_EVEX,
	"VMINSS_XMM1_XMMV_XMM2_VEX":                        VMINSS_XMM1_XMMV_XMM2_VEX,
	"VMINSS_XMM1_XMMV_XMM2_EVEX":                       VMINSS_XMM1_XMMV_XMM2_EVEX,
	"VMINSS_XMM1_XMMV_M32_VEX":                         VMINSS_XMM1_XMMV_M32_VEX,
	"VMINSS_XMM1_XMMV_M32_EVEX":                        VMINSS_XMM1_XMMV_M32_EVEX,
	"VMLAUNCH":                                         VMLAUNCH,
	"VMLOAD_EAX":                                       VMLOAD_EAX,
	"VMLOAD_RAX":                                       VMLOAD_RAX,
	"VMMCALL":                                          VMMCALL,
	"VMOVAPD_XMM1_XMM2_VEX":                            VMOVAPD_XMM1_XMM2_VEX,
	"VMOVAPD_XMM1_XMM2_EVEX":                           VMOVAPD_XMM1_XMM2_EVEX,
	"VMOVAPD_XMM1_M128_VEX":                            VMOVAPD_XMM1_M128_VEX,
	"VMOVAPD_XMM1_M128_EVEX":                           VMOVAPD_XMM1_M128_EVEX,
	"VMOVAPD_YMM1_YMM2_VEX":                            VMOVAPD_YMM1_YMM2_VEX,
	"VMOVAPD_YMM1_YMM2_EVEX":                           VMOVAPD_YMM1_YMM2_EVEX,
	"VMOVAPD_YMM1_M256_VEX":                            VMOVAPD_YMM1_M256_VEX,
	"VMOVAPD_YMM1_M256_EVEX":                           VMOVAPD_YMM1_M256_EVEX,
	"VMOVAPD_ZMM1_ZMM2_EVEX":                           VMOVAPD_ZMM1_ZMM2_EVEX,
	"VMOVAPD_ZMM1_M512_EVEX":                           VMOVAPD_ZMM1_M512_EVEX,
	"VMOVAPD_XMM2_XMM1_VEX":                            VMOVAPD_XMM2_XMM1_VEX,
	"VMOVAPD_XMM2_XMM1_EVEX":                           VMOVAPD_XMM2_XMM1_EVEX,
	"VMOVAPD_YMM2_YMM1_VEX":                            VMOVAPD_YMM2_YMM1_VEX,
	"VMOVAPD_YMM2_YMM1_EVEX":                           VMOVAPD_YMM2_YMM1_EVEX,
	"VMOVAPD_ZMM2_ZMM1_EVEX":                           VMOVAPD_ZMM2_ZMM1_EVEX,
	"VMOVAPD_M128_XMM1_VEX":                            VMOVAPD_M128_XMM1_VEX,
	"VMOVAPD_M128_XMM1_EVEX":                           VMOVAPD_M128_XMM1_EVEX,
	"VMOVAPD_M256_YMM1_VEX":                            VMOVAPD_M256_YMM1_VEX,
	"VMOVAPD_M256_YMM1_EVEX":                           VMOVAPD_M256_YMM1_EVEX,
	"VMOVAPD_M512_ZMM1_EVEX":                           VMOVAPD_M512_ZMM1_EVEX,
	"VMOVAPS_XMM1_XMM2_VEX":                            VMOVAPS_XMM1_XMM2_VEX,
	"VMOVAPS_XMM1_XMM2_EVEX":                           VMOVAPS_XMM1_XMM2_EVEX,
	"VMOVAPS_XMM1_M128_VEX":                            VMOVAPS_XMM1_M128_VEX,
	"VMOVAPS_XMM1_M128_EVEX":                           VMOVAPS_XMM1_M128_EVEX,
	"VMOVAPS_YMM1_YMM2_VEX":                            VMOVAPS_YMM1_YMM2_VEX,
	"VMOVAPS_YMM1_YMM2_EVEX":                           VMOVAPS_YMM1_YMM2_EVEX,
	"VMOVAPS_YMM1_M256_VEX":                            VMOVAPS_YMM1_M256_VEX,
	"VMOVAPS_YMM1_M256_EVEX":                           VMOVAPS_YMM1_M256_EVEX,
	"VMOVAPS_ZMM1_ZMM2_EVEX":                           VMOVAPS_ZMM1_ZMM2_EVEX,
	"VMOVAPS_ZMM1_M512_EVEX":                           VMOVAPS_ZMM1_M512_EVEX,
	"VMOVAPS_XMM2_XMM1_VEX":                            VMOVAPS_XMM2_XMM1_VEX,
	"VMOVAPS_XMM2_XMM1_EVEX":                           VMOVAPS_XMM2_XMM1_EVEX,
	"VMOVAPS_YMM2_YMM1_VEX":                            VMOVAPS_YMM2_YMM1_VEX,
	"VMOVAPS_YMM2_YMM1_EVEX":                           VMOVAPS_YMM2_YMM1_EVEX,
	"VMOVAPS_ZMM2_ZMM1_EVEX":                           VMOVAPS_ZMM2_ZMM1_EVEX,
	"VMOVAPS_M128_XMM1_VEX":                            VMOVAPS_M128_XMM1_VEX,
	"VMOVAPS_M128_XMM1_EVEX":                           VMOVAPS_M128_XMM1_EVEX,
	"VMOVAPS_M256_YMM1_VEX":                            VMOVAPS_M256_YMM1_VEX,
	"VMOVAPS_M256_YMM1_EVEX":                           VMOVAPS_M256_YMM1_EVEX,
	"VMOVAPS_M512_ZMM1_EVEX":                           VMOVAPS_M512_ZMM1_EVEX,
	"VMOVD_XMM1_Rmr32_VEX":                             VMOVD_XMM1_Rmr32_VEX,
	"VMOVD_XMM1_Rmr32_EVEX":                            VMOVD_XMM1_Rmr32_EVEX,
	"VMOVD_XMM1_M32_VEX":                               VMOVD_XMM1_M32_VEX,
	"VMOVD_XMM1_M32_EVEX":                              VMOVD_XMM1_M32_EVEX,
	"VMOVD_Rmr32_XMM1_VEX":                             VMOVD_Rmr32_XMM1_VEX,
	"VMOVD_Rmr32_XMM1_EVEX":                            VMOVD_Rmr32_XMM1_EVEX,
	"VMOVD_M32_XMM1_VEX":                               VMOVD_M32_XMM1_VEX,
	"VMOVD_M32_XMM1_EVEX":                              VMOVD_M32_XMM1_EVEX,
	"VMOVDDUP_XMM1_XMM2_VEX":                           VMOVDDUP_XMM1_XMM2_VEX,
	"VMOVDDUP_XMM1_XMM2_EVEX":                          VMOVDDUP_XMM1_XMM2_EVEX,
	"VMOVDDUP_XMM1_M64_VEX":                            VMOVDDUP_XMM1_M64_VEX,
	"VMOVDDUP_XMM1_M64_EVEX":                           VMOVDDUP_XMM1_M64_EVEX,
	"VMOVDDUP_YMM1_YMM2_VEX":                           VMOVDDUP_YMM1_YMM2_VEX,
	"VMOVDDUP_YMM1_YMM2_EVEX":                          VMOVDDUP_YMM1_YMM2_EVEX,
	"VMOVDDUP_YMM1_M256_VEX":                           VMOVDDUP_YMM1_M256_VEX,
	"VMOVDDUP_YMM1_M256_EVEX":                          VMOVDDUP_YMM1_M256_EVEX,
	"VMOVDDUP_ZMM1_ZMM2_EVEX":                          VMOVDDUP_ZMM1_ZMM2_EVEX,
	"VMOVDDUP_ZMM1_M512_EVEX":                          VMOVDDUP_ZMM1_M512_EVEX,
	"VMOVDQA_XMM1_XMM2_VEX":                            VMOVDQA_XMM1_XMM2_VEX,
	"VMOVDQA_XMM1_M128_VEX":                            VMOVDQA_XMM1_M128_VEX,
	"VMOVDQA_YMM1_YMM2_VEX":                            VMOVDQA_YMM1_YMM2_VEX,
	"VMOVDQA_YMM1_M256_VEX":                            VMOVDQA_YMM1_M256_VEX,
	"VMOVDQA_XMM2_XMM1_VEX":                            VMOVDQA_XMM2_XMM1_VEX,
	"VMOVDQA_YMM2_YMM1_VEX":                            VMOVDQA_YMM2_YMM1_VEX,
	"VMOVDQA_M128_XMM1_VEX":                            VMOVDQA_M128_XMM1_VEX,
	"VMOVDQA_M256_YMM1_VEX":                            VMOVDQA_M256_YMM1_VEX,
	"VMOVDQA32_XMM1_XMM2_EVEX":                         VMOVDQA32_XMM1_XMM2_EVEX,
	"VMOVDQA32_XMM1_M128_EVEX":                         VMOVDQA32_XMM1_M128_EVEX,
	"VMOVDQA32_YMM1_YMM2_EVEX":                         VMOVDQA32_YMM1_YMM2_EVEX,
	"VMOVDQA32_YMM1_M256_EVEX":                         VMOVDQA32_YMM1_M256_EVEX,
	"VMOVDQA32_ZMM1_ZMM2_EVEX":                         VMOVDQA32_ZMM1_ZMM2_EVEX,
	"VMOVDQA32_ZMM1_M512_EVEX":                         VMOVDQA32_ZMM1_M512_EVEX,
	"VMOVDQA32_XMM2_XMM1_EVEX":                         VMOVDQA32_XMM2_XMM1_EVEX,
	"VMOVDQA32_YMM2_YMM1_EVEX":                         VMOVDQA32_YMM2_YMM1_EVEX,
	"VMOVDQA32_ZMM2_ZMM1_EVEX":                         VMOVDQA32_ZMM2_ZMM1_EVEX,
	"VMOVDQA32_M128_XMM1_EVEX":                         VMOVDQA32_M128_XMM1_EVEX,
	"VMOVDQA32_M256_YMM1_EVEX":                         VMOVDQA32_M256_YMM1_EVEX,
	"VMOVDQA32_M512_ZMM1_EVEX":                         VMOVDQA32_M512_ZMM1_EVEX,
	"VMOVDQA64_XMM1_XMM2_EVEX":                         VMOVDQA64_XMM1_XMM2_EVEX,
	"VMOVDQA64_XMM1_M128_EVEX":                         VMOVDQA64_XMM1_M128_EVEX,
	"VMOVDQA64_YMM1_YMM2_EVEX":                         VMOVDQA64_YMM1_YMM2_EVEX,
	"VMOVDQA64_YMM1_M256_EVEX":                         VMOVDQA64_YMM1_M256_EVEX,
	"VMOVDQA64_ZMM1_ZMM2_EVEX":                         VMOVDQA64_ZMM1_ZMM2_EVEX,
	"VMOVDQA64_ZMM1_M512_EVEX":                         VMOVDQA64_ZMM1_M512_EVEX,
	"VMOVDQA64_XMM2_XMM1_EVEX":                         VMOVDQA64_XMM2_XMM1_EVEX,
	"VMOVDQA64_YMM2_YMM1_EVEX":                         VMOVDQA64_YMM2_YMM1_EVEX,
	"VMOVDQA64_ZMM2_ZMM1_EVEX":                         VMOVDQA64_ZMM2_ZMM1_EVEX,
	"VMOVDQA64_M128_XMM1_EVEX":                         VMOVDQA64_M128_XMM1_EVEX,
	"VMOVDQA64_M256_YMM1_EVEX":                         VMOVDQA64_M256_YMM1_EVEX,
	"VMOVDQA64_M512_ZMM1_EVEX":                         VMOVDQA64_M512_ZMM1_EVEX,
	"VMOVDQU_XMM1_XMM2_VEX":                            VMOVDQU_XMM1_XMM2_VEX,
	"VMOVDQU_XMM1_M128_VEX":                            VMOVDQU_XMM1_M128_VEX,
	"VMOVDQU_YMM1_YMM2_VEX":                            VMOVDQU_YMM1_YMM2_VEX,
	"VMOVDQU_YMM1_M256_VEX":                            VMOVDQU_YMM1_M256_VEX,
	"VMOVDQU_XMM2_XMM1_VEX":                            VMOVDQU_XMM2_XMM1_VEX,
	"VMOVDQU_YMM2_YMM1_VEX":                            VMOVDQU_YMM2_YMM1_VEX,
	"VMOVDQU_M128_XMM1_VEX":                            VMOVDQU_M128_XMM1_VEX,
	"VMOVDQU_M256_YMM1_VEX":                            VMOVDQU_M256_YMM1_VEX,
	"VMOVDQU16_XMM1_XMM2_EVEX":                         VMOVDQU16_XMM1_XMM2_EVEX,
	"VMOVDQU16_XMM1_M128_EVEX":                         VMOVDQU16_XMM1_M128_EVEX,
	"VMOVDQU16_YMM1_YMM2_EVEX":                         VMOVDQU16_YMM1_YMM2_EVEX,
	"VMOVDQU16_YMM1_M256_EVEX":                         VMOVDQU16_YMM1_M256_EVEX,
	"VMOVDQU16_ZMM1_ZMM2_EVEX":                         VMOVDQU16_ZMM1_ZMM2_EVEX,
	"VMOVDQU16_ZMM1_M512_EVEX":                         VMOVDQU16_ZMM1_M512_EVEX,
	"VMOVDQU16_XMM2_XMM1_EVEX":                         VMOVDQU16_XMM2_XMM1_EVEX,
	"VMOVDQU16_YMM2_YMM1_EVEX":                         VMOVDQU16_YMM2_YMM1_EVEX,
	"VMOVDQU16_ZMM2_ZMM1_EVEX":                         VMOVDQU16_ZMM2_ZMM1_EVEX,
	"VMOVDQU16_M128_XMM1_EVEX":                         VMOVDQU16_M128_XMM1_EVEX,
	"VMOVDQU16_M256_YMM1_EVEX":                         VMOVDQU16_M256_YMM1_EVEX,
	"VMOVDQU16_M512_ZMM1_EVEX":                         VMOVDQU16_M512_ZMM1_EVEX,
	"VMOVDQU32_XMM1_XMM2_EVEX":                         VMOVDQU32_XMM1_XMM2_EVEX,
	"VMOVDQU32_XMM1_M128_EVEX":                         VMOVDQU32_XMM1_M128_EVEX,
	"VMOVDQU32_YMM1_YMM2_EVEX":                         VMOVDQU32_YMM1_YMM2_EVEX,
	"VMOVDQU32_YMM1_M256_EVEX":                         VMOVDQU32_YMM1_M256_EVEX,
	"VMOVDQU32_ZMM1_ZMM2_EVEX":                         VMOVDQU32_ZMM1_ZMM2_EVEX,
	"VMOVDQU32_ZMM1_M512_EVEX":                         VMOVDQU32_ZMM1_M512_EVEX,
	"VMOVDQU32_XMM2_XMM1_EVEX":                         VMOVDQU32_XMM2_XMM1_EVEX,
	"VMOVDQU32_YMM2_YMM1_EVEX":                         VMOVDQU32_YMM2_YMM1_EVEX,
	"VMOVDQU32_ZMM2_ZMM1_EVEX":                         VMOVDQU32_ZMM2_ZMM1_EVEX,
	"VMOVDQU32_M128_XMM1_EVEX":                         VMOVDQU32_M128_XMM1_EVEX,
	"VMOVDQU32_M256_YMM1_EVEX":                         VMOVDQU32_M256_YMM1_EVEX,
	"VMOVDQU32_M512_ZMM1_EVEX":                         VMOVDQU32_M512_ZMM1_EVEX,
	"VMOVDQU64_XMM1_XMM2_EVEX":                         VMOVDQU64_XMM1_XMM2_EVEX,
	"VMOVDQU64_XMM1_M128_EVEX":                         VMOVDQU64_XMM1_M128_EVEX,
	"VMOVDQU64_YMM1_YMM2_EVEX":                         VMOVDQU64_YMM1_YMM2_EVEX,
	"VMOVDQU64_YMM1_M256_EVEX":                         VMOVDQU64_YMM1_M256_EVEX,
	"VMOVDQU64_ZMM1_ZMM2_EVEX":                         VMOVDQU64_ZMM1_ZMM2_EVEX,
	"VMOVDQU64_ZMM1_M512_EVEX":                         VMOVDQU64_ZMM1_M512_EVEX,
	"VMOVDQU64_XMM2_XMM1_EVEX":                         VMOVDQU64_XMM2_XMM1_EVEX,
	"VMOVDQU64_YMM2_YMM1_EVEX":                         VMOVDQU64_YMM2_YMM1_EVEX,
	"VMOVDQU64_ZMM2_ZMM1_EVEX":                         VMOVDQU64_ZMM2_ZMM1_EVEX,
	"VMOVDQU64_M128_XMM1_EVEX":                         VMOVDQU64_M128_XMM1_EVEX,
	"VMOVDQU64_M256_YMM1_EVEX":                         VMOVDQU64_M256_YMM1_EVEX,
	"VMOVDQU64_M512_ZMM1_EVEX":                         VMOVDQU64_M512_ZMM1_EVEX,
	"VMOVDQU8_XMM1_XMM2_EVEX":                          VMOVDQU8_XMM1_XMM2_EVEX,
	"VMOVDQU8_XMM1_M128_EVEX":                          VMOVDQU8_XMM1_M128_EVEX,
	"VMOVDQU8_YMM1_YMM2_EVEX":                          VMOVDQU8_YMM1_YMM2_EVEX,
	"VMOVDQU8_YMM1_M256_EVEX":                          VMOVDQU8_YMM1_M256_EVEX,
	"VMOVDQU8_ZMM1_ZMM2_EVEX":                          VMOVDQU8_ZMM1_ZMM2_EVEX,
	"VMOVDQU8_ZMM1_M512_EVEX":                          VMOVDQU8_ZMM1_M512_EVEX,
	"VMOVDQU8_XMM2_XMM1_EVEX":                          VMOVDQU8_XMM2_XMM1_EVEX,
	"VMOVDQU8_YMM2_YMM1_EVEX":                          VMOVDQU8_YMM2_YMM1_EVEX,
	"VMOVDQU8_ZMM2_ZMM1_EVEX":                          VMOVDQU8_ZMM2_ZMM1_EVEX,
	"VMOVDQU8_M128_XMM1_EVEX":                          VMOVDQU8_M128_XMM1_EVEX,
	"VMOVDQU8_M256_YMM1_EVEX":                          VMOVDQU8_M256_YMM1_EVEX,
	"VMOVDQU8_M512_ZMM1_EVEX":                          VMOVDQU8_M512_ZMM1_EVEX,
	"VMOVHLPS_XMM1_XMMV_XMM2_VEX":                      VMOVHLPS_XMM1_XMMV_XMM2_VEX,
	"VMOVHLPS_XMM1_XMMV_XMM2_EVEX":                     VMOVHLPS_XMM1_XMMV_XMM2_EVEX,
	"VMOVHPD_M64_XMM1_VEX":                             VMOVHPD_M64_XMM1_VEX,
	"VMOVHPD_M64_XMM1_EVEX":                            VMOVHPD_M64_XMM1_EVEX,
	"VMOVHPD_XMM1_XMMV_M64_VEX":                        VMOVHPD_XMM1_XMMV_M64_VEX,
	"VMOVHPD_XMM1_XMMV_M64_EVEX":                       VMOVHPD_XMM1_XMMV_M64_EVEX,
	"VMOVHPS_M64_XMM1_VEX":                             VMOVHPS_M64_XMM1_VEX,
	"VMOVHPS_M64_XMM1_EVEX":                            VMOVHPS_M64_XMM1_EVEX,
	"VMOVHPS_XMM1_XMMV_M64_VEX":                        VMOVHPS_XMM1_XMMV_M64_VEX,
	"VMOVHPS_XMM1_XMMV_M64_EVEX":                       VMOVHPS_XMM1_XMMV_M64_EVEX,
	"VMOVLHPS_XMM1_XMMV_XMM2_VEX":                      VMOVLHPS_XMM1_XMMV_XMM2_VEX,
	"VMOVLHPS_XMM1_XMMV_XMM2_EVEX":                     VMOVLHPS_XMM1_XMMV_XMM2_EVEX,
	"VMOVLPD_M64_XMM1_VEX":                             VMOVLPD_M64_XMM1_VEX,
	"VMOVLPD_M64_XMM1_EVEX":                            VMOVLPD_M64_XMM1_EVEX,
	"VMOVLPD_XMM1_XMMV_M64_VEX":                        VMOVLPD_XMM1_XMMV_M64_VEX,
	"VMOVLPD_XMM1_XMMV_M64_EVEX":                       VMOVLPD_XMM1_XMMV_M64_EVEX,
	"VMOVLPS_M64_XMM1_VEX":                             VMOVLPS_M64_XMM1_VEX,
	"VMOVLPS_M64_XMM1_EVEX":                            VMOVLPS_M64_XMM1_EVEX,
	"VMOVLPS_XMM1_XMMV_M64_VEX":                        VMOVLPS_XMM1_XMMV_M64_VEX,
	"VMOVLPS_XMM1_XMMV_M64_EVEX":                       VMOVLPS_XMM1_XMMV_M64_EVEX,
	"VMOVMSKPD_R32_XMM2_VEX":                           VMOVMSKPD_R32_XMM2_VEX,
	"VMOVMSKPD_R32_YMM2_VEX":                           VMOVMSKPD_R32_YMM2_VEX,
	"VMOVMSKPS_R32_XMM2_VEX":                           VMOVMSKPS_R32_XMM2_VEX,
	"VMOVMSKPS_R32_YMM2_VEX":                           VMOVMSKPS_R32_YMM2_VEX,
	"VMOVNTDQ_M128_XMM1_VEX":                           VMOVNTDQ_M128_XMM1_VEX,
	"VMOVNTDQ_M128_XMM1_EVEX":                          VMOVNTDQ_M128_XMM1_EVEX,
	"VMOVNTDQ_M256_YMM1_VEX":                           VMOVNTDQ_M256_YMM1_VEX,
	"VMOVNTDQ_M256_YMM1_EVEX":                          VMOVNTDQ_M256_YMM1_EVEX,
	"VMOVNTDQ_M512_ZMM1_EVEX":                          VMOVNTDQ_M512_ZMM1_EVEX,
	"VMOVNTDQA_XMM1_M128_VEX":                          VMOVNTDQA_XMM1_M128_VEX,
	"VMOVNTDQA_XMM1_M128_EVEX":                         VMOVNTDQA_XMM1_M128_EVEX,
	"VMOVNTDQA_YMM1_M256_VEX":                          VMOVNTDQA_YMM1_M256_VEX,
	"VMOVNTDQA_YMM1_M256_EVEX":                         VMOVNTDQA_YMM1_M256_EVEX,
	"VMOVNTDQA_ZMM1_M512_EVEX":                         VMOVNTDQA_ZMM1_M512_EVEX,
	"VMOVNTPD_M128_XMM1_VEX":                           VMOVNTPD_M128_XMM1_VEX,
	"VMOVNTPD_M128_XMM1_EVEX":                          VMOVNTPD_M128_XMM1_EVEX,
	"VMOVNTPD_M256_YMM1_VEX":                           VMOVNTPD_M256_YMM1_VEX,
	"VMOVNTPD_M256_YMM1_EVEX":                          VMOVNTPD_M256_YMM1_EVEX,
	"VMOVNTPD_M512_ZMM1_EVEX":                          VMOVNTPD_M512_ZMM1_EVEX,
	"VMOVNTPS_M128_XMM1_VEX":                           VMOVNTPS_M128_XMM1_VEX,
	"VMOVNTPS_M128_XMM1_EVEX":                          VMOVNTPS_M128_XMM1_EVEX,
	"VMOVNTPS_M256_YMM1_VEX":                           VMOVNTPS_M256_YMM1_VEX,
	"VMOVNTPS_M256_YMM1_EVEX":                          VMOVNTPS_M256_YMM1_EVEX,
	"VMOVNTPS_M512_ZMM1_EVEX":                          VMOVNTPS_M512_ZMM1_EVEX,
	"VMOVQ_XMM1_Rmr64_VEX":                             VMOVQ_XMM1_Rmr64_VEX,
	"VMOVQ_XMM1_Rmr64_EVEX":                            VMOVQ_XMM1_Rmr64_EVEX,
	"VMOVQ_XMM1_XMM2_VEX":                              VMOVQ_XMM1_XMM2_VEX,
	"VMOVQ_XMM1_XMM2_EVEX":                             VMOVQ_XMM1_XMM2_EVEX,
	"VMOVQ_XMM1_M64_VEX":                               VMOVQ_XMM1_M64_VEX,
	"VMOVQ_XMM1_M64_EVEX":                              VMOVQ_XMM1_M64_EVEX,
	"VMOVQ_Rmr64_XMM1_VEX":                             VMOVQ_Rmr64_XMM1_VEX,
	"VMOVQ_Rmr64_XMM1_EVEX":                            VMOVQ_Rmr64_XMM1_EVEX,
	"VMOVQ_XMM2_XMM1_VEX":                              VMOVQ_XMM2_XMM1_VEX,
	"VMOVQ_XMM2_XMM1_EVEX":                             VMOVQ_XMM2_XMM1_EVEX,
	"VMOVQ_M64_XMM1_VEX":                               VMOVQ_M64_XMM1_VEX,
	"VMOVQ_M64_XMM1_EVEX":                              VMOVQ_M64_XMM1_EVEX,
	"VMOVSD_XMM1_M64_VEX":                              VMOVSD_XMM1_M64_VEX,
	"VMOVSD_XMM1_M64_EVEX":                             VMOVSD_XMM1_M64_EVEX,
	"VMOVSD_M64_XMM1_VEX":                              VMOVSD_M64_XMM1_VEX,
	"VMOVSD_M64_XMM1_EVEX":                             VMOVSD_M64_XMM1_EVEX,
	"VMOVSD_XMM1_XMMV_XMM2_VEX":                        VMOVSD_XMM1_XMMV_XMM2_VEX,
	"VMOVSD_XMM1_XMMV_XMM2_EVEX":                       VMOVSD_XMM1_XMMV_XMM2_EVEX,
	"VMOVSD_XMM2_XMMV_XMM1_VEX":                        VMOVSD_XMM2_XMMV_XMM1_VEX,
	"VMOVSD_XMM2_XMMV_XMM1_EVEX":                       VMOVSD_XMM2_XMMV_XMM1_EVEX,
	"VMOVSHDUP_XMM1_XMM2_VEX":                          VMOVSHDUP_XMM1_XMM2_VEX,
	"VMOVSHDUP_XMM1_XMM2_EVEX":                         VMOVSHDUP_XMM1_XMM2_EVEX,
	"VMOVSHDUP_XMM1_M128_VEX":                          VMOVSHDUP_XMM1_M128_VEX,
	"VMOVSHDUP_XMM1_M128_EVEX":                         VMOVSHDUP_XMM1_M128_EVEX,
	"VMOVSHDUP_YMM1_YMM2_VEX":                          VMOVSHDUP_YMM1_YMM2_VEX,
	"VMOVSHDUP_YMM1_YMM2_EVEX":                         VMOVSHDUP_YMM1_YMM2_EVEX,
	"VMOVSHDUP_YMM1_M256_VEX":                          VMOVSHDUP_YMM1_M256_VEX,
	"VMOVSHDUP_YMM1_M256_EVEX":                         VMOVSHDUP_YMM1_M256_EVEX,
	"VMOVSHDUP_ZMM1_ZMM2_EVEX":                         VMOVSHDUP_ZMM1_ZMM2_EVEX,
	"VMOVSHDUP_ZMM1_M512_EVEX":                         VMOVSHDUP_ZMM1_M512_EVEX,
	"VMOVSLDUP_XMM1_XMM2_VEX":                          VMOVSLDUP_XMM1_XMM2_VEX,
	"VMOVSLDUP_XMM1_XMM2_EVEX":                         VMOVSLDUP_XMM1_XMM2_EVEX,
	"VMOVSLDUP_XMM1_M128_VEX":                          VMOVSLDUP_XMM1_M128_VEX,
	"VMOVSLDUP_XMM1_M128_EVEX":                         VMOVSLDUP_XMM1_M128_EVEX,
	"VMOVSLDUP_YMM1_YMM2_VEX":                          VMOVSLDUP_YMM1_YMM2_VEX,
	"VMOVSLDUP_YMM1_YMM2_EVEX":                         VMOVSLDUP_YMM1_YMM2_EVEX,
	"VMOVSLDUP_YMM1_M256_VEX":                          VMOVSLDUP_YMM1_M256_VEX,
	"VMOVSLDUP_YMM1_M256_EVEX":                         VMOVSLDUP_YMM1_M256_EVEX,
	"VMOVSLDUP_ZMM1_ZMM2_EVEX":                         VMOVSLDUP_ZMM1_ZMM2_EVEX,
	"VMOVSLDUP_ZMM1_M512_EVEX":                         VMOVSLDUP_ZMM1_M512_EVEX,
	"VMOVSS_XMM1_M32_VEX":                              VMOVSS_XMM1_M32_VEX,
	"VMOVSS_XMM1_M32_EVEX":                             VMOVSS_XMM1_M32_EVEX,
	"VMOVSS_M32_XMM1_VEX":                              VMOVSS_M32_XMM1_VEX,
	"VMOVSS_M32_XMM1_EVEX":                             VMOVSS_M32_XMM1_EVEX,
	"VMOVSS_XMM1_XMMV_XMM2_VEX":                        VMOVSS_XMM1_XMMV_XMM2_VEX,
	"VMOVSS_XMM1_XMMV_XMM2_EVEX":                       VMOVSS_XMM1_XMMV_XMM2_EVEX,
	"VMOVSS_XMM2_XMMV_XMM1_VEX":                        VMOVSS_XMM2_XMMV_XMM1_VEX,
	"VMOVSS_XMM2_XMMV_XMM1_EVEX":                       VMOVSS_XMM2_XMMV_XMM1_EVEX,
	"VMOVUPD_XMM1_XMM2_VEX":                            VMOVUPD_XMM1_XMM2_VEX,
	"VMOVUPD_XMM1_XMM2_EVEX":                           VMOVUPD_XMM1_XMM2_EVEX,
	"VMOVUPD_XMM1_M128_VEX":                            VMOVUPD_XMM1_M128_VEX,
	"VMOVUPD_XMM1_M128_EVEX":                           VMOVUPD_XMM1_M128_EVEX,
	"VMOVUPD_YMM1_YMM2_VEX":                            VMOVUPD_YMM1_YMM2_VEX,
	"VMOVUPD_YMM1_YMM2_EVEX":                           VMOVUPD_YMM1_YMM2_EVEX,
	"VMOVUPD_YMM1_M256_VEX":                            VMOVUPD_YMM1_M256_VEX,
	"VMOVUPD_YMM1_M256_EVEX":                           VMOVUPD_YMM1_M256_EVEX,
	"VMOVUPD_ZMM1_ZMM2_EVEX":                           VMOVUPD_ZMM1_ZMM2_EVEX,
	"VMOVUPD_ZMM1_M512_EVEX":                           VMOVUPD_ZMM1_M512_EVEX,
	"VMOVUPD_XMM2_XMM1_VEX":                            VMOVUPD_XMM2_XMM1_VEX,
	"VMOVUPD_XMM2_XMM1_EVEX":                           VMOVUPD_XMM2_XMM1_EVEX,
	"VMOVUPD_YMM2_YMM1_VEX":                            VMOVUPD_YMM2_YMM1_VEX,
	"VMOVUPD_YMM2_YMM1_EVEX":                           VMOVUPD_YMM2_YMM1_EVEX,
	"VMOVUPD_ZMM2_ZMM1_EVEX":                           VMOVUPD_ZMM2_ZMM1_EVEX,
	"VMOVUPD_M128_XMM1_VEX":                            VMOVUPD_M128_XMM1_VEX,
	"VMOVUPD_M128_XMM1_EVEX":                           VMOVUPD_M128_XMM1_EVEX,
	"VMOVUPD_M256_YMM1_VEX":                            VMOVUPD_M256_YMM1_VEX,
	"VMOVUPD_M256_YMM1_EVEX":                           VMOVUPD_M256_YMM1_EVEX,
	"VMOVUPD_M512_ZMM1_EVEX":                           VMOVUPD_M512_ZMM1_EVEX,
	"VMOVUPS_XMM1_XMM2_VEX":                            VMOVUPS_XMM1_XMM2_VEX,
	"VMOVUPS_XMM1_XMM2_EVEX":                           VMOVUPS_XMM1_XMM2_EVEX,
	"VMOVUPS_XMM1_M128_VEX":                            VMOVUPS_XMM1_M128_VEX,
	"VMOVUPS_XMM1_M128_EVEX":                           VMOVUPS_XMM1_M128_EVEX,
	"VMOVUPS_YMM1_YMM2_VEX":                            VMOVUPS_YMM1_YMM2_VEX,
	"VMOVUPS_YMM1_YMM2_EVEX":                           VMOVUPS_YMM1_YMM2_EVEX,
	"VMOVUPS_YMM1_M256_VEX":                            VMOVUPS_YMM1_M256_VEX,
	"VMOVUPS_YMM1_M256_EVEX":                           VMOVUPS_YMM1_M256_EVEX,
	"VMOVUPS_ZMM1_ZMM2_EVEX":                           VMOVUPS_ZMM1_ZMM2_EVEX,
	"VMOVUPS_ZMM1_M512_EVEX":                           VMOVUPS_ZMM1_M512_EVEX,
	"VMOVUPS_XMM2_XMM1_VEX":                            VMOVUPS_XMM2_XMM1_VEX,
	"VMOVUPS_XMM2_XMM1_EVEX":                           VMOVUPS_XMM2_XMM1_EVEX,
	"VMOVUPS_YMM2_YMM1_VEX":                            VMOVUPS_YMM2_YMM1_VEX,
	"VMOVUPS_YMM2_YMM1_EVEX":                           VMOVUPS_YMM2_YMM1_EVEX,
	"VMOVUPS_ZMM2_ZMM1_EVEX":                           VMOVUPS_ZMM2_ZMM1_EVEX,
	"VMOVUPS_M128_XMM1_VEX":                            VMOVUPS_M128_XMM1_VEX,
	"VMOVUPS_M128_XMM1_EVEX":                           VMOVUPS_M128_XMM1_EVEX,
	"VMOVUPS_M256_YMM1_VEX":                            VMOVUPS_M256_YMM1_VEX,
	"VMOVUPS_M256_YMM1_EVEX":                           VMOVUPS_M256_YMM1_EVEX,
	"VMOVUPS_M512_ZMM1_EVEX":                           VMOVUPS_M512_ZMM1_EVEX,
	"VMPSADBW_XMM1_XMMV_XMM2_Imm8_VEX":                 VMPSADBW_XMM1_XMMV_XMM2_Imm8_VEX,
	"VMPSADBW_XMM1_XMMV_M128_Imm8_VEX":                 VMPSADBW_XMM1_XMMV_M128_Imm8_VEX,
	"VMPSADBW_YMM1_YMMV_YMM2_Imm8_VEX":                 VMPSADBW_YMM1_YMMV_YMM2_Imm8_VEX,
	"VMPSADBW_YMM1_YMMV_M256_Imm8_VEX":                 VMPSADBW_YMM1_YMMV_M256_Imm8_VEX,
	"VMPTRLD_M64":                                      VMPTRLD_M64,
	"VMPTRST_M64":                                      VMPTRST_M64,
	"VMRESUME":                                         VMRESUME,
	"VMRUN_EAX":                                        VMRUN_EAX,
	"VMRUN_RAX":                                        VMRUN_RAX,
	"VMSAVE_EAX":                                       VMSAVE_EAX,
	"VMSAVE_RAX":                                       VMSAVE_RAX,
	"VMULPD_XMM1_XMMV_XMM2_VEX":                        VMULPD_XMM1_XMMV_XMM2_VEX,
	"VMULPD_XMM1_XMMV_XMM2_EVEX":                       VMULPD_XMM1_XMMV_XMM2_EVEX,
	"VMULPD_XMM1_XMMV_M128_VEX":                        VMULPD_XMM1_XMMV_M128_VEX,
	"VMULPD_XMM1_XMMV_M128_EVEX":                       VMULPD_XMM1_XMMV_M128_EVEX,
	"VMULPD_XMM1_XMMV_M64bcst128_EVEX":                 VMULPD_XMM1_XMMV_M64bcst128_EVEX,
	"VMULPD_YMM1_YMMV_YMM2_VEX":                        VMULPD_YMM1_YMMV_YMM2_VEX,
	"VMULPD_YMM1_YMMV_YMM2_EVEX":                       VMULPD_YMM1_YMMV_YMM2_EVEX,
	"VMULPD_YMM1_YMMV_M256_VEX":                        VMULPD_YMM1_YMMV_M256_VEX,
	"VMULPD_YMM1_YMMV_M256_EVEX":                       VMULPD_YMM1_YMMV_M256_EVEX,
	"VMULPD_YMM1_YMMV_M64bcst256_EVEX":                 VMULPD_YMM1_YMMV_M64bcst256_EVEX,
	"VMULPD_ZMM1_ZMMV_ZMM2_EVEX":                       VMULPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VMULPD_ZMM1_ZMMV_M512_EVEX":                       VMULPD_ZMM1_ZMMV_M512_EVEX,
	"VMULPD_ZMM1_ZMMV_M64bcst512_EVEX":                 VMULPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VMULPS_XMM1_XMMV_XMM2_VEX":                        VMULPS_XMM1_XMMV_XMM2_VEX,
	"VMULPS_XMM1_XMMV_XMM2_EVEX":                       VMULPS_XMM1_XMMV_XMM2_EVEX,
	"VMULPS_XMM1_XMMV_M128_VEX":                        VMULPS_XMM1_XMMV_M128_VEX,
	"VMULPS_XMM1_XMMV_M128_EVEX":                       VMULPS_XMM1_XMMV_M128_EVEX,
	"VMULPS_XMM1_XMMV_M32bcst128_EVEX":                 VMULPS_XMM1_XMMV_M32bcst128_EVEX,
	"VMULPS_YMM1_YMMV_YMM2_VEX":                        VMULPS_YMM1_YMMV_YMM2_VEX,
	"VMULPS_YMM1_YMMV_YMM2_EVEX":                       VMULPS_YMM1_YMMV_YMM2_EVEX,
	"VMULPS_YMM1_YMMV_M256_VEX":                        VMULPS_YMM1_YMMV_M256_VEX,
	"VMULPS_YMM1_YMMV_M256_EVEX":                       VMULPS_YMM1_YMMV_M256_EVEX,
	"VMULPS_YMM1_YMMV_M32bcst256_EVEX":                 VMULPS_YMM1_YMMV_M32bcst256_EVEX,
	"VMULPS_ZMM1_ZMMV_ZMM2_EVEX":                       VMULPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VMULPS_ZMM1_ZMMV_M512_EVEX":                       VMULPS_ZMM1_ZMMV_M512_EVEX,
	"VMULPS_ZMM1_ZMMV_M32bcst512_EVEX":                 VMULPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VMULSD_XMM1_XMMV_XMM2_VEX":                        VMULSD_XMM1_XMMV_XMM2_VEX,
	"VMULSD_XMM1_XMMV_XMM2_EVEX":                       VMULSD_XMM1_XMMV_XMM2_EVEX,
	"VMULSD_XMM1_XMMV_M64_VEX":                         VMULSD_XMM1_XMMV_M64_VEX,
	"VMULSD_XMM1_XMMV_M64_EVEX":                        VMULSD_XMM1_XMMV_M64_EVEX,
	"VMULSS_XMM1_XMMV_XMM2_VEX":                        VMULSS_XMM1_XMMV_XMM2_VEX,
	"VMULSS_XMM1_XMMV_XMM2_EVEX":                       VMULSS_XMM1_XMMV_XMM2_EVEX,
	"VMULSS_XMM1_XMMV_M32_VEX":                         VMULSS_XMM1_XMMV_M32_VEX,
	"VMULSS_XMM1_XMMV_M32_EVEX":                        VMULSS_XMM1_XMMV_M32_EVEX,
	"VMXOFF":                                           VMXOFF,
	"VMXON_M64":                                        VMXON_M64,
	"VORPD_XMM1_XMMV_XMM2_VEX":                         VORPD_XMM1_XMMV_XMM2_VEX,
	"VORPD_XMM1_XMMV_XMM2_EVEX":                        VORPD_XMM1_XMMV_XMM2_EVEX,
	"VORPD_XMM1_XMMV_M128_VEX":                         VORPD_XMM1_XMMV_M128_VEX,
	"VORPD_XMM1_XMMV_M128_EVEX":                        VORPD_XMM1_XMMV_M128_EVEX,
	"VORPD_XMM1_XMMV_M64bcst128_EVEX":                  VORPD_XMM1_XMMV_M64bcst128_EVEX,
	"VORPD_YMM1_YMMV_YMM2_VEX":                         VORPD_YMM1_YMMV_YMM2_VEX,
	"VORPD_YMM1_YMMV_YMM2_EVEX":                        VORPD_YMM1_YMMV_YMM2_EVEX,
	"VORPD_YMM1_YMMV_M256_VEX":                         VORPD_YMM1_YMMV_M256_VEX,
	"VORPD_YMM1_YMMV_M256_EVEX":                        VORPD_YMM1_YMMV_M256_EVEX,
	"VORPD_YMM1_YMMV_M64bcst256_EVEX":                  VORPD_YMM1_YMMV_M64bcst256_EVEX,
	"VORPD_ZMM1_ZMMV_ZMM2_EVEX":                        VORPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VORPD_ZMM1_ZMMV_M512_EVEX":                        VORPD_ZMM1_ZMMV_M512_EVEX,
	"VORPD_ZMM1_ZMMV_M64bcst512_EVEX":                  VORPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VORPS_XMM1_XMMV_XMM2_VEX":                         VORPS_XMM1_XMMV_XMM2_VEX,
	"VORPS_XMM1_XMMV_XMM2_EVEX":                        VORPS_XMM1_XMMV_XMM2_EVEX,
	"VORPS_XMM1_XMMV_M128_VEX":                         VORPS_XMM1_XMMV_M128_VEX,
	"VORPS_XMM1_XMMV_M128_EVEX":                        VORPS_XMM1_XMMV_M128_EVEX,
	"VORPS_XMM1_XMMV_M32bcst128_EVEX":                  VORPS_XMM1_XMMV_M32bcst128_EVEX,
	"VORPS_YMM1_YMMV_YMM2_VEX":                         VORPS_YMM1_YMMV_YMM2_VEX,
	"VORPS_YMM1_YMMV_YMM2_EVEX":                        VORPS_YMM1_YMMV_YMM2_EVEX,
	"VORPS_YMM1_YMMV_M256_VEX":                         VORPS_YMM1_YMMV_M256_VEX,
	"VORPS_YMM1_YMMV_M256_EVEX":                        VORPS_YMM1_YMMV_M256_EVEX,
	"VORPS_YMM1_YMMV_M32bcst256_EVEX":                  VORPS_YMM1_YMMV_M32bcst256_EVEX,
	"VORPS_ZMM1_ZMMV_ZMM2_EVEX":                        VORPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VORPS_ZMM1_ZMMV_M512_EVEX":                        VORPS_ZMM1_ZMMV_M512_EVEX,
	"VORPS_ZMM1_ZMMV_M32bcst512_EVEX":                  VORPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPABSB_XMM1_XMM2_VEX":                             VPABSB_XMM1_XMM2_VEX,
	"VPABSB_XMM1_XMM2_EVEX":                            VPABSB_XMM1_XMM2_EVEX,
	"VPABSB_XMM1_M128_VEX":                             VPABSB_XMM1_M128_VEX,
	"VPABSB_XMM1_M128_EVEX":                            VPABSB_XMM1_M128_EVEX,
	"VPABSB_YMM1_YMM2_VEX":                             VPABSB_YMM1_YMM2_VEX,
	"VPABSB_YMM1_YMM2_EVEX":                            VPABSB_YMM1_YMM2_EVEX,
	"VPABSB_YMM1_M256_VEX":                             VPABSB_YMM1_M256_VEX,
	"VPABSB_YMM1_M256_EVEX":                            VPABSB_YMM1_M256_EVEX,
	"VPABSB_ZMM1_ZMM2_EVEX":                            VPABSB_ZMM1_ZMM2_EVEX,
	"VPABSB_ZMM1_M512_EVEX":                            VPABSB_ZMM1_M512_EVEX,
	"VPABSD_XMM1_XMM2_VEX":                             VPABSD_XMM1_XMM2_VEX,
	"VPABSD_XMM1_XMM2_EVEX":                            VPABSD_XMM1_XMM2_EVEX,
	"VPABSD_XMM1_M128_VEX":                             VPABSD_XMM1_M128_VEX,
	"VPABSD_XMM1_M128_EVEX":                            VPABSD_XMM1_M128_EVEX,
	"VPABSD_XMM1_M32bcst128_EVEX":                      VPABSD_XMM1_M32bcst128_EVEX,
	"VPABSD_YMM1_YMM2_VEX":                             VPABSD_YMM1_YMM2_VEX,
	"VPABSD_YMM1_YMM2_EVEX":                            VPABSD_YMM1_YMM2_EVEX,
	"VPABSD_YMM1_M256_VEX":                             VPABSD_YMM1_M256_VEX,
	"VPABSD_YMM1_M256_EVEX":                            VPABSD_YMM1_M256_EVEX,
	"VPABSD_YMM1_M32bcst256_EVEX":                      VPABSD_YMM1_M32bcst256_EVEX,
	"VPABSD_ZMM1_ZMM2_EVEX":                            VPABSD_ZMM1_ZMM2_EVEX,
	"VPABSD_ZMM1_M512_EVEX":                            VPABSD_ZMM1_M512_EVEX,
	"VPABSD_ZMM1_M32bcst512_EVEX":                      VPABSD_ZMM1_M32bcst512_EVEX,
	"VPABSQ_XMM1_XMM2_EVEX":                            VPABSQ_XMM1_XMM2_EVEX,
	"VPABSQ_XMM1_M128_EVEX":                            VPABSQ_XMM1_M128_EVEX,
	"VPABSQ_XMM1_M64bcst128_EVEX":                      VPABSQ_XMM1_M64bcst128_EVEX,
	"VPABSQ_YMM1_YMM2_EVEX":                            VPABSQ_YMM1_YMM2_EVEX,
	"VPABSQ_YMM1_M256_EVEX":                            VPABSQ_YMM1_M256_EVEX,
	"VPABSQ_YMM1_M64bcst256_EVEX":                      VPABSQ_YMM1_M64bcst256_EVEX,
	"VPABSQ_ZMM1_ZMM2_EVEX":                            VPABSQ_ZMM1_ZMM2_EVEX,
	"VPABSQ_ZMM1_M512_EVEX":                            VPABSQ_ZMM1_M512_EVEX,
	"VPABSQ_ZMM1_M64bcst512_EVEX":                      VPABSQ_ZMM1_M64bcst512_EVEX,
	"VPABSW_XMM1_XMM2_VEX":                             VPABSW_XMM1_XMM2_VEX,
	"VPABSW_XMM1_XMM2_EVEX":                            VPABSW_XMM1_XMM2_EVEX,
	"VPABSW_XMM1_M128_VEX":                             VPABSW_XMM1_M128_VEX,
	"VPABSW_XMM1_M128_EVEX":                            VPABSW_XMM1_M128_EVEX,
	"VPABSW_YMM1_YMM2_VEX":                             VPABSW_YMM1_YMM2_VEX,
	"VPABSW_YMM1_YMM2_EVEX":                            VPABSW_YMM1_YMM2_EVEX,
	"VPABSW_YMM1_M256_VEX":                             VPABSW_YMM1_M256_VEX,
	"VPABSW_YMM1_M256_EVEX":                            VPABSW_YMM1_M256_EVEX,
	"VPABSW_ZMM1_ZMM2_EVEX":                            VPABSW_ZMM1_ZMM2_EVEX,
	"VPABSW_ZMM1_M512_EVEX":                            VPABSW_ZMM1_M512_EVEX,
	"VPACKSSDW_XMM1_XMMV_XMM2_VEX":                     VPACKSSDW_XMM1_XMMV_XMM2_VEX,
	"VPACKSSDW_XMM1_XMMV_XMM2_EVEX":                    VPACKSSDW_XMM1_XMMV_XMM2_EVEX,
	"VPACKSSDW_XMM1_XMMV_M128_VEX":                     VPACKSSDW_XMM1_XMMV_M128_VEX,
	"VPACKSSDW_XMM1_XMMV_M128_EVEX":                    VPACKSSDW_XMM1_XMMV_M128_EVEX,
	"VPACKSSDW_XMM1_XMMV_M32bcst128_EVEX":              VPACKSSDW_XMM1_XMMV_M32bcst128_EVEX,
	"VPACKSSDW_YMM1_YMMV_YMM2_VEX":                     VPACKSSDW_YMM1_YMMV_YMM2_VEX,
	"VPACKSSDW_YMM1_YMMV_YMM2_EVEX":                    VPACKSSDW_YMM1_YMMV_YMM2_EVEX,
	"VPACKSSDW_YMM1_YMMV_M256_VEX":                     VPACKSSDW_YMM1_YMMV_M256_VEX,
	"VPACKSSDW_YMM1_YMMV_M256_EVEX":                    VPACKSSDW_YMM1_YMMV_M256_EVEX,
	"VPACKSSDW_YMM1_YMMV_M32bcst256_EVEX":              VPACKSSDW_YMM1_YMMV_M32bcst256_EVEX,
	"VPACKSSDW_ZMM1_ZMMV_ZMM2_EVEX":                    VPACKSSDW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPACKSSDW_ZMM1_ZMMV_M512_EVEX":                    VPACKSSDW_ZMM1_ZMMV_M512_EVEX,
	"VPACKSSDW_ZMM1_ZMMV_M32bcst512_EVEX":              VPACKSSDW_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPACKSSWB_XMM1_XMMV_XMM2_VEX":                     VPACKSSWB_XMM1_XMMV_XMM2_VEX,
	"VPACKSSWB_XMM1_XMMV_XMM2_EVEX":                    VPACKSSWB_XMM1_XMMV_XMM2_EVEX,
	"VPACKSSWB_XMM1_XMMV_M128_VEX":                     VPACKSSWB_XMM1_XMMV_M128_VEX,
	"VPACKSSWB_XMM1_XMMV_M128_EVEX":                    VPACKSSWB_XMM1_XMMV_M128_EVEX,
	"VPACKSSWB_YMM1_YMMV_YMM2_VEX":                     VPACKSSWB_YMM1_YMMV_YMM2_VEX,
	"VPACKSSWB_YMM1_YMMV_YMM2_EVEX":                    VPACKSSWB_YMM1_YMMV_YMM2_EVEX,
	"VPACKSSWB_YMM1_YMMV_M256_VEX":                     VPACKSSWB_YMM1_YMMV_M256_VEX,
	"VPACKSSWB_YMM1_YMMV_M256_EVEX":                    VPACKSSWB_YMM1_YMMV_M256_EVEX,
	"VPACKSSWB_ZMM1_ZMMV_ZMM2_EVEX":                    VPACKSSWB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPACKSSWB_ZMM1_ZMMV_M512_EVEX":                    VPACKSSWB_ZMM1_ZMMV_M512_EVEX,
	"VPACKUSDW_XMM1_XMMV_XMM2_VEX":                     VPACKUSDW_XMM1_XMMV_XMM2_VEX,
	"VPACKUSDW_XMM1_XMMV_XMM2_EVEX":                    VPACKUSDW_XMM1_XMMV_XMM2_EVEX,
	"VPACKUSDW_XMM1_XMMV_M128_VEX":                     VPACKUSDW_XMM1_XMMV_M128_VEX,
	"VPACKUSDW_XMM1_XMMV_M128_EVEX":                    VPACKUSDW_XMM1_XMMV_M128_EVEX,
	"VPACKUSDW_XMM1_XMMV_M32bcst128_EVEX":              VPACKUSDW_XMM1_XMMV_M32bcst128_EVEX,
	"VPACKUSDW_YMM1_YMMV_YMM2_VEX":                     VPACKUSDW_YMM1_YMMV_YMM2_VEX,
	"VPACKUSDW_YMM1_YMMV_YMM2_EVEX":                    VPACKUSDW_YMM1_YMMV_YMM2_EVEX,
	"VPACKUSDW_YMM1_YMMV_M256_VEX":                     VPACKUSDW_YMM1_YMMV_M256_VEX,
	"VPACKUSDW_YMM1_YMMV_M256_EVEX":                    VPACKUSDW_YMM1_YMMV_M256_EVEX,
	"VPACKUSDW_YMM1_YMMV_M32bcst256_EVEX":              VPACKUSDW_YMM1_YMMV_M32bcst256_EVEX,
	"VPACKUSDW_ZMM1_ZMMV_ZMM2_EVEX":                    VPACKUSDW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPACKUSDW_ZMM1_ZMMV_M512_EVEX":                    VPACKUSDW_ZMM1_ZMMV_M512_EVEX,
	"VPACKUSDW_ZMM1_ZMMV_M32bcst512_EVEX":              VPACKUSDW_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPACKUSWB_XMM1_XMMV_XMM2_VEX":                     VPACKUSWB_XMM1_XMMV_XMM2_VEX,
	"VPACKUSWB_XMM1_XMMV_XMM2_EVEX":                    VPACKUSWB_XMM1_XMMV_XMM2_EVEX,
	"VPACKUSWB_XMM1_XMMV_M128_VEX":                     VPACKUSWB_XMM1_XMMV_M128_VEX,
	"VPACKUSWB_XMM1_XMMV_M128_EVEX":                    VPACKUSWB_XMM1_XMMV_M128_EVEX,
	"VPACKUSWB_YMM1_YMMV_YMM2_VEX":                     VPACKUSWB_YMM1_YMMV_YMM2_VEX,
	"VPACKUSWB_YMM1_YMMV_YMM2_EVEX":                    VPACKUSWB_YMM1_YMMV_YMM2_EVEX,
	"VPACKUSWB_YMM1_YMMV_M256_VEX":                     VPACKUSWB_YMM1_YMMV_M256_VEX,
	"VPACKUSWB_YMM1_YMMV_M256_EVEX":                    VPACKUSWB_YMM1_YMMV_M256_EVEX,
	"VPACKUSWB_ZMM1_ZMMV_ZMM2_EVEX":                    VPACKUSWB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPACKUSWB_ZMM1_ZMMV_M512_EVEX":                    VPACKUSWB_ZMM1_ZMMV_M512_EVEX,
	"VPADDB_XMM1_XMMV_XMM2_VEX":                        VPADDB_XMM1_XMMV_XMM2_VEX,
	"VPADDB_XMM1_XMMV_XMM2_EVEX":                       VPADDB_XMM1_XMMV_XMM2_EVEX,
	"VPADDB_XMM1_XMMV_M128_VEX":                        VPADDB_XMM1_XMMV_M128_VEX,
	"VPADDB_XMM1_XMMV_M128_EVEX":                       VPADDB_XMM1_XMMV_M128_EVEX,
	"VPADDB_YMM1_YMMV_YMM2_VEX":                        VPADDB_YMM1_YMMV_YMM2_VEX,
	"VPADDB_YMM1_YMMV_YMM2_EVEX":                       VPADDB_YMM1_YMMV_YMM2_EVEX,
	"VPADDB_YMM1_YMMV_M256_VEX":                        VPADDB_YMM1_YMMV_M256_VEX,
	"VPADDB_YMM1_YMMV_M256_EVEX":                       VPADDB_YMM1_YMMV_M256_EVEX,
	"VPADDB_ZMM1_ZMMV_ZMM2_EVEX":                       VPADDB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPADDB_ZMM1_ZMMV_M512_EVEX":                       VPADDB_ZMM1_ZMMV_M512_EVEX,
	"VPADDD_XMM1_XMMV_XMM2_VEX":                        VPADDD_XMM1_XMMV_XMM2_VEX,
	"VPADDD_XMM1_XMMV_XMM2_EVEX":                       VPADDD_XMM1_XMMV_XMM2_EVEX,
	"VPADDD_XMM1_XMMV_M128_VEX":                        VPADDD_XMM1_XMMV_M128_VEX,
	"VPADDD_XMM1_XMMV_M128_EVEX":                       VPADDD_XMM1_XMMV_M128_EVEX,
	"VPADDD_XMM1_XMMV_M32bcst128_EVEX":                 VPADDD_XMM1_XMMV_M32bcst128_EVEX,
	"VPADDD_YMM1_YMMV_YMM2_VEX":                        VPADDD_YMM1_YMMV_YMM2_VEX,
	"VPADDD_YMM1_YMMV_YMM2_EVEX":                       VPADDD_YMM1_YMMV_YMM2_EVEX,
	"VPADDD_YMM1_YMMV_M256_VEX":                        VPADDD_YMM1_YMMV_M256_VEX,
	"VPADDD_YMM1_YMMV_M256_EVEX":                       VPADDD_YMM1_YMMV_M256_EVEX,
	"VPADDD_YMM1_YMMV_M32bcst256_EVEX":                 VPADDD_YMM1_YMMV_M32bcst256_EVEX,
	"VPADDD_ZMM1_ZMMV_ZMM2_EVEX":                       VPADDD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPADDD_ZMM1_ZMMV_M512_EVEX":                       VPADDD_ZMM1_ZMMV_M512_EVEX,
	"VPADDD_ZMM1_ZMMV_M32bcst512_EVEX":                 VPADDD_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPADDQ_XMM1_XMMV_XMM2_VEX":                        VPADDQ_XMM1_XMMV_XMM2_VEX,
	"VPADDQ_XMM1_XMMV_XMM2_EVEX":                       VPADDQ_XMM1_XMMV_XMM2_EVEX,
	"VPADDQ_XMM1_XMMV_M128_VEX":                        VPADDQ_XMM1_XMMV_M128_VEX,
	"VPADDQ_XMM1_XMMV_M128_EVEX":                       VPADDQ_XMM1_XMMV_M128_EVEX,
	"VPADDQ_XMM1_XMMV_M64bcst128_EVEX":                 VPADDQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPADDQ_YMM1_YMMV_YMM2_VEX":                        VPADDQ_YMM1_YMMV_YMM2_VEX,
	"VPADDQ_YMM1_YMMV_YMM2_EVEX":                       VPADDQ_YMM1_YMMV_YMM2_EVEX,
	"VPADDQ_YMM1_YMMV_M256_VEX":                        VPADDQ_YMM1_YMMV_M256_VEX,
	"VPADDQ_YMM1_YMMV_M256_EVEX":                       VPADDQ_YMM1_YMMV_M256_EVEX,
	"VPADDQ_YMM1_YMMV_M64bcst256_EVEX":                 VPADDQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPADDQ_ZMM1_ZMMV_ZMM2_EVEX":                       VPADDQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPADDQ_ZMM1_ZMMV_M512_EVEX":                       VPADDQ_ZMM1_ZMMV_M512_EVEX,
	"VPADDQ_ZMM1_ZMMV_M64bcst512_EVEX":                 VPADDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPADDSB_XMM1_XMMV_XMM2_VEX":                       VPADDSB_XMM1_XMMV_XMM2_VEX,
	"VPADDSB_XMM1_XMMV_XMM2_EVEX":                      VPADDSB_XMM1_XMMV_XMM2_EVEX,
	"VPADDSB_XMM1_XMMV_M128_VEX":                       VPADDSB_XMM1_XMMV_M128_VEX,
	"VPADDSB_XMM1_XMMV_M128_EVEX":                      VPADDSB_XMM1_XMMV_M128_EVEX,
	"VPADDSB_YMM1_YMMV_YMM2_VEX":                       VPADDSB_YMM1_YMMV_YMM2_VEX,
	"VPADDSB_YMM1_YMMV_YMM2_EVEX":                      VPADDSB_YMM1_YMMV_YMM2_EVEX,
	"VPADDSB_YMM1_YMMV_M256_VEX":                       VPADDSB_YMM1_YMMV_M256_VEX,
	"VPADDSB_YMM1_YMMV_M256_EVEX":                      VPADDSB_YMM1_YMMV_M256_EVEX,
	"VPADDSB_ZMM1_ZMMV_ZMM2_EVEX":                      VPADDSB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPADDSB_ZMM1_ZMMV_M512_EVEX":                      VPADDSB_ZMM1_ZMMV_M512_EVEX,
	"VPADDSW_XMM1_XMMV_XMM2_VEX":                       VPADDSW_XMM1_XMMV_XMM2_VEX,
	"VPADDSW_XMM1_XMMV_XMM2_EVEX":                      VPADDSW_XMM1_XMMV_XMM2_EVEX,
	"VPADDSW_XMM1_XMMV_M128_VEX":                       VPADDSW_XMM1_XMMV_M128_VEX,
	"VPADDSW_XMM1_XMMV_M128_EVEX":                      VPADDSW_XMM1_XMMV_M128_EVEX,
	"VPADDSW_YMM1_YMMV_YMM2_VEX":                       VPADDSW_YMM1_YMMV_YMM2_VEX,
	"VPADDSW_YMM1_YMMV_YMM2_EVEX":                      VPADDSW_YMM1_YMMV_YMM2_EVEX,
	"VPADDSW_YMM1_YMMV_M256_VEX":                       VPADDSW_YMM1_YMMV_M256_VEX,
	"VPADDSW_YMM1_YMMV_M256_EVEX":                      VPADDSW_YMM1_YMMV_M256_EVEX,
	"VPADDSW_ZMM1_ZMMV_ZMM2_EVEX":                      VPADDSW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPADDSW_ZMM1_ZMMV_M512_EVEX":                      VPADDSW_ZMM1_ZMMV_M512_EVEX,
	"VPADDUSB_XMM1_XMMV_XMM2_VEX":                      VPADDUSB_XMM1_XMMV_XMM2_VEX,
	"VPADDUSB_XMM1_XMMV_XMM2_EVEX":                     VPADDUSB_XMM1_XMMV_XMM2_EVEX,
	"VPADDUSB_XMM1_XMMV_M128_VEX":                      VPADDUSB_XMM1_XMMV_M128_VEX,
	"VPADDUSB_XMM1_XMMV_M128_EVEX":                     VPADDUSB_XMM1_XMMV_M128_EVEX,
	"VPADDUSB_YMM1_YMMV_YMM2_VEX":                      VPADDUSB_YMM1_YMMV_YMM2_VEX,
	"VPADDUSB_YMM1_YMMV_YMM2_EVEX":                     VPADDUSB_YMM1_YMMV_YMM2_EVEX,
	"VPADDUSB_YMM1_YMMV_M256_VEX":                      VPADDUSB_YMM1_YMMV_M256_VEX,
	"VPADDUSB_YMM1_YMMV_M256_EVEX":                     VPADDUSB_YMM1_YMMV_M256_EVEX,
	"VPADDUSB_ZMM1_ZMMV_ZMM2_EVEX":                     VPADDUSB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPADDUSB_ZMM1_ZMMV_M512_EVEX":                     VPADDUSB_ZMM1_ZMMV_M512_EVEX,
	"VPADDUSW_XMM1_XMMV_XMM2_VEX":                      VPADDUSW_XMM1_XMMV_XMM2_VEX,
	"VPADDUSW_XMM1_XMMV_XMM2_EVEX":                     VPADDUSW_XMM1_XMMV_XMM2_EVEX,
	"VPADDUSW_XMM1_XMMV_M128_VEX":                      VPADDUSW_XMM1_XMMV_M128_VEX,
	"VPADDUSW_XMM1_XMMV_M128_EVEX":                     VPADDUSW_XMM1_XMMV_M128_EVEX,
	"VPADDUSW_YMM1_YMMV_YMM2_VEX":                      VPADDUSW_YMM1_YMMV_YMM2_VEX,
	"VPADDUSW_YMM1_YMMV_YMM2_EVEX":                     VPADDUSW_YMM1_YMMV_YMM2_EVEX,
	"VPADDUSW_YMM1_YMMV_M256_VEX":                      VPADDUSW_YMM1_YMMV_M256_VEX,
	"VPADDUSW_YMM1_YMMV_M256_EVEX":                     VPADDUSW_YMM1_YMMV_M256_EVEX,
	"VPADDUSW_ZMM1_ZMMV_ZMM2_EVEX":                     VPADDUSW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPADDUSW_ZMM1_ZMMV_M512_EVEX":                     VPADDUSW_ZMM1_ZMMV_M512_EVEX,
	"VPADDW_XMM1_XMMV_XMM2_VEX":                        VPADDW_XMM1_XMMV_XMM2_VEX,
	"VPADDW_XMM1_XMMV_XMM2_EVEX":                       VPADDW_XMM1_XMMV_XMM2_EVEX,
	"VPADDW_XMM1_XMMV_M128_VEX":                        VPADDW_XMM1_XMMV_M128_VEX,
	"VPADDW_XMM1_XMMV_M128_EVEX":                       VPADDW_XMM1_XMMV_M128_EVEX,
	"VPADDW_YMM1_YMMV_YMM2_VEX":                        VPADDW_YMM1_YMMV_YMM2_VEX,
	"VPADDW_YMM1_YMMV_YMM2_EVEX":                       VPADDW_YMM1_YMMV_YMM2_EVEX,
	"VPADDW_YMM1_YMMV_M256_VEX":                        VPADDW_YMM1_YMMV_M256_VEX,
	"VPADDW_YMM1_YMMV_M256_EVEX":                       VPADDW_YMM1_YMMV_M256_EVEX,
	"VPADDW_ZMM1_ZMMV_ZMM2_EVEX":                       VPADDW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPADDW_ZMM1_ZMMV_M512_EVEX":                       VPADDW_ZMM1_ZMMV_M512_EVEX,
	"VPALIGNR_XMM1_XMMV_XMM2_Imm8_VEX":                 VPALIGNR_XMM1_XMMV_XMM2_Imm8_VEX,
	"VPALIGNR_XMM1_XMMV_XMM2_Imm8_EVEX":                VPALIGNR_XMM1_XMMV_XMM2_Imm8_EVEX,
	"VPALIGNR_XMM1_XMMV_M128_Imm8_VEX":                 VPALIGNR_XMM1_XMMV_M128_Imm8_VEX,
	"VPALIGNR_XMM1_XMMV_M128_Imm8_EVEX":                VPALIGNR_XMM1_XMMV_M128_Imm8_EVEX,
	"VPALIGNR_YMM1_YMMV_YMM2_Imm8_VEX":                 VPALIGNR_YMM1_YMMV_YMM2_Imm8_VEX,
	"VPALIGNR_YMM1_YMMV_YMM2_Imm8_EVEX":                VPALIGNR_YMM1_YMMV_YMM2_Imm8_EVEX,
	"VPALIGNR_YMM1_YMMV_M256_Imm8_VEX":                 VPALIGNR_YMM1_YMMV_M256_Imm8_VEX,
	"VPALIGNR_YMM1_YMMV_M256_Imm8_EVEX":                VPALIGNR_YMM1_YMMV_M256_Imm8_EVEX,
	"VPALIGNR_ZMM1_ZMMV_ZMM2_Imm8_EVEX":                VPALIGNR_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	"VPALIGNR_ZMM1_ZMMV_M512_Imm8_EVEX":                VPALIGNR_ZMM1_ZMMV_M512_Imm8_EVEX,
	"VPAND_XMM1_XMMV_XMM2_VEX":                         VPAND_XMM1_XMMV_XMM2_VEX,
	"VPAND_XMM1_XMMV_M128_VEX":                         VPAND_XMM1_XMMV_M128_VEX,
	"VPAND_YMM1_YMMV_YMM2_VEX":                         VPAND_YMM1_YMMV_YMM2_VEX,
	"VPAND_YMM1_YMMV_M256_VEX":                         VPAND_YMM1_YMMV_M256_VEX,
	"VPANDD_XMM1_XMMV_XMM2_EVEX":                       VPANDD_XMM1_XMMV_XMM2_EVEX,
	"VPANDD_XMM1_XMMV_M128_EVEX":                       VPANDD_XMM1_XMMV_M128_EVEX,
	"VPANDD_XMM1_XMMV_M32bcst128_EVEX":                 VPANDD_XMM1_XMMV_M32bcst128_EVEX,
	"VPANDD_YMM1_YMMV_YMM2_EVEX":                       VPANDD_YMM1_YMMV_YMM2_EVEX,
	"VPANDD_YMM1_YMMV_M256_EVEX":                       VPANDD_YMM1_YMMV_M256_EVEX,
	"VPANDD_YMM1_YMMV_M32bcst256_EVEX":                 VPANDD_YMM1_YMMV_M32bcst256_EVEX,
	"VPANDD_ZMM1_ZMMV_ZMM2_EVEX":                       VPANDD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPANDD_ZMM1_ZMMV_M512_EVEX":                       VPANDD_ZMM1_ZMMV_M512_EVEX,
	"VPANDD_ZMM1_ZMMV_M32bcst512_EVEX":                 VPANDD_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPANDN_XMM1_XMMV_XMM2_VEX":                        VPANDN_XMM1_XMMV_XMM2_VEX,
	"VPANDN_XMM1_XMMV_M128_VEX":                        VPANDN_XMM1_XMMV_M128_VEX,
	"VPANDN_YMM1_YMMV_YMM2_VEX":                        VPANDN_YMM1_YMMV_YMM2_VEX,
	"VPANDN_YMM1_YMMV_M256_VEX":                        VPANDN_YMM1_YMMV_M256_VEX,
	"VPANDND_XMM1_XMMV_XMM2_EVEX":                      VPANDND_XMM1_XMMV_XMM2_EVEX,
	"VPANDND_XMM1_XMMV_M128_EVEX":                      VPANDND_XMM1_XMMV_M128_EVEX,
	"VPANDND_XMM1_XMMV_M32bcst128_EVEX":                VPANDND_XMM1_XMMV_M32bcst128_EVEX,
	"VPANDND_YMM1_YMMV_YMM2_EVEX":                      VPANDND_YMM1_YMMV_YMM2_EVEX,
	"VPANDND_YMM1_YMMV_M256_EVEX":                      VPANDND_YMM1_YMMV_M256_EVEX,
	"VPANDND_YMM1_YMMV_M32bcst256_EVEX":                VPANDND_YMM1_YMMV_M32bcst256_EVEX,
	"VPANDND_ZMM1_ZMMV_ZMM2_EVEX":                      VPANDND_ZMM1_ZMMV_ZMM2_EVEX,
	"VPANDND_ZMM1_ZMMV_M512_EVEX":                      VPANDND_ZMM1_ZMMV_M512_EVEX,
	"VPANDND_ZMM1_ZMMV_M32bcst512_EVEX":                VPANDND_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPANDNQ_XMM1_XMMV_XMM2_EVEX":                      VPANDNQ_XMM1_XMMV_XMM2_EVEX,
	"VPANDNQ_XMM1_XMMV_M128_EVEX":                      VPANDNQ_XMM1_XMMV_M128_EVEX,
	"VPANDNQ_XMM1_XMMV_M64bcst128_EVEX":                VPANDNQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPANDNQ_YMM1_YMMV_YMM2_EVEX":                      VPANDNQ_YMM1_YMMV_YMM2_EVEX,
	"VPANDNQ_YMM1_YMMV_M256_EVEX":                      VPANDNQ_YMM1_YMMV_M256_EVEX,
	"VPANDNQ_YMM1_YMMV_M64bcst256_EVEX":                VPANDNQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPANDNQ_ZMM1_ZMMV_ZMM2_EVEX":                      VPANDNQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPANDNQ_ZMM1_ZMMV_M512_EVEX":                      VPANDNQ_ZMM1_ZMMV_M512_EVEX,
	"VPANDNQ_ZMM1_ZMMV_M64bcst512_EVEX":                VPANDNQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPANDQ_XMM1_XMMV_XMM2_EVEX":                       VPANDQ_XMM1_XMMV_XMM2_EVEX,
	"VPANDQ_XMM1_XMMV_M128_EVEX":                       VPANDQ_XMM1_XMMV_M128_EVEX,
	"VPANDQ_XMM1_XMMV_M64bcst128_EVEX":                 VPANDQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPANDQ_YMM1_YMMV_YMM2_EVEX":                       VPANDQ_YMM1_YMMV_YMM2_EVEX,
	"VPANDQ_YMM1_YMMV_M256_EVEX":                       VPANDQ_YMM1_YMMV_M256_EVEX,
	"VPANDQ_YMM1_YMMV_M64bcst256_EVEX":                 VPANDQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPANDQ_ZMM1_ZMMV_ZMM2_EVEX":                       VPANDQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPANDQ_ZMM1_ZMMV_M512_EVEX":                       VPANDQ_ZMM1_ZMMV_M512_EVEX,
	"VPANDQ_ZMM1_ZMMV_M64bcst512_EVEX":                 VPANDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPAVGB_XMM1_XMMV_XMM2_VEX":                        VPAVGB_XMM1_XMMV_XMM2_VEX,
	"VPAVGB_XMM1_XMMV_XMM2_EVEX":                       VPAVGB_XMM1_XMMV_XMM2_EVEX,
	"VPAVGB_XMM1_XMMV_M128_VEX":                        VPAVGB_XMM1_XMMV_M128_VEX,
	"VPAVGB_XMM1_XMMV_M128_EVEX":                       VPAVGB_XMM1_XMMV_M128_EVEX,
	"VPAVGB_YMM1_YMMV_YMM2_VEX":                        VPAVGB_YMM1_YMMV_YMM2_VEX,
	"VPAVGB_YMM1_YMMV_YMM2_EVEX":                       VPAVGB_YMM1_YMMV_YMM2_EVEX,
	"VPAVGB_YMM1_YMMV_M256_VEX":                        VPAVGB_YMM1_YMMV_M256_VEX,
	"VPAVGB_YMM1_YMMV_M256_EVEX":                       VPAVGB_YMM1_YMMV_M256_EVEX,
	"VPAVGB_ZMM1_ZMMV_ZMM2_EVEX":                       VPAVGB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPAVGB_ZMM1_ZMMV_M512_EVEX":                       VPAVGB_ZMM1_ZMMV_M512_EVEX,
	"VPAVGW_XMM1_XMMV_XMM2_VEX":                        VPAVGW_XMM1_XMMV_XMM2_VEX,
	"VPAVGW_XMM1_XMMV_XMM2_EVEX":                       VPAVGW_XMM1_XMMV_XMM2_EVEX,
	"VPAVGW_XMM1_XMMV_M128_VEX":                        VPAVGW_XMM1_XMMV_M128_VEX,
	"VPAVGW_XMM1_XMMV_M128_EVEX":                       VPAVGW_XMM1_XMMV_M128_EVEX,
	"VPAVGW_YMM1_YMMV_YMM2_VEX":                        VPAVGW_YMM1_YMMV_YMM2_VEX,
	"VPAVGW_YMM1_YMMV_YMM2_EVEX":                       VPAVGW_YMM1_YMMV_YMM2_EVEX,
	"VPAVGW_YMM1_YMMV_M256_VEX":                        VPAVGW_YMM1_YMMV_M256_VEX,
	"VPAVGW_YMM1_YMMV_M256_EVEX":                       VPAVGW_YMM1_YMMV_M256_EVEX,
	"VPAVGW_ZMM1_ZMMV_ZMM2_EVEX":                       VPAVGW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPAVGW_ZMM1_ZMMV_M512_EVEX":                       VPAVGW_ZMM1_ZMMV_M512_EVEX,
	"VPBLENDVB_XMM1_XMMV_XMM2_XMMIH_VEX":               VPBLENDVB_XMM1_XMMV_XMM2_XMMIH_VEX,
	"VPBLENDVB_XMM1_XMMV_M128_XMMIH_VEX":               VPBLENDVB_XMM1_XMMV_M128_XMMIH_VEX,
	"VPBLENDVB_YMM1_YMMV_YMM2_YMMIH_VEX":               VPBLENDVB_YMM1_YMMV_YMM2_YMMIH_VEX,
	"VPBLENDVB_YMM1_YMMV_M256_YMMIH_VEX":               VPBLENDVB_YMM1_YMMV_M256_YMMIH_VEX,
	"VPBLENDW_XMM1_XMMV_XMM2_Imm8_VEX":                 VPBLENDW_XMM1_XMMV_XMM2_Imm8_VEX,
	"VPBLENDW_XMM1_XMMV_M128_Imm8_VEX":                 VPBLENDW_XMM1_XMMV_M128_Imm8_VEX,
	"VPBLENDW_YMM1_YMMV_YMM2_Imm8_VEX":                 VPBLENDW_YMM1_YMMV_YMM2_Imm8_VEX,
	"VPBLENDW_YMM1_YMMV_M256_Imm8_VEX":                 VPBLENDW_YMM1_YMMV_M256_Imm8_VEX,
	"VPCLMULQDQ_XMM1_XMMV_XMM2_Imm8_VEX":               VPCLMULQDQ_XMM1_XMMV_XMM2_Imm8_VEX,
	"VPCLMULQDQ_XMM1_XMMV_XMM2_Imm8_EVEX":              VPCLMULQDQ_XMM1_XMMV_XMM2_Imm8_EVEX,
	"VPCLMULQDQ_XMM1_XMMV_M128_Imm8_VEX":               VPCLMULQDQ_XMM1_XMMV_M128_Imm8_VEX,
	"VPCLMULQDQ_XMM1_XMMV_M128_Imm8_EVEX":              VPCLMULQDQ_XMM1_XMMV_M128_Imm8_EVEX,
	"VPCLMULQDQ_YMM1_YMMV_YMM2_Imm8_VEX":               VPCLMULQDQ_YMM1_YMMV_YMM2_Imm8_VEX,
	"VPCLMULQDQ_YMM1_YMMV_YMM2_Imm8_EVEX":              VPCLMULQDQ_YMM1_YMMV_YMM2_Imm8_EVEX,
	"VPCLMULQDQ_YMM1_YMMV_M256_Imm8_VEX":               VPCLMULQDQ_YMM1_YMMV_M256_Imm8_VEX,
	"VPCLMULQDQ_YMM1_YMMV_M256_Imm8_EVEX":              VPCLMULQDQ_YMM1_YMMV_M256_Imm8_EVEX,
	"VPCLMULQDQ_ZMM1_ZMMV_ZMM2_Imm8_EVEX":              VPCLMULQDQ_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	"VPCLMULQDQ_ZMM1_ZMMV_M512_Imm8_EVEX":              VPCLMULQDQ_ZMM1_ZMMV_M512_Imm8_EVEX,
	"VPCMPEQB_K1_XMMV_XMM2_EVEX":                       VPCMPEQB_K1_XMMV_XMM2_EVEX,
	"VPCMPEQB_K1_XMMV_M128_EVEX":                       VPCMPEQB_K1_XMMV_M128_EVEX,
	"VPCMPEQB_K1_YMMV_YMM2_EVEX":                       VPCMPEQB_K1_YMMV_YMM2_EVEX,
	"VPCMPEQB_K1_YMMV_M256_EVEX":                       VPCMPEQB_K1_YMMV_M256_EVEX,
	"VPCMPEQB_K1_ZMMV_ZMM2_EVEX":                       VPCMPEQB_K1_ZMMV_ZMM2_EVEX,
	"VPCMPEQB_K1_ZMMV_M512_EVEX":                       VPCMPEQB_K1_ZMMV_M512_EVEX,
	"VPCMPEQB_XMM1_XMMV_XMM2_VEX":                      VPCMPEQB_XMM1_XMMV_XMM2_VEX,
	"VPCMPEQB_XMM1_XMMV_M128_VEX":                      VPCMPEQB_XMM1_XMMV_M128_VEX,
	"VPCMPEQB_YMM1_YMMV_YMM2_VEX":                      VPCMPEQB_YMM1_YMMV_YMM2_VEX,
	"VPCMPEQB_YMM1_YMMV_M256_VEX":                      VPCMPEQB_YMM1_YMMV_M256_VEX,
	"VPCMPEQD_K1_XMMV_XMM2_EVEX":                       VPCMPEQD_K1_XMMV_XMM2_EVEX,
	"VPCMPEQD_K1_XMMV_M128_EVEX":                       VPCMPEQD_K1_XMMV_M128_EVEX,
	"VPCMPEQD_K1_XMMV_M32bcst128_EVEX":                 VPCMPEQD_K1_XMMV_M32bcst128_EVEX,
	"VPCMPEQD_K1_YMMV_YMM2_EVEX":                       VPCMPEQD_K1_YMMV_YMM2_EVEX,
	"VPCMPEQD_K1_YMMV_M256_EVEX":                       VPCMPEQD_K1_YMMV_M256_EVEX,
	"VPCMPEQD_K1_YMMV_M32bcst256_EVEX":                 VPCMPEQD_K1_YMMV_M32bcst256_EVEX,
	"VPCMPEQD_K1_ZMMV_ZMM2_EVEX":                       VPCMPEQD_K1_ZMMV_ZMM2_EVEX,
	"VPCMPEQD_K1_ZMMV_M512_EVEX":                       VPCMPEQD_K1_ZMMV_M512_EVEX,
	"VPCMPEQD_K1_ZMMV_M32bcst512_EVEX":                 VPCMPEQD_K1_ZMMV_M32bcst512_EVEX,
	"VPCMPEQD_XMM1_XMMV_XMM2_VEX":                      VPCMPEQD_XMM1_XMMV_XMM2_VEX,
	"VPCMPEQD_XMM1_XMMV_M128_VEX":                      VPCMPEQD_XMM1_XMMV_M128_VEX,
	"VPCMPEQD_YMM1_YMMV_YMM2_VEX":                      VPCMPEQD_YMM1_YMMV_YMM2_VEX,
	"VPCMPEQD_YMM1_YMMV_M256_VEX":                      VPCMPEQD_YMM1_YMMV_M256_VEX,
	"VPCMPEQQ_K1_XMMV_XMM2_EVEX":                       VPCMPEQQ_K1_XMMV_XMM2_EVEX,
	"VPCMPEQQ_K1_XMMV_M128_EVEX":                       VPCMPEQQ_K1_XMMV_M128_EVEX,
	"VPCMPEQQ_K1_XMMV_M64bcst128_EVEX":                 VPCMPEQQ_K1_XMMV_M64bcst128_EVEX,
	"VPCMPEQQ_K1_YMMV_YMM2_EVEX":                       VPCMPEQQ_K1_YMMV_YMM2_EVEX,
	"VPCMPEQQ_K1_YMMV_M256_EVEX":                       VPCMPEQQ_K1_YMMV_M256_EVEX,
	"VPCMPEQQ_K1_YMMV_M64bcst256_EVEX":                 VPCMPEQQ_K1_YMMV_M64bcst256_EVEX,
	"VPCMPEQQ_K1_ZMMV_ZMM2_EVEX":                       VPCMPEQQ_K1_ZMMV_ZMM2_EVEX,
	"VPCMPEQQ_K1_ZMMV_M512_EVEX":                       VPCMPEQQ_K1_ZMMV_M512_EVEX,
	"VPCMPEQQ_K1_ZMMV_M64bcst512_EVEX":                 VPCMPEQQ_K1_ZMMV_M64bcst512_EVEX,
	"VPCMPEQQ_XMM1_XMMV_XMM2_VEX":                      VPCMPEQQ_XMM1_XMMV_XMM2_VEX,
	"VPCMPEQQ_XMM1_XMMV_M128_VEX":                      VPCMPEQQ_XMM1_XMMV_M128_VEX,
	"VPCMPEQQ_YMM1_YMMV_YMM2_VEX":                      VPCMPEQQ_YMM1_YMMV_YMM2_VEX,
	"VPCMPEQQ_YMM1_YMMV_M256_VEX":                      VPCMPEQQ_YMM1_YMMV_M256_VEX,
	"VPCMPEQW_K1_XMMV_XMM2_EVEX":                       VPCMPEQW_K1_XMMV_XMM2_EVEX,
	"VPCMPEQW_K1_XMMV_M128_EVEX":                       VPCMPEQW_K1_XMMV_M128_EVEX,
	"VPCMPEQW_K1_YMMV_YMM2_EVEX":                       VPCMPEQW_K1_YMMV_YMM2_EVEX,
	"VPCMPEQW_K1_YMMV_M256_EVEX":                       VPCMPEQW_K1_YMMV_M256_EVEX,
	"VPCMPEQW_K1_ZMMV_ZMM2_EVEX":                       VPCMPEQW_K1_ZMMV_ZMM2_EVEX,
	"VPCMPEQW_K1_ZMMV_M512_EVEX":                       VPCMPEQW_K1_ZMMV_M512_EVEX,
	"VPCMPEQW_XMM1_XMMV_XMM2_VEX":                      VPCMPEQW_XMM1_XMMV_XMM2_VEX,
	"VPCMPEQW_XMM1_XMMV_M128_VEX":                      VPCMPEQW_XMM1_XMMV_M128_VEX,
	"VPCMPEQW_YMM1_YMMV_YMM2_VEX":                      VPCMPEQW_YMM1_YMMV_YMM2_VEX,
	"VPCMPEQW_YMM1_YMMV_M256_VEX":                      VPCMPEQW_YMM1_YMMV_M256_VEX,
	"VPCMPESTRI_XMM1_XMM2_Imm8_VEX":                    VPCMPESTRI_XMM1_XMM2_Imm8_VEX,
	"VPCMPESTRI_XMM1_M128_Imm8_VEX":                    VPCMPESTRI_XMM1_M128_Imm8_VEX,
	"VPCMPESTRM_XMM1_XMM2_Imm8_VEX":                    VPCMPESTRM_XMM1_XMM2_Imm8_VEX,
	"VPCMPESTRM_XMM1_M128_Imm8_VEX":                    VPCMPESTRM_XMM1_M128_Imm8_VEX,
	"VPCMPGTB_K1_XMMV_XMM2_EVEX":                       VPCMPGTB_K1_XMMV_XMM2_EVEX,
	"VPCMPGTB_K1_XMMV_M128_EVEX":                       VPCMPGTB_K1_XMMV_M128_EVEX,
	"VPCMPGTB_K1_YMMV_YMM2_EVEX":                       VPCMPGTB_K1_YMMV_YMM2_EVEX,
	"VPCMPGTB_K1_YMMV_M256_EVEX":                       VPCMPGTB_K1_YMMV_M256_EVEX,
	"VPCMPGTB_K1_ZMMV_ZMM2_EVEX":                       VPCMPGTB_K1_ZMMV_ZMM2_EVEX,
	"VPCMPGTB_K1_ZMMV_M512_EVEX":                       VPCMPGTB_K1_ZMMV_M512_EVEX,
	"VPCMPGTB_XMM1_XMMV_XMM2_VEX":                      VPCMPGTB_XMM1_XMMV_XMM2_VEX,
	"VPCMPGTB_XMM1_XMMV_M128_VEX":                      VPCMPGTB_XMM1_XMMV_M128_VEX,
	"VPCMPGTB_YMM1_YMMV_YMM2_VEX":                      VPCMPGTB_YMM1_YMMV_YMM2_VEX,
	"VPCMPGTB_YMM1_YMMV_M256_VEX":                      VPCMPGTB_YMM1_YMMV_M256_VEX,
	"VPCMPGTD_K1_XMMV_XMM2_EVEX":                       VPCMPGTD_K1_XMMV_XMM2_EVEX,
	"VPCMPGTD_K1_XMMV_M128_EVEX":                       VPCMPGTD_K1_XMMV_M128_EVEX,
	"VPCMPGTD_K1_XMMV_M32bcst128_EVEX":                 VPCMPGTD_K1_XMMV_M32bcst128_EVEX,
	"VPCMPGTD_K1_YMMV_YMM2_EVEX":                       VPCMPGTD_K1_YMMV_YMM2_EVEX,
	"VPCMPGTD_K1_YMMV_M256_EVEX":                       VPCMPGTD_K1_YMMV_M256_EVEX,
	"VPCMPGTD_K1_YMMV_M32bcst256_EVEX":                 VPCMPGTD_K1_YMMV_M32bcst256_EVEX,
	"VPCMPGTD_K1_ZMMV_ZMM2_EVEX":                       VPCMPGTD_K1_ZMMV_ZMM2_EVEX,
	"VPCMPGTD_K1_ZMMV_M512_EVEX":                       VPCMPGTD_K1_ZMMV_M512_EVEX,
	"VPCMPGTD_K1_ZMMV_M32bcst512_EVEX":                 VPCMPGTD_K1_ZMMV_M32bcst512_EVEX,
	"VPCMPGTD_XMM1_XMMV_XMM2_VEX":                      VPCMPGTD_XMM1_XMMV_XMM2_VEX,
	"VPCMPGTD_XMM1_XMMV_M128_VEX":                      VPCMPGTD_XMM1_XMMV_M128_VEX,
	"VPCMPGTD_YMM1_YMMV_YMM2_VEX":                      VPCMPGTD_YMM1_YMMV_YMM2_VEX,
	"VPCMPGTD_YMM1_YMMV_M256_VEX":                      VPCMPGTD_YMM1_YMMV_M256_VEX,
	"VPCMPGTQ_K1_XMMV_XMM2_EVEX":                       VPCMPGTQ_K1_XMMV_XMM2_EVEX,
	"VPCMPGTQ_K1_XMMV_M128_EVEX":                       VPCMPGTQ_K1_XMMV_M128_EVEX,
	"VPCMPGTQ_K1_XMMV_M64bcst128_EVEX":                 VPCMPGTQ_K1_XMMV_M64bcst128_EVEX,
	"VPCMPGTQ_K1_YMMV_YMM2_EVEX":                       VPCMPGTQ_K1_YMMV_YMM2_EVEX,
	"VPCMPGTQ_K1_YMMV_M256_EVEX":                       VPCMPGTQ_K1_YMMV_M256_EVEX,
	"VPCMPGTQ_K1_YMMV_M64bcst256_EVEX":                 VPCMPGTQ_K1_YMMV_M64bcst256_EVEX,
	"VPCMPGTQ_K1_ZMMV_ZMM2_EVEX":                       VPCMPGTQ_K1_ZMMV_ZMM2_EVEX,
	"VPCMPGTQ_K1_ZMMV_M512_EVEX":                       VPCMPGTQ_K1_ZMMV_M512_EVEX,
	"VPCMPGTQ_K1_ZMMV_M64bcst512_EVEX":                 VPCMPGTQ_K1_ZMMV_M64bcst512_EVEX,
	"VPCMPGTQ_XMM1_XMMV_XMM2_VEX":                      VPCMPGTQ_XMM1_XMMV_XMM2_VEX,
	"VPCMPGTQ_XMM1_XMMV_M128_VEX":                      VPCMPGTQ_XMM1_XMMV_M128_VEX,
	"VPCMPGTQ_YMM1_YMMV_YMM2_VEX":                      VPCMPGTQ_YMM1_YMMV_YMM2_VEX,
	"VPCMPGTQ_YMM1_YMMV_M256_VEX":                      VPCMPGTQ_YMM1_YMMV_M256_VEX,
	"VPCMPGTW_K1_XMMV_XMM2_EVEX":                       VPCMPGTW_K1_XMMV_XMM2_EVEX,
	"VPCMPGTW_K1_XMMV_M128_EVEX":                       VPCMPGTW_K1_XMMV_M128_EVEX,
	"VPCMPGTW_K1_YMMV_YMM2_EVEX":                       VPCMPGTW_K1_YMMV_YMM2_EVEX,
	"VPCMPGTW_K1_YMMV_M256_EVEX":                       VPCMPGTW_K1_YMMV_M256_EVEX,
	"VPCMPGTW_K1_ZMMV_ZMM2_EVEX":                       VPCMPGTW_K1_ZMMV_ZMM2_EVEX,
	"VPCMPGTW_K1_ZMMV_M512_EVEX":                       VPCMPGTW_K1_ZMMV_M512_EVEX,
	"VPCMPGTW_XMM1_XMMV_XMM2_VEX":                      VPCMPGTW_XMM1_XMMV_XMM2_VEX,
	"VPCMPGTW_XMM1_XMMV_M128_VEX":                      VPCMPGTW_XMM1_XMMV_M128_VEX,
	"VPCMPGTW_YMM1_YMMV_YMM2_VEX":                      VPCMPGTW_YMM1_YMMV_YMM2_VEX,
	"VPCMPGTW_YMM1_YMMV_M256_VEX":                      VPCMPGTW_YMM1_YMMV_M256_VEX,
	"VPCMPISTRI_XMM1_XMM2_Imm8_VEX":                    VPCMPISTRI_XMM1_XMM2_Imm8_VEX,
	"VPCMPISTRI_XMM1_M128_Imm8_VEX":                    VPCMPISTRI_XMM1_M128_Imm8_VEX,
	"VPCMPISTRM_XMM1_XMM2_Imm8_VEX":                    VPCMPISTRM_XMM1_XMM2_Imm8_VEX,
	"VPCMPISTRM_XMM1_M128_Imm8_VEX":                    VPCMPISTRM_XMM1_M128_Imm8_VEX,
	"VPEXTRB_Rmr32_XMM1_Imm8_VEX":                      VPEXTRB_Rmr32_XMM1_Imm8_VEX,
	"VPEXTRB_Rmr32_XMM1_Imm8_EVEX":                     VPEXTRB_Rmr32_XMM1_Imm8_EVEX,
	"VPEXTRB_M8_XMM1_Imm8_VEX":                         VPEXTRB_M8_XMM1_Imm8_VEX,
	"VPEXTRB_M8_XMM1_Imm8_EVEX":                        VPEXTRB_M8_XMM1_Imm8_EVEX,
	"VPEXTRD_Rmr32_XMM1_Imm8_VEX":                      VPEXTRD_Rmr32_XMM1_Imm8_VEX,
	"VPEXTRD_Rmr32_XMM1_Imm8_EVEX":                     VPEXTRD_Rmr32_XMM1_Imm8_EVEX,
	"VPEXTRD_M32_XMM1_Imm8_VEX":                        VPEXTRD_M32_XMM1_Imm8_VEX,
	"VPEXTRD_M32_XMM1_Imm8_EVEX":                       VPEXTRD_M32_XMM1_Imm8_EVEX,
	"VPEXTRQ_Rmr64_XMM1_Imm8_VEX":                      VPEXTRQ_Rmr64_XMM1_Imm8_VEX,
	"VPEXTRQ_Rmr64_XMM1_Imm8_EVEX":                     VPEXTRQ_Rmr64_XMM1_Imm8_EVEX,
	"VPEXTRQ_M64_XMM1_Imm8_VEX":                        VPEXTRQ_M64_XMM1_Imm8_VEX,
	"VPEXTRQ_M64_XMM1_Imm8_EVEX":                       VPEXTRQ_M64_XMM1_Imm8_EVEX,
	"VPEXTRW_R32_XMM2_Imm8_VEX":                        VPEXTRW_R32_XMM2_Imm8_VEX,
	"VPEXTRW_R32_XMM2_Imm8_EVEX":                       VPEXTRW_R32_XMM2_Imm8_EVEX,
	"VPEXTRW_Rmr32_XMM1_Imm8_VEX":                      VPEXTRW_Rmr32_XMM1_Imm8_VEX,
	"VPEXTRW_Rmr32_XMM1_Imm8_EVEX":                     VPEXTRW_Rmr32_XMM1_Imm8_EVEX,
	"VPEXTRW_M16_XMM1_Imm8_VEX":                        VPEXTRW_M16_XMM1_Imm8_VEX,
	"VPEXTRW_M16_XMM1_Imm8_EVEX":                       VPEXTRW_M16_XMM1_Imm8_EVEX,
	"VPHADDD_XMM1_XMMV_XMM2_VEX":                       VPHADDD_XMM1_XMMV_XMM2_VEX,
	"VPHADDD_XMM1_XMMV_M128_VEX":                       VPHADDD_XMM1_XMMV_M128_VEX,
	"VPHADDD_YMM1_YMMV_YMM2_VEX":                       VPHADDD_YMM1_YMMV_YMM2_VEX,
	"VPHADDD_YMM1_YMMV_M256_VEX":                       VPHADDD_YMM1_YMMV_M256_VEX,
	"VPHADDSW_XMM1_XMMV_XMM2_VEX":                      VPHADDSW_XMM1_XMMV_XMM2_VEX,
	"VPHADDSW_XMM1_XMMV_M128_VEX":                      VPHADDSW_XMM1_XMMV_M128_VEX,
	"VPHADDSW_YMM1_YMMV_YMM2_VEX":                      VPHADDSW_YMM1_YMMV_YMM2_VEX,
	"VPHADDSW_YMM1_YMMV_M256_VEX":                      VPHADDSW_YMM1_YMMV_M256_VEX,
	"VPHADDW_XMM1_XMMV_XMM2_VEX":                       VPHADDW_XMM1_XMMV_XMM2_VEX,
	"VPHADDW_XMM1_XMMV_M128_VEX":                       VPHADDW_XMM1_XMMV_M128_VEX,
	"VPHADDW_YMM1_YMMV_YMM2_VEX":                       VPHADDW_YMM1_YMMV_YMM2_VEX,
	"VPHADDW_YMM1_YMMV_M256_VEX":                       VPHADDW_YMM1_YMMV_M256_VEX,
	"VPHMINPOSUW_XMM1_XMM2_VEX":                        VPHMINPOSUW_XMM1_XMM2_VEX,
	"VPHMINPOSUW_XMM1_M128_VEX":                        VPHMINPOSUW_XMM1_M128_VEX,
	"VPHSUBD_XMM1_XMMV_XMM2_VEX":                       VPHSUBD_XMM1_XMMV_XMM2_VEX,
	"VPHSUBD_XMM1_XMMV_M128_VEX":                       VPHSUBD_XMM1_XMMV_M128_VEX,
	"VPHSUBD_YMM1_YMMV_YMM2_VEX":                       VPHSUBD_YMM1_YMMV_YMM2_VEX,
	"VPHSUBD_YMM1_YMMV_M256_VEX":                       VPHSUBD_YMM1_YMMV_M256_VEX,
	"VPHSUBSW_XMM1_XMMV_XMM2_VEX":                      VPHSUBSW_XMM1_XMMV_XMM2_VEX,
	"VPHSUBSW_XMM1_XMMV_M128_VEX":                      VPHSUBSW_XMM1_XMMV_M128_VEX,
	"VPHSUBSW_YMM1_YMMV_YMM2_VEX":                      VPHSUBSW_YMM1_YMMV_YMM2_VEX,
	"VPHSUBSW_YMM1_YMMV_M256_VEX":                      VPHSUBSW_YMM1_YMMV_M256_VEX,
	"VPHSUBW_XMM1_XMMV_XMM2_VEX":                       VPHSUBW_XMM1_XMMV_XMM2_VEX,
	"VPHSUBW_XMM1_XMMV_M128_VEX":                       VPHSUBW_XMM1_XMMV_M128_VEX,
	"VPHSUBW_YMM1_YMMV_YMM2_VEX":                       VPHSUBW_YMM1_YMMV_YMM2_VEX,
	"VPHSUBW_YMM1_YMMV_M256_VEX":                       VPHSUBW_YMM1_YMMV_M256_VEX,
	"VPINSRB_XMM1_XMMV_Rmr32_Imm8_VEX":                 VPINSRB_XMM1_XMMV_Rmr32_Imm8_VEX,
	"VPINSRB_XMM1_XMMV_Rmr32_Imm8_EVEX":                VPINSRB_XMM1_XMMV_Rmr32_Imm8_EVEX,
	"VPINSRB_XMM1_XMMV_M8_Imm8_VEX":                    VPINSRB_XMM1_XMMV_M8_Imm8_VEX,
	"VPINSRB_XMM1_XMMV_M8_Imm8_EVEX":                   VPINSRB_XMM1_XMMV_M8_Imm8_EVEX,
	"VPINSRD_XMM1_XMMV_Rmr32_Imm8_VEX":                 VPINSRD_XMM1_XMMV_Rmr32_Imm8_VEX,
	"VPINSRD_XMM1_XMMV_Rmr32_Imm8_EVEX":                VPINSRD_XMM1_XMMV_Rmr32_Imm8_EVEX,
	"VPINSRD_XMM1_XMMV_M32_Imm8_VEX":                   VPINSRD_XMM1_XMMV_M32_Imm8_VEX,
	"VPINSRD_XMM1_XMMV_M32_Imm8_EVEX":                  VPINSRD_XMM1_XMMV_M32_Imm8_EVEX,
	"VPINSRQ_XMM1_XMMV_Rmr64_Imm8_VEX":                 VPINSRQ_XMM1_XMMV_Rmr64_Imm8_VEX,
	"VPINSRQ_XMM1_XMMV_Rmr64_Imm8_EVEX":                VPINSRQ_XMM1_XMMV_Rmr64_Imm8_EVEX,
	"VPINSRQ_XMM1_XMMV_M64_Imm8_VEX":                   VPINSRQ_XMM1_XMMV_M64_Imm8_VEX,
	"VPINSRQ_XMM1_XMMV_M64_Imm8_EVEX":                  VPINSRQ_XMM1_XMMV_M64_Imm8_EVEX,
	"VPINSRW_XMM1_XMMV_Rmr32_Imm8_VEX":                 VPINSRW_XMM1_XMMV_Rmr32_Imm8_VEX,
	"VPINSRW_XMM1_XMMV_Rmr32_Imm8_EVEX":                VPINSRW_XMM1_XMMV_Rmr32_Imm8_EVEX,
	"VPINSRW_XMM1_XMMV_M16_Imm8_VEX":                   VPINSRW_XMM1_XMMV_M16_Imm8_VEX,
	"VPINSRW_XMM1_XMMV_M16_Imm8_EVEX":                  VPINSRW_XMM1_XMMV_M16_Imm8_EVEX,
	"VPMADDUBSW_XMM1_XMMV_XMM2_VEX":                    VPMADDUBSW_XMM1_XMMV_XMM2_VEX,
	"VPMADDUBSW_XMM1_XMMV_XMM2_EVEX":                   VPMADDUBSW_XMM1_XMMV_XMM2_EVEX,
	"VPMADDUBSW_XMM1_XMMV_M128_VEX":                    VPMADDUBSW_XMM1_XMMV_M128_VEX,
	"VPMADDUBSW_XMM1_XMMV_M128_EVEX":                   VPMADDUBSW_XMM1_XMMV_M128_EVEX,
	"VPMADDUBSW_YMM1_YMMV_YMM2_VEX":                    VPMADDUBSW_YMM1_YMMV_YMM2_VEX,
	"VPMADDUBSW_YMM1_YMMV_YMM2_EVEX":                   VPMADDUBSW_YMM1_YMMV_YMM2_EVEX,
	"VPMADDUBSW_YMM1_YMMV_M256_VEX":                    VPMADDUBSW_YMM1_YMMV_M256_VEX,
	"VPMADDUBSW_YMM1_YMMV_M256_EVEX":                   VPMADDUBSW_YMM1_YMMV_M256_EVEX,
	"VPMADDUBSW_ZMM1_ZMMV_ZMM2_EVEX":                   VPMADDUBSW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMADDUBSW_ZMM1_ZMMV_M512_EVEX":                   VPMADDUBSW_ZMM1_ZMMV_M512_EVEX,
	"VPMADDWD_XMM1_XMMV_XMM2_VEX":                      VPMADDWD_XMM1_XMMV_XMM2_VEX,
	"VPMADDWD_XMM1_XMMV_XMM2_EVEX":                     VPMADDWD_XMM1_XMMV_XMM2_EVEX,
	"VPMADDWD_XMM1_XMMV_M128_VEX":                      VPMADDWD_XMM1_XMMV_M128_VEX,
	"VPMADDWD_XMM1_XMMV_M128_EVEX":                     VPMADDWD_XMM1_XMMV_M128_EVEX,
	"VPMADDWD_YMM1_YMMV_YMM2_VEX":                      VPMADDWD_YMM1_YMMV_YMM2_VEX,
	"VPMADDWD_YMM1_YMMV_YMM2_EVEX":                     VPMADDWD_YMM1_YMMV_YMM2_EVEX,
	"VPMADDWD_YMM1_YMMV_M256_VEX":                      VPMADDWD_YMM1_YMMV_M256_VEX,
	"VPMADDWD_YMM1_YMMV_M256_EVEX":                     VPMADDWD_YMM1_YMMV_M256_EVEX,
	"VPMADDWD_ZMM1_ZMMV_ZMM2_EVEX":                     VPMADDWD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMADDWD_ZMM1_ZMMV_M512_EVEX":                     VPMADDWD_ZMM1_ZMMV_M512_EVEX,
	"VPMAXSB_XMM1_XMMV_XMM2_VEX":                       VPMAXSB_XMM1_XMMV_XMM2_VEX,
	"VPMAXSB_XMM1_XMMV_XMM2_EVEX":                      VPMAXSB_XMM1_XMMV_XMM2_EVEX,
	"VPMAXSB_XMM1_XMMV_M128_VEX":                       VPMAXSB_XMM1_XMMV_M128_VEX,
	"VPMAXSB_XMM1_XMMV_M128_EVEX":                      VPMAXSB_XMM1_XMMV_M128_EVEX,
	"VPMAXSB_YMM1_YMMV_YMM2_VEX":                       VPMAXSB_YMM1_YMMV_YMM2_VEX,
	"VPMAXSB_YMM1_YMMV_YMM2_EVEX":                      VPMAXSB_YMM1_YMMV_YMM2_EVEX,
	"VPMAXSB_YMM1_YMMV_M256_VEX":                       VPMAXSB_YMM1_YMMV_M256_VEX,
	"VPMAXSB_YMM1_YMMV_M256_EVEX":                      VPMAXSB_YMM1_YMMV_M256_EVEX,
	"VPMAXSB_ZMM1_ZMMV_ZMM2_EVEX":                      VPMAXSB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMAXSB_ZMM1_ZMMV_M512_EVEX":                      VPMAXSB_ZMM1_ZMMV_M512_EVEX,
	"VPMAXSD_XMM1_XMMV_XMM2_VEX":                       VPMAXSD_XMM1_XMMV_XMM2_VEX,
	"VPMAXSD_XMM1_XMMV_XMM2_EVEX":                      VPMAXSD_XMM1_XMMV_XMM2_EVEX,
	"VPMAXSD_XMM1_XMMV_M128_VEX":                       VPMAXSD_XMM1_XMMV_M128_VEX,
	"VPMAXSD_XMM1_XMMV_M128_EVEX":                      VPMAXSD_XMM1_XMMV_M128_EVEX,
	"VPMAXSD_XMM1_XMMV_M32bcst128_EVEX":                VPMAXSD_XMM1_XMMV_M32bcst128_EVEX,
	"VPMAXSD_YMM1_YMMV_YMM2_VEX":                       VPMAXSD_YMM1_YMMV_YMM2_VEX,
	"VPMAXSD_YMM1_YMMV_YMM2_EVEX":                      VPMAXSD_YMM1_YMMV_YMM2_EVEX,
	"VPMAXSD_YMM1_YMMV_M256_VEX":                       VPMAXSD_YMM1_YMMV_M256_VEX,
	"VPMAXSD_YMM1_YMMV_M256_EVEX":                      VPMAXSD_YMM1_YMMV_M256_EVEX,
	"VPMAXSD_YMM1_YMMV_M32bcst256_EVEX":                VPMAXSD_YMM1_YMMV_M32bcst256_EVEX,
	"VPMAXSD_ZMM1_ZMMV_ZMM2_EVEX":                      VPMAXSD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMAXSD_ZMM1_ZMMV_M512_EVEX":                      VPMAXSD_ZMM1_ZMMV_M512_EVEX,
	"VPMAXSD_ZMM1_ZMMV_M32bcst512_EVEX":                VPMAXSD_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPMAXSQ_XMM1_XMMV_XMM2_EVEX":                      VPMAXSQ_XMM1_XMMV_XMM2_EVEX,
	"VPMAXSQ_XMM1_XMMV_M128_EVEX":                      VPMAXSQ_XMM1_XMMV_M128_EVEX,
	"VPMAXSQ_XMM1_XMMV_M64bcst128_EVEX":                VPMAXSQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPMAXSQ_YMM1_YMMV_YMM2_EVEX":                      VPMAXSQ_YMM1_YMMV_YMM2_EVEX,
	"VPMAXSQ_YMM1_YMMV_M256_EVEX":                      VPMAXSQ_YMM1_YMMV_M256_EVEX,
	"VPMAXSQ_YMM1_YMMV_M64bcst256_EVEX":                VPMAXSQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPMAXSQ_ZMM1_ZMMV_ZMM2_EVEX":                      VPMAXSQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMAXSQ_ZMM1_ZMMV_M512_EVEX":                      VPMAXSQ_ZMM1_ZMMV_M512_EVEX,
	"VPMAXSQ_ZMM1_ZMMV_M64bcst512_EVEX":                VPMAXSQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPMAXSW_XMM1_XMMV_XMM2_VEX":                       VPMAXSW_XMM1_XMMV_XMM2_VEX,
	"VPMAXSW_XMM1_XMMV_XMM2_EVEX":                      VPMAXSW_XMM1_XMMV_XMM2_EVEX,
	"VPMAXSW_XMM1_XMMV_M128_VEX":                       VPMAXSW_XMM1_XMMV_M128_VEX,
	"VPMAXSW_XMM1_XMMV_M128_EVEX":                      VPMAXSW_XMM1_XMMV_M128_EVEX,
	"VPMAXSW_YMM1_YMMV_YMM2_VEX":                       VPMAXSW_YMM1_YMMV_YMM2_VEX,
	"VPMAXSW_YMM1_YMMV_YMM2_EVEX":                      VPMAXSW_YMM1_YMMV_YMM2_EVEX,
	"VPMAXSW_YMM1_YMMV_M256_VEX":                       VPMAXSW_YMM1_YMMV_M256_VEX,
	"VPMAXSW_YMM1_YMMV_M256_EVEX":                      VPMAXSW_YMM1_YMMV_M256_EVEX,
	"VPMAXSW_ZMM1_ZMMV_ZMM2_EVEX":                      VPMAXSW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMAXSW_ZMM1_ZMMV_M512_EVEX":                      VPMAXSW_ZMM1_ZMMV_M512_EVEX,
	"VPMAXUB_XMM1_XMMV_XMM2_VEX":                       VPMAXUB_XMM1_XMMV_XMM2_VEX,
	"VPMAXUB_XMM1_XMMV_XMM2_EVEX":                      VPMAXUB_XMM1_XMMV_XMM2_EVEX,
	"VPMAXUB_XMM1_XMMV_M128_VEX":                       VPMAXUB_XMM1_XMMV_M128_VEX,
	"VPMAXUB_XMM1_XMMV_M128_EVEX":                      VPMAXUB_XMM1_XMMV_M128_EVEX,
	"VPMAXUB_YMM1_YMMV_YMM2_VEX":                       VPMAXUB_YMM1_YMMV_YMM2_VEX,
	"VPMAXUB_YMM1_YMMV_YMM2_EVEX":                      VPMAXUB_YMM1_YMMV_YMM2_EVEX,
	"VPMAXUB_YMM1_YMMV_M256_VEX":                       VPMAXUB_YMM1_YMMV_M256_VEX,
	"VPMAXUB_YMM1_YMMV_M256_EVEX":                      VPMAXUB_YMM1_YMMV_M256_EVEX,
	"VPMAXUB_ZMM1_ZMMV_ZMM2_EVEX":                      VPMAXUB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMAXUB_ZMM1_ZMMV_M512_EVEX":                      VPMAXUB_ZMM1_ZMMV_M512_EVEX,
	"VPMAXUD_XMM1_XMMV_XMM2_VEX":                       VPMAXUD_XMM1_XMMV_XMM2_VEX,
	"VPMAXUD_XMM1_XMMV_XMM2_EVEX":                      VPMAXUD_XMM1_XMMV_XMM2_EVEX,
	"VPMAXUD_XMM1_XMMV_M128_VEX":                       VPMAXUD_XMM1_XMMV_M128_VEX,
	"VPMAXUD_XMM1_XMMV_M128_EVEX":                      VPMAXUD_XMM1_XMMV_M128_EVEX,
	"VPMAXUD_XMM1_XMMV_M32bcst128_EVEX":                VPMAXUD_XMM1_XMMV_M32bcst128_EVEX,
	"VPMAXUD_YMM1_YMMV_YMM2_VEX":                       VPMAXUD_YMM1_YMMV_YMM2_VEX,
	"VPMAXUD_YMM1_YMMV_YMM2_EVEX":                      VPMAXUD_YMM1_YMMV_YMM2_EVEX,
	"VPMAXUD_YMM1_YMMV_M256_VEX":                       VPMAXUD_YMM1_YMMV_M256_VEX,
	"VPMAXUD_YMM1_YMMV_M256_EVEX":                      VPMAXUD_YMM1_YMMV_M256_EVEX,
	"VPMAXUD_YMM1_YMMV_M32bcst256_EVEX":                VPMAXUD_YMM1_YMMV_M32bcst256_EVEX,
	"VPMAXUD_ZMM1_ZMMV_ZMM2_EVEX":                      VPMAXUD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMAXUD_ZMM1_ZMMV_M512_EVEX":                      VPMAXUD_ZMM1_ZMMV_M512_EVEX,
	"VPMAXUD_ZMM1_ZMMV_M32bcst512_EVEX":                VPMAXUD_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPMAXUQ_XMM1_XMMV_XMM2_EVEX":                      VPMAXUQ_XMM1_XMMV_XMM2_EVEX,
	"VPMAXUQ_XMM1_XMMV_M128_EVEX":                      VPMAXUQ_XMM1_XMMV_M128_EVEX,
	"VPMAXUQ_XMM1_XMMV_M64bcst128_EVEX":                VPMAXUQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPMAXUQ_YMM1_YMMV_YMM2_EVEX":                      VPMAXUQ_YMM1_YMMV_YMM2_EVEX,
	"VPMAXUQ_YMM1_YMMV_M256_EVEX":                      VPMAXUQ_YMM1_YMMV_M256_EVEX,
	"VPMAXUQ_YMM1_YMMV_M64bcst256_EVEX":                VPMAXUQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPMAXUQ_ZMM1_ZMMV_ZMM2_EVEX":                      VPMAXUQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMAXUQ_ZMM1_ZMMV_M512_EVEX":                      VPMAXUQ_ZMM1_ZMMV_M512_EVEX,
	"VPMAXUQ_ZMM1_ZMMV_M64bcst512_EVEX":                VPMAXUQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPMAXUW_XMM1_XMMV_XMM2_VEX":                       VPMAXUW_XMM1_XMMV_XMM2_VEX,
	"VPMAXUW_XMM1_XMMV_XMM2_EVEX":                      VPMAXUW_XMM1_XMMV_XMM2_EVEX,
	"VPMAXUW_XMM1_XMMV_M128_VEX":                       VPMAXUW_XMM1_XMMV_M128_VEX,
	"VPMAXUW_XMM1_XMMV_M128_EVEX":                      VPMAXUW_XMM1_XMMV_M128_EVEX,
	"VPMAXUW_YMM1_YMMV_YMM2_VEX":                       VPMAXUW_YMM1_YMMV_YMM2_VEX,
	"VPMAXUW_YMM1_YMMV_YMM2_EVEX":                      VPMAXUW_YMM1_YMMV_YMM2_EVEX,
	"VPMAXUW_YMM1_YMMV_M256_VEX":                       VPMAXUW_YMM1_YMMV_M256_VEX,
	"VPMAXUW_YMM1_YMMV_M256_EVEX":                      VPMAXUW_YMM1_YMMV_M256_EVEX,
	"VPMAXUW_ZMM1_ZMMV_ZMM2_EVEX":                      VPMAXUW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMAXUW_ZMM1_ZMMV_M512_EVEX":                      VPMAXUW_ZMM1_ZMMV_M512_EVEX,
	"VPMINSB_XMM1_XMMV_XMM2_VEX":                       VPMINSB_XMM1_XMMV_XMM2_VEX,
	"VPMINSB_XMM1_XMMV_XMM2_EVEX":                      VPMINSB_XMM1_XMMV_XMM2_EVEX,
	"VPMINSB_XMM1_XMMV_M128_VEX":                       VPMINSB_XMM1_XMMV_M128_VEX,
	"VPMINSB_XMM1_XMMV_M128_EVEX":                      VPMINSB_XMM1_XMMV_M128_EVEX,
	"VPMINSB_YMM1_YMMV_YMM2_VEX":                       VPMINSB_YMM1_YMMV_YMM2_VEX,
	"VPMINSB_YMM1_YMMV_YMM2_EVEX":                      VPMINSB_YMM1_YMMV_YMM2_EVEX,
	"VPMINSB_YMM1_YMMV_M256_VEX":                       VPMINSB_YMM1_YMMV_M256_VEX,
	"VPMINSB_YMM1_YMMV_M256_EVEX":                      VPMINSB_YMM1_YMMV_M256_EVEX,
	"VPMINSB_ZMM1_ZMMV_ZMM2_EVEX":                      VPMINSB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMINSB_ZMM1_ZMMV_M512_EVEX":                      VPMINSB_ZMM1_ZMMV_M512_EVEX,
	"VPMINSD_XMM1_XMMV_XMM2_VEX":                       VPMINSD_XMM1_XMMV_XMM2_VEX,
	"VPMINSD_XMM1_XMMV_XMM2_EVEX":                      VPMINSD_XMM1_XMMV_XMM2_EVEX,
	"VPMINSD_XMM1_XMMV_M128_VEX":                       VPMINSD_XMM1_XMMV_M128_VEX,
	"VPMINSD_XMM1_XMMV_M128_EVEX":                      VPMINSD_XMM1_XMMV_M128_EVEX,
	"VPMINSD_XMM1_XMMV_M32bcst128_EVEX":                VPMINSD_XMM1_XMMV_M32bcst128_EVEX,
	"VPMINSD_YMM1_YMMV_YMM2_VEX":                       VPMINSD_YMM1_YMMV_YMM2_VEX,
	"VPMINSD_YMM1_YMMV_YMM2_EVEX":                      VPMINSD_YMM1_YMMV_YMM2_EVEX,
	"VPMINSD_YMM1_YMMV_M256_VEX":                       VPMINSD_YMM1_YMMV_M256_VEX,
	"VPMINSD_YMM1_YMMV_M256_EVEX":                      VPMINSD_YMM1_YMMV_M256_EVEX,
	"VPMINSD_YMM1_YMMV_M32bcst256_EVEX":                VPMINSD_YMM1_YMMV_M32bcst256_EVEX,
	"VPMINSD_ZMM1_ZMMV_ZMM2_EVEX":                      VPMINSD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMINSD_ZMM1_ZMMV_M512_EVEX":                      VPMINSD_ZMM1_ZMMV_M512_EVEX,
	"VPMINSD_ZMM1_ZMMV_M32bcst512_EVEX":                VPMINSD_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPMINSQ_XMM1_XMMV_XMM2_EVEX":                      VPMINSQ_XMM1_XMMV_XMM2_EVEX,
	"VPMINSQ_XMM1_XMMV_M128_EVEX":                      VPMINSQ_XMM1_XMMV_M128_EVEX,
	"VPMINSQ_XMM1_XMMV_M64bcst128_EVEX":                VPMINSQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPMINSQ_YMM1_YMMV_YMM2_EVEX":                      VPMINSQ_YMM1_YMMV_YMM2_EVEX,
	"VPMINSQ_YMM1_YMMV_M256_EVEX":                      VPMINSQ_YMM1_YMMV_M256_EVEX,
	"VPMINSQ_YMM1_YMMV_M64bcst256_EVEX":                VPMINSQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPMINSQ_ZMM1_ZMMV_ZMM2_EVEX":                      VPMINSQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMINSQ_ZMM1_ZMMV_M512_EVEX":                      VPMINSQ_ZMM1_ZMMV_M512_EVEX,
	"VPMINSQ_ZMM1_ZMMV_M64bcst512_EVEX":                VPMINSQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPMINSW_XMM1_XMMV_XMM2_VEX":                       VPMINSW_XMM1_XMMV_XMM2_VEX,
	"VPMINSW_XMM1_XMMV_XMM2_EVEX":                      VPMINSW_XMM1_XMMV_XMM2_EVEX,
	"VPMINSW_XMM1_XMMV_M128_VEX":                       VPMINSW_XMM1_XMMV_M128_VEX,
	"VPMINSW_XMM1_XMMV_M128_EVEX":                      VPMINSW_XMM1_XMMV_M128_EVEX,
	"VPMINSW_YMM1_YMMV_YMM2_VEX":                       VPMINSW_YMM1_YMMV_YMM2_VEX,
	"VPMINSW_YMM1_YMMV_YMM2_EVEX":                      VPMINSW_YMM1_YMMV_YMM2_EVEX,
	"VPMINSW_YMM1_YMMV_M256_VEX":                       VPMINSW_YMM1_YMMV_M256_VEX,
	"VPMINSW_YMM1_YMMV_M256_EVEX":                      VPMINSW_YMM1_YMMV_M256_EVEX,
	"VPMINSW_ZMM1_ZMMV_ZMM2_EVEX":                      VPMINSW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMINSW_ZMM1_ZMMV_M512_EVEX":                      VPMINSW_ZMM1_ZMMV_M512_EVEX,
	"VPMINUB_XMM1_XMMV_XMM2_VEX":                       VPMINUB_XMM1_XMMV_XMM2_VEX,
	"VPMINUB_XMM1_XMMV_XMM2_EVEX":                      VPMINUB_XMM1_XMMV_XMM2_EVEX,
	"VPMINUB_XMM1_XMMV_M128_VEX":                       VPMINUB_XMM1_XMMV_M128_VEX,
	"VPMINUB_XMM1_XMMV_M128_EVEX":                      VPMINUB_XMM1_XMMV_M128_EVEX,
	"VPMINUB_YMM1_YMMV_YMM2_VEX":                       VPMINUB_YMM1_YMMV_YMM2_VEX,
	"VPMINUB_YMM1_YMMV_YMM2_EVEX":                      VPMINUB_YMM1_YMMV_YMM2_EVEX,
	"VPMINUB_YMM1_YMMV_M256_VEX":                       VPMINUB_YMM1_YMMV_M256_VEX,
	"VPMINUB_YMM1_YMMV_M256_EVEX":                      VPMINUB_YMM1_YMMV_M256_EVEX,
	"VPMINUB_ZMM1_ZMMV_ZMM2_EVEX":                      VPMINUB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMINUB_ZMM1_ZMMV_M512_EVEX":                      VPMINUB_ZMM1_ZMMV_M512_EVEX,
	"VPMINUD_XMM1_XMMV_XMM2_VEX":                       VPMINUD_XMM1_XMMV_XMM2_VEX,
	"VPMINUD_XMM1_XMMV_XMM2_EVEX":                      VPMINUD_XMM1_XMMV_XMM2_EVEX,
	"VPMINUD_XMM1_XMMV_M128_VEX":                       VPMINUD_XMM1_XMMV_M128_VEX,
	"VPMINUD_XMM1_XMMV_M128_EVEX":                      VPMINUD_XMM1_XMMV_M128_EVEX,
	"VPMINUD_XMM1_XMMV_M32bcst128_EVEX":                VPMINUD_XMM1_XMMV_M32bcst128_EVEX,
	"VPMINUD_YMM1_YMMV_YMM2_VEX":                       VPMINUD_YMM1_YMMV_YMM2_VEX,
	"VPMINUD_YMM1_YMMV_YMM2_EVEX":                      VPMINUD_YMM1_YMMV_YMM2_EVEX,
	"VPMINUD_YMM1_YMMV_M256_VEX":                       VPMINUD_YMM1_YMMV_M256_VEX,
	"VPMINUD_YMM1_YMMV_M256_EVEX":                      VPMINUD_YMM1_YMMV_M256_EVEX,
	"VPMINUD_YMM1_YMMV_M32bcst256_EVEX":                VPMINUD_YMM1_YMMV_M32bcst256_EVEX,
	"VPMINUD_ZMM1_ZMMV_ZMM2_EVEX":                      VPMINUD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMINUD_ZMM1_ZMMV_M512_EVEX":                      VPMINUD_ZMM1_ZMMV_M512_EVEX,
	"VPMINUD_ZMM1_ZMMV_M32bcst512_EVEX":                VPMINUD_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPMINUQ_XMM1_XMMV_XMM2_EVEX":                      VPMINUQ_XMM1_XMMV_XMM2_EVEX,
	"VPMINUQ_XMM1_XMMV_M128_EVEX":                      VPMINUQ_XMM1_XMMV_M128_EVEX,
	"VPMINUQ_XMM1_XMMV_M64bcst128_EVEX":                VPMINUQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPMINUQ_YMM1_YMMV_YMM2_EVEX":                      VPMINUQ_YMM1_YMMV_YMM2_EVEX,
	"VPMINUQ_YMM1_YMMV_M256_EVEX":                      VPMINUQ_YMM1_YMMV_M256_EVEX,
	"VPMINUQ_YMM1_YMMV_M64bcst256_EVEX":                VPMINUQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPMINUQ_ZMM1_ZMMV_ZMM2_EVEX":                      VPMINUQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMINUQ_ZMM1_ZMMV_M512_EVEX":                      VPMINUQ_ZMM1_ZMMV_M512_EVEX,
	"VPMINUQ_ZMM1_ZMMV_M64bcst512_EVEX":                VPMINUQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPMINUW_XMM1_XMMV_XMM2_VEX":                       VPMINUW_XMM1_XMMV_XMM2_VEX,
	"VPMINUW_XMM1_XMMV_XMM2_EVEX":                      VPMINUW_XMM1_XMMV_XMM2_EVEX,
	"VPMINUW_XMM1_XMMV_M128_VEX":                       VPMINUW_XMM1_XMMV_M128_VEX,
	"VPMINUW_XMM1_XMMV_M128_EVEX":                      VPMINUW_XMM1_XMMV_M128_EVEX,
	"VPMINUW_YMM1_YMMV_YMM2_VEX":                       VPMINUW_YMM1_YMMV_YMM2_VEX,
	"VPMINUW_YMM1_YMMV_YMM2_EVEX":                      VPMINUW_YMM1_YMMV_YMM2_EVEX,
	"VPMINUW_YMM1_YMMV_M256_VEX":                       VPMINUW_YMM1_YMMV_M256_VEX,
	"VPMINUW_YMM1_YMMV_M256_EVEX":                      VPMINUW_YMM1_YMMV_M256_EVEX,
	"VPMINUW_ZMM1_ZMMV_ZMM2_EVEX":                      VPMINUW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMINUW_ZMM1_ZMMV_M512_EVEX":                      VPMINUW_ZMM1_ZMMV_M512_EVEX,
	"VPMOVMSKB_R32_XMM2_VEX":                           VPMOVMSKB_R32_XMM2_VEX,
	"VPMOVMSKB_R32_YMM2_VEX":                           VPMOVMSKB_R32_YMM2_VEX,
	"VPMOVSXBD_XMM1_XMM2_VEX":                          VPMOVSXBD_XMM1_XMM2_VEX,
	"VPMOVSXBD_XMM1_XMM2_EVEX":                         VPMOVSXBD_XMM1_XMM2_EVEX,
	"VPMOVSXBD_XMM1_M32_VEX":                           VPMOVSXBD_XMM1_M32_VEX,
	"VPMOVSXBD_XMM1_M32_EVEX":                          VPMOVSXBD_XMM1_M32_EVEX,
	"VPMOVSXBD_YMM1_XMM2_VEX":                          VPMOVSXBD_YMM1_XMM2_VEX,
	"VPMOVSXBD_YMM1_XMM2_EVEX":                         VPMOVSXBD_YMM1_XMM2_EVEX,
	"VPMOVSXBD_YMM1_M64_VEX":                           VPMOVSXBD_YMM1_M64_VEX,
	"VPMOVSXBD_YMM1_M64_EVEX":                          VPMOVSXBD_YMM1_M64_EVEX,
	"VPMOVSXBD_ZMM1_XMM2_EVEX":                         VPMOVSXBD_ZMM1_XMM2_EVEX,
	"VPMOVSXBD_ZMM1_M128_EVEX":                         VPMOVSXBD_ZMM1_M128_EVEX,
	"VPMOVSXBQ_XMM1_XMM2_VEX":                          VPMOVSXBQ_XMM1_XMM2_VEX,
	"VPMOVSXBQ_XMM1_XMM2_EVEX":                         VPMOVSXBQ_XMM1_XMM2_EVEX,
	"VPMOVSXBQ_XMM1_M16_VEX":                           VPMOVSXBQ_XMM1_M16_VEX,
	"VPMOVSXBQ_XMM1_M16_EVEX":                          VPMOVSXBQ_XMM1_M16_EVEX,
	"VPMOVSXBQ_YMM1_XMM2_VEX":                          VPMOVSXBQ_YMM1_XMM2_VEX,
	"VPMOVSXBQ_YMM1_XMM2_EVEX":                         VPMOVSXBQ_YMM1_XMM2_EVEX,
	"VPMOVSXBQ_YMM1_M32_VEX":                           VPMOVSXBQ_YMM1_M32_VEX,
	"VPMOVSXBQ_YMM1_M32_EVEX":                          VPMOVSXBQ_YMM1_M32_EVEX,
	"VPMOVSXBQ_ZMM1_XMM2_EVEX":                         VPMOVSXBQ_ZMM1_XMM2_EVEX,
	"VPMOVSXBQ_ZMM1_M64_EVEX":                          VPMOVSXBQ_ZMM1_M64_EVEX,
	"VPMOVSXBW_XMM1_XMM2_VEX":                          VPMOVSXBW_XMM1_XMM2_VEX,
	"VPMOVSXBW_XMM1_XMM2_EVEX":                         VPMOVSXBW_XMM1_XMM2_EVEX,
	"VPMOVSXBW_XMM1_M64_VEX":                           VPMOVSXBW_XMM1_M64_VEX,
	"VPMOVSXBW_XMM1_M64_EVEX":                          VPMOVSXBW_XMM1_M64_EVEX,
	"VPMOVSXBW_YMM1_XMM2_VEX":                          VPMOVSXBW_YMM1_XMM2_VEX,
	"VPMOVSXBW_YMM1_XMM2_EVEX":                         VPMOVSXBW_YMM1_XMM2_EVEX,
	"VPMOVSXBW_YMM1_M128_VEX":                          VPMOVSXBW_YMM1_M128_VEX,
	"VPMOVSXBW_YMM1_M128_EVEX":                         VPMOVSXBW_YMM1_M128_EVEX,
	"VPMOVSXBW_ZMM1_YMM2_EVEX":                         VPMOVSXBW_ZMM1_YMM2_EVEX,
	"VPMOVSXBW_ZMM1_M256_EVEX":                         VPMOVSXBW_ZMM1_M256_EVEX,
	"VPMOVSXDQ_XMM1_XMM2_VEX":                          VPMOVSXDQ_XMM1_XMM2_VEX,
	"VPMOVSXDQ_XMM1_XMM2_EVEX":                         VPMOVSXDQ_XMM1_XMM2_EVEX,
	"VPMOVSXDQ_XMM1_M64_VEX":                           VPMOVSXDQ_XMM1_M64_VEX,
	"VPMOVSXDQ_XMM1_M64_EVEX":                          VPMOVSXDQ_XMM1_M64_EVEX,
	"VPMOVSXDQ_YMM1_XMM2_VEX":                          VPMOVSXDQ_YMM1_XMM2_VEX,
	"VPMOVSXDQ_YMM1_XMM2_EVEX":                         VPMOVSXDQ_YMM1_XMM2_EVEX,
	"VPMOVSXDQ_YMM1_M128_VEX":                          VPMOVSXDQ_YMM1_M128_VEX,
	"VPMOVSXDQ_YMM1_M128_EVEX":                         VPMOVSXDQ_YMM1_M128_EVEX,
	"VPMOVSXDQ_ZMM1_YMM2_EVEX":                         VPMOVSXDQ_ZMM1_YMM2_EVEX,
	"VPMOVSXDQ_ZMM1_M256_EVEX":                         VPMOVSXDQ_ZMM1_M256_EVEX,
	"VPMOVSXWD_XMM1_XMM2_VEX":                          VPMOVSXWD_XMM1_XMM2_VEX,
	"VPMOVSXWD_XMM1_XMM2_EVEX":                         VPMOVSXWD_XMM1_XMM2_EVEX,
	"VPMOVSXWD_XMM1_M64_VEX":                           VPMOVSXWD_XMM1_M64_VEX,
	"VPMOVSXWD_XMM1_M64_EVEX":                          VPMOVSXWD_XMM1_M64_EVEX,
	"VPMOVSXWD_YMM1_XMM2_VEX":                          VPMOVSXWD_YMM1_XMM2_VEX,
	"VPMOVSXWD_YMM1_XMM2_EVEX":                         VPMOVSXWD_YMM1_XMM2_EVEX,
	"VPMOVSXWD_YMM1_M128_VEX":                          VPMOVSXWD_YMM1_M128_VEX,
	"VPMOVSXWD_YMM1_M128_EVEX":                         VPMOVSXWD_YMM1_M128_EVEX,
	"VPMOVSXWD_ZMM1_YMM2_EVEX":                         VPMOVSXWD_ZMM1_YMM2_EVEX,
	"VPMOVSXWD_ZMM1_M256_EVEX":                         VPMOVSXWD_ZMM1_M256_EVEX,
	"VPMOVSXWQ_XMM1_XMM2_VEX":                          VPMOVSXWQ_XMM1_XMM2_VEX,
	"VPMOVSXWQ_XMM1_XMM2_EVEX":                         VPMOVSXWQ_XMM1_XMM2_EVEX,
	"VPMOVSXWQ_XMM1_M32_VEX":                           VPMOVSXWQ_XMM1_M32_VEX,
	"VPMOVSXWQ_XMM1_M32_EVEX":                          VPMOVSXWQ_XMM1_M32_EVEX,
	"VPMOVSXWQ_YMM1_XMM2_VEX":                          VPMOVSXWQ_YMM1_XMM2_VEX,
	"VPMOVSXWQ_YMM1_XMM2_EVEX":                         VPMOVSXWQ_YMM1_XMM2_EVEX,
	"VPMOVSXWQ_YMM1_M64_VEX":                           VPMOVSXWQ_YMM1_M64_VEX,
	"VPMOVSXWQ_YMM1_M64_EVEX":                          VPMOVSXWQ_YMM1_M64_EVEX,
	"VPMOVSXWQ_ZMM1_XMM2_EVEX":                         VPMOVSXWQ_ZMM1_XMM2_EVEX,
	"VPMOVSXWQ_ZMM1_M128_EVEX":                         VPMOVSXWQ_ZMM1_M128_EVEX,
	"VPMOVZXBD_XMM1_XMM2_VEX":                          VPMOVZXBD_XMM1_XMM2_VEX,
	"VPMOVZXBD_XMM1_XMM2_EVEX":                         VPMOVZXBD_XMM1_XMM2_EVEX,
	"VPMOVZXBD_XMM1_M32_VEX":                           VPMOVZXBD_XMM1_M32_VEX,
	"VPMOVZXBD_XMM1_M32_EVEX":                          VPMOVZXBD_XMM1_M32_EVEX,
	"VPMOVZXBD_YMM1_XMM2_VEX":                          VPMOVZXBD_YMM1_XMM2_VEX,
	"VPMOVZXBD_YMM1_XMM2_EVEX":                         VPMOVZXBD_YMM1_XMM2_EVEX,
	"VPMOVZXBD_YMM1_M64_VEX":                           VPMOVZXBD_YMM1_M64_VEX,
	"VPMOVZXBD_YMM1_M64_EVEX":                          VPMOVZXBD_YMM1_M64_EVEX,
	"VPMOVZXBD_ZMM1_XMM2_EVEX":                         VPMOVZXBD_ZMM1_XMM2_EVEX,
	"VPMOVZXBD_ZMM1_M128_EVEX":                         VPMOVZXBD_ZMM1_M128_EVEX,
	"VPMOVZXBQ_XMM1_XMM2_VEX":                          VPMOVZXBQ_XMM1_XMM2_VEX,
	"VPMOVZXBQ_XMM1_XMM2_EVEX":                         VPMOVZXBQ_XMM1_XMM2_EVEX,
	"VPMOVZXBQ_XMM1_M16_VEX":                           VPMOVZXBQ_XMM1_M16_VEX,
	"VPMOVZXBQ_XMM1_M16_EVEX":                          VPMOVZXBQ_XMM1_M16_EVEX,
	"VPMOVZXBQ_YMM1_XMM2_VEX":                          VPMOVZXBQ_YMM1_XMM2_VEX,
	"VPMOVZXBQ_YMM1_XMM2_EVEX":                         VPMOVZXBQ_YMM1_XMM2_EVEX,
	"VPMOVZXBQ_YMM1_M32_VEX":                           VPMOVZXBQ_YMM1_M32_VEX,
	"VPMOVZXBQ_YMM1_M32_EVEX":                          VPMOVZXBQ_YMM1_M32_EVEX,
	"VPMOVZXBQ_ZMM1_XMM2_EVEX":                         VPMOVZXBQ_ZMM1_XMM2_EVEX,
	"VPMOVZXBQ_ZMM1_M64_EVEX":                          VPMOVZXBQ_ZMM1_M64_EVEX,
	"VPMOVZXBW_XMM1_XMM2_VEX":                          VPMOVZXBW_XMM1_XMM2_VEX,
	"VPMOVZXBW_XMM1_XMM2_EVEX":                         VPMOVZXBW_XMM1_XMM2_EVEX,
	"VPMOVZXBW_XMM1_M64_VEX":                           VPMOVZXBW_XMM1_M64_VEX,
	"VPMOVZXBW_XMM1_M64_EVEX":                          VPMOVZXBW_XMM1_M64_EVEX,
	"VPMOVZXBW_YMM1_XMM2_VEX":                          VPMOVZXBW_YMM1_XMM2_VEX,
	"VPMOVZXBW_YMM1_XMM2_EVEX":                         VPMOVZXBW_YMM1_XMM2_EVEX,
	"VPMOVZXBW_YMM1_M128_VEX":                          VPMOVZXBW_YMM1_M128_VEX,
	"VPMOVZXBW_YMM1_M128_EVEX":                         VPMOVZXBW_YMM1_M128_EVEX,
	"VPMOVZXBW_ZMM1_YMM2_EVEX":                         VPMOVZXBW_ZMM1_YMM2_EVEX,
	"VPMOVZXBW_ZMM1_M256_EVEX":                         VPMOVZXBW_ZMM1_M256_EVEX,
	"VPMOVZXDQ_XMM1_XMM2_VEX":                          VPMOVZXDQ_XMM1_XMM2_VEX,
	"VPMOVZXDQ_XMM1_XMM2_EVEX":                         VPMOVZXDQ_XMM1_XMM2_EVEX,
	"VPMOVZXDQ_XMM1_M64_VEX":                           VPMOVZXDQ_XMM1_M64_VEX,
	"VPMOVZXDQ_XMM1_M64_EVEX":                          VPMOVZXDQ_XMM1_M64_EVEX,
	"VPMOVZXDQ_YMM1_XMM2_VEX":                          VPMOVZXDQ_YMM1_XMM2_VEX,
	"VPMOVZXDQ_YMM1_XMM2_EVEX":                         VPMOVZXDQ_YMM1_XMM2_EVEX,
	"VPMOVZXDQ_YMM1_M128_VEX":                          VPMOVZXDQ_YMM1_M128_VEX,
	"VPMOVZXDQ_YMM1_M128_EVEX":                         VPMOVZXDQ_YMM1_M128_EVEX,
	"VPMOVZXDQ_ZMM1_YMM2_EVEX":                         VPMOVZXDQ_ZMM1_YMM2_EVEX,
	"VPMOVZXDQ_ZMM1_M256_EVEX":                         VPMOVZXDQ_ZMM1_M256_EVEX,
	"VPMOVZXWD_XMM1_XMM2_VEX":                          VPMOVZXWD_XMM1_XMM2_VEX,
	"VPMOVZXWD_XMM1_XMM2_EVEX":                         VPMOVZXWD_XMM1_XMM2_EVEX,
	"VPMOVZXWD_XMM1_M64_VEX":                           VPMOVZXWD_XMM1_M64_VEX,
	"VPMOVZXWD_XMM1_M64_EVEX":                          VPMOVZXWD_XMM1_M64_EVEX,
	"VPMOVZXWD_YMM1_XMM2_VEX":                          VPMOVZXWD_YMM1_XMM2_VEX,
	"VPMOVZXWD_YMM1_XMM2_EVEX":                         VPMOVZXWD_YMM1_XMM2_EVEX,
	"VPMOVZXWD_YMM1_M128_VEX":                          VPMOVZXWD_YMM1_M128_VEX,
	"VPMOVZXWD_YMM1_M128_EVEX":                         VPMOVZXWD_YMM1_M128_EVEX,
	"VPMOVZXWD_ZMM1_YMM2_EVEX":                         VPMOVZXWD_ZMM1_YMM2_EVEX,
	"VPMOVZXWD_ZMM1_M256_EVEX":                         VPMOVZXWD_ZMM1_M256_EVEX,
	"VPMOVZXWQ_XMM1_XMM2_VEX":                          VPMOVZXWQ_XMM1_XMM2_VEX,
	"VPMOVZXWQ_XMM1_XMM2_EVEX":                         VPMOVZXWQ_XMM1_XMM2_EVEX,
	"VPMOVZXWQ_XMM1_M32_VEX":                           VPMOVZXWQ_XMM1_M32_VEX,
	"VPMOVZXWQ_XMM1_M32_EVEX":                          VPMOVZXWQ_XMM1_M32_EVEX,
	"VPMOVZXWQ_YMM1_XMM2_VEX":                          VPMOVZXWQ_YMM1_XMM2_VEX,
	"VPMOVZXWQ_YMM1_XMM2_EVEX":                         VPMOVZXWQ_YMM1_XMM2_EVEX,
	"VPMOVZXWQ_YMM1_M64_VEX":                           VPMOVZXWQ_YMM1_M64_VEX,
	"VPMOVZXWQ_YMM1_M64_EVEX":                          VPMOVZXWQ_YMM1_M64_EVEX,
	"VPMOVZXWQ_ZMM1_XMM2_EVEX":                         VPMOVZXWQ_ZMM1_XMM2_EVEX,
	"VPMOVZXWQ_ZMM1_M128_EVEX":                         VPMOVZXWQ_ZMM1_M128_EVEX,
	"VPMULDQ_XMM1_XMMV_XMM2_VEX":                       VPMULDQ_XMM1_XMMV_XMM2_VEX,
	"VPMULDQ_XMM1_XMMV_XMM2_EVEX":                      VPMULDQ_XMM1_XMMV_XMM2_EVEX,
	"VPMULDQ_XMM1_XMMV_M128_VEX":                       VPMULDQ_XMM1_XMMV_M128_VEX,
	"VPMULDQ_XMM1_XMMV_M128_EVEX":                      VPMULDQ_XMM1_XMMV_M128_EVEX,
	"VPMULDQ_XMM1_XMMV_M64bcst128_EVEX":                VPMULDQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPMULDQ_YMM1_YMMV_YMM2_VEX":                       VPMULDQ_YMM1_YMMV_YMM2_VEX,
	"VPMULDQ_YMM1_YMMV_YMM2_EVEX":                      VPMULDQ_YMM1_YMMV_YMM2_EVEX,
	"VPMULDQ_YMM1_YMMV_M256_VEX":                       VPMULDQ_YMM1_YMMV_M256_VEX,
	"VPMULDQ_YMM1_YMMV_M256_EVEX":                      VPMULDQ_YMM1_YMMV_M256_EVEX,
	"VPMULDQ_YMM1_YMMV_M64bcst256_EVEX":                VPMULDQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPMULDQ_ZMM1_ZMMV_ZMM2_EVEX":                      VPMULDQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMULDQ_ZMM1_ZMMV_M512_EVEX":                      VPMULDQ_ZMM1_ZMMV_M512_EVEX,
	"VPMULDQ_ZMM1_ZMMV_M64bcst512_EVEX":                VPMULDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPMULHRSW_XMM1_XMMV_XMM2_VEX":                     VPMULHRSW_XMM1_XMMV_XMM2_VEX,
	"VPMULHRSW_XMM1_XMMV_XMM2_EVEX":                    VPMULHRSW_XMM1_XMMV_XMM2_EVEX,
	"VPMULHRSW_XMM1_XMMV_M128_VEX":                     VPMULHRSW_XMM1_XMMV_M128_VEX,
	"VPMULHRSW_XMM1_XMMV_M128_EVEX":                    VPMULHRSW_XMM1_XMMV_M128_EVEX,
	"VPMULHRSW_YMM1_YMMV_YMM2_VEX":                     VPMULHRSW_YMM1_YMMV_YMM2_VEX,
	"VPMULHRSW_YMM1_YMMV_YMM2_EVEX":                    VPMULHRSW_YMM1_YMMV_YMM2_EVEX,
	"VPMULHRSW_YMM1_YMMV_M256_VEX":                     VPMULHRSW_YMM1_YMMV_M256_VEX,
	"VPMULHRSW_YMM1_YMMV_M256_EVEX":                    VPMULHRSW_YMM1_YMMV_M256_EVEX,
	"VPMULHRSW_ZMM1_ZMMV_ZMM2_EVEX":                    VPMULHRSW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMULHRSW_ZMM1_ZMMV_M512_EVEX":                    VPMULHRSW_ZMM1_ZMMV_M512_EVEX,
	"VPMULHUW_XMM1_XMMV_XMM2_VEX":                      VPMULHUW_XMM1_XMMV_XMM2_VEX,
	"VPMULHUW_XMM1_XMMV_XMM2_EVEX":                     VPMULHUW_XMM1_XMMV_XMM2_EVEX,
	"VPMULHUW_XMM1_XMMV_M128_VEX":                      VPMULHUW_XMM1_XMMV_M128_VEX,
	"VPMULHUW_XMM1_XMMV_M128_EVEX":                     VPMULHUW_XMM1_XMMV_M128_EVEX,
	"VPMULHUW_YMM1_YMMV_YMM2_VEX":                      VPMULHUW_YMM1_YMMV_YMM2_VEX,
	"VPMULHUW_YMM1_YMMV_YMM2_EVEX":                     VPMULHUW_YMM1_YMMV_YMM2_EVEX,
	"VPMULHUW_YMM1_YMMV_M256_VEX":                      VPMULHUW_YMM1_YMMV_M256_VEX,
	"VPMULHUW_YMM1_YMMV_M256_EVEX":                     VPMULHUW_YMM1_YMMV_M256_EVEX,
	"VPMULHUW_ZMM1_ZMMV_ZMM2_EVEX":                     VPMULHUW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMULHUW_ZMM1_ZMMV_M512_EVEX":                     VPMULHUW_ZMM1_ZMMV_M512_EVEX,
	"VPMULHW_XMM1_XMMV_XMM2_VEX":                       VPMULHW_XMM1_XMMV_XMM2_VEX,
	"VPMULHW_XMM1_XMMV_XMM2_EVEX":                      VPMULHW_XMM1_XMMV_XMM2_EVEX,
	"VPMULHW_XMM1_XMMV_M128_VEX":                       VPMULHW_XMM1_XMMV_M128_VEX,
	"VPMULHW_XMM1_XMMV_M128_EVEX":                      VPMULHW_XMM1_XMMV_M128_EVEX,
	"VPMULHW_YMM1_YMMV_YMM2_VEX":                       VPMULHW_YMM1_YMMV_YMM2_VEX,
	"VPMULHW_YMM1_YMMV_YMM2_EVEX":                      VPMULHW_YMM1_YMMV_YMM2_EVEX,
	"VPMULHW_YMM1_YMMV_M256_VEX":                       VPMULHW_YMM1_YMMV_M256_VEX,
	"VPMULHW_YMM1_YMMV_M256_EVEX":                      VPMULHW_YMM1_YMMV_M256_EVEX,
	"VPMULHW_ZMM1_ZMMV_ZMM2_EVEX":                      VPMULHW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMULHW_ZMM1_ZMMV_M512_EVEX":                      VPMULHW_ZMM1_ZMMV_M512_EVEX,
	"VPMULLD_XMM1_XMMV_XMM2_VEX":                       VPMULLD_XMM1_XMMV_XMM2_VEX,
	"VPMULLD_XMM1_XMMV_XMM2_EVEX":                      VPMULLD_XMM1_XMMV_XMM2_EVEX,
	"VPMULLD_XMM1_XMMV_M128_VEX":                       VPMULLD_XMM1_XMMV_M128_VEX,
	"VPMULLD_XMM1_XMMV_M128_EVEX":                      VPMULLD_XMM1_XMMV_M128_EVEX,
	"VPMULLD_XMM1_XMMV_M32bcst128_EVEX":                VPMULLD_XMM1_XMMV_M32bcst128_EVEX,
	"VPMULLD_YMM1_YMMV_YMM2_VEX":                       VPMULLD_YMM1_YMMV_YMM2_VEX,
	"VPMULLD_YMM1_YMMV_YMM2_EVEX":                      VPMULLD_YMM1_YMMV_YMM2_EVEX,
	"VPMULLD_YMM1_YMMV_M256_VEX":                       VPMULLD_YMM1_YMMV_M256_VEX,
	"VPMULLD_YMM1_YMMV_M256_EVEX":                      VPMULLD_YMM1_YMMV_M256_EVEX,
	"VPMULLD_YMM1_YMMV_M32bcst256_EVEX":                VPMULLD_YMM1_YMMV_M32bcst256_EVEX,
	"VPMULLD_ZMM1_ZMMV_ZMM2_EVEX":                      VPMULLD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMULLD_ZMM1_ZMMV_M512_EVEX":                      VPMULLD_ZMM1_ZMMV_M512_EVEX,
	"VPMULLD_ZMM1_ZMMV_M32bcst512_EVEX":                VPMULLD_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPMULLQ_XMM1_XMMV_XMM2_EVEX":                      VPMULLQ_XMM1_XMMV_XMM2_EVEX,
	"VPMULLQ_XMM1_XMMV_M128_EVEX":                      VPMULLQ_XMM1_XMMV_M128_EVEX,
	"VPMULLQ_XMM1_XMMV_M64bcst128_EVEX":                VPMULLQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPMULLQ_YMM1_YMMV_YMM2_EVEX":                      VPMULLQ_YMM1_YMMV_YMM2_EVEX,
	"VPMULLQ_YMM1_YMMV_M256_EVEX":                      VPMULLQ_YMM1_YMMV_M256_EVEX,
	"VPMULLQ_YMM1_YMMV_M64bcst256_EVEX":                VPMULLQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPMULLQ_ZMM1_ZMMV_ZMM2_EVEX":                      VPMULLQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMULLQ_ZMM1_ZMMV_M512_EVEX":                      VPMULLQ_ZMM1_ZMMV_M512_EVEX,
	"VPMULLQ_ZMM1_ZMMV_M64bcst512_EVEX":                VPMULLQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPMULLW_XMM1_XMMV_XMM2_VEX":                       VPMULLW_XMM1_XMMV_XMM2_VEX,
	"VPMULLW_XMM1_XMMV_XMM2_EVEX":                      VPMULLW_XMM1_XMMV_XMM2_EVEX,
	"VPMULLW_XMM1_XMMV_M128_VEX":                       VPMULLW_XMM1_XMMV_M128_VEX,
	"VPMULLW_XMM1_XMMV_M128_EVEX":                      VPMULLW_XMM1_XMMV_M128_EVEX,
	"VPMULLW_YMM1_YMMV_YMM2_VEX":                       VPMULLW_YMM1_YMMV_YMM2_VEX,
	"VPMULLW_YMM1_YMMV_YMM2_EVEX":                      VPMULLW_YMM1_YMMV_YMM2_EVEX,
	"VPMULLW_YMM1_YMMV_M256_VEX":                       VPMULLW_YMM1_YMMV_M256_VEX,
	"VPMULLW_YMM1_YMMV_M256_EVEX":                      VPMULLW_YMM1_YMMV_M256_EVEX,
	"VPMULLW_ZMM1_ZMMV_ZMM2_EVEX":                      VPMULLW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMULLW_ZMM1_ZMMV_M512_EVEX":                      VPMULLW_ZMM1_ZMMV_M512_EVEX,
	"VPMULUDQ_XMM1_XMMV_XMM2_VEX":                      VPMULUDQ_XMM1_XMMV_XMM2_VEX,
	"VPMULUDQ_XMM1_XMMV_XMM2_EVEX":                     VPMULUDQ_XMM1_XMMV_XMM2_EVEX,
	"VPMULUDQ_XMM1_XMMV_M128_VEX":                      VPMULUDQ_XMM1_XMMV_M128_VEX,
	"VPMULUDQ_XMM1_XMMV_M128_EVEX":                     VPMULUDQ_XMM1_XMMV_M128_EVEX,
	"VPMULUDQ_XMM1_XMMV_M64bcst128_EVEX":               VPMULUDQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPMULUDQ_YMM1_YMMV_YMM2_VEX":                      VPMULUDQ_YMM1_YMMV_YMM2_VEX,
	"VPMULUDQ_YMM1_YMMV_YMM2_EVEX":                     VPMULUDQ_YMM1_YMMV_YMM2_EVEX,
	"VPMULUDQ_YMM1_YMMV_M256_VEX":                      VPMULUDQ_YMM1_YMMV_M256_VEX,
	"VPMULUDQ_YMM1_YMMV_M256_EVEX":                     VPMULUDQ_YMM1_YMMV_M256_EVEX,
	"VPMULUDQ_YMM1_YMMV_M64bcst256_EVEX":               VPMULUDQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPMULUDQ_ZMM1_ZMMV_ZMM2_EVEX":                     VPMULUDQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPMULUDQ_ZMM1_ZMMV_M512_EVEX":                     VPMULUDQ_ZMM1_ZMMV_M512_EVEX,
	"VPMULUDQ_ZMM1_ZMMV_M64bcst512_EVEX":               VPMULUDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPOR_XMM1_XMMV_XMM2_VEX":                          VPOR_XMM1_XMMV_XMM2_VEX,
	"VPOR_XMM1_XMMV_M128_VEX":                          VPOR_XMM1_XMMV_M128_VEX,
	"VPOR_YMM1_YMMV_YMM2_VEX":                          VPOR_YMM1_YMMV_YMM2_VEX,
	"VPOR_YMM1_YMMV_M256_VEX":                          VPOR_YMM1_YMMV_M256_VEX,
	"VPORD_XMM1_XMMV_XMM2_EVEX":                        VPORD_XMM1_XMMV_XMM2_EVEX,
	"VPORD_XMM1_XMMV_M128_EVEX":                        VPORD_XMM1_XMMV_M128_EVEX,
	"VPORD_XMM1_XMMV_M32bcst128_EVEX":                  VPORD_XMM1_XMMV_M32bcst128_EVEX,
	"VPORD_YMM1_YMMV_YMM2_EVEX":                        VPORD_YMM1_YMMV_YMM2_EVEX,
	"VPORD_YMM1_YMMV_M256_EVEX":                        VPORD_YMM1_YMMV_M256_EVEX,
	"VPORD_YMM1_YMMV_M32bcst256_EVEX":                  VPORD_YMM1_YMMV_M32bcst256_EVEX,
	"VPORD_ZMM1_ZMMV_ZMM2_EVEX":                        VPORD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPORD_ZMM1_ZMMV_M512_EVEX":                        VPORD_ZMM1_ZMMV_M512_EVEX,
	"VPORD_ZMM1_ZMMV_M32bcst512_EVEX":                  VPORD_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPORQ_XMM1_XMMV_XMM2_EVEX":                        VPORQ_XMM1_XMMV_XMM2_EVEX,
	"VPORQ_XMM1_XMMV_M128_EVEX":                        VPORQ_XMM1_XMMV_M128_EVEX,
	"VPORQ_XMM1_XMMV_M64bcst128_EVEX":                  VPORQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPORQ_YMM1_YMMV_YMM2_EVEX":                        VPORQ_YMM1_YMMV_YMM2_EVEX,
	"VPORQ_YMM1_YMMV_M256_EVEX":                        VPORQ_YMM1_YMMV_M256_EVEX,
	"VPORQ_YMM1_YMMV_M64bcst256_EVEX":                  VPORQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPORQ_ZMM1_ZMMV_ZMM2_EVEX":                        VPORQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPORQ_ZMM1_ZMMV_M512_EVEX":                        VPORQ_ZMM1_ZMMV_M512_EVEX,
	"VPORQ_ZMM1_ZMMV_M64bcst512_EVEX":                  VPORQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPSADBW_XMM1_XMMV_XMM2_VEX":                       VPSADBW_XMM1_XMMV_XMM2_VEX,
	"VPSADBW_XMM1_XMMV_XMM2_EVEX":                      VPSADBW_XMM1_XMMV_XMM2_EVEX,
	"VPSADBW_XMM1_XMMV_M128_VEX":                       VPSADBW_XMM1_XMMV_M128_VEX,
	"VPSADBW_XMM1_XMMV_M128_EVEX":                      VPSADBW_XMM1_XMMV_M128_EVEX,
	"VPSADBW_YMM1_YMMV_YMM2_VEX":                       VPSADBW_YMM1_YMMV_YMM2_VEX,
	"VPSADBW_YMM1_YMMV_YMM2_EVEX":                      VPSADBW_YMM1_YMMV_YMM2_EVEX,
	"VPSADBW_YMM1_YMMV_M256_VEX":                       VPSADBW_YMM1_YMMV_M256_VEX,
	"VPSADBW_YMM1_YMMV_M256_EVEX":                      VPSADBW_YMM1_YMMV_M256_EVEX,
	"VPSADBW_ZMM1_ZMMV_ZMM2_EVEX":                      VPSADBW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPSADBW_ZMM1_ZMMV_M512_EVEX":                      VPSADBW_ZMM1_ZMMV_M512_EVEX,
	"VPSHUFB_XMM1_XMMV_XMM2_VEX":                       VPSHUFB_XMM1_XMMV_XMM2_VEX,
	"VPSHUFB_XMM1_XMMV_XMM2_EVEX":                      VPSHUFB_XMM1_XMMV_XMM2_EVEX,
	"VPSHUFB_XMM1_XMMV_M128_VEX":                       VPSHUFB_XMM1_XMMV_M128_VEX,
	"VPSHUFB_XMM1_XMMV_M128_EVEX":                      VPSHUFB_XMM1_XMMV_M128_EVEX,
	"VPSHUFB_YMM1_YMMV_YMM2_VEX":                       VPSHUFB_YMM1_YMMV_YMM2_VEX,
	"VPSHUFB_YMM1_YMMV_YMM2_EVEX":                      VPSHUFB_YMM1_YMMV_YMM2_EVEX,
	"VPSHUFB_YMM1_YMMV_M256_VEX":                       VPSHUFB_YMM1_YMMV_M256_VEX,
	"VPSHUFB_YMM1_YMMV_M256_EVEX":                      VPSHUFB_YMM1_YMMV_M256_EVEX,
	"VPSHUFB_ZMM1_ZMMV_ZMM2_EVEX":                      VPSHUFB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPSHUFB_ZMM1_ZMMV_M512_EVEX":                      VPSHUFB_ZMM1_ZMMV_M512_EVEX,
	"VPSHUFD_XMM1_XMM2_Imm8_VEX":                       VPSHUFD_XMM1_XMM2_Imm8_VEX,
	"VPSHUFD_XMM1_XMM2_Imm8_EVEX":                      VPSHUFD_XMM1_XMM2_Imm8_EVEX,
	"VPSHUFD_XMM1_M128_Imm8_VEX":                       VPSHUFD_XMM1_M128_Imm8_VEX,
	"VPSHUFD_XMM1_M128_Imm8_EVEX":                      VPSHUFD_XMM1_M128_Imm8_EVEX,
	"VPSHUFD_XMM1_M32bcst128_Imm8_EVEX":                VPSHUFD_XMM1_M32bcst128_Imm8_EVEX,
	"VPSHUFD_YMM1_YMM2_Imm8_VEX":                       VPSHUFD_YMM1_YMM2_Imm8_VEX,
	"VPSHUFD_YMM1_YMM2_Imm8_EVEX":                      VPSHUFD_YMM1_YMM2_Imm8_EVEX,
	"VPSHUFD_YMM1_M256_Imm8_VEX":                       VPSHUFD_YMM1_M256_Imm8_VEX,
	"VPSHUFD_YMM1_M256_Imm8_EVEX":                      VPSHUFD_YMM1_M256_Imm8_EVEX,
	"VPSHUFD_YMM1_M32bcst256_Imm8_EVEX":                VPSHUFD_YMM1_M32bcst256_Imm8_EVEX,
	"VPSHUFD_ZMM1_ZMM2_Imm8_EVEX":                      VPSHUFD_ZMM1_ZMM2_Imm8_EVEX,
	"VPSHUFD_ZMM1_M512_Imm8_EVEX":                      VPSHUFD_ZMM1_M512_Imm8_EVEX,
	"VPSHUFD_ZMM1_M32bcst512_Imm8_EVEX":                VPSHUFD_ZMM1_M32bcst512_Imm8_EVEX,
	"VPSHUFHW_XMM1_XMM2_Imm8_VEX":                      VPSHUFHW_XMM1_XMM2_Imm8_VEX,
	"VPSHUFHW_XMM1_XMM2_Imm8_EVEX":                     VPSHUFHW_XMM1_XMM2_Imm8_EVEX,
	"VPSHUFHW_XMM1_M128_Imm8_VEX":                      VPSHUFHW_XMM1_M128_Imm8_VEX,
	"VPSHUFHW_XMM1_M128_Imm8_EVEX":                     VPSHUFHW_XMM1_M128_Imm8_EVEX,
	"VPSHUFHW_YMM1_YMM2_Imm8_VEX":                      VPSHUFHW_YMM1_YMM2_Imm8_VEX,
	"VPSHUFHW_YMM1_YMM2_Imm8_EVEX":                     VPSHUFHW_YMM1_YMM2_Imm8_EVEX,
	"VPSHUFHW_YMM1_M256_Imm8_VEX":                      VPSHUFHW_YMM1_M256_Imm8_VEX,
	"VPSHUFHW_YMM1_M256_Imm8_EVEX":                     VPSHUFHW_YMM1_M256_Imm8_EVEX,
	"VPSHUFHW_ZMM1_ZMM2_Imm8_EVEX":                     VPSHUFHW_ZMM1_ZMM2_Imm8_EVEX,
	"VPSHUFHW_ZMM1_M512_Imm8_EVEX":                     VPSHUFHW_ZMM1_M512_Imm8_EVEX,
	"VPSHUFLW_XMM1_XMM2_Imm8_VEX":                      VPSHUFLW_XMM1_XMM2_Imm8_VEX,
	"VPSHUFLW_XMM1_XMM2_Imm8_EVEX":                     VPSHUFLW_XMM1_XMM2_Imm8_EVEX,
	"VPSHUFLW_XMM1_M128_Imm8_VEX":                      VPSHUFLW_XMM1_M128_Imm8_VEX,
	"VPSHUFLW_XMM1_M128_Imm8_EVEX":                     VPSHUFLW_XMM1_M128_Imm8_EVEX,
	"VPSHUFLW_YMM1_YMM2_Imm8_VEX":                      VPSHUFLW_YMM1_YMM2_Imm8_VEX,
	"VPSHUFLW_YMM1_YMM2_Imm8_EVEX":                     VPSHUFLW_YMM1_YMM2_Imm8_EVEX,
	"VPSHUFLW_YMM1_M256_Imm8_VEX":                      VPSHUFLW_YMM1_M256_Imm8_VEX,
	"VPSHUFLW_YMM1_M256_Imm8_EVEX":                     VPSHUFLW_YMM1_M256_Imm8_EVEX,
	"VPSHUFLW_ZMM1_ZMM2_Imm8_EVEX":                     VPSHUFLW_ZMM1_ZMM2_Imm8_EVEX,
	"VPSHUFLW_ZMM1_M512_Imm8_EVEX":                     VPSHUFLW_ZMM1_M512_Imm8_EVEX,
	"VPSIGNB_XMM1_XMMV_XMM2_VEX":                       VPSIGNB_XMM1_XMMV_XMM2_VEX,
	"VPSIGNB_XMM1_XMMV_M128_VEX":                       VPSIGNB_XMM1_XMMV_M128_VEX,
	"VPSIGNB_YMM1_YMMV_YMM2_VEX":                       VPSIGNB_YMM1_YMMV_YMM2_VEX,
	"VPSIGNB_YMM1_YMMV_M256_VEX":                       VPSIGNB_YMM1_YMMV_M256_VEX,
	"VPSIGND_XMM1_XMMV_XMM2_VEX":                       VPSIGND_XMM1_XMMV_XMM2_VEX,
	"VPSIGND_XMM1_XMMV_M128_VEX":                       VPSIGND_XMM1_XMMV_M128_VEX,
	"VPSIGND_YMM1_YMMV_YMM2_VEX":                       VPSIGND_YMM1_YMMV_YMM2_VEX,
	"VPSIGND_YMM1_YMMV_M256_VEX":                       VPSIGND_YMM1_YMMV_M256_VEX,
	"VPSIGNW_XMM1_XMMV_XMM2_VEX":                       VPSIGNW_XMM1_XMMV_XMM2_VEX,
	"VPSIGNW_XMM1_XMMV_M128_VEX":                       VPSIGNW_XMM1_XMMV_M128_VEX,
	"VPSIGNW_YMM1_YMMV_YMM2_VEX":                       VPSIGNW_YMM1_YMMV_YMM2_VEX,
	"VPSIGNW_YMM1_YMMV_M256_VEX":                       VPSIGNW_YMM1_YMMV_M256_VEX,
	"VPSLLD_XMM1_XMMV_XMM2_VEX":                        VPSLLD_XMM1_XMMV_XMM2_VEX,
	"VPSLLD_XMM1_XMMV_XMM2_EVEX":                       VPSLLD_XMM1_XMMV_XMM2_EVEX,
	"VPSLLD_XMM1_XMMV_M128_VEX":                        VPSLLD_XMM1_XMMV_M128_VEX,
	"VPSLLD_XMM1_XMMV_M128_EVEX":                       VPSLLD_XMM1_XMMV_M128_EVEX,
	"VPSLLD_YMM1_YMMV_XMM2_VEX":                        VPSLLD_YMM1_YMMV_XMM2_VEX,
	"VPSLLD_YMM1_YMMV_XMM2_EVEX":                       VPSLLD_YMM1_YMMV_XMM2_EVEX,
	"VPSLLD_YMM1_YMMV_M128_VEX":                        VPSLLD_YMM1_YMMV_M128_VEX,
	"VPSLLD_YMM1_YMMV_M128_EVEX":                       VPSLLD_YMM1_YMMV_M128_EVEX,
	"VPSLLD_ZMM1_ZMMV_XMM2_EVEX":                       VPSLLD_ZMM1_ZMMV_XMM2_EVEX,
	"VPSLLD_ZMM1_ZMMV_M128_EVEX":                       VPSLLD_ZMM1_ZMMV_M128_EVEX,
	"VPSLLD_XMMV_XMM2_Imm8_VEX":                        VPSLLD_XMMV_XMM2_Imm8_VEX,
	"VPSLLD_XMMV_XMM2_Imm8_EVEX":                       VPSLLD_XMMV_XMM2_Imm8_EVEX,
	"VPSLLD_XMMV_M128_Imm8_EVEX":                       VPSLLD_XMMV_M128_Imm8_EVEX,
	"VPSLLD_XMMV_M32bcst128_Imm8_EVEX":                 VPSLLD_XMMV_M32bcst128_Imm8_EVEX,
	"VPSLLD_YMMV_YMM2_Imm8_VEX":                        VPSLLD_YMMV_YMM2_Imm8_VEX,
	"VPSLLD_YMMV_YMM2_Imm8_EVEX":                       VPSLLD_YMMV_YMM2_Imm8_EVEX,
	"VPSLLD_YMMV_M256_Imm8_EVEX":                       VPSLLD_YMMV_M256_Imm8_EVEX,
	"VPSLLD_YMMV_M32bcst256_Imm8_EVEX":                 VPSLLD_YMMV_M32bcst256_Imm8_EVEX,
	"VPSLLD_ZMMV_ZMM2_Imm8_EVEX":                       VPSLLD_ZMMV_ZMM2_Imm8_EVEX,
	"VPSLLD_ZMMV_M512_Imm8_EVEX":                       VPSLLD_ZMMV_M512_Imm8_EVEX,
	"VPSLLD_ZMMV_M32bcst512_Imm8_EVEX":                 VPSLLD_ZMMV_M32bcst512_Imm8_EVEX,
	"VPSLLDQ_XMMV_XMM2_Imm8_VEX":                       VPSLLDQ_XMMV_XMM2_Imm8_VEX,
	"VPSLLDQ_XMMV_XMM2_Imm8_EVEX":                      VPSLLDQ_XMMV_XMM2_Imm8_EVEX,
	"VPSLLDQ_XMMV_M128_Imm8_EVEX":                      VPSLLDQ_XMMV_M128_Imm8_EVEX,
	"VPSLLDQ_YMMV_YMM2_Imm8_VEX":                       VPSLLDQ_YMMV_YMM2_Imm8_VEX,
	"VPSLLDQ_YMMV_YMM2_Imm8_EVEX":                      VPSLLDQ_YMMV_YMM2_Imm8_EVEX,
	"VPSLLDQ_YMMV_M256_Imm8_EVEX":                      VPSLLDQ_YMMV_M256_Imm8_EVEX,
	"VPSLLDQ_ZMMV_ZMM2_Imm8_EVEX":                      VPSLLDQ_ZMMV_ZMM2_Imm8_EVEX,
	"VPSLLDQ_ZMMV_M512_Imm8_EVEX":                      VPSLLDQ_ZMMV_M512_Imm8_EVEX,
	"VPSLLQ_XMM1_XMMV_XMM2_VEX":                        VPSLLQ_XMM1_XMMV_XMM2_VEX,
	"VPSLLQ_XMM1_XMMV_XMM2_EVEX":                       VPSLLQ_XMM1_XMMV_XMM2_EVEX,
	"VPSLLQ_XMM1_XMMV_M128_VEX":                        VPSLLQ_XMM1_XMMV_M128_VEX,
	"VPSLLQ_XMM1_XMMV_M128_EVEX":                       VPSLLQ_XMM1_XMMV_M128_EVEX,
	"VPSLLQ_YMM1_YMMV_XMM2_VEX":                        VPSLLQ_YMM1_YMMV_XMM2_VEX,
	"VPSLLQ_YMM1_YMMV_XMM2_EVEX":                       VPSLLQ_YMM1_YMMV_XMM2_EVEX,
	"VPSLLQ_YMM1_YMMV_M128_VEX":                        VPSLLQ_YMM1_YMMV_M128_VEX,
	"VPSLLQ_YMM1_YMMV_M128_EVEX":                       VPSLLQ_YMM1_YMMV_M128_EVEX,
	"VPSLLQ_ZMM1_ZMMV_XMM2_EVEX":                       VPSLLQ_ZMM1_ZMMV_XMM2_EVEX,
	"VPSLLQ_ZMM1_ZMMV_M128_EVEX":                       VPSLLQ_ZMM1_ZMMV_M128_EVEX,
	"VPSLLQ_XMMV_XMM2_Imm8_VEX":                        VPSLLQ_XMMV_XMM2_Imm8_VEX,
	"VPSLLQ_XMMV_XMM2_Imm8_EVEX":                       VPSLLQ_XMMV_XMM2_Imm8_EVEX,
	"VPSLLQ_XMMV_M128_Imm8_EVEX":                       VPSLLQ_XMMV_M128_Imm8_EVEX,
	"VPSLLQ_XMMV_M64bcst128_Imm8_EVEX":                 VPSLLQ_XMMV_M64bcst128_Imm8_EVEX,
	"VPSLLQ_YMMV_YMM2_Imm8_VEX":                        VPSLLQ_YMMV_YMM2_Imm8_VEX,
	"VPSLLQ_YMMV_YMM2_Imm8_EVEX":                       VPSLLQ_YMMV_YMM2_Imm8_EVEX,
	"VPSLLQ_YMMV_M256_Imm8_EVEX":                       VPSLLQ_YMMV_M256_Imm8_EVEX,
	"VPSLLQ_YMMV_M64bcst256_Imm8_EVEX":                 VPSLLQ_YMMV_M64bcst256_Imm8_EVEX,
	"VPSLLQ_ZMMV_ZMM2_Imm8_EVEX":                       VPSLLQ_ZMMV_ZMM2_Imm8_EVEX,
	"VPSLLQ_ZMMV_M512_Imm8_EVEX":                       VPSLLQ_ZMMV_M512_Imm8_EVEX,
	"VPSLLQ_ZMMV_M64bcst512_Imm8_EVEX":                 VPSLLQ_ZMMV_M64bcst512_Imm8_EVEX,
	"VPSLLW_XMM1_XMMV_XMM2_VEX":                        VPSLLW_XMM1_XMMV_XMM2_VEX,
	"VPSLLW_XMM1_XMMV_XMM2_EVEX":                       VPSLLW_XMM1_XMMV_XMM2_EVEX,
	"VPSLLW_XMM1_XMMV_M128_VEX":                        VPSLLW_XMM1_XMMV_M128_VEX,
	"VPSLLW_XMM1_XMMV_M128_EVEX":                       VPSLLW_XMM1_XMMV_M128_EVEX,
	"VPSLLW_YMM1_YMMV_XMM2_VEX":                        VPSLLW_YMM1_YMMV_XMM2_VEX,
	"VPSLLW_YMM1_YMMV_XMM2_EVEX":                       VPSLLW_YMM1_YMMV_XMM2_EVEX,
	"VPSLLW_YMM1_YMMV_M128_VEX":                        VPSLLW_YMM1_YMMV_M128_VEX,
	"VPSLLW_YMM1_YMMV_M128_EVEX":                       VPSLLW_YMM1_YMMV_M128_EVEX,
	"VPSLLW_ZMM1_ZMMV_XMM2_EVEX":                       VPSLLW_ZMM1_ZMMV_XMM2_EVEX,
	"VPSLLW_ZMM1_ZMMV_M128_EVEX":                       VPSLLW_ZMM1_ZMMV_M128_EVEX,
	"VPSLLW_XMMV_XMM2_Imm8_VEX":                        VPSLLW_XMMV_XMM2_Imm8_VEX,
	"VPSLLW_XMMV_XMM2_Imm8_EVEX":                       VPSLLW_XMMV_XMM2_Imm8_EVEX,
	"VPSLLW_XMMV_M128_Imm8_EVEX":                       VPSLLW_XMMV_M128_Imm8_EVEX,
	"VPSLLW_YMMV_YMM2_Imm8_VEX":                        VPSLLW_YMMV_YMM2_Imm8_VEX,
	"VPSLLW_YMMV_YMM2_Imm8_EVEX":                       VPSLLW_YMMV_YMM2_Imm8_EVEX,
	"VPSLLW_YMMV_M256_Imm8_EVEX":                       VPSLLW_YMMV_M256_Imm8_EVEX,
	"VPSLLW_ZMMV_ZMM2_Imm8_EVEX":                       VPSLLW_ZMMV_ZMM2_Imm8_EVEX,
	"VPSLLW_ZMMV_M512_Imm8_EVEX":                       VPSLLW_ZMMV_M512_Imm8_EVEX,
	"VPSRAD_XMM1_XMMV_XMM2_VEX":                        VPSRAD_XMM1_XMMV_XMM2_VEX,
	"VPSRAD_XMM1_XMMV_XMM2_EVEX":                       VPSRAD_XMM1_XMMV_XMM2_EVEX,
	"VPSRAD_XMM1_XMMV_M128_VEX":                        VPSRAD_XMM1_XMMV_M128_VEX,
	"VPSRAD_XMM1_XMMV_M128_EVEX":                       VPSRAD_XMM1_XMMV_M128_EVEX,
	"VPSRAD_YMM1_YMMV_XMM2_VEX":                        VPSRAD_YMM1_YMMV_XMM2_VEX,
	"VPSRAD_YMM1_YMMV_XMM2_EVEX":                       VPSRAD_YMM1_YMMV_XMM2_EVEX,
	"VPSRAD_YMM1_YMMV_M128_VEX":                        VPSRAD_YMM1_YMMV_M128_VEX,
	"VPSRAD_YMM1_YMMV_M128_EVEX":                       VPSRAD_YMM1_YMMV_M128_EVEX,
	"VPSRAD_ZMM1_ZMMV_XMM2_EVEX":                       VPSRAD_ZMM1_ZMMV_XMM2_EVEX,
	"VPSRAD_ZMM1_ZMMV_M128_EVEX":                       VPSRAD_ZMM1_ZMMV_M128_EVEX,
	"VPSRAD_XMMV_XMM2_Imm8_VEX":                        VPSRAD_XMMV_XMM2_Imm8_VEX,
	"VPSRAD_XMMV_XMM2_Imm8_EVEX":                       VPSRAD_XMMV_XMM2_Imm8_EVEX,
	"VPSRAD_XMMV_M128_Imm8_EVEX":                       VPSRAD_XMMV_M128_Imm8_EVEX,
	"VPSRAD_XMMV_M32bcst128_Imm8_EVEX":                 VPSRAD_XMMV_M32bcst128_Imm8_EVEX,
	"VPSRAD_YMMV_YMM2_Imm8_VEX":                        VPSRAD_YMMV_YMM2_Imm8_VEX,
	"VPSRAD_YMMV_YMM2_Imm8_EVEX":                       VPSRAD_YMMV_YMM2_Imm8_EVEX,
	"VPSRAD_YMMV_M256_Imm8_EVEX":                       VPSRAD_YMMV_M256_Imm8_EVEX,
	"VPSRAD_YMMV_M32bcst256_Imm8_EVEX":                 VPSRAD_YMMV_M32bcst256_Imm8_EVEX,
	"VPSRAD_ZMMV_ZMM2_Imm8_EVEX":                       VPSRAD_ZMMV_ZMM2_Imm8_EVEX,
	"VPSRAD_ZMMV_M512_Imm8_EVEX":                       VPSRAD_ZMMV_M512_Imm8_EVEX,
	"VPSRAD_ZMMV_M32bcst512_Imm8_EVEX":                 VPSRAD_ZMMV_M32bcst512_Imm8_EVEX,
	"VPSRAQ_XMM1_XMMV_XMM2_EVEX":                       VPSRAQ_XMM1_XMMV_XMM2_EVEX,
	"VPSRAQ_XMM1_XMMV_M128_EVEX":                       VPSRAQ_XMM1_XMMV_M128_EVEX,
	"VPSRAQ_YMM1_YMMV_XMM2_EVEX":                       VPSRAQ_YMM1_YMMV_XMM2_EVEX,
	"VPSRAQ_YMM1_YMMV_M128_EVEX":                       VPSRAQ_YMM1_YMMV_M128_EVEX,
	"VPSRAQ_ZMM1_ZMMV_XMM2_EVEX":                       VPSRAQ_ZMM1_ZMMV_XMM2_EVEX,
	"VPSRAQ_ZMM1_ZMMV_M128_EVEX":                       VPSRAQ_ZMM1_ZMMV_M128_EVEX,
	"VPSRAQ_XMMV_XMM2_Imm8_EVEX":                       VPSRAQ_XMMV_XMM2_Imm8_EVEX,
	"VPSRAQ_XMMV_M128_Imm8_EVEX":                       VPSRAQ_XMMV_M128_Imm8_EVEX,
	"VPSRAQ_XMMV_M64bcst128_Imm8_EVEX":                 VPSRAQ_XMMV_M64bcst128_Imm8_EVEX,
	"VPSRAQ_YMMV_YMM2_Imm8_EVEX":                       VPSRAQ_YMMV_YMM2_Imm8_EVEX,
	"VPSRAQ_YMMV_M256_Imm8_EVEX":                       VPSRAQ_YMMV_M256_Imm8_EVEX,
	"VPSRAQ_YMMV_M64bcst256_Imm8_EVEX":                 VPSRAQ_YMMV_M64bcst256_Imm8_EVEX,
	"VPSRAQ_ZMMV_ZMM2_Imm8_EVEX":                       VPSRAQ_ZMMV_ZMM2_Imm8_EVEX,
	"VPSRAQ_ZMMV_M512_Imm8_EVEX":                       VPSRAQ_ZMMV_M512_Imm8_EVEX,
	"VPSRAQ_ZMMV_M64bcst512_Imm8_EVEX":                 VPSRAQ_ZMMV_M64bcst512_Imm8_EVEX,
	"VPSRAW_XMM1_XMMV_XMM2_VEX":                        VPSRAW_XMM1_XMMV_XMM2_VEX,
	"VPSRAW_XMM1_XMMV_XMM2_EVEX":                       VPSRAW_XMM1_XMMV_XMM2_EVEX,
	"VPSRAW_XMM1_XMMV_M128_VEX":                        VPSRAW_XMM1_XMMV_M128_VEX,
	"VPSRAW_XMM1_XMMV_M128_EVEX":                       VPSRAW_XMM1_XMMV_M128_EVEX,
	"VPSRAW_YMM1_YMMV_XMM2_VEX":                        VPSRAW_YMM1_YMMV_XMM2_VEX,
	"VPSRAW_YMM1_YMMV_XMM2_EVEX":                       VPSRAW_YMM1_YMMV_XMM2_EVEX,
	"VPSRAW_YMM1_YMMV_M128_VEX":                        VPSRAW_YMM1_YMMV_M128_VEX,
	"VPSRAW_YMM1_YMMV_M128_EVEX":                       VPSRAW_YMM1_YMMV_M128_EVEX,
	"VPSRAW_ZMM1_ZMMV_XMM2_EVEX":                       VPSRAW_ZMM1_ZMMV_XMM2_EVEX,
	"VPSRAW_ZMM1_ZMMV_M128_EVEX":                       VPSRAW_ZMM1_ZMMV_M128_EVEX,
	"VPSRAW_XMMV_XMM2_Imm8_VEX":                        VPSRAW_XMMV_XMM2_Imm8_VEX,
	"VPSRAW_XMMV_XMM2_Imm8_EVEX":                       VPSRAW_XMMV_XMM2_Imm8_EVEX,
	"VPSRAW_XMMV_M128_Imm8_EVEX":                       VPSRAW_XMMV_M128_Imm8_EVEX,
	"VPSRAW_YMMV_YMM2_Imm8_VEX":                        VPSRAW_YMMV_YMM2_Imm8_VEX,
	"VPSRAW_YMMV_YMM2_Imm8_EVEX":                       VPSRAW_YMMV_YMM2_Imm8_EVEX,
	"VPSRAW_YMMV_M256_Imm8_EVEX":                       VPSRAW_YMMV_M256_Imm8_EVEX,
	"VPSRAW_ZMMV_ZMM2_Imm8_EVEX":                       VPSRAW_ZMMV_ZMM2_Imm8_EVEX,
	"VPSRAW_ZMMV_M512_Imm8_EVEX":                       VPSRAW_ZMMV_M512_Imm8_EVEX,
	"VPSRLD_XMM1_XMMV_XMM2_VEX":                        VPSRLD_XMM1_XMMV_XMM2_VEX,
	"VPSRLD_XMM1_XMMV_XMM2_EVEX":                       VPSRLD_XMM1_XMMV_XMM2_EVEX,
	"VPSRLD_XMM1_XMMV_M128_VEX":                        VPSRLD_XMM1_XMMV_M128_VEX,
	"VPSRLD_XMM1_XMMV_M128_EVEX":                       VPSRLD_XMM1_XMMV_M128_EVEX,
	"VPSRLD_YMM1_YMMV_XMM2_VEX":                        VPSRLD_YMM1_YMMV_XMM2_VEX,
	"VPSRLD_YMM1_YMMV_XMM2_EVEX":                       VPSRLD_YMM1_YMMV_XMM2_EVEX,
	"VPSRLD_YMM1_YMMV_M128_VEX":                        VPSRLD_YMM1_YMMV_M128_VEX,
	"VPSRLD_YMM1_YMMV_M128_EVEX":                       VPSRLD_YMM1_YMMV_M128_EVEX,
	"VPSRLD_ZMM1_ZMMV_XMM2_EVEX":                       VPSRLD_ZMM1_ZMMV_XMM2_EVEX,
	"VPSRLD_ZMM1_ZMMV_M128_EVEX":                       VPSRLD_ZMM1_ZMMV_M128_EVEX,
	"VPSRLD_XMMV_XMM2_Imm8_VEX":                        VPSRLD_XMMV_XMM2_Imm8_VEX,
	"VPSRLD_XMMV_XMM2_Imm8_EVEX":                       VPSRLD_XMMV_XMM2_Imm8_EVEX,
	"VPSRLD_XMMV_M128_Imm8_EVEX":                       VPSRLD_XMMV_M128_Imm8_EVEX,
	"VPSRLD_XMMV_M32bcst128_Imm8_EVEX":                 VPSRLD_XMMV_M32bcst128_Imm8_EVEX,
	"VPSRLD_YMMV_YMM2_Imm8_VEX":                        VPSRLD_YMMV_YMM2_Imm8_VEX,
	"VPSRLD_YMMV_YMM2_Imm8_EVEX":                       VPSRLD_YMMV_YMM2_Imm8_EVEX,
	"VPSRLD_YMMV_M256_Imm8_EVEX":                       VPSRLD_YMMV_M256_Imm8_EVEX,
	"VPSRLD_YMMV_M32bcst256_Imm8_EVEX":                 VPSRLD_YMMV_M32bcst256_Imm8_EVEX,
	"VPSRLD_ZMMV_ZMM2_Imm8_EVEX":                       VPSRLD_ZMMV_ZMM2_Imm8_EVEX,
	"VPSRLD_ZMMV_M512_Imm8_EVEX":                       VPSRLD_ZMMV_M512_Imm8_EVEX,
	"VPSRLD_ZMMV_M32bcst512_Imm8_EVEX":                 VPSRLD_ZMMV_M32bcst512_Imm8_EVEX,
	"VPSRLDQ_XMMV_XMM2_Imm8_VEX":                       VPSRLDQ_XMMV_XMM2_Imm8_VEX,
	"VPSRLDQ_XMMV_XMM2_Imm8_EVEX":                      VPSRLDQ_XMMV_XMM2_Imm8_EVEX,
	"VPSRLDQ_XMMV_M128_Imm8_EVEX":                      VPSRLDQ_XMMV_M128_Imm8_EVEX,
	"VPSRLDQ_YMMV_YMM2_Imm8_VEX":                       VPSRLDQ_YMMV_YMM2_Imm8_VEX,
	"VPSRLDQ_YMMV_YMM2_Imm8_EVEX":                      VPSRLDQ_YMMV_YMM2_Imm8_EVEX,
	"VPSRLDQ_YMMV_M256_Imm8_EVEX":                      VPSRLDQ_YMMV_M256_Imm8_EVEX,
	"VPSRLDQ_ZMMV_ZMM2_Imm8_EVEX":                      VPSRLDQ_ZMMV_ZMM2_Imm8_EVEX,
	"VPSRLDQ_ZMMV_M512_Imm8_EVEX":                      VPSRLDQ_ZMMV_M512_Imm8_EVEX,
	"VPSRLQ_XMM1_XMMV_XMM2_VEX":                        VPSRLQ_XMM1_XMMV_XMM2_VEX,
	"VPSRLQ_XMM1_XMMV_XMM2_EVEX":                       VPSRLQ_XMM1_XMMV_XMM2_EVEX,
	"VPSRLQ_XMM1_XMMV_M128_VEX":                        VPSRLQ_XMM1_XMMV_M128_VEX,
	"VPSRLQ_XMM1_XMMV_M128_EVEX":                       VPSRLQ_XMM1_XMMV_M128_EVEX,
	"VPSRLQ_YMM1_YMMV_XMM2_VEX":                        VPSRLQ_YMM1_YMMV_XMM2_VEX,
	"VPSRLQ_YMM1_YMMV_XMM2_EVEX":                       VPSRLQ_YMM1_YMMV_XMM2_EVEX,
	"VPSRLQ_YMM1_YMMV_M128_VEX":                        VPSRLQ_YMM1_YMMV_M128_VEX,
	"VPSRLQ_YMM1_YMMV_M128_EVEX":                       VPSRLQ_YMM1_YMMV_M128_EVEX,
	"VPSRLQ_ZMM1_ZMMV_XMM2_EVEX":                       VPSRLQ_ZMM1_ZMMV_XMM2_EVEX,
	"VPSRLQ_ZMM1_ZMMV_M128_EVEX":                       VPSRLQ_ZMM1_ZMMV_M128_EVEX,
	"VPSRLQ_XMMV_XMM2_Imm8_VEX":                        VPSRLQ_XMMV_XMM2_Imm8_VEX,
	"VPSRLQ_XMMV_XMM2_Imm8_EVEX":                       VPSRLQ_XMMV_XMM2_Imm8_EVEX,
	"VPSRLQ_XMMV_M128_Imm8_EVEX":                       VPSRLQ_XMMV_M128_Imm8_EVEX,
	"VPSRLQ_XMMV_M64bcst128_Imm8_EVEX":                 VPSRLQ_XMMV_M64bcst128_Imm8_EVEX,
	"VPSRLQ_YMMV_YMM2_Imm8_VEX":                        VPSRLQ_YMMV_YMM2_Imm8_VEX,
	"VPSRLQ_YMMV_YMM2_Imm8_EVEX":                       VPSRLQ_YMMV_YMM2_Imm8_EVEX,
	"VPSRLQ_YMMV_M256_Imm8_EVEX":                       VPSRLQ_YMMV_M256_Imm8_EVEX,
	"VPSRLQ_YMMV_M64bcst256_Imm8_EVEX":                 VPSRLQ_YMMV_M64bcst256_Imm8_EVEX,
	"VPSRLQ_ZMMV_ZMM2_Imm8_EVEX":                       VPSRLQ_ZMMV_ZMM2_Imm8_EVEX,
	"VPSRLQ_ZMMV_M512_Imm8_EVEX":                       VPSRLQ_ZMMV_M512_Imm8_EVEX,
	"VPSRLQ_ZMMV_M64bcst512_Imm8_EVEX":                 VPSRLQ_ZMMV_M64bcst512_Imm8_EVEX,
	"VPSRLW_XMM1_XMMV_XMM2_VEX":                        VPSRLW_XMM1_XMMV_XMM2_VEX,
	"VPSRLW_XMM1_XMMV_XMM2_EVEX":                       VPSRLW_XMM1_XMMV_XMM2_EVEX,
	"VPSRLW_XMM1_XMMV_M128_VEX":                        VPSRLW_XMM1_XMMV_M128_VEX,
	"VPSRLW_XMM1_XMMV_M128_EVEX":                       VPSRLW_XMM1_XMMV_M128_EVEX,
	"VPSRLW_YMM1_YMMV_XMM2_VEX":                        VPSRLW_YMM1_YMMV_XMM2_VEX,
	"VPSRLW_YMM1_YMMV_XMM2_EVEX":                       VPSRLW_YMM1_YMMV_XMM2_EVEX,
	"VPSRLW_YMM1_YMMV_M128_VEX":                        VPSRLW_YMM1_YMMV_M128_VEX,
	"VPSRLW_YMM1_YMMV_M128_EVEX":                       VPSRLW_YMM1_YMMV_M128_EVEX,
	"VPSRLW_ZMM1_ZMMV_XMM2_EVEX":                       VPSRLW_ZMM1_ZMMV_XMM2_EVEX,
	"VPSRLW_ZMM1_ZMMV_M128_EVEX":                       VPSRLW_ZMM1_ZMMV_M128_EVEX,
	"VPSRLW_XMMV_XMM2_Imm8_VEX":                        VPSRLW_XMMV_XMM2_Imm8_VEX,
	"VPSRLW_XMMV_XMM2_Imm8_EVEX":                       VPSRLW_XMMV_XMM2_Imm8_EVEX,
	"VPSRLW_XMMV_M128_Imm8_EVEX":                       VPSRLW_XMMV_M128_Imm8_EVEX,
	"VPSRLW_YMMV_YMM2_Imm8_VEX":                        VPSRLW_YMMV_YMM2_Imm8_VEX,
	"VPSRLW_YMMV_YMM2_Imm8_EVEX":                       VPSRLW_YMMV_YMM2_Imm8_EVEX,
	"VPSRLW_YMMV_M256_Imm8_EVEX":                       VPSRLW_YMMV_M256_Imm8_EVEX,
	"VPSRLW_ZMMV_ZMM2_Imm8_EVEX":                       VPSRLW_ZMMV_ZMM2_Imm8_EVEX,
	"VPSRLW_ZMMV_M512_Imm8_EVEX":                       VPSRLW_ZMMV_M512_Imm8_EVEX,
	"VPSUBB_XMM1_XMMV_XMM2_VEX":                        VPSUBB_XMM1_XMMV_XMM2_VEX,
	"VPSUBB_XMM1_XMMV_XMM2_EVEX":                       VPSUBB_XMM1_XMMV_XMM2_EVEX,
	"VPSUBB_XMM1_XMMV_M128_VEX":                        VPSUBB_XMM1_XMMV_M128_VEX,
	"VPSUBB_XMM1_XMMV_M128_EVEX":                       VPSUBB_XMM1_XMMV_M128_EVEX,
	"VPSUBB_YMM1_YMMV_YMM2_VEX":                        VPSUBB_YMM1_YMMV_YMM2_VEX,
	"VPSUBB_YMM1_YMMV_YMM2_EVEX":                       VPSUBB_YMM1_YMMV_YMM2_EVEX,
	"VPSUBB_YMM1_YMMV_M256_VEX":                        VPSUBB_YMM1_YMMV_M256_VEX,
	"VPSUBB_YMM1_YMMV_M256_EVEX":                       VPSUBB_YMM1_YMMV_M256_EVEX,
	"VPSUBB_ZMM1_ZMMV_ZMM2_EVEX":                       VPSUBB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPSUBB_ZMM1_ZMMV_M512_EVEX":                       VPSUBB_ZMM1_ZMMV_M512_EVEX,
	"VPSUBD_XMM1_XMMV_XMM2_VEX":                        VPSUBD_XMM1_XMMV_XMM2_VEX,
	"VPSUBD_XMM1_XMMV_XMM2_EVEX":                       VPSUBD_XMM1_XMMV_XMM2_EVEX,
	"VPSUBD_XMM1_XMMV_M128_VEX":                        VPSUBD_XMM1_XMMV_M128_VEX,
	"VPSUBD_XMM1_XMMV_M128_EVEX":                       VPSUBD_XMM1_XMMV_M128_EVEX,
	"VPSUBD_XMM1_XMMV_M32bcst128_EVEX":                 VPSUBD_XMM1_XMMV_M32bcst128_EVEX,
	"VPSUBD_YMM1_YMMV_YMM2_VEX":                        VPSUBD_YMM1_YMMV_YMM2_VEX,
	"VPSUBD_YMM1_YMMV_YMM2_EVEX":                       VPSUBD_YMM1_YMMV_YMM2_EVEX,
	"VPSUBD_YMM1_YMMV_M256_VEX":                        VPSUBD_YMM1_YMMV_M256_VEX,
	"VPSUBD_YMM1_YMMV_M256_EVEX":                       VPSUBD_YMM1_YMMV_M256_EVEX,
	"VPSUBD_YMM1_YMMV_M32bcst256_EVEX":                 VPSUBD_YMM1_YMMV_M32bcst256_EVEX,
	"VPSUBD_ZMM1_ZMMV_ZMM2_EVEX":                       VPSUBD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPSUBD_ZMM1_ZMMV_M512_EVEX":                       VPSUBD_ZMM1_ZMMV_M512_EVEX,
	"VPSUBD_ZMM1_ZMMV_M32bcst512_EVEX":                 VPSUBD_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPSUBQ_XMM1_XMMV_XMM2_VEX":                        VPSUBQ_XMM1_XMMV_XMM2_VEX,
	"VPSUBQ_XMM1_XMMV_XMM2_EVEX":                       VPSUBQ_XMM1_XMMV_XMM2_EVEX,
	"VPSUBQ_XMM1_XMMV_M128_VEX":                        VPSUBQ_XMM1_XMMV_M128_VEX,
	"VPSUBQ_XMM1_XMMV_M128_EVEX":                       VPSUBQ_XMM1_XMMV_M128_EVEX,
	"VPSUBQ_XMM1_XMMV_M64bcst128_EVEX":                 VPSUBQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPSUBQ_YMM1_YMMV_YMM2_VEX":                        VPSUBQ_YMM1_YMMV_YMM2_VEX,
	"VPSUBQ_YMM1_YMMV_YMM2_EVEX":                       VPSUBQ_YMM1_YMMV_YMM2_EVEX,
	"VPSUBQ_YMM1_YMMV_M256_VEX":                        VPSUBQ_YMM1_YMMV_M256_VEX,
	"VPSUBQ_YMM1_YMMV_M256_EVEX":                       VPSUBQ_YMM1_YMMV_M256_EVEX,
	"VPSUBQ_YMM1_YMMV_M64bcst256_EVEX":                 VPSUBQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPSUBQ_ZMM1_ZMMV_ZMM2_EVEX":                       VPSUBQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPSUBQ_ZMM1_ZMMV_M512_EVEX":                       VPSUBQ_ZMM1_ZMMV_M512_EVEX,
	"VPSUBQ_ZMM1_ZMMV_M64bcst512_EVEX":                 VPSUBQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPSUBSB_XMM1_XMMV_XMM2_VEX":                       VPSUBSB_XMM1_XMMV_XMM2_VEX,
	"VPSUBSB_XMM1_XMMV_XMM2_EVEX":                      VPSUBSB_XMM1_XMMV_XMM2_EVEX,
	"VPSUBSB_XMM1_XMMV_M128_VEX":                       VPSUBSB_XMM1_XMMV_M128_VEX,
	"VPSUBSB_XMM1_XMMV_M128_EVEX":                      VPSUBSB_XMM1_XMMV_M128_EVEX,
	"VPSUBSB_YMM1_YMMV_YMM2_VEX":                       VPSUBSB_YMM1_YMMV_YMM2_VEX,
	"VPSUBSB_YMM1_YMMV_YMM2_EVEX":                      VPSUBSB_YMM1_YMMV_YMM2_EVEX,
	"VPSUBSB_YMM1_YMMV_M256_VEX":                       VPSUBSB_YMM1_YMMV_M256_VEX,
	"VPSUBSB_YMM1_YMMV_M256_EVEX":                      VPSUBSB_YMM1_YMMV_M256_EVEX,
	"VPSUBSB_ZMM1_ZMMV_ZMM2_EVEX":                      VPSUBSB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPSUBSB_ZMM1_ZMMV_M512_EVEX":                      VPSUBSB_ZMM1_ZMMV_M512_EVEX,
	"VPSUBSW_XMM1_XMMV_XMM2_VEX":                       VPSUBSW_XMM1_XMMV_XMM2_VEX,
	"VPSUBSW_XMM1_XMMV_XMM2_EVEX":                      VPSUBSW_XMM1_XMMV_XMM2_EVEX,
	"VPSUBSW_XMM1_XMMV_M128_VEX":                       VPSUBSW_XMM1_XMMV_M128_VEX,
	"VPSUBSW_XMM1_XMMV_M128_EVEX":                      VPSUBSW_XMM1_XMMV_M128_EVEX,
	"VPSUBSW_YMM1_YMMV_YMM2_VEX":                       VPSUBSW_YMM1_YMMV_YMM2_VEX,
	"VPSUBSW_YMM1_YMMV_YMM2_EVEX":                      VPSUBSW_YMM1_YMMV_YMM2_EVEX,
	"VPSUBSW_YMM1_YMMV_M256_VEX":                       VPSUBSW_YMM1_YMMV_M256_VEX,
	"VPSUBSW_YMM1_YMMV_M256_EVEX":                      VPSUBSW_YMM1_YMMV_M256_EVEX,
	"VPSUBSW_ZMM1_ZMMV_ZMM2_EVEX":                      VPSUBSW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPSUBSW_ZMM1_ZMMV_M512_EVEX":                      VPSUBSW_ZMM1_ZMMV_M512_EVEX,
	"VPSUBUSB_XMM1_XMMV_XMM2_VEX":                      VPSUBUSB_XMM1_XMMV_XMM2_VEX,
	"VPSUBUSB_XMM1_XMMV_XMM2_EVEX":                     VPSUBUSB_XMM1_XMMV_XMM2_EVEX,
	"VPSUBUSB_XMM1_XMMV_M128_VEX":                      VPSUBUSB_XMM1_XMMV_M128_VEX,
	"VPSUBUSB_XMM1_XMMV_M128_EVEX":                     VPSUBUSB_XMM1_XMMV_M128_EVEX,
	"VPSUBUSB_YMM1_YMMV_YMM2_VEX":                      VPSUBUSB_YMM1_YMMV_YMM2_VEX,
	"VPSUBUSB_YMM1_YMMV_YMM2_EVEX":                     VPSUBUSB_YMM1_YMMV_YMM2_EVEX,
	"VPSUBUSB_YMM1_YMMV_M256_VEX":                      VPSUBUSB_YMM1_YMMV_M256_VEX,
	"VPSUBUSB_YMM1_YMMV_M256_EVEX":                     VPSUBUSB_YMM1_YMMV_M256_EVEX,
	"VPSUBUSB_ZMM1_ZMMV_ZMM2_EVEX":                     VPSUBUSB_ZMM1_ZMMV_ZMM2_EVEX,
	"VPSUBUSB_ZMM1_ZMMV_M512_EVEX":                     VPSUBUSB_ZMM1_ZMMV_M512_EVEX,
	"VPSUBUSW_XMM1_XMMV_XMM2_VEX":                      VPSUBUSW_XMM1_XMMV_XMM2_VEX,
	"VPSUBUSW_XMM1_XMMV_XMM2_EVEX":                     VPSUBUSW_XMM1_XMMV_XMM2_EVEX,
	"VPSUBUSW_XMM1_XMMV_M128_VEX":                      VPSUBUSW_XMM1_XMMV_M128_VEX,
	"VPSUBUSW_XMM1_XMMV_M128_EVEX":                     VPSUBUSW_XMM1_XMMV_M128_EVEX,
	"VPSUBUSW_YMM1_YMMV_YMM2_VEX":                      VPSUBUSW_YMM1_YMMV_YMM2_VEX,
	"VPSUBUSW_YMM1_YMMV_YMM2_EVEX":                     VPSUBUSW_YMM1_YMMV_YMM2_EVEX,
	"VPSUBUSW_YMM1_YMMV_M256_VEX":                      VPSUBUSW_YMM1_YMMV_M256_VEX,
	"VPSUBUSW_YMM1_YMMV_M256_EVEX":                     VPSUBUSW_YMM1_YMMV_M256_EVEX,
	"VPSUBUSW_ZMM1_ZMMV_ZMM2_EVEX":                     VPSUBUSW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPSUBUSW_ZMM1_ZMMV_M512_EVEX":                     VPSUBUSW_ZMM1_ZMMV_M512_EVEX,
	"VPSUBW_XMM1_XMMV_XMM2_VEX":                        VPSUBW_XMM1_XMMV_XMM2_VEX,
	"VPSUBW_XMM1_XMMV_XMM2_EVEX":                       VPSUBW_XMM1_XMMV_XMM2_EVEX,
	"VPSUBW_XMM1_XMMV_M128_VEX":                        VPSUBW_XMM1_XMMV_M128_VEX,
	"VPSUBW_XMM1_XMMV_M128_EVEX":                       VPSUBW_XMM1_XMMV_M128_EVEX,
	"VPSUBW_YMM1_YMMV_YMM2_VEX":                        VPSUBW_YMM1_YMMV_YMM2_VEX,
	"VPSUBW_YMM1_YMMV_YMM2_EVEX":                       VPSUBW_YMM1_YMMV_YMM2_EVEX,
	"VPSUBW_YMM1_YMMV_M256_VEX":                        VPSUBW_YMM1_YMMV_M256_VEX,
	"VPSUBW_YMM1_YMMV_M256_EVEX":                       VPSUBW_YMM1_YMMV_M256_EVEX,
	"VPSUBW_ZMM1_ZMMV_ZMM2_EVEX":                       VPSUBW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPSUBW_ZMM1_ZMMV_M512_EVEX":                       VPSUBW_ZMM1_ZMMV_M512_EVEX,
	"VPTEST_XMM1_XMM2_VEX":                             VPTEST_XMM1_XMM2_VEX,
	"VPTEST_XMM1_M128_VEX":                             VPTEST_XMM1_M128_VEX,
	"VPTEST_YMM1_YMM2_VEX":                             VPTEST_YMM1_YMM2_VEX,
	"VPTEST_YMM1_M256_VEX":                             VPTEST_YMM1_M256_VEX,
	"VPUNPCKHBW_XMM1_XMMV_XMM2_VEX":                    VPUNPCKHBW_XMM1_XMMV_XMM2_VEX,
	"VPUNPCKHBW_XMM1_XMMV_XMM2_EVEX":                   VPUNPCKHBW_XMM1_XMMV_XMM2_EVEX,
	"VPUNPCKHBW_XMM1_XMMV_M128_VEX":                    VPUNPCKHBW_XMM1_XMMV_M128_VEX,
	"VPUNPCKHBW_XMM1_XMMV_M128_EVEX":                   VPUNPCKHBW_XMM1_XMMV_M128_EVEX,
	"VPUNPCKHBW_YMM1_YMMV_YMM2_VEX":                    VPUNPCKHBW_YMM1_YMMV_YMM2_VEX,
	"VPUNPCKHBW_YMM1_YMMV_YMM2_EVEX":                   VPUNPCKHBW_YMM1_YMMV_YMM2_EVEX,
	"VPUNPCKHBW_YMM1_YMMV_M256_VEX":                    VPUNPCKHBW_YMM1_YMMV_M256_VEX,
	"VPUNPCKHBW_YMM1_YMMV_M256_EVEX":                   VPUNPCKHBW_YMM1_YMMV_M256_EVEX,
	"VPUNPCKHBW_ZMM1_ZMMV_ZMM2_EVEX":                   VPUNPCKHBW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPUNPCKHBW_ZMM1_ZMMV_M512_EVEX":                   VPUNPCKHBW_ZMM1_ZMMV_M512_EVEX,
	"VPUNPCKHDQ_XMM1_XMMV_XMM2_VEX":                    VPUNPCKHDQ_XMM1_XMMV_XMM2_VEX,
	"VPUNPCKHDQ_XMM1_XMMV_XMM2_EVEX":                   VPUNPCKHDQ_XMM1_XMMV_XMM2_EVEX,
	"VPUNPCKHDQ_XMM1_XMMV_M128_VEX":                    VPUNPCKHDQ_XMM1_XMMV_M128_VEX,
	"VPUNPCKHDQ_XMM1_XMMV_M128_EVEX":                   VPUNPCKHDQ_XMM1_XMMV_M128_EVEX,
	"VPUNPCKHDQ_XMM1_XMMV_M32bcst128_EVEX":             VPUNPCKHDQ_XMM1_XMMV_M32bcst128_EVEX,
	"VPUNPCKHDQ_YMM1_YMMV_YMM2_VEX":                    VPUNPCKHDQ_YMM1_YMMV_YMM2_VEX,
	"VPUNPCKHDQ_YMM1_YMMV_YMM2_EVEX":                   VPUNPCKHDQ_YMM1_YMMV_YMM2_EVEX,
	"VPUNPCKHDQ_YMM1_YMMV_M256_VEX":                    VPUNPCKHDQ_YMM1_YMMV_M256_VEX,
	"VPUNPCKHDQ_YMM1_YMMV_M256_EVEX":                   VPUNPCKHDQ_YMM1_YMMV_M256_EVEX,
	"VPUNPCKHDQ_YMM1_YMMV_M32bcst256_EVEX":             VPUNPCKHDQ_YMM1_YMMV_M32bcst256_EVEX,
	"VPUNPCKHDQ_ZMM1_ZMMV_ZMM2_EVEX":                   VPUNPCKHDQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPUNPCKHDQ_ZMM1_ZMMV_M512_EVEX":                   VPUNPCKHDQ_ZMM1_ZMMV_M512_EVEX,
	"VPUNPCKHDQ_ZMM1_ZMMV_M32bcst512_EVEX":             VPUNPCKHDQ_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPUNPCKHQDQ_XMM1_XMMV_XMM2_VEX":                   VPUNPCKHQDQ_XMM1_XMMV_XMM2_VEX,
	"VPUNPCKHQDQ_XMM1_XMMV_XMM2_EVEX":                  VPUNPCKHQDQ_XMM1_XMMV_XMM2_EVEX,
	"VPUNPCKHQDQ_XMM1_XMMV_M128_VEX":                   VPUNPCKHQDQ_XMM1_XMMV_M128_VEX,
	"VPUNPCKHQDQ_XMM1_XMMV_M128_EVEX":                  VPUNPCKHQDQ_XMM1_XMMV_M128_EVEX,
	"VPUNPCKHQDQ_XMM1_XMMV_M64bcst128_EVEX":            VPUNPCKHQDQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPUNPCKHQDQ_YMM1_YMMV_YMM2_VEX":                   VPUNPCKHQDQ_YMM1_YMMV_YMM2_VEX,
	"VPUNPCKHQDQ_YMM1_YMMV_YMM2_EVEX":                  VPUNPCKHQDQ_YMM1_YMMV_YMM2_EVEX,
	"VPUNPCKHQDQ_YMM1_YMMV_M256_VEX":                   VPUNPCKHQDQ_YMM1_YMMV_M256_VEX,
	"VPUNPCKHQDQ_YMM1_YMMV_M256_EVEX":                  VPUNPCKHQDQ_YMM1_YMMV_M256_EVEX,
	"VPUNPCKHQDQ_YMM1_YMMV_M64bcst256_EVEX":            VPUNPCKHQDQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPUNPCKHQDQ_ZMM1_ZMMV_ZMM2_EVEX":                  VPUNPCKHQDQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPUNPCKHQDQ_ZMM1_ZMMV_M512_EVEX":                  VPUNPCKHQDQ_ZMM1_ZMMV_M512_EVEX,
	"VPUNPCKHQDQ_ZMM1_ZMMV_M64bcst512_EVEX":            VPUNPCKHQDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPUNPCKHWD_XMM1_XMMV_XMM2_VEX":                    VPUNPCKHWD_XMM1_XMMV_XMM2_VEX,
	"VPUNPCKHWD_XMM1_XMMV_XMM2_EVEX":                   VPUNPCKHWD_XMM1_XMMV_XMM2_EVEX,
	"VPUNPCKHWD_XMM1_XMMV_M128_VEX":                    VPUNPCKHWD_XMM1_XMMV_M128_VEX,
	"VPUNPCKHWD_XMM1_XMMV_M128_EVEX":                   VPUNPCKHWD_XMM1_XMMV_M128_EVEX,
	"VPUNPCKHWD_YMM1_YMMV_YMM2_VEX":                    VPUNPCKHWD_YMM1_YMMV_YMM2_VEX,
	"VPUNPCKHWD_YMM1_YMMV_YMM2_EVEX":                   VPUNPCKHWD_YMM1_YMMV_YMM2_EVEX,
	"VPUNPCKHWD_YMM1_YMMV_M256_VEX":                    VPUNPCKHWD_YMM1_YMMV_M256_VEX,
	"VPUNPCKHWD_YMM1_YMMV_M256_EVEX":                   VPUNPCKHWD_YMM1_YMMV_M256_EVEX,
	"VPUNPCKHWD_ZMM1_ZMMV_ZMM2_EVEX":                   VPUNPCKHWD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPUNPCKHWD_ZMM1_ZMMV_M512_EVEX":                   VPUNPCKHWD_ZMM1_ZMMV_M512_EVEX,
	"VPUNPCKLBW_XMM1_XMMV_XMM2_VEX":                    VPUNPCKLBW_XMM1_XMMV_XMM2_VEX,
	"VPUNPCKLBW_XMM1_XMMV_XMM2_EVEX":                   VPUNPCKLBW_XMM1_XMMV_XMM2_EVEX,
	"VPUNPCKLBW_XMM1_XMMV_M128_VEX":                    VPUNPCKLBW_XMM1_XMMV_M128_VEX,
	"VPUNPCKLBW_XMM1_XMMV_M128_EVEX":                   VPUNPCKLBW_XMM1_XMMV_M128_EVEX,
	"VPUNPCKLBW_YMM1_YMMV_YMM2_VEX":                    VPUNPCKLBW_YMM1_YMMV_YMM2_VEX,
	"VPUNPCKLBW_YMM1_YMMV_YMM2_EVEX":                   VPUNPCKLBW_YMM1_YMMV_YMM2_EVEX,
	"VPUNPCKLBW_YMM1_YMMV_M256_VEX":                    VPUNPCKLBW_YMM1_YMMV_M256_VEX,
	"VPUNPCKLBW_YMM1_YMMV_M256_EVEX":                   VPUNPCKLBW_YMM1_YMMV_M256_EVEX,
	"VPUNPCKLBW_ZMM1_ZMMV_ZMM2_EVEX":                   VPUNPCKLBW_ZMM1_ZMMV_ZMM2_EVEX,
	"VPUNPCKLBW_ZMM1_ZMMV_M512_EVEX":                   VPUNPCKLBW_ZMM1_ZMMV_M512_EVEX,
	"VPUNPCKLDQ_XMM1_XMMV_XMM2_VEX":                    VPUNPCKLDQ_XMM1_XMMV_XMM2_VEX,
	"VPUNPCKLDQ_XMM1_XMMV_XMM2_EVEX":                   VPUNPCKLDQ_XMM1_XMMV_XMM2_EVEX,
	"VPUNPCKLDQ_XMM1_XMMV_M128_VEX":                    VPUNPCKLDQ_XMM1_XMMV_M128_VEX,
	"VPUNPCKLDQ_XMM1_XMMV_M128_EVEX":                   VPUNPCKLDQ_XMM1_XMMV_M128_EVEX,
	"VPUNPCKLDQ_XMM1_XMMV_M32bcst128_EVEX":             VPUNPCKLDQ_XMM1_XMMV_M32bcst128_EVEX,
	"VPUNPCKLDQ_YMM1_YMMV_YMM2_VEX":                    VPUNPCKLDQ_YMM1_YMMV_YMM2_VEX,
	"VPUNPCKLDQ_YMM1_YMMV_YMM2_EVEX":                   VPUNPCKLDQ_YMM1_YMMV_YMM2_EVEX,
	"VPUNPCKLDQ_YMM1_YMMV_M256_VEX":                    VPUNPCKLDQ_YMM1_YMMV_M256_VEX,
	"VPUNPCKLDQ_YMM1_YMMV_M256_EVEX":                   VPUNPCKLDQ_YMM1_YMMV_M256_EVEX,
	"VPUNPCKLDQ_YMM1_YMMV_M32bcst256_EVEX":             VPUNPCKLDQ_YMM1_YMMV_M32bcst256_EVEX,
	"VPUNPCKLDQ_ZMM1_ZMMV_ZMM2_EVEX":                   VPUNPCKLDQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPUNPCKLDQ_ZMM1_ZMMV_M512_EVEX":                   VPUNPCKLDQ_ZMM1_ZMMV_M512_EVEX,
	"VPUNPCKLDQ_ZMM1_ZMMV_M32bcst512_EVEX":             VPUNPCKLDQ_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPUNPCKLQDQ_XMM1_XMMV_XMM2_VEX":                   VPUNPCKLQDQ_XMM1_XMMV_XMM2_VEX,
	"VPUNPCKLQDQ_XMM1_XMMV_XMM2_EVEX":                  VPUNPCKLQDQ_XMM1_XMMV_XMM2_EVEX,
	"VPUNPCKLQDQ_XMM1_XMMV_M128_VEX":                   VPUNPCKLQDQ_XMM1_XMMV_M128_VEX,
	"VPUNPCKLQDQ_XMM1_XMMV_M128_EVEX":                  VPUNPCKLQDQ_XMM1_XMMV_M128_EVEX,
	"VPUNPCKLQDQ_XMM1_XMMV_M64bcst128_EVEX":            VPUNPCKLQDQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPUNPCKLQDQ_YMM1_YMMV_YMM2_VEX":                   VPUNPCKLQDQ_YMM1_YMMV_YMM2_VEX,
	"VPUNPCKLQDQ_YMM1_YMMV_YMM2_EVEX":                  VPUNPCKLQDQ_YMM1_YMMV_YMM2_EVEX,
	"VPUNPCKLQDQ_YMM1_YMMV_M256_VEX":                   VPUNPCKLQDQ_YMM1_YMMV_M256_VEX,
	"VPUNPCKLQDQ_YMM1_YMMV_M256_EVEX":                  VPUNPCKLQDQ_YMM1_YMMV_M256_EVEX,
	"VPUNPCKLQDQ_YMM1_YMMV_M64bcst256_EVEX":            VPUNPCKLQDQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPUNPCKLQDQ_ZMM1_ZMMV_ZMM2_EVEX":                  VPUNPCKLQDQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPUNPCKLQDQ_ZMM1_ZMMV_M512_EVEX":                  VPUNPCKLQDQ_ZMM1_ZMMV_M512_EVEX,
	"VPUNPCKLQDQ_ZMM1_ZMMV_M64bcst512_EVEX":            VPUNPCKLQDQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VPUNPCKLWD_XMM1_XMMV_XMM2_VEX":                    VPUNPCKLWD_XMM1_XMMV_XMM2_VEX,
	"VPUNPCKLWD_XMM1_XMMV_XMM2_EVEX":                   VPUNPCKLWD_XMM1_XMMV_XMM2_EVEX,
	"VPUNPCKLWD_XMM1_XMMV_M128_VEX":                    VPUNPCKLWD_XMM1_XMMV_M128_VEX,
	"VPUNPCKLWD_XMM1_XMMV_M128_EVEX":                   VPUNPCKLWD_XMM1_XMMV_M128_EVEX,
	"VPUNPCKLWD_YMM1_YMMV_YMM2_VEX":                    VPUNPCKLWD_YMM1_YMMV_YMM2_VEX,
	"VPUNPCKLWD_YMM1_YMMV_YMM2_EVEX":                   VPUNPCKLWD_YMM1_YMMV_YMM2_EVEX,
	"VPUNPCKLWD_YMM1_YMMV_M256_VEX":                    VPUNPCKLWD_YMM1_YMMV_M256_VEX,
	"VPUNPCKLWD_YMM1_YMMV_M256_EVEX":                   VPUNPCKLWD_YMM1_YMMV_M256_EVEX,
	"VPUNPCKLWD_ZMM1_ZMMV_ZMM2_EVEX":                   VPUNPCKLWD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPUNPCKLWD_ZMM1_ZMMV_M512_EVEX":                   VPUNPCKLWD_ZMM1_ZMMV_M512_EVEX,
	"VPXOR_XMM1_XMMV_XMM2_VEX":                         VPXOR_XMM1_XMMV_XMM2_VEX,
	"VPXOR_XMM1_XMMV_M128_VEX":                         VPXOR_XMM1_XMMV_M128_VEX,
	"VPXOR_YMM1_YMMV_YMM2_VEX":                         VPXOR_YMM1_YMMV_YMM2_VEX,
	"VPXOR_YMM1_YMMV_M256_VEX":                         VPXOR_YMM1_YMMV_M256_VEX,
	"VPXORD_XMM1_XMMV_XMM2_EVEX":                       VPXORD_XMM1_XMMV_XMM2_EVEX,
	"VPXORD_XMM1_XMMV_M128_EVEX":                       VPXORD_XMM1_XMMV_M128_EVEX,
	"VPXORD_XMM1_XMMV_M32bcst128_EVEX":                 VPXORD_XMM1_XMMV_M32bcst128_EVEX,
	"VPXORD_YMM1_YMMV_YMM2_EVEX":                       VPXORD_YMM1_YMMV_YMM2_EVEX,
	"VPXORD_YMM1_YMMV_M256_EVEX":                       VPXORD_YMM1_YMMV_M256_EVEX,
	"VPXORD_YMM1_YMMV_M32bcst256_EVEX":                 VPXORD_YMM1_YMMV_M32bcst256_EVEX,
	"VPXORD_ZMM1_ZMMV_ZMM2_EVEX":                       VPXORD_ZMM1_ZMMV_ZMM2_EVEX,
	"VPXORD_ZMM1_ZMMV_M512_EVEX":                       VPXORD_ZMM1_ZMMV_M512_EVEX,
	"VPXORD_ZMM1_ZMMV_M32bcst512_EVEX":                 VPXORD_ZMM1_ZMMV_M32bcst512_EVEX,
	"VPXORQ_XMM1_XMMV_XMM2_EVEX":                       VPXORQ_XMM1_XMMV_XMM2_EVEX,
	"VPXORQ_XMM1_XMMV_M128_EVEX":                       VPXORQ_XMM1_XMMV_M128_EVEX,
	"VPXORQ_XMM1_XMMV_M64bcst128_EVEX":                 VPXORQ_XMM1_XMMV_M64bcst128_EVEX,
	"VPXORQ_YMM1_YMMV_YMM2_EVEX":                       VPXORQ_YMM1_YMMV_YMM2_EVEX,
	"VPXORQ_YMM1_YMMV_M256_EVEX":                       VPXORQ_YMM1_YMMV_M256_EVEX,
	"VPXORQ_YMM1_YMMV_M64bcst256_EVEX":                 VPXORQ_YMM1_YMMV_M64bcst256_EVEX,
	"VPXORQ_ZMM1_ZMMV_ZMM2_EVEX":                       VPXORQ_ZMM1_ZMMV_ZMM2_EVEX,
	"VPXORQ_ZMM1_ZMMV_M512_EVEX":                       VPXORQ_ZMM1_ZMMV_M512_EVEX,
	"VPXORQ_ZMM1_ZMMV_M64bcst512_EVEX":                 VPXORQ_ZMM1_ZMMV_M64bcst512_EVEX,
	"VRCPPS_XMM1_XMM2_VEX":                             VRCPPS_XMM1_XMM2_VEX,
	"VRCPPS_XMM1_M128_VEX":                             VRCPPS_XMM1_M128_VEX,
	"VRCPPS_YMM1_YMM2_VEX":                             VRCPPS_YMM1_YMM2_VEX,
	"VRCPPS_YMM1_M256_VEX":                             VRCPPS_YMM1_M256_VEX,
	"VRCPSS_XMM1_XMMV_XMM2_VEX":                        VRCPSS_XMM1_XMMV_XMM2_VEX,
	"VRCPSS_XMM1_XMMV_M32_VEX":                         VRCPSS_XMM1_XMMV_M32_VEX,
	"VROUNDPD_XMM1_XMM2_Imm8_VEX":                      VROUNDPD_XMM1_XMM2_Imm8_VEX,
	"VROUNDPD_XMM1_M128_Imm8_VEX":                      VROUNDPD_XMM1_M128_Imm8_VEX,
	"VROUNDPD_YMM1_YMM2_Imm8_VEX":                      VROUNDPD_YMM1_YMM2_Imm8_VEX,
	"VROUNDPD_YMM1_M256_Imm8_VEX":                      VROUNDPD_YMM1_M256_Imm8_VEX,
	"VROUNDPS_XMM1_XMM2_Imm8_VEX":                      VROUNDPS_XMM1_XMM2_Imm8_VEX,
	"VROUNDPS_XMM1_M128_Imm8_VEX":                      VROUNDPS_XMM1_M128_Imm8_VEX,
	"VROUNDPS_YMM1_YMM2_Imm8_VEX":                      VROUNDPS_YMM1_YMM2_Imm8_VEX,
	"VROUNDPS_YMM1_M256_Imm8_VEX":                      VROUNDPS_YMM1_M256_Imm8_VEX,
	"VROUNDSD_XMM1_XMMV_XMM2_Imm8_VEX":                 VROUNDSD_XMM1_XMMV_XMM2_Imm8_VEX,
	"VROUNDSD_XMM1_XMMV_M64_Imm8_VEX":                  VROUNDSD_XMM1_XMMV_M64_Imm8_VEX,
	"VROUNDSS_XMM1_XMMV_XMM2_Imm8_VEX":                 VROUNDSS_XMM1_XMMV_XMM2_Imm8_VEX,
	"VROUNDSS_XMM1_XMMV_M32_Imm8_VEX":                  VROUNDSS_XMM1_XMMV_M32_Imm8_VEX,
	"VRSQRTPS_XMM1_XMM2_VEX":                           VRSQRTPS_XMM1_XMM2_VEX,
	"VRSQRTPS_XMM1_M128_VEX":                           VRSQRTPS_XMM1_M128_VEX,
	"VRSQRTPS_YMM1_YMM2_VEX":                           VRSQRTPS_YMM1_YMM2_VEX,
	"VRSQRTPS_YMM1_M256_VEX":                           VRSQRTPS_YMM1_M256_VEX,
	"VRSQRTSS_XMM1_XMMV_XMM2_VEX":                      VRSQRTSS_XMM1_XMMV_XMM2_VEX,
	"VRSQRTSS_XMM1_XMMV_M32_VEX":                       VRSQRTSS_XMM1_XMMV_M32_VEX,
	"VSHUFPD_XMM1_XMMV_XMM2_Imm8_VEX":                  VSHUFPD_XMM1_XMMV_XMM2_Imm8_VEX,
	"VSHUFPD_XMM1_XMMV_XMM2_Imm8_EVEX":                 VSHUFPD_XMM1_XMMV_XMM2_Imm8_EVEX,
	"VSHUFPD_XMM1_XMMV_M128_Imm8_VEX":                  VSHUFPD_XMM1_XMMV_M128_Imm8_VEX,
	"VSHUFPD_XMM1_XMMV_M128_Imm8_EVEX":                 VSHUFPD_XMM1_XMMV_M128_Imm8_EVEX,
	"VSHUFPD_XMM1_XMMV_M64bcst128_Imm8_EVEX":           VSHUFPD_XMM1_XMMV_M64bcst128_Imm8_EVEX,
	"VSHUFPD_YMM1_YMMV_YMM2_Imm8_VEX":                  VSHUFPD_YMM1_YMMV_YMM2_Imm8_VEX,
	"VSHUFPD_YMM1_YMMV_YMM2_Imm8_EVEX":                 VSHUFPD_YMM1_YMMV_YMM2_Imm8_EVEX,
	"VSHUFPD_YMM1_YMMV_M256_Imm8_VEX":                  VSHUFPD_YMM1_YMMV_M256_Imm8_VEX,
	"VSHUFPD_YMM1_YMMV_M256_Imm8_EVEX":                 VSHUFPD_YMM1_YMMV_M256_Imm8_EVEX,
	"VSHUFPD_YMM1_YMMV_M64bcst256_Imm8_EVEX":           VSHUFPD_YMM1_YMMV_M64bcst256_Imm8_EVEX,
	"VSHUFPD_ZMM1_ZMMV_ZMM2_Imm8_EVEX":                 VSHUFPD_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	"VSHUFPD_ZMM1_ZMMV_M512_Imm8_EVEX":                 VSHUFPD_ZMM1_ZMMV_M512_Imm8_EVEX,
	"VSHUFPD_ZMM1_ZMMV_M64bcst512_Imm8_EVEX":           VSHUFPD_ZMM1_ZMMV_M64bcst512_Imm8_EVEX,
	"VSHUFPS_XMM1_XMMV_XMM2_Imm8_VEX":                  VSHUFPS_XMM1_XMMV_XMM2_Imm8_VEX,
	"VSHUFPS_XMM1_XMMV_XMM2_Imm8_EVEX":                 VSHUFPS_XMM1_XMMV_XMM2_Imm8_EVEX,
	"VSHUFPS_XMM1_XMMV_M128_Imm8_VEX":                  VSHUFPS_XMM1_XMMV_M128_Imm8_VEX,
	"VSHUFPS_XMM1_XMMV_M128_Imm8_EVEX":                 VSHUFPS_XMM1_XMMV_M128_Imm8_EVEX,
	"VSHUFPS_XMM1_XMMV_M32bcst128_Imm8_EVEX":           VSHUFPS_XMM1_XMMV_M32bcst128_Imm8_EVEX,
	"VSHUFPS_YMM1_YMMV_YMM2_Imm8_VEX":                  VSHUFPS_YMM1_YMMV_YMM2_Imm8_VEX,
	"VSHUFPS_YMM1_YMMV_YMM2_Imm8_EVEX":                 VSHUFPS_YMM1_YMMV_YMM2_Imm8_EVEX,
	"VSHUFPS_YMM1_YMMV_M256_Imm8_VEX":                  VSHUFPS_YMM1_YMMV_M256_Imm8_VEX,
	"VSHUFPS_YMM1_YMMV_M256_Imm8_EVEX":                 VSHUFPS_YMM1_YMMV_M256_Imm8_EVEX,
	"VSHUFPS_YMM1_YMMV_M32bcst256_Imm8_EVEX":           VSHUFPS_YMM1_YMMV_M32bcst256_Imm8_EVEX,
	"VSHUFPS_ZMM1_ZMMV_ZMM2_Imm8_EVEX":                 VSHUFPS_ZMM1_ZMMV_ZMM2_Imm8_EVEX,
	"VSHUFPS_ZMM1_ZMMV_M512_Imm8_EVEX":                 VSHUFPS_ZMM1_ZMMV_M512_Imm8_EVEX,
	"VSHUFPS_ZMM1_ZMMV_M32bcst512_Imm8_EVEX":           VSHUFPS_ZMM1_ZMMV_M32bcst512_Imm8_EVEX,
	"VSQRTPD_XMM1_XMM2_VEX":                            VSQRTPD_XMM1_XMM2_VEX,
	"VSQRTPD_XMM1_XMM2_EVEX":                           VSQRTPD_XMM1_XMM2_EVEX,
	"VSQRTPD_XMM1_M128_VEX":                            VSQRTPD_XMM1_M128_VEX,
	"VSQRTPD_XMM1_M128_EVEX":                           VSQRTPD_XMM1_M128_EVEX,
	"VSQRTPD_XMM1_M64bcst128_EVEX":                     VSQRTPD_XMM1_M64bcst128_EVEX,
	"VSQRTPD_YMM1_YMM2_VEX":                            VSQRTPD_YMM1_YMM2_VEX,
	"VSQRTPD_YMM1_YMM2_EVEX":                           VSQRTPD_YMM1_YMM2_EVEX,
	"VSQRTPD_YMM1_M256_VEX":                            VSQRTPD_YMM1_M256_VEX,
	"VSQRTPD_YMM1_M256_EVEX":                           VSQRTPD_YMM1_M256_EVEX,
	"VSQRTPD_YMM1_M64bcst256_EVEX":                     VSQRTPD_YMM1_M64bcst256_EVEX,
	"VSQRTPD_ZMM1_ZMM2_EVEX":                           VSQRTPD_ZMM1_ZMM2_EVEX,
	"VSQRTPD_ZMM1_M512_EVEX":                           VSQRTPD_ZMM1_M512_EVEX,
	"VSQRTPD_ZMM1_M64bcst512_EVEX":                     VSQRTPD_ZMM1_M64bcst512_EVEX,
	"VSQRTPS_XMM1_XMM2_VEX":                            VSQRTPS_XMM1_XMM2_VEX,
	"VSQRTPS_XMM1_XMM2_EVEX":                           VSQRTPS_XMM1_XMM2_EVEX,
	"VSQRTPS_XMM1_M128_VEX":                            VSQRTPS_XMM1_M128_VEX,
	"VSQRTPS_XMM1_M128_EVEX":                           VSQRTPS_XMM1_M128_EVEX,
	"VSQRTPS_XMM1_M32bcst128_EVEX":                     VSQRTPS_XMM1_M32bcst128_EVEX,
	"VSQRTPS_YMM1_YMM2_VEX":                            VSQRTPS_YMM1_YMM2_VEX,
	"VSQRTPS_YMM1_YMM2_EVEX":                           VSQRTPS_YMM1_YMM2_EVEX,
	"VSQRTPS_YMM1_M256_VEX":                            VSQRTPS_YMM1_M256_VEX,
	"VSQRTPS_YMM1_M256_EVEX":                           VSQRTPS_YMM1_M256_EVEX,
	"VSQRTPS_YMM1_M32bcst256_EVEX":                     VSQRTPS_YMM1_M32bcst256_EVEX,
	"VSQRTPS_ZMM1_ZMM2_EVEX":                           VSQRTPS_ZMM1_ZMM2_EVEX,
	"VSQRTPS_ZMM1_M512_EVEX":                           VSQRTPS_ZMM1_M512_EVEX,
	"VSQRTPS_ZMM1_M32bcst512_EVEX":                     VSQRTPS_ZMM1_M32bcst512_EVEX,
	"VSQRTSD_XMM1_XMMV_XMM2_VEX":                       VSQRTSD_XMM1_XMMV_XMM2_VEX,
	"VSQRTSD_XMM1_XMMV_XMM2_EVEX":                      VSQRTSD_XMM1_XMMV_XMM2_EVEX,
	"VSQRTSD_XMM1_XMMV_M64_VEX":                        VSQRTSD_XMM1_XMMV_M64_VEX,
	"VSQRTSD_XMM1_XMMV_M64_EVEX":                       VSQRTSD_XMM1_XMMV_M64_EVEX,
	"VSQRTSS_XMM1_XMMV_XMM2_VEX":                       VSQRTSS_XMM1_XMMV_XMM2_VEX,
	"VSQRTSS_XMM1_XMMV_XMM2_EVEX":                      VSQRTSS_XMM1_XMMV_XMM2_EVEX,
	"VSQRTSS_XMM1_XMMV_M32_VEX":                        VSQRTSS_XMM1_XMMV_M32_VEX,
	"VSQRTSS_XMM1_XMMV_M32_EVEX":                       VSQRTSS_XMM1_XMMV_M32_EVEX,
	"VSTMXCSR_M32_VEX":                                 VSTMXCSR_M32_VEX,
	"VSUBPD_XMM1_XMMV_XMM2_VEX":                        VSUBPD_XMM1_XMMV_XMM2_VEX,
	"VSUBPD_XMM1_XMMV_XMM2_EVEX":                       VSUBPD_XMM1_XMMV_XMM2_EVEX,
	"VSUBPD_XMM1_XMMV_M128_VEX":                        VSUBPD_XMM1_XMMV_M128_VEX,
	"VSUBPD_XMM1_XMMV_M128_EVEX":                       VSUBPD_XMM1_XMMV_M128_EVEX,
	"VSUBPD_XMM1_XMMV_M64bcst128_EVEX":                 VSUBPD_XMM1_XMMV_M64bcst128_EVEX,
	"VSUBPD_YMM1_YMMV_YMM2_VEX":                        VSUBPD_YMM1_YMMV_YMM2_VEX,
	"VSUBPD_YMM1_YMMV_YMM2_EVEX":                       VSUBPD_YMM1_YMMV_YMM2_EVEX,
	"VSUBPD_YMM1_YMMV_M256_VEX":                        VSUBPD_YMM1_YMMV_M256_VEX,
	"VSUBPD_YMM1_YMMV_M256_EVEX":                       VSUBPD_YMM1_YMMV_M256_EVEX,
	"VSUBPD_YMM1_YMMV_M64bcst256_EVEX":                 VSUBPD_YMM1_YMMV_M64bcst256_EVEX,
	"VSUBPD_ZMM1_ZMMV_ZMM2_EVEX":                       VSUBPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VSUBPD_ZMM1_ZMMV_M512_EVEX":                       VSUBPD_ZMM1_ZMMV_M512_EVEX,
	"VSUBPD_ZMM1_ZMMV_M64bcst512_EVEX":                 VSUBPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VSUBPS_XMM1_XMMV_XMM2_VEX":                        VSUBPS_XMM1_XMMV_XMM2_VEX,
	"VSUBPS_XMM1_XMMV_XMM2_EVEX":                       VSUBPS_XMM1_XMMV_XMM2_EVEX,
	"VSUBPS_XMM1_XMMV_M128_VEX":                        VSUBPS_XMM1_XMMV_M128_VEX,
	"VSUBPS_XMM1_XMMV_M128_EVEX":                       VSUBPS_XMM1_XMMV_M128_EVEX,
	"VSUBPS_XMM1_XMMV_M32bcst128_EVEX":                 VSUBPS_XMM1_XMMV_M32bcst128_EVEX,
	"VSUBPS_YMM1_YMMV_YMM2_VEX":                        VSUBPS_YMM1_YMMV_YMM2_VEX,
	"VSUBPS_YMM1_YMMV_YMM2_EVEX":                       VSUBPS_YMM1_YMMV_YMM2_EVEX,
	"VSUBPS_YMM1_YMMV_M256_VEX":                        VSUBPS_YMM1_YMMV_M256_VEX,
	"VSUBPS_YMM1_YMMV_M256_EVEX":                       VSUBPS_YMM1_YMMV_M256_EVEX,
	"VSUBPS_YMM1_YMMV_M32bcst256_EVEX":                 VSUBPS_YMM1_YMMV_M32bcst256_EVEX,
	"VSUBPS_ZMM1_ZMMV_ZMM2_EVEX":                       VSUBPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VSUBPS_ZMM1_ZMMV_M512_EVEX":                       VSUBPS_ZMM1_ZMMV_M512_EVEX,
	"VSUBPS_ZMM1_ZMMV_M32bcst512_EVEX":                 VSUBPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VSUBSD_XMM1_XMMV_XMM2_VEX":                        VSUBSD_XMM1_XMMV_XMM2_VEX,
	"VSUBSD_XMM1_XMMV_XMM2_EVEX":                       VSUBSD_XMM1_XMMV_XMM2_EVEX,
	"VSUBSD_XMM1_XMMV_M64_VEX":                         VSUBSD_XMM1_XMMV_M64_VEX,
	"VSUBSD_XMM1_XMMV_M64_EVEX":                        VSUBSD_XMM1_XMMV_M64_EVEX,
	"VSUBSS_XMM1_XMMV_XMM2_VEX":                        VSUBSS_XMM1_XMMV_XMM2_VEX,
	"VSUBSS_XMM1_XMMV_XMM2_EVEX":                       VSUBSS_XMM1_XMMV_XMM2_EVEX,
	"VSUBSS_XMM1_XMMV_M32_VEX":                         VSUBSS_XMM1_XMMV_M32_VEX,
	"VSUBSS_XMM1_XMMV_M32_EVEX":                        VSUBSS_XMM1_XMMV_M32_EVEX,
	"VUCOMISD_XMM1_XMM2_VEX":                           VUCOMISD_XMM1_XMM2_VEX,
	"VUCOMISD_XMM1_XMM2_EVEX":                          VUCOMISD_XMM1_XMM2_EVEX,
	"VUCOMISD_XMM1_M64_VEX":                            VUCOMISD_XMM1_M64_VEX,
	"VUCOMISD_XMM1_M64_EVEX":                           VUCOMISD_XMM1_M64_EVEX,
	"VUCOMISS_XMM1_XMM2_VEX":                           VUCOMISS_XMM1_XMM2_VEX,
	"VUCOMISS_XMM1_XMM2_EVEX":                          VUCOMISS_XMM1_XMM2_EVEX,
	"VUCOMISS_XMM1_M32_VEX":                            VUCOMISS_XMM1_M32_VEX,
	"VUCOMISS_XMM1_M32_EVEX":                           VUCOMISS_XMM1_M32_EVEX,
	"VUNPCKHPD_XMM1_XMMV_XMM2_VEX":                     VUNPCKHPD_XMM1_XMMV_XMM2_VEX,
	"VUNPCKHPD_XMM1_XMMV_XMM2_EVEX":                    VUNPCKHPD_XMM1_XMMV_XMM2_EVEX,
	"VUNPCKHPD_XMM1_XMMV_M128_VEX":                     VUNPCKHPD_XMM1_XMMV_M128_VEX,
	"VUNPCKHPD_XMM1_XMMV_M128_EVEX":                    VUNPCKHPD_XMM1_XMMV_M128_EVEX,
	"VUNPCKHPD_XMM1_XMMV_M64bcst128_EVEX":              VUNPCKHPD_XMM1_XMMV_M64bcst128_EVEX,
	"VUNPCKHPD_YMM1_YMMV_YMM2_VEX":                     VUNPCKHPD_YMM1_YMMV_YMM2_VEX,
	"VUNPCKHPD_YMM1_YMMV_YMM2_EVEX":                    VUNPCKHPD_YMM1_YMMV_YMM2_EVEX,
	"VUNPCKHPD_YMM1_YMMV_M256_VEX":                     VUNPCKHPD_YMM1_YMMV_M256_VEX,
	"VUNPCKHPD_YMM1_YMMV_M256_EVEX":                    VUNPCKHPD_YMM1_YMMV_M256_EVEX,
	"VUNPCKHPD_YMM1_YMMV_M64bcst256_EVEX":              VUNPCKHPD_YMM1_YMMV_M64bcst256_EVEX,
	"VUNPCKHPD_ZMM1_ZMMV_ZMM2_EVEX":                    VUNPCKHPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VUNPCKHPD_ZMM1_ZMMV_M512_EVEX":                    VUNPCKHPD_ZMM1_ZMMV_M512_EVEX,
	"VUNPCKHPD_ZMM1_ZMMV_M64bcst512_EVEX":              VUNPCKHPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VUNPCKHPS_XMM1_XMMV_XMM2_VEX":                     VUNPCKHPS_XMM1_XMMV_XMM2_VEX,
	"VUNPCKHPS_XMM1_XMMV_XMM2_EVEX":                    VUNPCKHPS_XMM1_XMMV_XMM2_EVEX,
	"VUNPCKHPS_XMM1_XMMV_M128_VEX":                     VUNPCKHPS_XMM1_XMMV_M128_VEX,
	"VUNPCKHPS_XMM1_XMMV_M128_EVEX":                    VUNPCKHPS_XMM1_XMMV_M128_EVEX,
	"VUNPCKHPS_XMM1_XMMV_M32bcst128_EVEX":              VUNPCKHPS_XMM1_XMMV_M32bcst128_EVEX,
	"VUNPCKHPS_YMM1_YMMV_YMM2_VEX":                     VUNPCKHPS_YMM1_YMMV_YMM2_VEX,
	"VUNPCKHPS_YMM1_YMMV_YMM2_EVEX":                    VUNPCKHPS_YMM1_YMMV_YMM2_EVEX,
	"VUNPCKHPS_YMM1_YMMV_M256_VEX":                     VUNPCKHPS_YMM1_YMMV_M256_VEX,
	"VUNPCKHPS_YMM1_YMMV_M256_EVEX":                    VUNPCKHPS_YMM1_YMMV_M256_EVEX,
	"VUNPCKHPS_YMM1_YMMV_M32bcst256_EVEX":              VUNPCKHPS_YMM1_YMMV_M32bcst256_EVEX,
	"VUNPCKHPS_ZMM1_ZMMV_ZMM2_EVEX":                    VUNPCKHPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VUNPCKHPS_ZMM1_ZMMV_M512_EVEX":                    VUNPCKHPS_ZMM1_ZMMV_M512_EVEX,
	"VUNPCKHPS_ZMM1_ZMMV_M32bcst512_EVEX":              VUNPCKHPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VUNPCKLPD_XMM1_XMMV_XMM2_VEX":                     VUNPCKLPD_XMM1_XMMV_XMM2_VEX,
	"VUNPCKLPD_XMM1_XMMV_XMM2_EVEX":                    VUNPCKLPD_XMM1_XMMV_XMM2_EVEX,
	"VUNPCKLPD_XMM1_XMMV_M128_VEX":                     VUNPCKLPD_XMM1_XMMV_M128_VEX,
	"VUNPCKLPD_XMM1_XMMV_M128_EVEX":                    VUNPCKLPD_XMM1_XMMV_M128_EVEX,
	"VUNPCKLPD_XMM1_XMMV_M64bcst128_EVEX":              VUNPCKLPD_XMM1_XMMV_M64bcst128_EVEX,
	"VUNPCKLPD_YMM1_YMMV_YMM2_VEX":                     VUNPCKLPD_YMM1_YMMV_YMM2_VEX,
	"VUNPCKLPD_YMM1_YMMV_YMM2_EVEX":                    VUNPCKLPD_YMM1_YMMV_YMM2_EVEX,
	"VUNPCKLPD_YMM1_YMMV_M256_VEX":                     VUNPCKLPD_YMM1_YMMV_M256_VEX,
	"VUNPCKLPD_YMM1_YMMV_M256_EVEX":                    VUNPCKLPD_YMM1_YMMV_M256_EVEX,
	"VUNPCKLPD_YMM1_YMMV_M64bcst256_EVEX":              VUNPCKLPD_YMM1_YMMV_M64bcst256_EVEX,
	"VUNPCKLPD_ZMM1_ZMMV_ZMM2_EVEX":                    VUNPCKLPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VUNPCKLPD_ZMM1_ZMMV_M512_EVEX":                    VUNPCKLPD_ZMM1_ZMMV_M512_EVEX,
	"VUNPCKLPD_ZMM1_ZMMV_M64bcst512_EVEX":              VUNPCKLPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VUNPCKLPS_XMM1_XMMV_XMM2_VEX":                     VUNPCKLPS_XMM1_XMMV_XMM2_VEX,
	"VUNPCKLPS_XMM1_XMMV_XMM2_EVEX":                    VUNPCKLPS_XMM1_XMMV_XMM2_EVEX,
	"VUNPCKLPS_XMM1_XMMV_M128_VEX":                     VUNPCKLPS_XMM1_XMMV_M128_VEX,
	"VUNPCKLPS_XMM1_XMMV_M128_EVEX":                    VUNPCKLPS_XMM1_XMMV_M128_EVEX,
	"VUNPCKLPS_XMM1_XMMV_M32bcst128_EVEX":              VUNPCKLPS_XMM1_XMMV_M32bcst128_EVEX,
	"VUNPCKLPS_YMM1_YMMV_YMM2_VEX":                     VUNPCKLPS_YMM1_YMMV_YMM2_VEX,
	"VUNPCKLPS_YMM1_YMMV_YMM2_EVEX":                    VUNPCKLPS_YMM1_YMMV_YMM2_EVEX,
	"VUNPCKLPS_YMM1_YMMV_M256_VEX":                     VUNPCKLPS_YMM1_YMMV_M256_VEX,
	"VUNPCKLPS_YMM1_YMMV_M256_EVEX":                    VUNPCKLPS_YMM1_YMMV_M256_EVEX,
	"VUNPCKLPS_YMM1_YMMV_M32bcst256_EVEX":              VUNPCKLPS_YMM1_YMMV_M32bcst256_EVEX,
	"VUNPCKLPS_ZMM1_ZMMV_ZMM2_EVEX":                    VUNPCKLPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VUNPCKLPS_ZMM1_ZMMV_M512_EVEX":                    VUNPCKLPS_ZMM1_ZMMV_M512_EVEX,
	"VUNPCKLPS_ZMM1_ZMMV_M32bcst512_EVEX":              VUNPCKLPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"VXORPD_XMM1_XMMV_XMM2_VEX":                        VXORPD_XMM1_XMMV_XMM2_VEX,
	"VXORPD_XMM1_XMMV_XMM2_EVEX":                       VXORPD_XMM1_XMMV_XMM2_EVEX,
	"VXORPD_XMM1_XMMV_M128_VEX":                        VXORPD_XMM1_XMMV_M128_VEX,
	"VXORPD_XMM1_XMMV_M128_EVEX":                       VXORPD_XMM1_XMMV_M128_EVEX,
	"VXORPD_XMM1_XMMV_M64bcst128_EVEX":                 VXORPD_XMM1_XMMV_M64bcst128_EVEX,
	"VXORPD_YMM1_YMMV_YMM2_VEX":                        VXORPD_YMM1_YMMV_YMM2_VEX,
	"VXORPD_YMM1_YMMV_YMM2_EVEX":                       VXORPD_YMM1_YMMV_YMM2_EVEX,
	"VXORPD_YMM1_YMMV_M256_VEX":                        VXORPD_YMM1_YMMV_M256_VEX,
	"VXORPD_YMM1_YMMV_M256_EVEX":                       VXORPD_YMM1_YMMV_M256_EVEX,
	"VXORPD_YMM1_YMMV_M64bcst256_EVEX":                 VXORPD_YMM1_YMMV_M64bcst256_EVEX,
	"VXORPD_ZMM1_ZMMV_ZMM2_EVEX":                       VXORPD_ZMM1_ZMMV_ZMM2_EVEX,
	"VXORPD_ZMM1_ZMMV_M512_EVEX":                       VXORPD_ZMM1_ZMMV_M512_EVEX,
	"VXORPD_ZMM1_ZMMV_M64bcst512_EVEX":                 VXORPD_ZMM1_ZMMV_M64bcst512_EVEX,
	"VXORPS_XMM1_XMMV_XMM2_VEX":                        VXORPS_XMM1_XMMV_XMM2_VEX,
	"VXORPS_XMM1_XMMV_XMM2_EVEX":                       VXORPS_XMM1_XMMV_XMM2_EVEX,
	"VXORPS_XMM1_XMMV_M128_VEX":                        VXORPS_XMM1_XMMV_M128_VEX,
	"VXORPS_XMM1_XMMV_M128_EVEX":                       VXORPS_XMM1_XMMV_M128_EVEX,
	"VXORPS_XMM1_XMMV_M32bcst128_EVEX":                 VXORPS_XMM1_XMMV_M32bcst128_EVEX,
	"VXORPS_YMM1_YMMV_YMM2_VEX":                        VXORPS_YMM1_YMMV_YMM2_VEX,
	"VXORPS_YMM1_YMMV_YMM2_EVEX":                       VXORPS_YMM1_YMMV_YMM2_EVEX,
	"VXORPS_YMM1_YMMV_M256_VEX":                        VXORPS_YMM1_YMMV_M256_VEX,
	"VXORPS_YMM1_YMMV_M256_EVEX":                       VXORPS_YMM1_YMMV_M256_EVEX,
	"VXORPS_YMM1_YMMV_M32bcst256_EVEX":                 VXORPS_YMM1_YMMV_M32bcst256_EVEX,
	"VXORPS_ZMM1_ZMMV_ZMM2_EVEX":                       VXORPS_ZMM1_ZMMV_ZMM2_EVEX,
	"VXORPS_ZMM1_ZMMV_M512_EVEX":                       VXORPS_ZMM1_ZMMV_M512_EVEX,
	"VXORPS_ZMM1_ZMMV_M32bcst512_EVEX":                 VXORPS_ZMM1_ZMMV_M32bcst512_EVEX,
	"WAIT":                                             WAIT,
	"WBINVD":                                           WBINVD,
	"WBNOINVD":                                         WBNOINVD,
	"WRFSBASE_Rmr32":                                   WRFSBASE_Rmr32,
	"WRFSBASE_Rmr64_REX":                               WRFSBASE_Rmr64_REX,
	"WRGSBASE_Rmr32":                                   WRGSBASE_Rmr32,
	"WRGSBASE_Rmr64_REX":                               WRGSBASE_Rmr64_REX,
	"WRMSR":                                            WRMSR,
	"WRPKRU":                                           WRPKRU,
	"WRSSD_M32_R32":                                    WRSSD_M32_R32,
	"WRSSQ_M64_R64_REX":                                WRSSQ_M64_R64_REX,
	"WRUSSD_M32_R32":                                   WRUSSD_M32_R32,
	"WRUSSQ_M64_R64_REX":                               WRUSSQ_M64_R64_REX,
	"XABORT_Imm8":                                      XABORT_Imm8,
	"XADD_Rmr8_R8":                                     XADD_Rmr8_R8,
	"XADD_Rmr16_R16":                                   XADD_Rmr16_R16,
	"XADD_Rmr32_R32":                                   XADD_Rmr32_R32,
	"XADD_Rmr64_R64_REX":                               XADD_Rmr64_R64_REX,
	"XADD_M8_R8":                                       XADD_M8_R8,
	"XADD_M16_R16":                                     XADD_M16_R16,
	"XADD_M32_R32":                                     XADD_M32_R32,
	"XADD_M64_R64_REX":                                 XADD_M64_R64_REX,
	"XBEGIN_Rel16":                                     XBEGIN_Rel16,
	"XBEGIN_Rel32":                                     XBEGIN_Rel32,
	"XCHG_AX_R16op":                                    XCHG_AX_R16op,
	"XCHG_EAX_R32op":                                   XCHG_EAX_R32op,
	"XCHG_RAX_R64op_REX":                               XCHG_RAX_R64op_REX,
	"XCHG_R8_Rmr8":                                     XCHG_R8_Rmr8,
	"XCHG_R8_M8":                                       XCHG_R8_M8,
	"XCHG_R16_Rmr16":                                   XCHG_R16_Rmr16,
	"XCHG_R16_M16":                                     XCHG_R16_M16,
	"XCHG_R32_Rmr32":                                   XCHG_R32_Rmr32,
	"XCHG_R32_M32":                                     XCHG_R32_M32,
	"XCHG_R64_Rmr64_REX":                               XCHG_R64_Rmr64_REX,
	"XCHG_R64_M64_REX":                                 XCHG_R64_M64_REX,
	"XCHG_Rmr8_R8":                                     XCHG_Rmr8_R8,
	"XCHG_Rmr16_R16":                                   XCHG_Rmr16_R16,
	"XCHG_Rmr32_R32":                                   XCHG_Rmr32_R32,
	"XCHG_Rmr64_R64_REX":                               XCHG_Rmr64_R64_REX,
	"XCHG_R16op_AX":                                    XCHG_R16op_AX,
	"XCHG_R32op_EAX":                                   XCHG_R32op_EAX,
	"XCHG_R64op_RAX_REX":                               XCHG_R64op_RAX_REX,
	"XCHG_M8_R8":                                       XCHG_M8_R8,
	"XCHG_M16_R16":                                     XCHG_M16_R16,
	"XCHG_M32_R32":                                     XCHG_M32_R32,
	"XCHG_M64_R64_REX":                                 XCHG_M64_R64_REX,
	"XEND":                                             XEND,
	"XGETBV":                                           XGETBV,
	"XLATB":                                            XLATB,
	"XLATB_REX":                                        XLATB_REX,
	"XOR_AL_Imm8":                                      XOR_AL_Imm8,
	"XOR_AX_Imm16":                                     XOR_AX_Imm16,
	"XOR_EAX_Imm32":                                    XOR_EAX_Imm32,
	"XOR_RAX_Imm32_REX":                                XOR_RAX_Imm32_REX,
	"XOR_R8_Rmr8":                                      XOR_R8_Rmr8,
	"XOR_R8_M8":                                        XOR_R8_M8,
	"XOR_R16_Rmr16":                                    XOR_R16_Rmr16,
	"XOR_R16_M16":                                      XOR_R16_M16,
	"XOR_R32_Rmr32":                                    XOR_R32_Rmr32,
	"XOR_R32_M32":                                      XOR_R32_M32,
	"XOR_R64_Rmr64_REX":                                XOR_R64_Rmr64_REX,
	"XOR_R64_M64_REX":                                  XOR_R64_M64_REX,
	"XOR_Rmr8_Imm8":                                    XOR_Rmr8_Imm8,
	"XOR_Rmr8_R8":                                      XOR_Rmr8_R8,
	"XOR_Rmr16_Imm8":                                   XOR_Rmr16_Imm8,
	"XOR_Rmr16_Imm16":                                  XOR_Rmr16_Imm16,
	"XOR_Rmr16_R16":                                    XOR_Rmr16_R16,
	"XOR_Rmr32_Imm8":                                   XOR_Rmr32_Imm8,
	"XOR_Rmr32_Imm32":                                  XOR_Rmr32_Imm32,
	"XOR_Rmr32_R32":                                    XOR_Rmr32_R32,
	"XOR_Rmr64_Imm8_REX":                               XOR_Rmr64_Imm8_REX,
	"XOR_Rmr64_Imm32_REX":                              XOR_Rmr64_Imm32_REX,
	"XOR_Rmr64_R64_REX":                                XOR_Rmr64_R64_REX,
	"XOR_M8_Imm8":                                      XOR_M8_Imm8,
	"XOR_M8_R8":                                        XOR_M8_R8,
	"XOR_M16_Imm8":                                     XOR_M16_Imm8,
	"XOR_M16_Imm16":                                    XOR_M16_Imm16,
	"XOR_M16_R16":                                      XOR_M16_R16,
	"XOR_M32_Imm8":                                     XOR_M32_Imm8,
	"XOR_M32_Imm32":                                    XOR_M32_Imm32,
	"XOR_M32_R32":                                      XOR_M32_R32,
	"XOR_M64_Imm8_REX":                                 XOR_M64_Imm8_REX,
	"XOR_M64_Imm32_REX":                                XOR_M64_Imm32_REX,
	"XOR_M64_R64_REX":                                  XOR_M64_R64_REX,
	"XORPD_XMM1_XMM2":                                  XORPD_XMM1_XMM2,
	"XORPD_XMM1_M128":                                  XORPD_XMM1_M128,
	"XORPS_XMM1_XMM2":                                  XORPS_XMM1_XMM2,
	"XORPS_XMM1_M128":                                  XORPS_XMM1_M128,
	"XRESLDTRK":                                        XRESLDTRK,
	"XRSTOR_M":                                         XRSTOR_M,
	"XRSTOR64_M_REX":                                   XRSTOR64_M_REX,
	"XRSTORS_M":                                        XRSTORS_M,
	"XRSTORS64_M_REX":                                  XRSTORS64_M_REX,
	"XSAVE_M":                                          XSAVE_M,
	"XSAVE64_M_REX":                                    XSAVE64_M_REX,
	"XSAVEC_M":                                         XSAVEC_M,
	"XSAVEC64_M_REX":                                   XSAVEC64_M_REX,
	"XSAVEOPT_M":                                       XSAVEOPT_M,
	"XSAVEOPT64_M_REX":                                 XSAVEOPT64_M_REX,
	"XSAVES_M":                                         XSAVES_M,
	"XSAVES64_M_REX":                                   XSAVES64_M_REX,
	"XSETBV":                                           XSETBV,
	"XSUSLDTRK":                                        XSUSLDTRK,
	"XTEST":                                            XTEST,
}
