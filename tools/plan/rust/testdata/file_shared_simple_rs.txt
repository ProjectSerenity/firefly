// Code generated from a Plan document. DO NOT EDIT.

// Copyright 2022 The Firefly Authors.
//
// Use of this source code is governed by a BSD 3-clause
// license that can be found in the LICENSE file.

//! Includes data structures and types used in the Firefly ABI.

#![no_std]
#![deny(clippy::float_arithmetic)]
#![deny(clippy::inline_asm_x86_att_syntax)]
#![deny(clippy::missing_panics_doc)]
#![deny(clippy::panic)]
#![deny(clippy::return_self_not_must_use)]
#![deny(clippy::single_char_lifetime_names)]
#![deny(clippy::wildcard_imports)]
#![deny(unused_crate_dependencies)]
#![forbid(unsafe_code)]

/// The set of all syscalls.
///
pub const SYSCALLS: [Syscalls; 6] = [
    Syscalls::DenySyscalls,
    Syscalls::Exit,
    Syscalls::GetProcessId,
    Syscalls::ThreeArgsTwoResults,
    Syscalls::GetFileInfo,
    Syscalls::GetColour,
];

/// An enumeration describing the set of system calls.
///
#[repr(u64)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Syscalls {
    /// Denies the process access to the specified syscalls.
    ///
    DenySyscalls,

    /// Exits everything immediately.
    ///
    Exit,

    /// Returns the process's unique identifier.
    ///
    GetProcessId,

    /// Docs on
    ///
    /// two lines
    ///
    ThreeArgsTwoResults,

    /// Returns the information about the `name` file.
    ///
    GetFileInfo,

    /// Returns a [`Colour`].
    ///
    GetColour,
}

impl Syscalls {
    /// Returns the [`Syscalls`] value that corresponds
    /// to `val`, or `None`.
    ///
    #[allow(dead_code)]
    pub const fn from_u64(val: u64) -> Option<Self> {
        match val {
            0_u64 => Some(Syscalls::DenySyscalls),
            1_u64 => Some(Syscalls::Exit),
            2_u64 => Some(Syscalls::GetProcessId),
            3_u64 => Some(Syscalls::ThreeArgsTwoResults),
            4_u64 => Some(Syscalls::GetFileInfo),
            5_u64 => Some(Syscalls::GetColour),
            _ => None,
        }
    }

    /// Returns the numerical value that corresponds to
    /// the [`Syscalls`].
    ///
    #[allow(dead_code)]
    pub const fn as_u64(&self) -> u64 {
        match self {
            Syscalls::DenySyscalls => 0_u64,
            Syscalls::Exit => 1_u64,
            Syscalls::GetProcessId => 2_u64,
            Syscalls::ThreeArgsTwoResults => 3_u64,
            Syscalls::GetFileInfo => 4_u64,
            Syscalls::GetColour => 5_u64,
        }
    }
}

/// A colour.
///
#[repr(i8)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Colour {
    /// The colour red.
    ///
    Red,

    /// The colour green.
    ///
    Green,
}

impl Colour {
    /// Returns the [`Colour`] value that corresponds
    /// to `val`, or `None`.
    ///
    #[allow(dead_code)]
    pub const fn from_i8(val: i8) -> Option<Self> {
        match val {
            0_i8 => Some(Colour::Red),
            1_i8 => Some(Colour::Green),
            _ => None,
        }
    }

    /// Returns the numerical value that corresponds to
    /// the [`Colour`].
    ///
    #[allow(dead_code)]
    pub const fn as_i8(&self) -> i8 {
        match self {
            Colour::Red => 0_i8,
            Colour::Green => 1_i8,
        }
    }
}

/// Information about a file in a filesystem.
///
#[repr(C)]
#[derive(Clone, Copy, Debug)]
pub struct FileInfo {
    /// The pointer to the file's name contents.
    ///
    pub name_pointer: *const u8,

    #[allow(dead_code)]
    _padding: [u8; 4],

    /// The number of bytes at 'name pointer'.
    ///
    pub name_size: u32,

    /// The actions that can be performed on the file.
    ///
    pub permissions: Permissions,

    #[allow(dead_code)]
    _padding2: [u8; 7],
}

/// A general purpose error.
///
#[repr(u64)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Error {
    /// No error occurred.
    ///
    NoError,

    /// The specified syscall does not exist.
    ///
    BadSyscall,

    /// Argument 1 to the syscall is an illegal value.
    ///
    IllegalArg1,

    /// Argument 2 to the syscall is an illegal value.
    ///
    IllegalArg2,

    /// Argument 3 to the syscall is an illegal value.
    ///
    IllegalArg3,

    /// Argument 4 to the syscall is an illegal value.
    ///
    IllegalArg4,

    /// Argument 5 to the syscall is an illegal value.
    ///
    IllegalArg5,

    /// Argument 6 to the syscall is an illegal value.
    ///
    IllegalArg6,
}

impl Error {
    /// Returns the [`Error`] value that corresponds
    /// to `val`, or `None`.
    ///
    #[allow(dead_code)]
    pub const fn from_u64(val: u64) -> Option<Self> {
        match val {
            0_u64 => Some(Error::NoError),
            1_u64 => Some(Error::BadSyscall),
            2_u64 => Some(Error::IllegalArg1),
            3_u64 => Some(Error::IllegalArg2),
            4_u64 => Some(Error::IllegalArg3),
            5_u64 => Some(Error::IllegalArg4),
            6_u64 => Some(Error::IllegalArg5),
            7_u64 => Some(Error::IllegalArg6),
            _ => None,
        }
    }

    /// Returns the numerical value that corresponds to
    /// the [`Error`].
    ///
    #[allow(dead_code)]
    pub const fn as_u64(&self) -> u64 {
        match self {
            Error::NoError => 0_u64,
            Error::BadSyscall => 1_u64,
            Error::IllegalArg1 => 2_u64,
            Error::IllegalArg2 => 3_u64,
            Error::IllegalArg3 => 4_u64,
            Error::IllegalArg4 => 5_u64,
            Error::IllegalArg5 => 6_u64,
            Error::IllegalArg6 => 7_u64,
        }
    }
}

/// An I/O error returned by [`get_file_info`](Syscalls::GetFileInfo).
///
#[repr(u64)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum IoError {
    /// No error occurred.
    ///
    NoError,

    /// The specified syscall does not exist.
    ///
    BadSyscall,

    /// Argument 1 to the syscall is an illegal value.
    ///
    IllegalArg1,

    /// Argument 2 to the syscall is an illegal value.
    ///
    IllegalArg2,

    /// Argument 3 to the syscall is an illegal value.
    ///
    IllegalArg3,

    /// Argument 4 to the syscall is an illegal value.
    ///
    IllegalArg4,

    /// Argument 5 to the syscall is an illegal value.
    ///
    IllegalArg5,

    /// Argument 6 to the syscall is an illegal value.
    ///
    IllegalArg6,
}

impl IoError {
    /// Returns the [`IoError`] value that corresponds
    /// to `val`, or `None`.
    ///
    #[allow(dead_code)]
    pub const fn from_u64(val: u64) -> Option<Self> {
        match val {
            0_u64 => Some(IoError::NoError),
            1_u64 => Some(IoError::BadSyscall),
            2_u64 => Some(IoError::IllegalArg1),
            3_u64 => Some(IoError::IllegalArg2),
            4_u64 => Some(IoError::IllegalArg3),
            5_u64 => Some(IoError::IllegalArg4),
            6_u64 => Some(IoError::IllegalArg5),
            7_u64 => Some(IoError::IllegalArg6),
            _ => None,
        }
    }

    /// Returns the numerical value that corresponds to
    /// the [`IoError`].
    ///
    #[allow(dead_code)]
    pub const fn as_u64(&self) -> u64 {
        match self {
            IoError::NoError => 0_u64,
            IoError::BadSyscall => 1_u64,
            IoError::IllegalArg1 => 2_u64,
            IoError::IllegalArg2 => 3_u64,
            IoError::IllegalArg3 => 4_u64,
            IoError::IllegalArg4 => 5_u64,
            IoError::IllegalArg5 => 6_u64,
            IoError::IllegalArg6 => 7_u64,
        }
    }
}

bitflags::bitflags! {
    /// The set of actions permitted on a resource.
    ///
    pub struct Permissions: u8 {
        /// The data can be read.
        ///
        const READ = 1 << 0;

        /// The data can be written.
        ///
        const WRITE = 1 << 1;

        /// The data can be executed.
        ///
        const EXECUTE = 1 << 2;
    }
}

/// The number of a TCP or UDP port.
///
pub struct PortNumber(pub u16);

/// An IPv4 address.
///
pub type Ipv4Address = [u8; 4];

/// An IPv6 address.
///
pub type Ipv6Address = [u8; 16];

#[cfg(test)]
mod tests {
    use super::*;
    use core::mem::{align_of, size_of};

    #[test]
    fn test_layout() {
        assert_eq!(align_of::<Colour>(), 1, "alignment of Colour");
        assert_eq!(size_of::<Colour>(), 1, "size of Colour");

        assert_eq!(align_of::<FileInfo>(), 8, "alignment of FileInfo");
        assert_eq!(size_of::<FileInfo>(), 24, "size of FileInfo");

        assert_eq!(align_of::<Error>(), 8, "alignment of Error");
        assert_eq!(size_of::<Error>(), 8, "size of Error");

        assert_eq!(align_of::<IoError>(), 8, "alignment of IoError");
        assert_eq!(size_of::<IoError>(), 8, "size of IoError");

        assert_eq!(align_of::<Permissions>(), 1, "alignment of Permissions");
        assert_eq!(size_of::<Permissions>(), 1, "size of Permissions");

        assert_eq!(align_of::<PortNumber>(), 2, "alignment of PortNumber");
        assert_eq!(size_of::<PortNumber>(), 2, "size of PortNumber");

        assert_eq!(align_of::<Ipv4Address>(), 1, "alignment of Ipv4Address");
        assert_eq!(size_of::<Ipv4Address>(), 4, "size of Ipv4Address");

        assert_eq!(align_of::<Ipv6Address>(), 1, "alignment of Ipv6Address");
        assert_eq!(size_of::<Ipv6Address>(), 16, "size of Ipv6Address");
    }
}
