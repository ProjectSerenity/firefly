// Code generated from a Plan document. DO NOT EDIT.

// Copyright 2022 The Firefly Authors.
//
// Use of this source code is governed by a BSD 3-clause
// license that can be found in the LICENSE file.

//! Includes userspace helper functions for calling the Firefly ABI.

#![no_std]
#![deny(clippy::float_arithmetic)]
#![deny(clippy::inline_asm_x86_att_syntax)]
#![deny(clippy::missing_panics_doc)]
#![deny(clippy::panic)]
#![deny(clippy::return_self_not_must_use)]
#![deny(clippy::single_char_lifetime_names)]
#![allow(clippy::wildcard_imports)]
#![deny(unused_crate_dependencies)]
#![allow(unsafe_code)]

use core::arch::asm;
use firefly_abi::*;

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall0(sys: u64) -> (u64, u64) {
    syscall6(sys, 0, 0, 0, 0, 0, 0)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall1(sys: u64, arg1: u64) -> (u64, u64) {
    syscall6(sys, arg1, 0, 0, 0, 0, 0)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall2(sys: u64, arg1: u64, arg2: u64) -> (u64, u64) {
    syscall6(sys, arg1, arg2, 0, 0, 0, 0)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall3(sys: u64, arg1: u64, arg2: u64, arg3: u64) -> (u64, u64) {
    syscall6(sys, arg1, arg2, arg3, 0, 0, 0)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall4(sys: u64, arg1: u64, arg2: u64, arg3: u64, arg4: u64) -> (u64, u64) {
    syscall6(sys, arg1, arg2, arg3, arg4, 0, 0)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall5(
    sys: u64,
    arg1: u64,
    arg2: u64,
    arg3: u64,
    arg4: u64,
    arg5: u64,
) -> (u64, u64) {
    syscall6(sys, arg1, arg2, arg3, arg4, arg5, 0)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall6(
    sys: u64,
    arg1: u64,
    arg2: u64,
    arg3: u64,
    arg4: u64,
    arg5: u64,
    arg6: u64,
) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        in("r10") arg4,
        in("r8") arg5,
        in("r9") arg6,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Denies the process access to the specified syscalls.
///
/// Attempts to call denied syscalls will result in the [`Error`] `bad syscall`.
///
#[inline]
pub fn deny_syscalls(syscalls: Syscalls) -> Result<(), Error> {
    let sys = Syscalls::DenySyscalls.as_u64();
    let (result1, result2) = unsafe { syscall1(sys, syscalls.as_u64()) };
    let _ = result1; // The first result is not used in this syscall.
    if result2 == 0 {
        Ok(())
    } else {
        Err(Error::from_u64(result2).expect("invalid Error"))
    }
}

/// Returns the [`FileInfo`] for `name`.
///
#[inline]
pub fn stat(name_pointer: *const u8, name_size: u64) -> Result<*mut FileInfo, IoError> {
    let sys = Syscalls::Stat.as_u64();
    let (result1, result2) = unsafe { syscall2(sys, name_pointer as u64, name_size) };
    match IoError::from_u64(result2).expect("invalid result from kernel") {
        IoError::NoError => Ok(result1 as *mut FileInfo),
        err => Err(err),
    }
}
