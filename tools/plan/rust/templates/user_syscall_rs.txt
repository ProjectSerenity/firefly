{{/* Variable definitions that simplify declarations later */}}
{{- $num_args := len .Args -}}
{{- $num_results := len .Results -}}
{{- $error := errorEnumeration . -}}

{{ toDocs 0 .Docs }}
#[inline]
pub fn {{ .Name.SnakeCase }}({{ paramNamesAndTypes .Args }}) -> {{ if oneResult . }}Result<(), {{ paramTypes .Results }}>
                                                                {{- else }}Result<{{ paramTypes .Results }}>{{ end }} {
    {{- /* Now that we've made the function signature, we write the body. */}}
    let sys = Syscalls::{{ .Name.PascalCase }}.as_u64();
    let (result1, result2) = unsafe { syscall{{ $num_args }}(sys
    {{- range .Args }}, {{ .Name.SnakeCase }}{{ if isEnumeration .Type }}.as_{{ toString .Enumeration.Type }}(){{ toU64 .Enumeration.Type }}
                                             {{- else }}{{ toU64 .Type }}{{ end -}}
                                             {{ end }}) };

    {{- /* Now that we've called syscall, we need to sort out the return value */ -}}
    {{- if eq $num_results 1 }}
    let _ = result1; // The first result is not used in this syscall.
    if result2 == 0 {
        Ok(())
    } else {
        Err({{ toString $error }}::from_{{ toString $error.Type }}(result2{{ fromU64 $error.Type }}).expect("invalid {{ toString $error }}"))
    }
    {{- else }}{{ $result1 := index .Results 0 }}
    match {{ toString $error }}::from_{{ toString $error.Type }}(result2 as {{ toString $error.Type }}).expect("invalid result from kernel") {
        {{ toString $error }}::{{ $first_value := index $error.Values 0 }}{{ $first_value.Name.PascalCase }} => Ok(
            {{- if isEnumeration $result1.Type -}}
                {{ toString $result1.Type }}::from_{{ toString $result1.Enumeration.Type }}(
                    result1{{ fromU64 $result1.Enumeration.Type }}).expect("invalid {{ toString $result1.Type }}"
                )
            {{- else -}}
                result1{{ fromU64 $result1.Type }}
            {{- end }}),
        err => Err(err),
    }
    {{- end }}
}
