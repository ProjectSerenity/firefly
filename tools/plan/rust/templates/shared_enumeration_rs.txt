{{/* Variable definitions that simplify declarations later */}}
{{- $name := .Name.PascalCase -}}
{{- $type := toString .Type -}}

{{- toDocs 0 .Docs }}
#[repr({{ $type }})]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum {{ $name }} {
    {{- /* For each value in the enumeration, we print the value's documentation and name */ -}}
    {{- range $i, $value := .Values }}
    {{- /* Add a newline for fields after the first, to space them apart. */ -}}
    {{- if $i }}
{{ end }}
    {{ toDocs 1 $value.Docs }}
    {{ $value.Name.PascalCase }},
    {{- end }}
}

{{/* Define the enumeration's implementation, including the constructor and to value method */ -}}
impl {{ $name }} {
    /// Returns the [`{{ $name }}`] value that corresponds
    /// to `val`, or `None`.
    ///
    #[allow(dead_code)]
    pub const fn from_{{ $type }}(val: {{ $type }}) -> Option<Self> {
        match val {
            {{ range $i, $value := .Values }}{{ $i }}_{{ $type }} => Some({{ $name }}::{{ $value.Name.PascalCase }}),
            {{ end -}}
            _ => None,
        }
    }

    /// Returns the numerical value that corresponds to
    /// the [`{{ $name }}`].
    ///
    #[allow(dead_code)]
    pub const fn as_{{ $type }}(&self) -> {{ $type }} {
        match self {
        {{- range $i, $value := .Values }}
            {{ $name }}::{{ $value.Name.PascalCase }} => {{ $i }}_{{ $type }},
        {{- end }}
        }
    }
}
