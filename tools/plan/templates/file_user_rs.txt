// Code generated from a Plan document. DO NOT EDIT.

// Copyright 2022 The Firefly Authors.
//
// Use of this source code is governed by a BSD 3-clause
// license that can be found in the LICENSE file.

use core::arch::asm;

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall0(sys: usize) -> (usize, usize) {
    let result1: usize;
    let result2: usize;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        lateout("rdx") result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall1(sys: usize, arg1: usize) -> (usize, usize) {
    let result1: usize;
    let result2: usize;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        lateout("rdx") result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall2(sys: usize, arg1: usize, arg2: usize) -> (usize, usize) {
    let result1: usize;
    let result2: usize;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        lateout("rdx") result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall3(sys: usize, arg1: usize, arg2: usize, arg3: usize) -> (usize, usize) {
    let result1: usize;
    let result2: usize;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall4(
    sys: usize,
    arg1: usize,
    arg2: usize,
    arg3: usize,
    arg4: usize,
) -> (usize, usize) {
    let result1: usize;
    let result2: usize;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        in("r10") arg4,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall5(
    sys: usize,
    arg1: usize,
    arg2: usize,
    arg3: usize,
    arg4: usize,
    arg5: usize,
) -> (usize, usize) {
    let result1: usize;
    let result2: usize;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        in("r10") arg4,
        in("r8") arg5,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall6(
    sys: usize,
    arg1: usize,
    arg2: usize,
    arg3: usize,
    arg4: usize,
    arg5: usize,
    arg6: usize,
) -> (usize, usize) {
    let result1: usize;
    let result2: usize;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        in("r10") arg4,
        in("r8") arg5,
        in("r9") arg6,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}
