{{/* Variable definitions that simplify declarations later */}}
{{- $num_args := len .Args -}}
{{- $num_results := len .Results -}}

{{ toDocs 0 .Docs }}
#[inline]
pub fn {{ funcSignature . }} {
    {{- /* Now that we've made the function signature, we write the body. */}}
    let sys = Syscalls::{{ .Name.PascalCase }}.as_u64() as usize;
    let {{ recvResults . }} = unsafe { syscall{{ $num_args }}(sys
    {{- range .Args }}, {{ .Name.SnakeCase }}{{ if .IsEnumeration }}.as_{{ toString .Enumeration.Type }}(){{ end }} as usize{{ end }}) };

    {{- /* Now that we've called syscall, we need to sort out the return value (if any) */ -}}
    {{- if eq $num_results 0 }}
    {{- else if eq $num_results 1 }}
    {{ range .Results }}{{ constructor "result1" .Type }}{{ end }}
    {{- else }}{{ $result1 := index .Results 0 }}{{ $result2 := index .Results 1 }}
    match {{ toString $result2.Type }}::from_{{ toString $result2.Enumeration.Type }}(result2 as {{ toString $result2.Enumeration.Type }}).expect("invalid result from kernel") {
        {{ toString $result2.Type }}::{{ $first_value := index $result2.Enumeration.Values 0 }}{{ $first_value.Name.PascalCase }} => Ok(
        {{- constructor "result1" $result1.Type }}),
        err => Err(err),
    }
    {{- end }}
}
