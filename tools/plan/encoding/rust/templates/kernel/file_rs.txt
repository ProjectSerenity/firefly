// Code generated from a Plan document. DO NOT EDIT.

// Copyright 2022 The Firefly Authors.
//
// Use of this source code is governed by a BSD 3-clause
// license that can be found in the LICENSE file.

use super::FireflyABI;
use cpu::disable_user_memory_access;
use memory::constants::USERSPACE;
use memory::VirtAddr;
use x86_64::registers::rflags::RFlags;

/// The Firefly syscall ABI, expressed as a trait.
///
/// The set of syscall implementations must be made
/// as associated functions on a type to allow them
/// to be type-checked.
///
pub trait SyscallABI {
    /// Called when an unsupported syscall is received.
    ///
    #[allow(clippy::too_many_arguments)]
    fn bad_syscall(
        registers: *mut SavedRegisters,
        arg1: u64,
        arg2: u64,
        arg3: u64,
        arg4: u64,
        arg5: u64,
        arg6: u64,
        syscall_num: u64
    ) -> Error;
    {{ range .Syscalls }}
    {{ toDocs 1 .Docs }}
    fn {{ .Name.SnakeCase }}(_registers: *mut SavedRegisters
        {{- if .Args -}}
            , {{ paramNamesAndTypes .Args }}
        {{- end }}) ->
        {{- if oneResult . -}}
            {{ range .Results }}{{ toString .Type }}{{ end }}
        {{- else -}}
            Result<{{ paramTypes .Results }}>
        {{- end }};
{{ end -}}
}

/// The set of saved registers from the user thread that
/// is invoking a syscall.
///
#[repr(C, packed)]
#[derive(Clone, Copy, Debug)]
pub struct SavedRegisters {
    pub rax: u64,
    pub rbx: u64,
    // RCX is not preserved.
    pub rdx: u64,
    pub rsi: u64,
    pub rdi: u64,
    pub rbp: VirtAddr,
    pub rip: VirtAddr, // Return address.
    pub rsp: VirtAddr,
    pub r8: u64,
    pub r9: u64,
    pub r10: u64,
    // R11 is not preserved.
    pub r12: u64,
    pub r13: u64,
    pub r14: u64,
    pub r15: u64,
    pub rflags: RFlags,
}

/// The results structure is used internally to pass
/// the result value and error.
///
#[repr(C)]
pub struct SyscallResults {
    pub value: u64,
    pub error: u64,
}

/// Called by syscall_entry to call the relevant
/// syscall, or return an error if an invalid syscall
/// is invoked.
///
#[no_mangle]
pub extern "sysv64" fn syscall_handler(
    arg1: u64,
    arg2: u64,
    arg3: u64,
    arg4: u64,
    arg5: u64,
    arg6: u64,
    syscall_num: u64,
    registers: *mut SavedRegisters,
) -> SyscallResults {
    // Now we've switched back to a kernel stack, we
    // disable the Access Control flag so that SMAP
    // takes full effect.
    disable_user_memory_access();

    let syscall = if let Some(syscall) = Syscalls::from_u64(syscall_num) {
        syscall
    } else {
        let error = <FireflyABI as SyscallABI>::bad_syscall(registers, arg1, arg2, arg3, arg4, arg5, arg6, syscall_num);
        return SyscallResults {
            value: 0,
            error: error.as_u64(),
        };
    };

    match syscall {
        {{ range .Syscalls }}{{ $error := errorEnumeration . }}Syscalls::{{ .Name.PascalCase }} => {
            {{ range $i, $arg := .Args -}}
            let param{{ addOne $i }}: {{ toString $arg.Type }} =
                {{- if isEnumeration $arg.Type -}}
                    match {{ toString $arg.Type }}::from_{{ toString $arg.Enumeration.Type }}(arg{{ addOne $i }}{{ fromU64 $arg.Enumeration.Type }}) {
                        Some(value) => value,
                        None => return SyscallResults {
                            value: 0,
                            error: {{ toString $error }}::IllegalParameter{{ addOne $i }}.as_{{ toString $error.Type }}(){{ fromU64 $error.Type }},
                        },
                    };
                {{- else if isPointer $arg.Type -}}
                    match VirtAddr::try_new(arg{{ addOne $i }} as usize) {
                        Ok(addr) => {
                            if !USERSPACE.contains_addr(addr) {
                                return SyscallResults {
                                    value: 0,
                                    error: {{ toString $error }}::IllegalParameter{{ addOne $i }}.as_{{ toString $error.Type }}(){{ fromU64 $error.Type }},
                                };
                            }
                            addr.as_usize() as {{ toString $arg.Type }}
                        }
                        Err(_) => return SyscallResults {
                            value: 0,
                            error: {{ toString $error }}::IllegalParameter{{ addOne $i }}.as_{{ toString $error.Type }}(){{ fromU64 $error.Type }},
                        },
                    };
                {{- else if isInteger $arg.Type -}}
                    {{- if isUint64 $arg.Type -}}
                        arg{{ addOne $i }};
                    {{- else if isSint64 $arg.Type -}}
                        arg{{ addOne $i }} as i64;
                    {{- else if isSigned $arg.Type -}}
                        match (arg{{ addOne $i }} as i64).try_into() {
                            Ok(value) => value,
                            Err(_) => return SyscallResults {
                                value: 0,
                                error: {{ toString $error }}::IllegalParameter{{ addOne $i }}.as_{{ toString $error.Type }}(){{ fromU64 $error.Type }},
                            },
                        };
                    {{- else -}}
                        match arg{{ addOne $i }}.try_into() {
                            Ok(value) => value,
                            Err(_) => return SyscallResults {
                                value: 0,
                                error: {{ toString $error }}::IllegalParameter{{ addOne $i }}.as_{{ toString $error.Type }}(){{ fromU64 $error.Type }},
                            },
                        };
                    {{- end }}
                {{- else -}}
                    compile_error!("unexpected arg{{ addOne $i }} type {{ toString $arg }}");
                {{- end }}
            {{ end -}}
            let result = <FireflyABI as SyscallABI>::{{ .Name.SnakeCase }}(registers
                {{- range $i, $arg := .Args -}}
                    , param{{ addOne $i }}
                {{- end }});
            {{ if oneResult . -}}
                SyscallResults {
                    value: 0,
                    error: result.as_{{ toString $error.Type }}(){{ toU64 $error.Type }},
                }
            {{- else -}}
                match result {
                    Ok(result) => SyscallResults {
                        value: {{ nonErrorResult . "result" }},
                        error: {{ toString $error }}::NoError.as_{{ toString $error.Type }}(){{ toU64 $error.Type }},
                    },
                    Err(result) => SyscallResults {
                        value: 0,
                        error: result.as_{{ toString $error.Type }}(){{ toU64 $error.Type }},
                    },
                }
            {{- end }}
        }
        {{- end }}
    }
}
