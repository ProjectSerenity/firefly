// Code generated from a Plan document. DO NOT EDIT.

// Copyright 2022 The Firefly Authors.
//
// Use of this source code is governed by a BSD 3-clause
// license that can be found in the LICENSE file.

use super::FireflyABI;
use cpu::disable_user_memory_access;
use firefly_abi::*;
use memory::constants::USERSPACE;
use memory::VirtAddr;
use x86_64::registers::rflags::RFlags;

/// The Firefly syscall ABI, expressed as a trait.
///
/// The set of syscall implementations must be made
/// as associated functions on a type to allow them
/// to be type-checked.
///
pub trait SyscallABI {
    /// Called when an unsupported syscall is received.
    ///
    #[allow(clippy::too_many_arguments)]
    fn bad_syscall(
        registers: *mut SavedRegisters,
        arg1: u64,
        arg2: u64,
        arg3: u64,
        arg4: u64,
        arg5: u64,
        arg6: u64,
        syscall_num: u64,
    ) -> Error;

    /// Denies the process access to the specified syscalls.
    ///
    fn deny_syscalls(_registers: *mut SavedRegisters, syscalls: Syscalls) -> Error;

    /// Exits everything immediately.
    ///
    fn exit(_registers: *mut SavedRegisters) -> Error;

    /// Returns the process's unique identifier.
    ///
    fn get_process_id(_registers: *mut SavedRegisters) -> Result<u32, Error>;

    /// Docs on
    ///
    /// two lines
    ///
    fn three_args_two_results(
        _registers: *mut SavedRegisters,
        foo: u16,
        bar: Colour,
        baz: *const i8,
    ) -> Result<u64, Error>;

    /// Returns the information about the `name` file.
    ///
    fn get_file_info(
        _registers: *mut SavedRegisters,
        name_pointer: *const u8,
        name_size: u64,
    ) -> Result<*const FileInfo, IoError>;

    /// Returns a [`Colour`].
    ///
    fn get_colour(_registers: *mut SavedRegisters) -> Result<Colour, Error>;
}

/// The set of saved registers from the user thread that
/// is invoking a syscall.
///
#[repr(C, packed)]
#[derive(Clone, Copy, Debug)]
pub struct SavedRegisters {
    pub rax: u64,
    pub rbx: u64,
    // RCX is not preserved.
    pub rdx: u64,
    pub rsi: u64,
    pub rdi: u64,
    pub rbp: VirtAddr,
    pub rip: VirtAddr, // Return address.
    pub rsp: VirtAddr,
    pub r8: u64,
    pub r9: u64,
    pub r10: u64,
    // R11 is not preserved.
    pub r12: u64,
    pub r13: u64,
    pub r14: u64,
    pub r15: u64,
    pub rflags: RFlags,
}

/// The results structure is used internally to pass
/// the result value and error.
///
#[repr(C)]
pub struct SyscallResults {
    pub value: u64,
    pub error: u64,
}

impl SyscallResults {
    /// Returns a syscall result with a zero error
    /// and the given value.
    ///
    const fn val(value: u64) -> Self {
        let error = 0;
        SyscallResults { value, error }
    }

    /// Returns a syscall result with a zero value
    /// and the given error.
    ///
    const fn err(error: u64) -> Self {
        let value = 0;
        SyscallResults { value, error }
    }
}

macro_rules! ensure_nonzero {
    // Return the error if the argument is not zero.
    ($arg:ident, $error:expr) => {
        if $arg != 0 {
            return SyscallResults::err($error);
        }
    };
}

/// Called by syscall_entry to call the relevant
/// syscall, or return an error if an invalid syscall
/// is invoked.
///
#[no_mangle]
pub extern "sysv64" fn syscall_handler(
    arg1: u64,
    arg2: u64,
    arg3: u64,
    arg4: u64,
    arg5: u64,
    arg6: u64,
    syscall_num: u64,
    registers: *mut SavedRegisters,
) -> SyscallResults {
    // Now we've switched back to a kernel stack, we
    // disable the Access Control flag so that SMAP
    // takes full effect.
    disable_user_memory_access();

    let syscall = if let Some(syscall) = Syscalls::from_u64(syscall_num) {
        syscall
    } else {
        let error = <FireflyABI as SyscallABI>::bad_syscall(
            registers,
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
            arg6,
            syscall_num,
        );
        return SyscallResults::err(error.as_u64());
    };

    match syscall {
        Syscalls::DenySyscalls => {
            let param1: Syscalls = match Syscalls::from_u64(arg1) {
                Some(value) => value,
                None => return SyscallResults::err(Error::IllegalArg1.as_u64()),
            };
            ensure_nonzero!(arg2, Error::IllegalArg2.as_u64());
            ensure_nonzero!(arg3, Error::IllegalArg3.as_u64());
            ensure_nonzero!(arg4, Error::IllegalArg4.as_u64());
            ensure_nonzero!(arg5, Error::IllegalArg5.as_u64());
            ensure_nonzero!(arg6, Error::IllegalArg6.as_u64());
            let result = <FireflyABI as SyscallABI>::deny_syscalls(registers, param1);
            SyscallResults::err(result.as_u64())
        }
        Syscalls::Exit => {
            ensure_nonzero!(arg1, Error::IllegalArg1.as_u64());
            ensure_nonzero!(arg2, Error::IllegalArg2.as_u64());
            ensure_nonzero!(arg3, Error::IllegalArg3.as_u64());
            ensure_nonzero!(arg4, Error::IllegalArg4.as_u64());
            ensure_nonzero!(arg5, Error::IllegalArg5.as_u64());
            ensure_nonzero!(arg6, Error::IllegalArg6.as_u64());
            let result = <FireflyABI as SyscallABI>::exit(registers);
            SyscallResults::err(result.as_u64())
        }
        Syscalls::GetProcessId => {
            ensure_nonzero!(arg1, Error::IllegalArg1.as_u64());
            ensure_nonzero!(arg2, Error::IllegalArg2.as_u64());
            ensure_nonzero!(arg3, Error::IllegalArg3.as_u64());
            ensure_nonzero!(arg4, Error::IllegalArg4.as_u64());
            ensure_nonzero!(arg5, Error::IllegalArg5.as_u64());
            ensure_nonzero!(arg6, Error::IllegalArg6.as_u64());
            let result = <FireflyABI as SyscallABI>::get_process_id(registers);
            match result {
                Ok(result) => SyscallResults::val(result as u64),
                Err(result) => SyscallResults::err(result.as_u64()),
            }
        }
        Syscalls::ThreeArgsTwoResults => {
            let param1: u16 = match arg1.try_into() {
                Ok(value) => value,
                Err(_) => return SyscallResults::err(Error::IllegalArg1.as_u64()),
            };
            let param2: Colour = match Colour::from_i8(arg2 as i8) {
                Some(value) => value,
                None => return SyscallResults::err(Error::IllegalArg2.as_u64()),
            };
            let param3: *const i8 = match VirtAddr::try_new(arg3 as usize) {
                Ok(addr) => {
                    if !USERSPACE.contains_addr(addr) {
                        return SyscallResults::err(Error::IllegalArg3.as_u64());
                    }
                    addr.as_usize() as *const i8
                }
                Err(_) => return SyscallResults::err(Error::IllegalArg3.as_u64()),
            };
            ensure_nonzero!(arg4, Error::IllegalArg4.as_u64());
            ensure_nonzero!(arg5, Error::IllegalArg5.as_u64());
            ensure_nonzero!(arg6, Error::IllegalArg6.as_u64());
            let result = <FireflyABI as SyscallABI>::three_args_two_results(
                registers, param1, param2, param3,
            );
            match result {
                Ok(result) => SyscallResults::val(result),
                Err(result) => SyscallResults::err(result.as_u64()),
            }
        }
        Syscalls::GetFileInfo => {
            let param1: *const u8 = match VirtAddr::try_new(arg1 as usize) {
                Ok(addr) => {
                    if !USERSPACE.contains_addr(addr) {
                        return SyscallResults::err(IoError::IllegalArg1.as_u64());
                    }
                    addr.as_usize() as *const u8
                }
                Err(_) => return SyscallResults::err(IoError::IllegalArg1.as_u64()),
            };
            let param2: u64 = arg2;
            ensure_nonzero!(arg3, IoError::IllegalArg3.as_u64());
            ensure_nonzero!(arg4, IoError::IllegalArg4.as_u64());
            ensure_nonzero!(arg5, IoError::IllegalArg5.as_u64());
            ensure_nonzero!(arg6, IoError::IllegalArg6.as_u64());
            let result = <FireflyABI as SyscallABI>::get_file_info(registers, param1, param2);
            match result {
                Ok(result) => SyscallResults::val(result as u64),
                Err(result) => SyscallResults::err(result.as_u64()),
            }
        }
        Syscalls::GetColour => {
            ensure_nonzero!(arg1, Error::IllegalArg1.as_u64());
            ensure_nonzero!(arg2, Error::IllegalArg2.as_u64());
            ensure_nonzero!(arg3, Error::IllegalArg3.as_u64());
            ensure_nonzero!(arg4, Error::IllegalArg4.as_u64());
            ensure_nonzero!(arg5, Error::IllegalArg5.as_u64());
            ensure_nonzero!(arg6, Error::IllegalArg6.as_u64());
            let result = <FireflyABI as SyscallABI>::get_colour(registers);
            match result {
                Ok(result) => SyscallResults::val(result.as_i8() as u64),
                Err(result) => SyscallResults::err(result.as_u64()),
            }
        }
    }
}
