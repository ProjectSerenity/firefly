// Code generated from a Plan document. DO NOT EDIT.

// Copyright 2022 The Firefly Authors.
//
// Use of this source code is governed by a BSD 3-clause
// license that can be found in the LICENSE file.

use core::arch::asm;

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall0(sys: u64) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        lateout("rdx") result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall1(sys: u64, arg1: u64) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        lateout("rdx") result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall2(sys: u64, arg1: u64, arg2: u64) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        lateout("rdx") result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall3(sys: u64, arg1: u64, arg2: u64, arg3: u64) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall4(sys: u64, arg1: u64, arg2: u64, arg3: u64, arg4: u64) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        in("r10") arg4,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall5(
    sys: u64,
    arg1: u64,
    arg2: u64,
    arg3: u64,
    arg4: u64,
    arg5: u64,
) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        in("r10") arg4,
        in("r8") arg5,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall6(
    sys: u64,
    arg1: u64,
    arg2: u64,
    arg3: u64,
    arg4: u64,
    arg5: u64,
    arg6: u64,
) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        in("r10") arg4,
        in("r8") arg5,
        in("r9") arg6,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// An enumeration describing the set of system calls.
///
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Syscalls {
    /// Denies the process access to the specified syscalls.
    ///
    /// Attempts to call denied syscalls will result in the [`Error`] `bad syscall`.
    ///
    DenySyscalls,

    /// Returns the [`FileInfo`] for `name`.
    ///
    Stat,
}

impl Syscalls {
    /// Returns the [`Syscalls`] value that corresponds
    /// to `val`, or `None`.
    ///
    #[allow(dead_code)]
    pub const fn from_u64(val: u64) -> Option<Self> {
        match val {
            0_u64 => Some(Syscalls::DenySyscalls),
            1_u64 => Some(Syscalls::Stat),
            _ => None,
        }
    }

    /// Returns the numerical value that corresponds to
    /// the [`Syscalls`].
    ///
    #[allow(dead_code)]
    pub const fn as_u64(&self) -> u64 {
        match self {
            Syscalls::DenySyscalls => 0_u64,
            Syscalls::Stat => 1_u64,
        }
    }
}

/// Information about a file in a filesystem, returned by [`stat`].
///
#[repr(packed)]
#[derive(Clone, Copy, Debug)]
pub struct FileInfo {
    /// The pointer to the file's name contents.
    ///
    pub name_pointer: *const u8,

    /// The number of bytes at `name pointer`.
    ///
    pub name_size: u32,

    /// The actions that can be performed on the file.
    ///
    pub permissions: Permissions,
}

/// A general purpose error.
///
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Error {
    /// No error occurred.
    ///
    NoError,

    /// The specified syscall does not exist.
    ///
    BadSyscall,

    /// Argument 1 to the syscall is an illegal value.
    ///
    IllegalArg1,

    /// Argument 2 to the syscall is an illegal value.
    ///
    IllegalArg2,

    /// Argument 3 to the syscall is an illegal value.
    ///
    IllegalArg3,

    /// Argument 4 to the syscall is an illegal value.
    ///
    IllegalArg4,

    /// Argument 5 to the syscall is an illegal value.
    ///
    IllegalArg5,

    /// Argument 6 to the syscall is an illegal value.
    ///
    IllegalArg6,
}

impl Error {
    /// Returns the [`Error`] value that corresponds
    /// to `val`, or `None`.
    ///
    #[allow(dead_code)]
    pub const fn from_u64(val: u64) -> Option<Self> {
        match val {
            0_u64 => Some(Error::NoError),
            1_u64 => Some(Error::BadSyscall),
            2_u64 => Some(Error::IllegalArg1),
            3_u64 => Some(Error::IllegalArg2),
            4_u64 => Some(Error::IllegalArg3),
            5_u64 => Some(Error::IllegalArg4),
            6_u64 => Some(Error::IllegalArg5),
            7_u64 => Some(Error::IllegalArg6),
            _ => None,
        }
    }

    /// Returns the numerical value that corresponds to
    /// the [`Error`].
    ///
    #[allow(dead_code)]
    pub const fn as_u64(&self) -> u64 {
        match self {
            Error::NoError => 0_u64,
            Error::BadSyscall => 1_u64,
            Error::IllegalArg1 => 2_u64,
            Error::IllegalArg2 => 3_u64,
            Error::IllegalArg3 => 4_u64,
            Error::IllegalArg4 => 5_u64,
            Error::IllegalArg5 => 6_u64,
            Error::IllegalArg6 => 7_u64,
        }
    }
}

/// Any error encountered during an I/O operation.
///
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum IoError {
    /// No error occurred.
    ///
    NoError,

    /// The specified syscall does not exist.
    ///
    BadSyscall,

    /// Argument 1 to the syscall is an illegal value.
    ///
    IllegalArg1,

    /// Argument 2 to the syscall is an illegal value.
    ///
    IllegalArg2,

    /// Argument 3 to the syscall is an illegal value.
    ///
    IllegalArg3,

    /// Argument 4 to the syscall is an illegal value.
    ///
    IllegalArg4,

    /// Argument 5 to the syscall is an illegal value.
    ///
    IllegalArg5,

    /// Argument 6 to the syscall is an illegal value.
    ///
    IllegalArg6,

    /// The specified file does not exist.
    ///
    FileNotFound,
}

impl IoError {
    /// Returns the [`IoError`] value that corresponds
    /// to `val`, or `None`.
    ///
    #[allow(dead_code)]
    pub const fn from_u64(val: u64) -> Option<Self> {
        match val {
            0_u64 => Some(IoError::NoError),
            1_u64 => Some(IoError::BadSyscall),
            2_u64 => Some(IoError::IllegalArg1),
            3_u64 => Some(IoError::IllegalArg2),
            4_u64 => Some(IoError::IllegalArg3),
            5_u64 => Some(IoError::IllegalArg4),
            6_u64 => Some(IoError::IllegalArg5),
            7_u64 => Some(IoError::IllegalArg6),
            8_u64 => Some(IoError::FileNotFound),
            _ => None,
        }
    }

    /// Returns the numerical value that corresponds to
    /// the [`IoError`].
    ///
    #[allow(dead_code)]
    pub const fn as_u64(&self) -> u64 {
        match self {
            IoError::NoError => 0_u64,
            IoError::BadSyscall => 1_u64,
            IoError::IllegalArg1 => 2_u64,
            IoError::IllegalArg2 => 3_u64,
            IoError::IllegalArg3 => 4_u64,
            IoError::IllegalArg4 => 5_u64,
            IoError::IllegalArg5 => 6_u64,
            IoError::IllegalArg6 => 7_u64,
            IoError::FileNotFound => 8_u64,
        }
    }
}

bitflags::bitflags! {
    /// The set of actions permitted on a resource.
    ///
    pub struct Permissions: u8 {
        /// The data can be read.
        ///
        const READ = 1 << 0;

        /// The data can be written.
        ///
        const WRITE = 1 << 1;

        /// The data can be executed.
        ///
        const EXECUTE = 1 << 2;
    }
}

/// Denies the process access to the specified syscalls.
///
/// Attempts to call denied syscalls will result in the [`Error`] `bad syscall`.
///
#[inline]
pub fn deny_syscalls(syscalls: Syscalls) -> Error {
    let sys = Syscalls::DenySyscalls.as_u64();
    let (result1, result2) = unsafe { syscall1(sys, syscalls.as_u64()) };
    let _ = result1; // The first result is not used in this syscall.
    Error::from_u64(result2).expect("invalid Error")
}

/// Returns the [`FileInfo`] for `name`.
///
#[inline]
pub fn stat(name_pointer: *const u8, name_size: u64) -> Result<*mut FileInfo, IoError> {
    let sys = Syscalls::Stat.as_u64();
    let (result1, result2) = unsafe { syscall2(sys, name_pointer as u64, name_size) };
    match IoError::from_u64(result2 as u64).expect("invalid result from kernel") {
        IoError::NoError => Ok(result1 as *mut FileInfo),
        err => Err(err),
    }
}
