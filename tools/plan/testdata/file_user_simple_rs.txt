// Code generated from a Plan document. DO NOT EDIT.

// Copyright 2022 The Firefly Authors.
//
// Use of this source code is governed by a BSD 3-clause
// license that can be found in the LICENSE file.

use core::arch::asm;

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall0(sys: u64) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        lateout("rdx") result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall1(sys: u64, arg1: u64) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        lateout("rdx") result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall2(sys: u64, arg1: u64, arg2: u64) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        lateout("rdx") result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall3(sys: u64, arg1: u64, arg2: u64, arg3: u64) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall4(sys: u64, arg1: u64, arg2: u64, arg3: u64, arg4: u64) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        in("r10") arg4,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall5(
    sys: u64,
    arg1: u64,
    arg2: u64,
    arg3: u64,
    arg4: u64,
    arg5: u64,
) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        in("r10") arg4,
        in("r8") arg5,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// Call a raw syscall.
///
/// # Safety
///
/// This makes a raw syscall with unknown parameters,
/// so it may have unsafe effects.
///
#[inline]
pub unsafe fn syscall6(
    sys: u64,
    arg1: u64,
    arg2: u64,
    arg3: u64,
    arg4: u64,
    arg5: u64,
    arg6: u64,
) -> (u64, u64) {
    let result1: u64;
    let result2: u64;
    asm! {
        "syscall",
        inlateout("rax") sys => result1,
        in("rdi") arg1,
        in("rsi") arg2,
        inlateout("rdx") arg3 => result2,
        in("r10") arg4,
        in("r8") arg5,
        in("r9") arg6,
        out("rcx") _,
        out("r11") _,
    }

    (result1, result2)
}

/// An enumeration describing the set of system calls.
///
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Syscalls {
    /// Denies the process access to the specified syscalls.
    ///
    DenySyscalls,
}

impl Syscalls {
    /// Returns the [`Syscalls`] value that corresponds
    /// to `val`, or `None`.
    ///
    #[allow(dead_code)]
    pub const fn from_u64(val: u64) -> Option<Self> {
        match val {
            0_u64 => Some(Syscalls::DenySyscalls),
            _ => None,
        }
    }

    /// Returns the numerical value that corresponds to
    /// the [`Syscalls`].
    ///
    #[allow(dead_code)]
    pub const fn as_u64(&self) -> u64 {
        match self {
            Syscalls::DenySyscalls => 0_u64,
        }
    }
}

/// Information about a file in a filesystem.
///
#[repr(packed)]
#[derive(Clone, Copy, Debug)]
pub struct FileInfo {
    /// The pointer to the file's name contents.
    ///
    pub name_pointer: *const u8,

    /// The number of bytes at 'name pointer'.
    ///
    pub name_size: u32,
}

/// A general purpose error.
///
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Error {
    /// No error occurred.
    ///
    NoError,

    /// The specified syscall does not exist.
    ///
    BadSyscall,

    /// A parameter to the syscall is an illegal value.
    ///
    IllegalParameter,
}

impl Error {
    /// Returns the [`Error`] value that corresponds
    /// to `val`, or `None`.
    ///
    #[allow(dead_code)]
    pub const fn from_u64(val: u64) -> Option<Self> {
        match val {
            0_u64 => Some(Error::NoError),
            1_u64 => Some(Error::BadSyscall),
            2_u64 => Some(Error::IllegalParameter),
            _ => None,
        }
    }

    /// Returns the numerical value that corresponds to
    /// the [`Error`].
    ///
    #[allow(dead_code)]
    pub const fn as_u64(&self) -> u64 {
        match self {
            Error::NoError => 0_u64,
            Error::BadSyscall => 1_u64,
            Error::IllegalParameter => 2_u64,
        }
    }
}

/// Denies the process access to the specified syscalls.
///
#[inline]
pub fn deny_syscalls(syscalls: Syscalls) -> Error {
    let sys = Syscalls::DenySyscalls.as_u64();
    let (result1, _) = unsafe { syscall1(sys, syscalls.as_u64()) };
    Error::from_u64(result1).expect("invalid Error")
}
