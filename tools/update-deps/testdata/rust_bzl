# Copyright 2022 The Firefly Authors.
#
# Use of this source code is governed by a BSD 3-clause
# license that can be found in the LICENSE file.

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies", "rust_register_toolchains")

RUST_VERSION = "nightly"

RUST_ISO_DATE = "2022-02-01"

LLVM_TOOLS = struct(
    name = "llvm-tools-nightly-x86_64-unknown-linux-gnu",
    sum = "3eeba27c46ac7f2fd9092ed5baf8616c04021ac359f136a484b5942229e590fc",
)

RUST = struct(
    name = "rust-nightly-x86_64-unknown-linux-gnu",
    sum = "fe928a3f280355a1b87eb414ac9ab1333a38a3e5e6be1f1d6fa3e990527aec80",
)

RUST_SRC = struct(
    name = "rust-src-nightly",
    sum = "6177a62bd2c56dfeda4552d64d9f840ce3bbdef7206b9bcd7047c0b5af56f4a8",
)

RUST_STD = struct(
    name = "rust-std-nightly-x86_64-unknown-linux-gnu",
    sum = "882f458492f7efa8a9af5e5ffc8b70183107447fe4604a8c47a120b4f319e72e",
)

RUST_RUSTFMT = struct(
    name = "rustfmt-nightly-x86_64-unknown-linux-gnu",
    sum = "6cd904d0413a858a6073f1a553d2aa46e32124574da996dcd0d8aaeb706bd035",
)

RUST_NO_STD = struct(
    name = "rust-std-nightly-x86_64-unknown-none",
    sum = "35cd94ae9a6efc1839c227470041038e3c51f50db1f2c59ed7f5b32d03f4cd2f",
)

def rust_deps():
    # Rust crates where we use a custom BUILD file.

    http_archive(
        name = "compiler_builtins",
        build_file = "//bazel/third_party:compiler_builtins.BUILD",
        sha256 = "a68c69e9451f1df4b215c9588c621670c12286b53e60fb5ec4b59aaa1138d18e",
        strip_prefix = "compiler_builtins-0.1.67",
        type = "tgz",
        urls = [
            "https://static.crates.io/crates/compiler_builtins/compiler_builtins-0.1.67.crate",
        ],
    )

    # Set up the Rust crates we depend on. Most of these are fetched
    # using the experimental crate_universe functionality in rules_rust.
    #
    # Some crates require customisation beyond what crate_universe can
    # give us. In particular, there doesn't seem to be support for:
    #
    # - Avoiding the use of optional dependencies.
    # - Forcing the use of additional dependencies unconditionally.
    #
    # For the few crates this precludes, we instead fetch them using
    # http_archive targets, injecting a custom build file. Those build
    # files are all in //bazel/third_party.

    rules_rust_dependencies()

    rust_register_toolchains(
        edition = "2018",
        include_rustc_srcs = True,
        iso_date = RUST_ISO_DATE,
        rustfmt_version = RUST_VERSION,
        sha256s = {
            RUST_ISO_DATE + "/" + LLVM_TOOLS.name: LLVM_TOOLS.sum,
            RUST_ISO_DATE + "/" + RUST.name: RUST.sum,
            RUST_ISO_DATE + "/" + RUST_SRC.name: RUST_SRC.sum,
            RUST_ISO_DATE + "/" + RUST_STD.name: RUST_STD.sum,
            RUST_ISO_DATE + "/" + RUST_RUSTFMT.name: RUST_RUSTFMT.sum,
        },
        version = RUST_VERSION,
    )
