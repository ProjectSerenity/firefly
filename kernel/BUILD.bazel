# Copyright 2022 The Firefly Authors.
#
# Use of this source code is governed by a BSD 3-clause
# license that can be found in the LICENSE file.

load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_clippy", "rust_library", "rustfmt_test")
load("//bazel/cross-compiling:config-transition.bzl", "x86_64_bare_metal_rust_binary")
load("//tools/plan:defs.bzl", "plan_rust_kernelspace")

plan_rust_kernelspace(
    name = "syscalls",
    embed = "//shared/syscalls",
    rustfmt = "@rust_linux_x86_64//:rustfmt",
)

rust_library(
    name = "kernel_lib",
    srcs = [
        "lib.rs",
        "syscalls/mod.rs",
    ],
    compile_data = [
        "syscalls/entry.s",
        "//:LICENSE",
    ],
    crate_name = "kernel",
    data = [":syscalls"],
    edition = "2021",
    rustc_env = {
        "SYSCALLS_RS": "$(location :syscalls)",
    },
    visibility = ["//visibility:private"],
    deps = [
        "//kernel/cpu",
        "//kernel/drivers/pci",
        "//kernel/drivers/serial",
        "//kernel/drivers/virtio",
        "//kernel/filesystem",
        "//kernel/interrupts",
        "//kernel/memory",
        "//kernel/memory/heap",
        "//kernel/memory/mmio",
        "//kernel/memory/physmem",
        "//kernel/memory/segmentation",
        "//kernel/memory/virtmem",
        "//kernel/multitasking",
        "//kernel/network",
        "//kernel/power",
        "//kernel/random",
        "//kernel/storage",
        "//kernel/time",
        "//kernel/utils/align",
        "//kernel/utils/bitmap_index",
        "//kernel/utils/pretty",
        "//kernel/utils/spin",
        "//kernel/utils/tar",
        "//shared/bootinfo",
        "//shared/firefly_abi",
        "//vendor/rust/bitflags",
        "//vendor/rust/x86_64",
    ],
)

rust_clippy(
    name = "clippy",
    deps = [":kernel_lib"],
)

# For now, we have to disable this due to the
# generated code in :libkernel.
#
# See https://github.com/bazelbuild/rules_rust/issues/689
# rust_doc(
#     name = "docs",
#     crate = ":kernel_lib",
# )

rustfmt_test(
    name = "fmt_test",
    size = "small",
    targets = [":kernel_lib"],
)

rust_binary(
    name = "kernel_bin_debug",
    srcs = ["main.rs"],
    rustc_flags = [
        "-Cpanic=abort",
        "-Clink-args=-nostartfiles -static -Wl,--image-base=0xffff800000000000",
        "-Ctarget-feature=+crt-static",
    ],
    tags = ["manual"],
    deps = [
        ":kernel_lib",
        "//kernel/cpu",
        "//kernel/drivers/serial",
        "//kernel/filesystem",
        "//kernel/memory",
        "//kernel/memory/physmem",
        "//kernel/memory/virtmem",
        "//kernel/multitasking",
        "//kernel/network",
        "//kernel/power",
        "//kernel/storage",
        "//kernel/time",
        "//kernel/utils/tar",
        "//shared/bootinfo",
        "//vendor/rust/x86_64",
    ],
)

# This is the real target, as it uses
# a transition to enforce that the kernel
# binary is compiled and linked using our
# custom C/C++ toolchain and platform.

x86_64_bare_metal_rust_binary(
    name = "kernel_debug",
    rust_binary = ":kernel_bin_debug",
    visibility = ["//visibility:public"],
)

rust_binary(
    name = "kernel_bin",
    srcs = ["main.rs"],
    rustc_flags = [
        "-Cpanic=abort",
        "-Clink-args=-nostartfiles -static -Wl,--image-base=0xffff800000000000",
        "-Ctarget-feature=+crt-static",
        "-Cstrip=debuginfo",
    ],
    tags = ["manual"],
    deps = [
        ":kernel_lib",
        "//kernel/cpu",
        "//kernel/drivers/serial",
        "//kernel/filesystem",
        "//kernel/memory",
        "//kernel/memory/physmem",
        "//kernel/memory/virtmem",
        "//kernel/multitasking",
        "//kernel/network",
        "//kernel/power",
        "//kernel/storage",
        "//kernel/time",
        "//kernel/utils/tar",
        "//shared/bootinfo",
        "//vendor/rust/x86_64",
    ],
)

# This is the real target, as it uses
# a transition to enforce that the kernel
# binary is compiled and linked using our
# custom C/C++ toolchain and platform.

x86_64_bare_metal_rust_binary(
    name = "kernel",
    rust_binary = ":kernel_bin",
    visibility = ["//visibility:public"],
)
