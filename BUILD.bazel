# Copyright 2022 The Firefly Authors.
#
# Use of this source code is governed by a BSD 3-clause
# license that can be found in the LICENSE file.

load("@rules_go//go:def.bzl", "nogo")
load("//bazel:qemu.bzl", "qemu")
load("//tools/bootimage:defs.bzl", "disk_image")

# Expose the license to the rest of the workspace.
exports_files(
    ["LICENSE"],
    visibility = ["//visibility:public"],
)

# Configure nogo.
nogo(
    name = "nogo",
    config = "//bazel:nogo-config.json",
    visibility = ["//visibility:public"],
    deps = [
        # Run by default in `go test`. See https://pkg.go.dev/cmd/go#hdr-Test_packages
        "@org_golang_x_tools//go/analysis/passes/atomic",
        "@org_golang_x_tools//go/analysis/passes/bools",
        "@org_golang_x_tools//go/analysis/passes/buildtag",
        "@org_golang_x_tools//go/analysis/passes/errorsas",
        "@org_golang_x_tools//go/analysis/passes/ifaceassert",
        "@org_golang_x_tools//go/analysis/passes/nilfunc",
        "@org_golang_x_tools//go/analysis/passes/printf",
        "@org_golang_x_tools//go/analysis/passes/stringintconv",
        # Optional analysers we've enabled.
        "@org_golang_x_tools//go/analysis/passes/assign",
        "@org_golang_x_tools//go/analysis/passes/composite",
        "@org_golang_x_tools//go/analysis/passes/copylock",
        "@org_golang_x_tools//go/analysis/passes/sortslice",
        "@org_golang_x_tools//go/analysis/passes/structtag",
        "@org_golang_x_tools//go/analysis/passes/unsafeptr",
    ],
)

disk_image(
    name = "image",
    out = "image.bin",
    bootloader = "//bootloader",
    visibility = ["//visibility:public"],
)

qemu(
    name = "qemu",
    image = ":image",
    options = [
        "-serial",
        "stdio",
        "-display",
        "none",
        "-no-reboot",
        "-cpu",
        "Skylake-Server",
        "-device",
        "isa-debug-exit,iobase=0xf4,iosize=0x04",
    ],
    qemu = "qemu-system-i386",
)

qemu(
    name = "qemu-gdb",
    image = ":image",
    options = [
        "-serial",
        "stdio",
        "-display",
        "none",
        "-no-reboot",
        "-cpu",
        "Skylake-Server",
        "-device",
        "isa-debug-exit,iobase=0xf4,iosize=0x04",
        "-s",
        "-S",
    ],
    qemu = "qemu-system-i386",
)

qemu(
    name = "qemu-display",
    image = ":image",
    options = [
        "-serial",
        "stdio",
        "-no-reboot",
        "-cpu",
        "Skylake-Server",
        "-device",
        "isa-debug-exit,iobase=0xf4,iosize=0x04",
    ],
    qemu = "qemu-system-i386",
)
