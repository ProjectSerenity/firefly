# Copyright 2022 The Firefly Authors.
#
# Use of this source code is governed by a BSD 3-clause
# license that can be found in the LICENSE file.

load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")
load("@io_bazel_rules_go//go:def.bzl", "nogo")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("//bazel:qemu.bzl", "qemu", "qemu_test")

# Expose the license to the rest of the workspace.
exports_files(
    ["LICENSE"],
    visibility = ["//visibility:public"],
)

# Configure nogo.
nogo(
    name = "nogo",
    config = "//bazel:nogo-config.json",
    visibility = ["//visibility:public"],
    deps = [
        # Run by default in `go test`. See https://pkg.go.dev/cmd/go#hdr-Test_packages
        "@org_golang_x_tools//go/analysis/passes/atomic",
        "@org_golang_x_tools//go/analysis/passes/bools",
        "@org_golang_x_tools//go/analysis/passes/buildtag",
        "@org_golang_x_tools//go/analysis/passes/errorsas",
        "@org_golang_x_tools//go/analysis/passes/ifaceassert",
        "@org_golang_x_tools//go/analysis/passes/nilfunc",
        "@org_golang_x_tools//go/analysis/passes/printf",
        "@org_golang_x_tools//go/analysis/passes/stringintconv",
        # Optional analysers we've enabled.
        "@org_golang_x_tools//go/analysis/passes/assign",
        "@org_golang_x_tools//go/analysis/passes/composite",
        "@org_golang_x_tools//go/analysis/passes/copylock",
        "@org_golang_x_tools//go/analysis/passes/sortslice",
        "@org_golang_x_tools//go/analysis/passes/structtag",
        "@org_golang_x_tools//go/analysis/passes/unsafeptr",
    ],
)

# Allow Buildifier to be run with `bazel run //:buildifier`.
buildifier(
    name = "buildifier",
    lint_mode = "fix",
    lint_warnings = ["all"],
    mode = "fix",
)

# Allow the bootable image to be built with `bazel build //:image`.
genrule(
    name = "image",
    srcs = [
        "//bootloader",
        "//kernel",
        "//user/initial-workload:tar",
    ],
    outs = ["image.bin"],
    cmd = """
        bootimage="$(location //tools/bootimage)"
        bootloader="$(location //bootloader)"
        kernel="$(location //kernel)"
        user="$(location //user/initial-workload:tar)"
        output="$$(realpath $(location image.bin))"

        $$bootimage -bootloader="$$bootloader" -kernel="$$kernel" -user="$$user" -out="$$output" """,
    message = "Making bootable image",
    tools = ["//tools/bootimage"],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "compressed-image",
    extension = "tar.gz",
    files = {
        ":image": "disk.raw",
    },
    visibility = ["//visibility:public"],
)

# Allow the image to be run in Qemu with `bazel run //:qemu`.
qemu(
    name = "qemu",
    image = ":image.bin",
    options = [
        "-device",
        "virtio-net,netdev=net0,disable-legacy=on,disable-modern=off",
        "-netdev",
        "user,id=net0",
        "-object",
        "filter-dump,id=filter0,netdev=net0,file=virtio-net.pcap",
        "-device",
        "virtio-rng-pci,disable-legacy=on,disable-modern=off",
        "-device",
        "virtio-blk-pci,drive=blk1,disable-legacy=on,disable-modern=off",
        "-serial",
        "stdio",
        "-display",
        "none",
        "-no-reboot",
        "-smp",
        "2",
        "-cpu",
        "Skylake-Server",
    ],
    qemu = "qemu-system-x86_64",
)

# Allow the bootable image to be built with `bazel build //:image`.
genrule(
    name = "test-image",
    srcs = [
        "//bootloader",
        "//kernel",
        "//user/test-workload:tar",
    ],
    outs = ["test-image.bin"],
    cmd = """
        bootimage="$(location //tools/bootimage)"
        bootloader="$(location //bootloader)"
        kernel="$(location //kernel)"
        user="$(location //user/test-workload:tar)"
        output="$$(realpath $(location test-image.bin))"

        $$bootimage -bootloader="$$bootloader" -kernel="$$kernel" -user="$$user" -out="$$output" """,
    message = "Making bootable image",
    tools = ["//tools/bootimage"],
    visibility = ["//visibility:public"],
)

qemu(
    name = "test",
    image = ":test-image.bin",
    options = [
        "-device",
        "virtio-net,netdev=net0,disable-legacy=on,disable-modern=off",
        "-netdev",
        "user,id=net0",
        "-object",
        "filter-dump,id=filter0,netdev=net0,file=virtio-net.pcap",
        "-device",
        "virtio-rng-pci,disable-legacy=on,disable-modern=off",
        "-device",
        "virtio-blk-pci,drive=blk1,disable-legacy=on,disable-modern=off",
        "-serial",
        "stdio",
        "-display",
        "none",
        "-no-reboot",
        "-cpu",
        "Skylake-Server",
    ],
    qemu = "qemu-system-x86_64",
)

qemu_test(
    name = "qemu_test",
    size = "small",
    image = ":test-image.bin",
    options = [
        "-device",
        "virtio-net,netdev=net0,disable-legacy=on,disable-modern=off",
        "-netdev",
        "user,id=net0",
        "-object",
        "filter-dump,id=filter0,netdev=net0,file=virtio-net.pcap",
        "-device",
        "virtio-rng-pci,disable-legacy=on,disable-modern=off",
        "-device",
        "virtio-blk-pci,drive=blk1,disable-legacy=on,disable-modern=off",
        "-serial",
        "stdio",
        "-display",
        "none",
        "-no-reboot",
        "-cpu",
        "Skylake-Server",
    ],
    qemu = "qemu-system-x86_64",
)
