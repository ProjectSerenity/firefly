diff --git a/src/lib.rs b/src/lib.rs
index 6496750..6255a9a 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -63,7 +63,6 @@ pub use crate::{namespace::*, value::AmlValue};

 use alloc::{boxed::Box, string::ToString};
 use core::mem;
-use log::{error, warn};
 use misc::{ArgNum, LocalNum};
 use name_object::Target;
 use parser::{Parser, Propagate};
@@ -151,11 +150,9 @@ impl AmlContext {
         match term_object::term_list(table_length).parse(stream, self) {
             Ok(_) => Ok(()),
             Err((_, _, Propagate::Err(err))) => {
-                error!("Failed to parse AML stream. Err = {:?}", err);
                 Err(err)
             }
             Err((_, _, other)) => {
-                error!("AML table evaluated to unexpected result: {:?}", other);
                 Err(AmlError::MalformedStream)
             }
         }
@@ -191,7 +188,6 @@ impl AmlContext {
                             Err((_, _, Propagate::Break)) => Err(AmlError::BreakInInvalidPosition),
                             Err((_, _, Propagate::Continue)) => Err(AmlError::ContinueInInvalidPosition),
                             Err((_, _, Propagate::Err(err))) => {
-                                error!("Failed to execute control method: {:?}", err);
                                 Err(err)
                             }
                         }
@@ -200,7 +196,6 @@ impl AmlContext {
                     MethodCode::Native(ref method) => match (method)(self) {
                         Ok(result) => Ok(result),
                         Err(err) => {
-                            error!("Failed to execute control method: {:?}", err);
                             Err(err)
                         }
                     },
@@ -268,7 +263,6 @@ impl AmlContext {
                  * If the device is present and has an `_INI` method, invoke it.
                  */
                 if status.present && level.values.contains_key(&NameSeg::from_str("_INI").unwrap()) {
-                    log::info!("Invoking _INI at level: {}", path);
                     self.invoke_method(&AmlName::from_str("_INI").unwrap().resolve(&path)?, Args::default())?;
                 }

@@ -631,7 +625,6 @@ impl AmlContext {
                         "Linux" => {
                             // TODO: should we allow users to specify that this should be true? Linux has a
                             // command line option for this.
-                            warn!("ACPI evaluated `_OSI(\"Linux\")`. This is a bug. Reporting no support.");
                             false
                         }

diff --git a/src/parser.rs b/src/parser.rs
index 0a130f3..ec68af7 100644
--- a/src/parser.rs
+++ b/src/parser.rs
@@ -1,7 +1,6 @@
 use crate::{pkg_length::PkgLength, AmlContext, AmlError, AmlValue, DebugVerbosity};
 use alloc::vec::Vec;
 use core::{convert::TryInto, marker::PhantomData};
-use log::trace;

 /// This is the number of spaces added to indent a scope when printing parser debug messages.
 pub const INDENT_PER_SCOPE: usize = 2;
@@ -10,10 +9,7 @@ impl AmlContext {
     /// This is used by the parser to provide debug comments about the current object, which are indented to the
     /// correct level for the current object. We most often need to print these comments from `map_with_context`s,
     /// so it's most convenient to have this method on `AmlContext`.
-    pub(crate) fn comment(&self, verbosity: DebugVerbosity, message: &str) {
-        if verbosity <= self.debug_verbosity {
-            log::trace!("{:indent$}{}", "", message, indent = self.scope_indent);
-        }
+    pub(crate) fn comment(&self, _verbosity: DebugVerbosity, _message: &str) {
     }
 }

@@ -259,7 +255,6 @@ where
 {
     move |input, context: &'c mut AmlContext| {
         if verbosity <= context.debug_verbosity {
-            trace!("{:indent$}--> {}", "", scope_name, indent = context.scope_indent);
             context.scope_indent += INDENT_PER_SCOPE;
         }

@@ -268,7 +263,6 @@ where

         if verbosity <= context.debug_verbosity {
             context.scope_indent -= INDENT_PER_SCOPE;
-            trace!("{:indent$}<-- {}", "", scope_name, indent = context.scope_indent);
         }

         Ok((new_input, context, result))
diff --git a/src/expression.rs b/src/expression.rs
index 1f34cf8..75bb8ee 100644
--- a/src/expression.rs
+++ b/src/expression.rs
@@ -144,7 +144,7 @@ where
                 })
             }),
         ))
-        .map(|((), buffer)| Ok(AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(buffer)))))
+        .map(|((), buffer)| Ok(AmlValue::Buffer(Arc::new(spin::Mutex::new(buffer)))))
 }

 pub fn def_concat<'a, 'c>() -> impl Parser<'a, 'c, AmlValue>
@@ -168,12 +168,12 @@ where
                         buffer.extend_from_slice(&left.to_le_bytes());
                         buffer.extend_from_slice(&right.to_le_bytes());

-                        AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(buffer)))
+                        AmlValue::Buffer(Arc::new(spin::Mutex::new(buffer)))
                     }
                     AmlValue::Buffer(left) => {
                         let mut new: Vec<u8> = left.lock().deref().clone();
                         new.extend(try_with_context!(context, right.as_buffer(context)).lock().iter());
-                        AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(new)))
+                        AmlValue::Buffer(Arc::new(spin::Mutex::new(new)))
                     }
                     AmlValue::String(left) => {
                         let right = match right.as_concat_type() {
@@ -249,7 +249,7 @@ where
                         result.iter().fold(0u8, |checksum, byte| checksum.wrapping_add(*byte)).wrapping_neg(),
                     );

-                    AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(result)))
+                    AmlValue::Buffer(Arc::new(spin::Mutex::new(result)))
                 };

                 try_with_context!(context, context.store(target, result.clone()));
@@ -465,13 +465,13 @@ where
                             AmlValue::Buffer(bytes) => {
                                 let foo = bytes.lock();
                                 if index >= foo.len() {
-                                    Ok(AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(vec![]))))
+                                    Ok(AmlValue::Buffer(Arc::new(spin::Mutex::new(vec![]))))
                                 } else if (index + length) >= foo.len() {
-                                    Ok(AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(
+                                    Ok(AmlValue::Buffer(Arc::new(spin::Mutex::new(
                                         foo[index..].to_vec(),
                                     ))))
                                 } else {
-                                    Ok(AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(
+                                    Ok(AmlValue::Buffer(Arc::new(spin::Mutex::new(
                                         foo[index..(index + length)].to_vec(),
                                     ))))
                                 }
diff --git a/src/resource.rs b/src/resource.rs
index 260a9e5..3ac6a90 100644
--- a/src/resource.rs
+++ b/src/resource.rs
@@ -601,7 +601,7 @@ mod tests {
         ]
         .to_vec();

-        let value: AmlValue = AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(bytes)));
+        let value: AmlValue = AmlValue::Buffer(Arc::new(spin::Mutex::new(bytes)));
         let resources = resource_descriptor_list(&value).unwrap();

         assert_eq!(
@@ -711,7 +711,7 @@ mod tests {
         ]
         .to_vec();

-        let value: AmlValue = AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(bytes)));
+        let value: AmlValue = AmlValue::Buffer(Arc::new(spin::Mutex::new(bytes)));
         let resources = resource_descriptor_list(&value).unwrap();

         assert_eq!(
@@ -812,7 +812,7 @@ mod tests {
         ]
         .to_vec();

-        let value: AmlValue = AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(bytes)));
+        let value: AmlValue = AmlValue::Buffer(Arc::new(spin::Mutex::new(bytes)));
         let resources = resource_descriptor_list(&value).unwrap();

         assert_eq!(
diff --git a/src/term_object.rs b/src/term_object.rs
index 246c182..f076a9a 100644
--- a/src/term_object.rs
+++ b/src/term_object.rs
@@ -192,7 +192,7 @@ where
             "DefCreateBitField",
             term_arg().then(term_arg()).then(name_string()).map_with_context(
                 |((source, index), name), context| {
-                    let source_data: Arc<spinning_top::Spinlock<Vec<u8>>> =
+                    let source_data: Arc<spin::Mutex<Vec<u8>>> =
                         try_with_context!(context, source.as_buffer(context)).clone();
                     let index = try_with_context!(context, index.as_integer(context));

@@ -227,7 +227,7 @@ where
             "DefCreateByteField",
             term_arg().then(term_arg()).then(name_string()).map_with_context(
                 |((source, index), name), context| {
-                    let source_data: Arc<spinning_top::Spinlock<Vec<u8>>> =
+                    let source_data: Arc<spin::Mutex<Vec<u8>>> =
                         try_with_context!(context, source.as_buffer(context)).clone();
                     let index = try_with_context!(context, index.as_integer(context));

@@ -262,7 +262,7 @@ where
             "DefCreateWordField",
             term_arg().then(term_arg()).then(name_string()).map_with_context(
                 |((source, index), name), context| {
-                    let source_data: Arc<spinning_top::Spinlock<Vec<u8>>> =
+                    let source_data: Arc<spin::Mutex<Vec<u8>>> =
                         try_with_context!(context, source.as_buffer(context)).clone();
                     let index = try_with_context!(context, index.as_integer(context));

@@ -297,7 +297,7 @@ where
             "DefCreateDWordField",
             term_arg().then(term_arg()).then(name_string()).map_with_context(
                 |((source, index), name), context| {
-                    let source_data: Arc<spinning_top::Spinlock<Vec<u8>>> =
+                    let source_data: Arc<spin::Mutex<Vec<u8>>> =
                         try_with_context!(context, source.as_buffer(context)).clone();
                     let index = try_with_context!(context, index.as_integer(context));

@@ -332,7 +332,7 @@ where
             "DefCreateQWordField",
             term_arg().then(term_arg()).then(name_string()).map_with_context(
                 |((source, index), name), context| {
-                    let source_data: Arc<spinning_top::Spinlock<Vec<u8>>> =
+                    let source_data: Arc<spin::Mutex<Vec<u8>>> =
                         try_with_context!(context, source.as_buffer(context)).clone();
                     let index = try_with_context!(context, index.as_integer(context));

@@ -368,7 +368,7 @@ where
             "DefCreateField",
             term_arg().then(term_arg()).then(term_arg()).then(name_string()).map_with_context(
                 |(((source, index), num_bits), name), context| {
-                    let source_data: Arc<spinning_top::Spinlock<Vec<u8>>> =
+                    let source_data: Arc<spin::Mutex<Vec<u8>>> =
                         try_with_context!(context, source.as_buffer(context)).clone();
                     let index = try_with_context!(context, index.as_integer(context));
                     let num_bits = try_with_context!(context, num_bits.as_integer(context));
diff --git a/src/value.rs b/src/value.rs
index e26c923..930a1a6 100644
--- a/src/value.rs
+++ b/src/value.rs
@@ -6,7 +6,6 @@ use alloc::{
 };
 use bit_field::BitField;
 use core::{cmp, fmt, fmt::Debug};
-use spinning_top::Spinlock;

 #[derive(Clone, Copy, PartialEq, Eq, Debug)]
 pub enum RegionSpace {
@@ -198,9 +197,9 @@ pub enum AmlValue {
         flags: MethodFlags,
         code: MethodCode,
     },
-    Buffer(Arc<Spinlock<Vec<u8>>>),
+    Buffer(Arc<spin::Mutex<Vec<u8>>>),
     BufferField {
-        buffer_data: Arc<Spinlock<Vec<u8>>>,
+        buffer_data: Arc<spin::Mutex<Vec<u8>>>,
         /// In bits.
         offset: u64,
         /// In bits.
@@ -303,7 +302,7 @@ impl AmlValue {
         }
     }

-    pub fn as_buffer(&self, context: &AmlContext) -> Result<Arc<Spinlock<Vec<u8>>>, AmlError> {
+    pub fn as_buffer(&self, context: &AmlContext) -> Result<Arc<spin::Mutex<Vec<u8>>>, AmlError> {
         match self {
             AmlValue::Buffer(ref bytes) => Ok(bytes.clone()),
             // TODO: implement conversion of String and Integer to Buffer
diff --git a/src/value.rs b/src/value.rs
index e26c923..9ba1fbc 100644
--- a/src/value.rs
+++ b/src/value.rs
@@ -503,82 +503,17 @@ impl AmlValue {
     }

     pub fn read_buffer_field(&self, context: &AmlContext) -> Result<AmlValue, AmlError> {
-        use bitvec::view::BitView;
-
-        if let AmlValue::BufferField { buffer_data, offset, length } = self {
-            let offset = *offset as usize;
-            let length = *length as usize;
-            let inner_data = buffer_data.lock();
-
-            if (offset + length) > (inner_data.len() * 8) {
-                return Err(AmlError::BufferFieldIndexesOutOfBounds);
-            }
-
-            let bitslice = inner_data.view_bits::<bitvec::order::Lsb0>();
-            let bits = &bitslice[offset..(offset + length)];
-            if length > 64 {
-                let mut bitvec = bits.to_bitvec();
-                bitvec.set_uninitialized(false);
-                Ok(AmlValue::Buffer(Arc::new(spinning_top::Spinlock::new(bitvec.into_vec()))))
-            } else {
-                let mut value = 0u64;
-                value.view_bits_mut::<bitvec::order::Lsb0>()[0..length].clone_from_bitslice(bits);
-                Ok(AmlValue::Integer(value))
-            }
-        } else {
-            Err(AmlError::IncompatibleValueConversion { current: self.type_of(), target: AmlType::BufferField })
-        }
+        // Patch out this function to avoid a dependency on
+        // the `bitvec` crate.
+        let _ = context;
+        unimplemented!();
     }

     pub fn write_buffer_field(&mut self, value: AmlValue, context: &mut AmlContext) -> Result<(), AmlError> {
-        use bitvec::view::BitView;
-
-        if let AmlValue::BufferField { buffer_data, offset, length } = self {
-            let offset = *offset as usize;
-            let length = *length as usize;
-            // TODO: check these against the size of the buffer to be written into
-            let mut inner_data = buffer_data.lock();
-            let bitslice = inner_data.view_bits_mut::<bitvec::order::Lsb0>();
-
-            match value {
-                AmlValue::Integer(value) => {
-                    /*
-                     * When an `Integer` is written into a `BufferField`, the entire contents are overwritten. If
-                     * it's smaller than the length of the buffer field, it's zero-extended. If it's larger, the
-                     * upper bits are truncated.
-                     */
-                    let bits_to_copy = cmp::min(length, 64);
-                    bitslice[offset..(offset + bits_to_copy)]
-                        .copy_from_bitslice(&value.to_le_bytes().view_bits()[..(bits_to_copy as usize)]);
-                    // Zero extend to the end of the buffer field
-                    bitslice[(offset + bits_to_copy)..(offset + length)].fill(false);
-                    Ok(())
-                }
-                AmlValue::Boolean(value) => {
-                    bitslice.set(offset, value);
-                    Ok(())
-                }
-                AmlValue::Buffer(value) => {
-                    /*
-                     * When a `Buffer` is written into a `BufferField`, the entire contents are copied into the
-                     * field. If the buffer is smaller than the size of the buffer field, it is zero extended. If
-                     * the buffer is larger, the upper bits are truncated.
-                     * XXX: this behaviour is only explicitly defined in ACPI 2.0+. While undefined in ACPI 1.0,
-                     * we produce the same behaviour there.
-                     */
-                    let value_data = value.lock();
-                    let bits_to_copy = cmp::min(length, value_data.len() * 8);
-                    bitslice[offset..(offset + bits_to_copy)]
-                        .copy_from_bitslice(&value_data.view_bits()[..(bits_to_copy as usize)]);
-                    // Zero extend to the end of the buffer field
-                    bitslice[(offset + bits_to_copy)..(offset + length)].fill(false);
-                    Ok(())
-                }
-                _ => Err(AmlError::TypeCannotBeWrittenToBufferField(value.type_of())),
-            }
-        } else {
-            Err(AmlError::IncompatibleValueConversion { current: self.type_of(), target: AmlType::BufferField })
-        }
+        // Patch out this function to avoid a dependency on
+        // the `bitvec` crate.
+        let _ = context;
+        unimplemented!();
     }

     /// Logically compare two `AmlValue`s, according to the rules that govern opcodes like `DefLEqual`, `DefLLess`,
